<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Automation on HEUSSER.PRO</title>
        <link>https://heusser.pro/categories/automation/</link>
        <description>Recent content in Automation on HEUSSER.PRO</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 15 Nov 2024 17:31:43 +0000</lastBuildDate><atom:link href="https://heusser.pro/categories/automation/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Get Missed Call Notifications for Teams Call Queues (Free Community Solution)</title>
        <link>https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/</link>
        <pubDate>Fri, 15 Nov 2024 17:31:43 +0000</pubDate>
        
        <guid>https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/</guid>
        <description>&lt;img src="https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/cover.png" alt="Featured image of post Get Missed Call Notifications for Teams Call Queues (Free Community Solution)" /&gt;&lt;h2 id=&#34;intro&#34;&gt;Intro
&lt;/h2&gt;&lt;p&gt;If you&amp;rsquo;re reading this, it will likely mean that you&amp;rsquo;ve noticed that Teams doesn&amp;rsquo;t show missed calls on call queues and that you&amp;rsquo;re desperately looking for a solution which doesn&amp;rsquo;t cost a fortune or requires that you give a 3rd party access to your Teams call records. If that&amp;rsquo;s the case, stay with me because I&amp;rsquo;m going to show you how you can build your own notification mechanism inside your Microsoft 365 tenant.&lt;/p&gt;
&lt;p&gt;But first I&amp;rsquo;d like to point out a couple of things about the history of this issue.&lt;/p&gt;
&lt;h2 id=&#34;where-can-i-see-missed-calls-on-call-queues&#34;&gt;Where Can I See Missed Calls on Call Queues?
&lt;/h2&gt;&lt;p&gt;The only place where you can actually see if a call was missed on a call queue is in the iOS call history of an iPhone where a call queue agent is signed in on the Teams app on iOS. An iPhone will only show missed calls if the call was offered to the signed in agent. So, this only works with attendant routing (all agents are offered the call at the same time) and presence based routing &lt;strong&gt;off&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;limitations-disclaimer&#34;&gt;Limitations Disclaimer
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Read this very carefully&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;This solution is based on the assumption that there&amp;rsquo;s &lt;strong&gt;always&lt;/strong&gt; an agent (M365 User) opted into a call queue which &lt;strong&gt;doesn&amp;rsquo;t use presence based routing&lt;/strong&gt; and uses &lt;strong&gt;attendant&lt;/strong&gt; routing. &lt;strong&gt;Any other routing method won&amp;rsquo;t work&lt;/strong&gt; since we can&amp;rsquo;t be sure that the &lt;em&gt;monitoring&lt;/em&gt; user got offered the call as well.&lt;/p&gt;
&lt;p&gt;This solution is primarily intended for small businesses that have simple, non-presence based attendant routing queues and don&amp;rsquo;t want to purchase a 3rd party solution to get missed call notifications on call queues. If this isn&amp;rsquo;t feasible for your scenario, you&amp;rsquo;re welcome to continue reading (my discoveries might still be very interesting to you nonetheless) but I&amp;rsquo;m sorry to tell you that this solution won&amp;rsquo;t work for you.&lt;/p&gt;
&lt;h3 id=&#34;tl-dr&#34;&gt;TL; DR
&lt;/h3&gt;&lt;p&gt;If you don&amp;rsquo;t care about all the details and just want to deploy this straight away, feel free to jump directly to &lt;a class=&#34;link&#34; href=&#34;#clone-repository&#34; &gt;Clone Repo&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;#video-tutorial&#34; &gt;Video Tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;missed-call-queue-calls-on-ios&#34;&gt;Missed Call Queue Calls on iOS
&lt;/h3&gt;&lt;p&gt;I actually mentioned using iOS as the closest workaround to seeing missed calls on call queues in one of the many &lt;a class=&#34;link&#34; href=&#34;https://techcommunity.microsoft.com/t5/microsoft-teams/missed-calls-are-not-shown-on-history-that-came-through-call/m-p/1484151/highlight/true#M63193&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Tech Community threads&lt;/a&gt; back in 2020. This gives us a good idea of just how long this issue has been persisting. Sadly, a moderator of this thread just confirmed this as the best response and marked the questions as solved. (LOL?)&lt;/p&gt;
&lt;p&gt;I always like to say that not being able to see missed calls on call queues is the Achilles&amp;rsquo; heel of Teams Phone and I just don&amp;rsquo;t understand why Microsoft hasn&amp;rsquo;t provided a solution yet. It&amp;rsquo;s such a basic feature after all.&lt;/p&gt;
&lt;p&gt;Anyway, let&amp;rsquo;s look at some examples on how missed calls on call queues are shown on an iPhone. This won&amp;rsquo;t work on an iPad or an iPod (if that&amp;rsquo;s still a thing?) since these devices don&amp;rsquo;t have a &lt;em&gt;phone&lt;/em&gt; app. It only works on an iPhone and &lt;strong&gt;Show Teams calls in call log&lt;/strong&gt; must be enabled in the Teams app&amp;rsquo;s settings.&lt;/p&gt;
&lt;p&gt;Unlike normal missed calls, missed calls from call queues won&amp;rsquo;t display a badge counter on the iPhone&amp;rsquo;s phone app and they aren&amp;rsquo;t shown in the notification center or the lock screen either. The badge counter is only shown &lt;em&gt;within&lt;/em&gt; the phone app on the call history icon. This is the first reason why this solution is basically useless. You&amp;rsquo;ll see why I mention it anyway later on.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_184922000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;335&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_184922000_iOS_hu_fbeeb652e4080180.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_184922000_iOS_hu_35245e230677048d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;No Badge Counter on Phone App&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;335&#34;
		data-flex-basis=&#34;805px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;That means that someone who&amp;rsquo;s an agent in the queue that should be monitored would constantly need to go into the phone app and check if there were any missed calls. There&amp;rsquo;s also no efficient way of extracting call logs from iOS and send them somewhere. Believe me, I have tried everything from getting the data through Siri Shortcuts to getting it from an iCloud or a local backup.&lt;/p&gt;
&lt;p&gt;Once you go into the call history, it&amp;rsquo;s at least possible to filter for missed calls or search for &lt;code&gt;Teams&lt;/code&gt; or even the call queue name, despite that being truncated and not visible at all.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_184914000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_184914000_iOS_hu_69b3f687f525e35c.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_184914000_iOS_hu_5177105cb47798cd.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Missed Call Queue Call&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185013000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185013000_iOS_hu_81b338805b9aedd4.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185013000_iOS_hu_5e76621c271b057c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Missed Call Queue Call Details&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I do no need to apologize for the German screenshots. This is my main device and I didn&amp;rsquo;t want to change the language. In case it&amp;rsquo;s not clear: &lt;em&gt;Verpasster Anruf&lt;/em&gt; means &lt;em&gt;Missed Call&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at the next example. In this case the call was answered by another agent or by the same agent on another device. In that case, the call history item won&amp;rsquo;t be &lt;em&gt;red&lt;/em&gt; and the details of the entry say &lt;em&gt;Answered on another device&lt;/em&gt; &lt;em&gt;(Auf anderem Ger√§t angenommen)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185055000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185055000_iOS_hu_71a161c32be2ddb0.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185055000_iOS_hu_6acaaba2f8369802.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Answered Call Queue Call&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185100000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185100000_iOS_hu_ecbbcca45c21b694.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185100000_iOS_hu_e87210defe564ab4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Answered Call Queue Call Details (Answered on Another Device)&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;For a very small company this &lt;em&gt;might&lt;/em&gt; be acceptable, at best. But this becomes problematic as soon as you have at least one nested (overflow) queue. In that case, the call on the first queue will be shown as missed, even when it was answered in the overflow queue. This is the second reason why this isn&amp;rsquo;t a practical solution.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185217000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185217000_iOS_hu_856ece06f58ffc3e.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185217000_iOS_hu_ff03692214ef04df.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1st Call: Answered in Overflow | 2nd Call: Missed in Top-Level Queue (Top to bottom)&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185221000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185221000_iOS_hu_84a967aaa95b5f84.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185221000_iOS_hu_e3c6615dc9953dc6.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;2nd Call in History (Top to Bottom)&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185226000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185226000_iOS_hu_ba6b9e5a03c5838c.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185226000_iOS_hu_74c3953f6e6dffc3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1st Call in History (Top to Bottom)&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;A real solution needs to be able to recognize if a call was answered in an overflow queue and not report calls as missed, if nobody was able to answer in a top-level queue.&lt;/p&gt;
&lt;h2 id=&#34;will-microsoft-ever-add-this-feature&#34;&gt;Will Microsoft Ever Add This Feature?
&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;ve got good news and bad news for you. The good part is: Yes. The bad part is, believe it or not, that this will be part of Teams Premium. This has been confirmed to me by &lt;em&gt;Ilya Bukshteyn - VP, Microsoft Teams Calling and Devices&lt;/em&gt; on LinkedIn.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/LinkedInComment.jpg&#34;
	width=&#34;946&#34;
	height=&#34;458&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/LinkedInComment_hu_2633e5fa3d7c83b2.jpg 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/LinkedInComment_hu_a9e1f65600278e66.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;LinkedIn Comment&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;206&#34;
		data-flex-basis=&#34;495px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve said before that I totally understand that Microsoft is charging for Teams Premium features like Intelligent Recap since that requires actual processing power and costs Microsoft Money to operate. But I&amp;rsquo;m keeping my stance here, something basic as missed call notification should not cost money, regardless of how this is going to be implemented. I really hope that Microsoft realizes this and will re-think that decision, especially since I&amp;rsquo;ve just proven that iOS already logs missed calls.&lt;/p&gt;
&lt;h3 id=&#34;the-queues-app&#34;&gt;The Queues App
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://support.microsoft.com/en-us/office/use-the-queues-app-for-microsoft-teams-370ad83e-c2c1-4a9f-8a59-16c98be102e9&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;This&lt;/a&gt; is the official support article for the new Queues app in Teams. There&amp;rsquo;s a section about &lt;strong&gt;View call history&lt;/strong&gt; which as of the time of writing this article states the following:&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;&lt;p&gt;To view past calls, including calls or voicemails you may have missed, select Calls under Manage queue.&lt;/p&gt;
&lt;p&gt;You can select any call in your history to see more detailed information and call that number back using the number associated with your call queue.&lt;/p&gt;
&lt;p&gt;Currently, call history includes the past calls that you have picked up or calls that you have missed that have a voicemail.&lt;/p&gt;
&lt;/p&gt;&lt;span class=&#34;cite&#34;&gt;&lt;span&gt;‚Äï &lt;/span&gt;&lt;span&gt;Microsoft Support&lt;/span&gt;&lt;cite&gt;&lt;/cite&gt;&lt;/span&gt;&lt;/blockquote&gt;
&lt;p&gt;In other words, there is no shared call history yet, not even for Teams Premium customers.&lt;/p&gt;
&lt;h2 id=&#34;what-about-teams-on-windows&#34;&gt;What About Teams on Windows?
&lt;/h2&gt;&lt;p&gt;Even without the Queues app, it&amp;rsquo;s exactly as the support article says. Agents only see the calls they answered. They don&amp;rsquo;t see any missed calls or calls answered by other agents, not even if they&amp;rsquo;re a delegate of the user who answered a call queue call. The call from &lt;code&gt;21:43&lt;/code&gt; is not visible on the right because it was answered by the user on the left.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image_hu_8e4e9b03d3be23fb.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image_hu_d4f36104c8f962ac.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Call History for Answered Call Queue Calls for a Specific Agent&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-1.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-1_hu_a4362acfbd67ae5a.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-1_hu_19810e59527e45cc.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Call Queue Call History for Another Agent&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The fact that the call history does show answered calls &lt;strong&gt;and&lt;/strong&gt; that the iOS call history includes missed calls and calls that were answered by another agent/on another device got me thinking. This data &lt;em&gt;must&lt;/em&gt; be available somewhere&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;where-does-teams-fetch-the-call-history-from&#34;&gt;Where Does Teams Fetch the Call History From?
&lt;/h2&gt;&lt;p&gt;I opened up Teams in the browser and used the Edge Dev Tools to see what&amp;rsquo;s going on under the hood when I open a user&amp;rsquo;s call history in Teams. I was hoping that this would be a standard Graph request but of course this had to be an internal, unofficial, undocumented API. Sigh.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-rest&#34; data-lang=&#34;rest&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;GET&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;https://teams.microsoft.com/api/csa/emea/api/v1/chats/48%3Acalllogs/messages?messagePageSize=200&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-2.png&#34;
	width=&#34;1041&#34;
	height=&#34;758&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-2_hu_d92044b5846fad97.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-2_hu_50528a6bdb6dc96b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;JSON Response&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;137&#34;
		data-flex-basis=&#34;329px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Using unofficial APIs isn&amp;rsquo;t really suited for production but I&amp;rsquo;m going to show it to you anyway. The browser tools have this neat little feature that lets you copy a request for various CLIs. Of course I&amp;rsquo;m choosing PowerShell.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-3.png&#34;
	width=&#34;1048&#34;
	height=&#34;1073&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-3_hu_784aed2262cf9dd.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-3_hu_992c8e5e8bbbfb67.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Copy Request as PowerShell&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;97&#34;
		data-flex-basis=&#34;234px&#34;
	
&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$session&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;New-Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Microsoft&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;PowerShell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Commands&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;WebRequestSession&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;UserAgent&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36 Edg/130.0.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-WebRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-UseBasicParsing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://teams.microsoft.com/api/csa/emea/api/v1/chats/48%3Acalllogs/messages?messagePageSize=200&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;-WebSession&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$session&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-user-type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;real-user&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;authorization&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Bearer (Token Removed)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;cache-control&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;no-store, no-cache&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-client-type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cdlworker&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-session-id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;22f0ef6c-d8b7-46a8-aea2-58451d1fd722&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;Referer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://teams.microsoft.com/v2/worker/precompiled-web-worker-b686ae686e2a6f80.js&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-migration&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;True&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-client-version&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1415/24090101423&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-request-id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;072d879b-e316-4fd6-8c54-b02d82e8f9f6&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-client-caller&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-partition&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;emea01&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-region&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;emea&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ringoverride&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;general&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;All I need to do is store the outputs of line 3 in a variable to access the raw data after the request has been made in PowerShell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$callLogs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Invoke-WebRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-UseBasicParsing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://teams.microsoft.com/api/csa/emea/api/v1/chats/48%3Acalllogs/messages?messagePageSize=200&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Then I needed to convert the JSON response into a PowerShell object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$callLogs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$callLogs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Content&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ConvertFrom-Json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;messages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This of course, includes all call logs. To filter for call queues only, I wrote this code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$callLogProperties&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$callLogs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;call-log&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ConvertFrom-Json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Where-Object&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;callType&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-eq&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;multiParty&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;By inspecting the call log items, I discovered that it even lists the id of the call queue on which the call was received. Yes, the id of the call queue, not the one of the resource account associated with the call queue.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-4.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-4_hu_9df4d24602bdd8f7.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-4_hu_d91c87ec138e9d78.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Example of a Single Call Queue Call Log Entry&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;To get a table of all call queue calls for this user, I came up with this code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Note: This is only displaying the first 6 items&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$callLogProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Select-Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;startTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;callDirection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;callState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;callId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;callerNumber&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Expression&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;participants&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;4:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)}}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Format-Table&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-5.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-5_hu_688ea42252713593.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-5_hu_c5683e0d15c2fb1a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Filtered PowerShell Output of Call Queue Call History for a Specific User&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Sadly, this endpoint does not return missed calls. It does however, include calls that were answered by this user, by another user or declined by this user.&lt;/p&gt;
&lt;p&gt;So, the call history in iOS remains the only place where missed call queue calls are actually visible in a UI. However, if you search the Teams logs in the cache directory (&lt;code&gt;%APPDATA%\Local\Packages\MSTeams_8wekyb3d8bbwe\LocalCache\Microsoft\MSTeams&lt;/code&gt;) long enough, you&amp;rsquo;ll find some client logs of missed call queue calls eventually but this is purely educational.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-6.png&#34;
	width=&#34;1614&#34;
	height=&#34;33&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-6_hu_7161e4ea87b472b0.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-6_hu_aa843c86149e6ff.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Missed Call Reference in Teams Client Logs&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;4890&#34;
		data-flex-basis=&#34;11738px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s interesting here is that it says &lt;code&gt;callingEnableMissedCallNotification=false&lt;/code&gt;. &lt;em&gt;Dear Teams, why won&amp;rsquo;t you tell us about missed call queue calls!?&lt;/em&gt; (This is a rhetorical question.)&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get back to PowerShell. When you copy that request from the browser dev tools, it copies a JWT (JSON Web Token) with it. Obviously this token won&amp;rsquo;t live forever and will need to be renewed at some point. The token expires after roughly 24 hours which seems quite long to me. But still, nobody wants to manually refresh the token every day.&lt;/p&gt;
&lt;p&gt;Just to prove the concept, I hacked together a small PowerShell script which uses bits of the &lt;a class=&#34;link&#34; href=&#34;https://aadinternals.com/aadinternals/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;AADInternals&lt;/a&gt; PowerShell module to get a token for the &lt;code&gt;https://chatsvcagg.teams.microsoft.com&lt;/code&gt; audience. I was able to get a token using a call queue agent&amp;rsquo;s username and password but I couldn&amp;rsquo;t get it to work when MFA is enforced. Since we won&amp;rsquo;t need this for this solution anyway, I&amp;rsquo;m not going to publish this script here.&lt;/p&gt;
&lt;p&gt;At this point I realized that I need to work with what I had. If I can get a list of all calls that were answered &lt;em&gt;somewhere&lt;/em&gt; by &lt;em&gt;someone&lt;/em&gt; I can still use that to determine if a call queue call was missed. All I need to do is get a hold of the call id and check if it&amp;rsquo;s in the call log of a user that&amp;rsquo;s an agent of the queue I want to monitor for missed calls.&lt;/p&gt;
&lt;p&gt;But then there was the problem that all this data was retrieved through an internal API. When you look at the JSON response again, you&amp;rsquo;ll notice that there&amp;rsquo;s a property called &lt;strong&gt;containerId&lt;/strong&gt; and it&amp;rsquo;s value is &lt;code&gt;48:calllogs&lt;/code&gt;. That sounds interesting, doesn&amp;rsquo;t it?&lt;/p&gt;
&lt;h2 id=&#34;fetching-a-users-call-history-through-graph-api&#34;&gt;Fetching a Users Call History Through Graph API
&lt;/h2&gt;&lt;p&gt;My next step was to see if I can get this information &lt;em&gt;officially&lt;/em&gt; from Graph by signing into Graph PowerShell with the credentials of a call queue agent.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$user&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-MgUser&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-UserId&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;evelyn@nocaptech.ch&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$userCallHistory&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-MgUserChatMessage&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-UserId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Id&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ChatId&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;48:calllogs&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Bingo. It works.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-7.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-7_hu_25fdf2d007e0878f.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-7_hu_f6d921bf4fc0ac57.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Get Teams User Call History via Graph PowerShell&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;But the Graph API returns much less data than the &lt;em&gt;Chat Service Aggregator&lt;/em&gt;. For example, I can&amp;rsquo;t see if the call was accepted, accepted elsewhere or declined by the user.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-8.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-8_hu_5cd9c3ae3a3d03a8.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-8_hu_d4285149a534df8a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Example of Single Call Record&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;But when I access the &lt;code&gt;body&lt;/code&gt; property of an object inside the array, I can see the call id.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-9.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-9_hu_ef403532ae4f0a10.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-9_hu_ea73dfbf125ab723.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Body\Content Contains Call Id&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;So, now I&amp;rsquo;m able to retrieve a list of all calls that were either answered or declined by this user, or that this user was offered by the call queue but was answered by another agent. This brings us to a very important part about the limitations of this solution.&lt;/p&gt;
&lt;h2 id=&#34;limitations-of-this-solution&#34;&gt;Limitations of This Solution
&lt;/h2&gt;&lt;p&gt;You will either need to define a &lt;em&gt;real&lt;/em&gt; agent user which will always be opted-in to the queue and you must ensure that this agent will never decline a call. (If an agent declines a call, the call id will show up in their call log but when the call log is retrieved via Graph, the results don&amp;rsquo;t include the callState like &lt;code&gt;accepted&lt;/code&gt; or &lt;code&gt;declined&lt;/code&gt;.) Because you can&amp;rsquo;t really control that, I highly recommend to set up a service account and add it to the queue as an agent instead, even if that adds a small monthly license cost to it.&lt;/p&gt;
&lt;p&gt;Your queue must not use presence based routing and the service account must always be signed in on a Teams device/app. I recommend signing the user in on a spare iPhone if you have one. If you don&amp;rsquo;t have one, you can also use Teams desktop, a Teams desk phone or an iPad or whatever you can spare. It just needs to be a device which is running and connected to the internet 24/7 and where the service account is signed into the Teams app persistently.&lt;/p&gt;
&lt;p&gt;I made lots of test calls while my service account was signed in on the Teams app on my iPad and this worked flawlessly. The important thing is that the service user always gets offered the calls but never declines them. Since it&amp;rsquo;s not a problem if the service account answers calls, this could also be a non-personal account for a CAP (Common Area Phone) you might already have in place. If you decide to use dedicated service account for monitoring your call queues, you can also add the same service account to multiple queues, even if the different queues don&amp;rsquo;t share the same agents. Just keep in mind that there&amp;rsquo;s a limit of how many chat messages of the call logs chat Power Automate can fetch through the Graph API. This limit is &lt;strong&gt;50&lt;/strong&gt;. So, if you expect more than 50 calls in a window of 30 minutes, you&amp;rsquo;ll likely need a dedicated service account per queue. Again, this solution is intended for small companies which just want to see when they missed a call on their main number.&lt;/p&gt;
&lt;p&gt;The service account must be licensed with a license that includes Teams, Teams Phone Standard and SharePoint/OneDrive.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve only tested this with call queues which have Conference Mode &lt;strong&gt;enabled&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;securing-the-credentials-to-access-the-graph-api&#34;&gt;Securing The Credentials to Access The Graph API
&lt;/h2&gt;&lt;p&gt;What I did before, to interactively sign into Graph PowerShell using the user&amp;rsquo;s credentials isn&amp;rsquo;t an ideal solution. Even if I was using a service account already. I always try to use MFA, even for service accounts. Let&amp;rsquo;s see if I can get the same result using app only authentication.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-10.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-10_hu_ef99b5a2e50f3ec9.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-10_hu_8ebe1deec63baa14.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;App Only Authentication Doesn‚Äôt Work&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, it&amp;rsquo;s not possible to query the &lt;code&gt;48:calllogs&lt;/code&gt; chat id using application permissions, even when the app has the appropriate permission &lt;code&gt;Chat.Read.All&lt;/code&gt;. That meant that I had to find another way to securely get the messages in the Call Log Chat. At some point I&amp;rsquo;ll be building a Power Automate Flow to send the Adaptive Cards for the missed call notifications anyway. So why not try to get the chat messages through a Graph Request from Power Automate as well? That would certainly solve the authentication/token issue.&lt;/p&gt;
&lt;h2 id=&#34;high-level-solution-architecture&#34;&gt;High-Level Solution Architecture
&lt;/h2&gt;&lt;p&gt;Alright, it&amp;rsquo;s time to start architecting this whole thing. It might look a little overkill at first but that&amp;rsquo;s because I&amp;rsquo;m a perfectionist.&lt;/p&gt;
&lt;p&gt;The whole process is kicked off approximately 15-30 minutes after a Teams call has ended. That&amp;rsquo;s how long it usually takes for Microsoft to make the call record available in your tenant. By using a &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/graph/api/subscription-post-subscriptions?view=graph-rest-1.0&amp;amp;tabs=http&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Graph Subscription&lt;/a&gt; I can have Graph send me a notification every time a new record is created or when an existing one is updated. Notifications can be delivered to an endpoint of your choice. I&amp;rsquo;m using an &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/azure/azure-functions/functions-overview?pivots=programming-language-powershell&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Azure Function&lt;/a&gt; for this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Q%20Works%20Lite%20Diagram%20V2.png&#34;
	width=&#34;1280&#34;
	height=&#34;720&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Q%20Works%20Lite%20Diagram%20V2_hu_a3451f55fb2e7b58.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Q%20Works%20Lite%20Diagram%20V2_hu_1126d08bae4e732.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;High-level Diagram&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This will kick off a chain of events to determine if a call to a call queue was answered or missed and notify the Team members if it was missed.&lt;/p&gt;
&lt;h2 id=&#34;how-to-build-this-solution&#34;&gt;How To Build This Solution
&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s dive into how you can build this solution in your own environment. I&amp;rsquo;ve invested quite a few additional hours to make this as easy as possible for you by writing some deployment scripts. What I didn&amp;rsquo;t script is the creation of the service account, it&amp;rsquo;s licensing or updating the group description. You&amp;rsquo;ll need to follow the instructions below to prepare everything.&lt;/p&gt;
&lt;h3 id=&#34;service-account&#34;&gt;Service Account
&lt;/h3&gt;&lt;p&gt;Create a new account in Entra ID and assign any combination of licenses that include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft Teams&lt;/li&gt;
&lt;li&gt;Skype for Business Online Plan 2&lt;/li&gt;
&lt;li&gt;Exchange Online (Plan 1 or 2)&lt;/li&gt;
&lt;li&gt;SharePoint Online&lt;/li&gt;
&lt;li&gt;Power Automate Free&lt;/li&gt;
&lt;li&gt;Microsoft Teams Phone Standard&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The account doesn&amp;rsquo;t necessarily need a phone number. If you don&amp;rsquo;t assign one, the user must be enabled for &lt;strong&gt;Enterprise Voice&lt;/strong&gt; through PowerShell. This is needed so that the account can be added to call queues.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Set-CsPhoneNumberAssignment&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Identity&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$userId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-EnterpriseVoiceEnabled&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;$true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;example-scenario&#34;&gt;Example Scenario
&lt;/h3&gt;&lt;p&gt;Here we have an example call flow. The number is mapped to an auto attendant which then forwards to a call queue which has a nested call queue, in case nobody is able to answer the call in the first queue. Not all agents are opted into the &lt;em&gt;Level 1&lt;/em&gt; call queue because only &lt;em&gt;Evelyn Carter&lt;/em&gt; is primarily answering calls. If she fails to answer calls in the &lt;em&gt;Level 1&lt;/em&gt; queue, the calls overflows into the &lt;em&gt;Level 2&lt;/em&gt; queue, where all the agents are opted in. On the left you can see that the service user &lt;em&gt;Q Works&lt;/em&gt; hasn&amp;rsquo;t been added as an agent to the queue yet. On the right, the &lt;em&gt;Q Works&lt;/em&gt; user is also an agent, so that I can use the Graph API via Power Automate to check if calls were answered by other agents of the queue.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Main_Number_US_AA_CallFlow.png&#34;
	width=&#34;3920&#34;
	height=&#34;16765&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Main_Number_US_AA_CallFlow_hu_e690e45d57c26a2a.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Main_Number_US_AA_CallFlow_hu_d732487b3aa93cf9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Call Queue without Service Account Agent&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;23&#34;
		data-flex-basis=&#34;56px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Main_Number_US_AA_CallFlow-QWorksEnabled.png&#34;
	width=&#34;3920&#34;
	height=&#34;17605&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Main_Number_US_AA_CallFlow-QWorksEnabled_hu_cfb0c39b78b57d4.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Main_Number_US_AA_CallFlow-QWorksEnabled_hu_17855f875a547ace.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Call Queue with Service Account Agent&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;22&#34;
		data-flex-basis=&#34;53px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;So far, I have only tested the solution with an auto attendant and a maximum of 2 nested queues or an auto attendant with an IVR which has 2 queues as menu options. In theory, this solution should work with any amount of nested queues or IVR options.&lt;/p&gt;
&lt;h3 id=&#34;teams&#34;&gt;Teams
&lt;/h3&gt;&lt;p&gt;To receive alerts about missed calls on call queues, you need to map your inbound numbers of top-level call queues or queues which are nested behind a top-level auto attendant to the Teams in which you want to receive the notifications. To map a number to a Team, simply adjust the Team&amp;rsquo;s description by adding &lt;code&gt;Q.Works Phone Number:&amp;lt;Your Phone Number&amp;gt;&lt;/code&gt; at the very beginning of the description. Do not add any other characters after the phone number.&lt;/p&gt;
&lt;p&gt;Make sure to paste the phone number exactly as it appears in Teams Admin Center on your resource account, including all the spaces. Do not add any other characters such as hyphens or dots.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-11.png&#34;
	width=&#34;1426&#34;
	height=&#34;767&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-11_hu_343832e626fd8bf0.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-11_hu_2a9dc06f142976d6.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Description in Entra ID Admin Center&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;185&#34;
		data-flex-basis=&#34;446px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Q Works Lite expects only one Team to receive notifications per phone number. If you&amp;rsquo;re an owner of the Team, you can edit the description directly in the Teams App. But you can also edit the group&amp;rsquo;s description in the M365 Admin or the Entra Admin Center.&lt;/p&gt;
&lt;p&gt;When the Azure function runs, it will fetch the phone number that was called and then look for the Team by searching for the matching description, so that it knows in which Team the notifications need to be posted.&lt;/p&gt;
&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites
&lt;/h3&gt;&lt;p&gt;First of all, make sure that you&amp;rsquo;ve got all these tools and PowerShell modules installed on your machine.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PowerShell 7&lt;/li&gt;
&lt;li&gt;Azure Function Core Tools&lt;/li&gt;
&lt;li&gt;Azure CLI&lt;/li&gt;
&lt;li&gt;Python 3.11.9&lt;/li&gt;
&lt;li&gt;Node.JS
&lt;ul&gt;
&lt;li&gt;M365 CLI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PowerShell Modules:
&lt;ul&gt;
&lt;li&gt;Microsoft.Graph.Applications&lt;/li&gt;
&lt;li&gt;Microsoft.Graph.Users&lt;/li&gt;
&lt;li&gt;Az.Accounts&lt;/li&gt;
&lt;li&gt;Az.Functions&lt;/li&gt;
&lt;li&gt;Az.KeyVault&lt;/li&gt;
&lt;li&gt;Az.Storage&lt;/li&gt;
&lt;li&gt;Az.Resources&lt;/li&gt;
&lt;li&gt;Az.Websites&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;clone-repository&#34;&gt;Clone Repository
&lt;/h3&gt;&lt;p&gt;Before anything is installed/deployed you&amp;rsquo;ll need to clone my git repository or download a &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/Q-Works-Lite-Public&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;zip file&lt;/a&gt; of the code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clone&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;github&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;com&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mozziemozz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Q-Works&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-Lite-Public&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;git&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;You can use the below scripts to install everything. Make sure that you run both scripts as administrator. After installing the tools, close PowerShell and make sure to run the second script in PowerShell 7.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;Install-Prerequisites-Tools.ps1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;Install-Prerequisites-Modules.ps1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;customize-for-your-environment&#34;&gt;Customize For Your Environment
&lt;/h3&gt;&lt;p&gt;Open the Json file located at &lt;code&gt;.\Deployment\environment.json&lt;/code&gt; to customize the deployment for your environment. You can specify a name for the solution, your company shortname and the Azure region.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;SolutionName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Q Works Lite V3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;CompanyShortName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;NCT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;RedirectURI&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://localhost&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;AzureRegion&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Switzerland North&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;run-setupps1&#34;&gt;Run Setup.ps1
&lt;/h3&gt;&lt;p&gt;Once all the required tools and modules are installed, run the &lt;code&gt;Setup.ps1&lt;/code&gt; script located in the &lt;code&gt;.\Deployment&lt;/code&gt; folder of the repo. This will deploy all the resources in Azure. Your account will need global administrator permission and it needs permission to be able to create new Azure resources, including resource groups.&lt;/p&gt;
&lt;h3 id=&#34;enable-solution&#34;&gt;Enable Solution
&lt;/h3&gt;&lt;p&gt;To enable Q Works Lite, you will need to import the Power Automate Flow to the service user&amp;rsquo;s Power Automate environment so that you can then copy the trigger URL and paste it into the deployment script. (You&amp;rsquo;ll be prompted to paste at some point). Don&amp;rsquo;t just import the Zip file that&amp;rsquo;s located in &lt;code&gt;.\PowerAutomate&lt;/code&gt;. The deployment script will extract this archive, make some changes specific to your environment and repackage a new zip file which then needs to be uploaded. Finally, run the &lt;code&gt;Renew-GraphSubscription&lt;/code&gt; PowerShell function once from the portal or wait for it to be &lt;code&gt;12:15&lt;/code&gt; UTC either on this day or the next day. This function will create a new subscription the first time it runs.&lt;/p&gt;
&lt;p&gt;Everything is explained in much more detail in the tutorial video. I highly recommend to watch it either while you&amp;rsquo;re deploying this yourself or before you&amp;rsquo;re getting started.&lt;/p&gt;
&lt;h3 id=&#34;video-tutorial&#34;&gt;Video Tutorial
&lt;/h3&gt;&lt;p&gt;Because I felt like this is too much to type, I&amp;rsquo;m trying something different this time around and I recorded a YouTube video where I run the setup myself and explain everything in detail instead.&lt;/p&gt;
&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe loading=&#34;lazy&#34; 
            src=&#34;https://www.youtube.com/embed/C0Y5yiOghwo&#34; 
            allowfullscreen 
            title=&#34;YouTube Video&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;what-do-the-functions-and-the-flow-do&#34;&gt;What do the Functions and the Flow do?
&lt;/h2&gt;&lt;p&gt;There are four functions in total. Three of them are PowerShell functions and one of them is a Python function but all of them use the same Linux App Service Plan. One of these functions is solely used to manage and renew the Graph subscription so it doesn&amp;rsquo;t expire. The Python function uses a Python library called &lt;strong&gt;phonenumbers&lt;/strong&gt; to format the raw E.164 numbers into an international format which is easier to read for humans. It basically inserts spaces at the correct positions for any given phone number in the world. I&amp;rsquo;ve used and written about &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/prettify-and-sync-teams-phone-numbers-to-azure-ad-e973755f83d5/&#34; &gt;this&lt;/a&gt; in an Azure Runbook before. Now I&amp;rsquo;ve created my own Azure Python Function so this can be used by the &lt;strong&gt;Analyze-CallRecord&lt;/strong&gt; PowerShell function. And finally, the &lt;strong&gt;Receive-GraphNotifications&lt;/strong&gt; function is receiving the notifications from Graph. Graph &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/graph/change-notifications-delivery-webhooks?tabs=http#http-codes-and-retry-logic&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;expects a response within 10 seconds&lt;/a&gt; so this function is really minimalistic. All it does is save the call Id to a storage queue in the storage account that was created for the PowerShell Function App. A new message in the storage queue will then trigger the &lt;strong&gt;Analyze-CallRecord&lt;/strong&gt; function which does the actual leg-work.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-12.png&#34;
	width=&#34;1703&#34;
	height=&#34;1199&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-12_hu_2823b5268ebfa17.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-12_hu_6828aaa41f01492d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Azure Resources&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;340px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The authentication to Graph is done through an Entra Application which uses application permissions/app only authentication with a client secret. The client secret is stored securely in an Azure Key Vault and the permissions on the Key Vault secrets are assigned to the managed identity of the PowerShell Function App.&lt;/p&gt;
&lt;p&gt;The main function (Analyze-CallRecord) then checks if it was a &lt;code&gt;groupCall&lt;/code&gt; (call queue call) and if it was a PSTN or an internal call. The function only processes external calls to call queues, everything else is disregarded. Unfortunately, it&amp;rsquo;s not possible to create a Graph subscription only for certain types of call records so the function will be called for any new call records. That includes internal calls and Teams meetings as well. However, the free plan includes 1 million executions per month which should be plenty enough for small businesses.&lt;/p&gt;
&lt;p&gt;Once the function has gathered all the details about the call, and if it was indeed a PSTN call to a call queue, the function will then trigger the Power Automate Flow.&lt;/p&gt;
&lt;p&gt;The flow will fetch the &lt;a class=&#34;link&#34; href=&#34;#fetching-a-users-call-history-through-graph-api&#34; &gt;call logs chat history&lt;/a&gt; of the service account (which is also a member of the call queues) and checks if the current call id is present in the call logs or not. If the call id is found in the call logs chat history, it means that the call was answered by another agent. If the call id is not present, it means that the call was missed by all agents and it went unanswered.&lt;/p&gt;
&lt;p&gt;If the call was missed, the flow will post a new adaptive card to the Teams channel and wait for a response (until a call queue agent has clicked the &lt;em&gt;Call Back Completed&lt;/em&gt; button).&lt;/p&gt;
&lt;h2 id=&#34;end-user-experience&#34;&gt;End User Experience
&lt;/h2&gt;&lt;p&gt;This is how it looks like in Teams. Once the &lt;strong&gt;Call Completed&lt;/strong&gt; button was clicked, the card will update for all users so everybody will be able to see, who called the customer/caller back. (Completed By: {User Name})&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-14.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-14_hu_1010be22b83e4bff.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-14_hu_5f9f074d4e807a08.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;New Notification&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-13.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-13_hu_da135e2f98306d6b.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-13_hu_514ed3ada36a2845.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Call Back Button&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-16.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-16_hu_c577187481050811.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-16_hu_fdff43b4fd47d5ac.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Updated Card&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary
&lt;/h2&gt;&lt;p&gt;My goal was to deliver a missed call notification as quickly as possible &lt;strong&gt;but&lt;/strong&gt; do it with close to 100% accuracy with V1 of the call records. (I purposely said &lt;em&gt;close to 100%&lt;/em&gt; because there could still be occasional outages with the Graph notification service etc.) That&amp;rsquo;s why I chose to go the route of having an always opted in &lt;em&gt;monitoring&lt;/em&gt; agent in the queue. The problem is, especially with complex call flows that have a lot of nested queues, IVRs etc. that it can take multiple hours for the call records to have enough information to determine whether a call was answered or missed. If you analyze the data too soon, you&amp;rsquo;ll get false positives and if you wait until the data is complete, it will take much longer until the agents receive the notification.&lt;/p&gt;
&lt;p&gt;I may extend this solution in the future by also processing &lt;em&gt;updated&lt;/em&gt; call records to create a shared call history for call queues in a SharePoint list. But for now, or at least until Microsoft delivers shared call history as a feature of Teams Premium / the Queues app, I believe this is as close as we can get to quick and reliable missed call notifications for call queues today.&lt;/p&gt;
&lt;p&gt;The fact that this solution needs a service account, or at least a normal agent who&amp;rsquo;s opted into the queue all the time and that it can only be used on non-presence based attendant routing queues sure is a bummer but I just can&amp;rsquo;t see any other way to deliver accurate notifications as fast as they are with this solution.&lt;/p&gt;
&lt;p&gt;Even with it&amp;rsquo;s limitations, I&amp;rsquo;m very proud of my work and I&amp;rsquo;m very excited to share it with the community today. I&amp;rsquo;ve literally spent hundreds of hours developing this solution and I&amp;rsquo;ve experienced many set-backs and had to iterate through a lot of different approaches to achieve what I&amp;rsquo;ve published today. The good thing is that in the end, I got much more joy than frustration out of it.&lt;/p&gt;
&lt;p&gt;Since I&amp;rsquo;ve only been using this in my lab so far, I don&amp;rsquo;t have any insights of what the Azure resources are going to cost per month but since the Function Apps are using a consumption plan (Y1) and nothing is really stored in these storage accounts, the monthly cost should be next to nothing. Of course this is also depending on your call volume since this will impact how many times your function is invoked.&lt;/p&gt;
&lt;p&gt;If what I said about costs turns out to be true and you like what I&amp;rsquo;ve done for the community and Teams Phone customers, I would very much appreciate it, if you consider supporting this project with a small donation on either &lt;a class=&#34;link&#34; href=&#34;https://buymeacoffee.com/martin.heusser&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Buy me a Coffee&lt;/a&gt; or &lt;a class=&#34;link&#34; href=&#34;https://github.com/sponsors/mozziemozz?frequency=one-time&amp;amp;sponsor=mozziemozz&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub Sponsors&lt;/a&gt;. Thank you!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Get Microsoft Teams Meeting Attendance Report Through Graph API</title>
        <link>https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/</link>
        <pubDate>Sat, 05 Oct 2024 09:38:20 +0000</pubDate>
        
        <guid>https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/</guid>
        <description>&lt;p&gt;Over a year ago I was asked if it&amp;rsquo;s possible to retrieve a Teams meeting attendance report if the organizer of the meeting isn&amp;rsquo;t available to get the report themselves. At the time, I created a quick and dirty script to get what was urgently needed but today I put it all in a nice and ready to use example.&lt;/p&gt;
&lt;p&gt;Of course an organizer being out of office isn&amp;rsquo;t the only scenario why you&amp;rsquo;d need this. Another popular use case I can think of is to create an automation to automatically archive attendance reports for recurrent meetings.&lt;/p&gt;
&lt;p&gt;First, let&amp;rsquo;s look at how an end user would access and view an attendance report.&lt;/p&gt;
&lt;h2 id=&#34;tl-dr---i-know-what-i&#34;&gt;TL; DR - &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Scripts/MicrosoftGraph/Teams/GetTeamsAttendanceReportAsApp.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;I know what I&amp;rsquo;m doing, just give me the script already!&lt;/a&gt;
&lt;/h2&gt;&lt;h2 id=&#34;view-meeting-attendance-report-as-organizer&#34;&gt;View Meeting Attendance Report as Organizer
&lt;/h2&gt;&lt;p&gt;Only meeting organizers have access to meeting attendance reports. To view an attendance report, organizers can simply open the meeting chat. Teams will automatically post the attendance report after a meeting has ended.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image.png&#34;
	width=&#34;1997&#34;
	height=&#34;1139&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image_hu_271adcff48ed05ec.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image_hu_5ae42d202a83ad1f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Organizer View&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;175&#34;
		data-flex-basis=&#34;420px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-1.png&#34;
	width=&#34;1997&#34;
	height=&#34;1139&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-1_hu_45e6f4459e7745ae.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-1_hu_8d31ba231583d771.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Attendee View&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;175&#34;
		data-flex-basis=&#34;420px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Note that the attendance report is only shown in chat for the meeting organizers. Attendees can&amp;rsquo;t view see it. That&amp;rsquo;s also why we&amp;rsquo;re looking into how to get it through the Graph API today. Organizers also see a tab called &lt;strong&gt;Attendance&lt;/strong&gt;. This is where they can view the report directly in Teams.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-2.png&#34;
	width=&#34;1997&#34;
	height=&#34;1139&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-2_hu_18dce0e8476a2734.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-2_hu_173b64a943d642e1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Attendance Tab&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;175&#34;
		data-flex-basis=&#34;420px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also possible to download a CSV but it&amp;rsquo;s not very well structured which makes it kind of hard to further process the data.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-3.png&#34;
	width=&#34;1420&#34;
	height=&#34;556&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-3_hu_ac6be064cdee4342.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-3_hu_48108397841c4145.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;CSV Export&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;255&#34;
		data-flex-basis=&#34;612px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s switch gears and make some graph requests.&lt;/p&gt;
&lt;h2 id=&#34;get-meeting-attendance-report-through-graph-powershell&#34;&gt;Get Meeting Attendance Report Through Graph PowerShell
&lt;/h2&gt;&lt;p&gt;Since we&amp;rsquo;re accessing data without a signed in user, we need an Entra ID application with appropriate application permissions.&lt;/p&gt;
&lt;h3 id=&#34;create-a-new-entra-id-app-registration&#34;&gt;Create a new Entra ID App Registration.
&lt;/h3&gt;&lt;p&gt;Note: You&amp;rsquo;ll need Global Admin access to grant the consent for your organization.&lt;/p&gt;
&lt;p&gt;Go to the &lt;a class=&#34;link&#34; href=&#34;https://entra.microsoft.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Entra ID Portal&lt;/a&gt; and click on &lt;strong&gt;App registrations&lt;/strong&gt; under &lt;strong&gt;Applications&lt;/strong&gt; in the left navigation menu.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-4.png&#34;
	width=&#34;395&#34;
	height=&#34;849&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-4_hu_f7c678a81f864485.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-4_hu_82870e905752f3c4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;App registrations&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;111px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Then click &lt;strong&gt;+ New registration&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-5.png&#34;
	width=&#34;1224&#34;
	height=&#34;190&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-5_hu_6f09cb212bf0ce9c.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-5_hu_912e3369ded9e293.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;New registration&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;644&#34;
		data-flex-basis=&#34;1546px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Give your app registration a name and keep &lt;strong&gt;Accounts in this organizational directory only (&amp;ldquo;Org Name&amp;rdquo; only - Single tenant)&lt;/strong&gt;. Under &lt;strong&gt;Redirect URI (optional)&lt;/strong&gt; select &lt;strong&gt;Public client/native (mobile &amp;amp; desktop)&lt;/strong&gt; and enter &lt;code&gt;http://localhost&lt;/code&gt; as redirect URI.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-6.png&#34;
	width=&#34;1316&#34;
	height=&#34;1142&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-6_hu_3b05f31844cdf5bc.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-6_hu_15008250056aeea0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;App registration properties&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;115&#34;
		data-flex-basis=&#34;276px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Click &lt;strong&gt;Register&lt;/strong&gt; to create the app registration.&lt;/p&gt;
&lt;p&gt;Copy the &lt;strong&gt;Application (client) ID&lt;/strong&gt; and the &lt;strong&gt;Directory (tenant ID)&lt;/strong&gt;. You&amp;rsquo;ll need this later.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-7.png&#34;
	width=&#34;2028&#34;
	height=&#34;1054&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-7_hu_d670b9a49e2db514.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-7_hu_890e443c7100b65c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Copy Ids&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;461px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;add-permissions&#34;&gt;Add Permissions
&lt;/h4&gt;&lt;p&gt;Navigate to &lt;strong&gt;API permissions&lt;/strong&gt; in the left navigation pane and click &lt;strong&gt;+ Add a permission&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-8.png&#34;
	width=&#34;2083&#34;
	height=&#34;1042&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-8_hu_1951ec11a18246e2.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-8_hu_bf492146b46b8424.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;API permissions&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;199&#34;
		data-flex-basis=&#34;479px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-9.png&#34;
	width=&#34;2016&#34;
	height=&#34;1151&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-9_hu_85afc12fddadbb42.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-9_hu_c321fa1dca61ae8a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Select Microsoft Graph&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;175&#34;
		data-flex-basis=&#34;420px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-10.png&#34;
	width=&#34;2107&#34;
	height=&#34;1146&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-10_hu_4f94c0de2c050a5e.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-10_hu_779da25d3e33d76.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Select Application permissions&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;183&#34;
		data-flex-basis=&#34;441px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Search for &lt;code&gt;OnlineMeeting&lt;/code&gt; and expand the menus to select &lt;strong&gt;OnlineMeetingArtifact.Read.All&lt;/strong&gt; and &lt;strong&gt;OnlineMeetings.Read.All&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-11.png&#34;
	width=&#34;2079&#34;
	height=&#34;1217&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-11_hu_87a5456a02cd8dde.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-11_hu_bc0ec287ff690637.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Select permissions&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;170&#34;
		data-flex-basis=&#34;409px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Click &lt;strong&gt;Add permissions&lt;/strong&gt; and then click &lt;strong&gt;Grant admin consent for &amp;ldquo;Org Name&amp;rdquo;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-12.png&#34;
	width=&#34;2090&#34;
	height=&#34;1090&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-12_hu_e0f49cab37bc744f.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-12_hu_4a18468696884f62.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Grant Consent&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;191&#34;
		data-flex-basis=&#34;460px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-13.png&#34;
	width=&#34;1139&#34;
	height=&#34;199&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-13_hu_4e0c8773674f767f.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-13_hu_1ac3703e8d4317ff.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Click Yes&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;572&#34;
		data-flex-basis=&#34;1373px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;add-a-client-secret&#34;&gt;Add a Client Secret
&lt;/h4&gt;&lt;p&gt;Navigate to &lt;strong&gt;Certificates &amp;amp; secrets&lt;/strong&gt; in the left navigation pane. Under &lt;strong&gt;Client secrets (0)&lt;/strong&gt; click &lt;strong&gt;+ New client secret&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-14.png&#34;
	width=&#34;1928&#34;
	height=&#34;1032&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-14_hu_11c35b94de2f6b81.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-14_hu_619b26fce3e8250b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Client secrets&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;186&#34;
		data-flex-basis=&#34;448px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Give your secret a name and select after how many months it will expire.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-15.png&#34;
	width=&#34;2102&#34;
	height=&#34;1207&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-15_hu_4318ac18bf039a3a.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-15_hu_3592c696619e0f52.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Add a client secret&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;174&#34;
		data-flex-basis=&#34;417px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Copy the secret from the portal. It will only be shown once and you&amp;rsquo;ll need it later.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-16.png&#34;
	width=&#34;1928&#34;
	height=&#34;1037&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-16_hu_2eadeed15bbbab62.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-16_hu_4c0de86ce6593cc8.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Copy secret&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;185&#34;
		data-flex-basis=&#34;446px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The configuration of the app registration is now complete.&lt;/p&gt;
&lt;h3 id=&#34;run-the-script-to-get-an-attendance-report&#34;&gt;Run the Script to get an Attendance Report
&lt;/h3&gt;&lt;p&gt;The script can be found in my &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Scripts/MicrosoftGraph/Teams/GetTeamsAttendanceReportAsApp.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Teams Phone Automation Repo&lt;/a&gt; on GitHub. If you want to make use of the secret encryption feature, you&amp;rsquo;ll need to clone the entire repo because of the dependencies of other files in the repo.&lt;/p&gt;
&lt;p&gt;To be able to retrieve an attendance report from Microsoft Graph, we need a meeting id. Unfortunately, this is not your typical GUID you could easily find in TAC. But we can, however find it easy enough by passing a &lt;strong&gt;Join meeting ID&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-25.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-25_hu_280817be74e3cb60.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-25_hu_6a7d35596415abd3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Meeting Id example&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Luckily, anyone that was invited to the meeting in question can view the Meeting ID and send it to you. Alternatively, the meeting invite could also be forwarded to you. The meeting Id is located below the join link.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-17.png&#34;
	width=&#34;1997&#34;
	height=&#34;1139&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-17_hu_314ba5c68f1d6fe4.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-17_hu_c6833f7fcbdbf8fe.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Meeting ID in meeting invite body&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;175&#34;
		data-flex-basis=&#34;420px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Once you have this ID, you&amp;rsquo;re ready to get the attendance report through PowerShell.&lt;/p&gt;
&lt;h4 id=&#34;teams-application-access-policy&#34;&gt;Teams Application Access Policy
&lt;/h4&gt;&lt;p&gt;The Graph permissions alone are not enough to access the attendance report. We also need to create a new Teams Application Access Policy which includes the app id of the newly created Entra ID app and grant it to the meeting organizer. This is how you can do it in PowerShell.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Create a new Teams Application Access Policy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;New-CsApplicationAccessPolicy&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Identity&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$applicationAccessPolicyName&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-AppIds&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$AppId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Description&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Access Meeting Data as Entra ID app on behalf of user&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/teams/new-csapplicationaccesspolicy?view=teams-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;New-CsApplicationAccessPolicy&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Assign a Teams Application Access Policy to a user&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Grant-CsApplicationAccessPolicy&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Identity&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$UserId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-PolicyName&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$applicationAccessPolicyName&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/teams/grant-csapplicationaccesspolicy?view=teams-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Grant-CsApplicationAccessPolicy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But the script does all of this automatically for you.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-19.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-19_hu_5fe5de252458dabb.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-19_hu_e60b407b7bc958f3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Script output&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-20.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-20_hu_231f4f7b264ebba1.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-20_hu_f74ee03b4eaa6df.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;PowerShell output&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;h5 id=&#34;unassign-teams-application-access-policy&#34;&gt;Unassign Teams Application Access Policy
&lt;/h5&gt;&lt;p&gt;If you only want to get an attendance report once and need to remove the application access to another user&amp;rsquo;s meeting details, you can unassign the policy again by using this code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Grant-CsApplicationAccessPolicy&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Identity&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$UserId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-PolicyName&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;script-prompts&#34;&gt;Script Prompts
&lt;/h4&gt;&lt;p&gt;When the script runs for the first time it will ask you for your app secret. Paste it into the terminal. This will save your secret in an encrypted format. Only the signed in user (in Windows) can decrypt it and it can only be decrypted on the same machine on which it was encrypted. You&amp;rsquo;ll also be asked to sign into Teams PowerShell as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-18.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-18_hu_648f2e15bc7c6926.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-18_hu_318739f8f1280807.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Paste secret&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-21.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-21_hu_5ecf07241cfa27a8.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-21_hu_bc58c0d9b2244958.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Sign into Teams&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;results&#34;&gt;Results
&lt;/h4&gt;&lt;p&gt;Once the Application Access Policy already exists and was already granted to the organizer, the console output looks much less cluttered. The report will be saved to the current directory and it&amp;rsquo;s filename will include the subject of the meeting.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-22.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-22_hu_ba3d7e25b0727d6.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-22_hu_8e77eff048ea4470.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Script output&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If there are multiple attendance reports for a meeting, like when a meeting already ended and someone joined again after that or when it&amp;rsquo;s a recurring meeting, all reports will be combined into a single CSV. The CSV does include the report id in the last column.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s compare the CSV that was downloaded from the Teams client versus the one from my script.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-3.png&#34;
	width=&#34;1420&#34;
	height=&#34;556&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-3_hu_ac6be064cdee4342.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-3_hu_48108397841c4145.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;CSV Export from Teams&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;255&#34;
		data-flex-basis=&#34;612px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-23.png&#34;
	width=&#34;1424&#34;
	height=&#34;150&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-23_hu_42fdbddc3149b7a9.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-23_hu_9b93a4b3c0c86b14.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;CSV Export from Script&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;949&#34;
		data-flex-basis=&#34;2278px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the output from my script gives you a nicely structured CSV which lists 1 participant per row so you can easily import it into other systems without manually changing the structure of the file. Because of that, I decided to create separate files for meeting/attendance summaries.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-24.png&#34;
	width=&#34;1513&#34;
	height=&#34;60&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-24_hu_b2ea8d33d59aae7f.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-24_hu_b6250c7afd66da9f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Meeting Summary from Script&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;2521&#34;
		data-flex-basis=&#34;6052px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary
&lt;/h2&gt;&lt;p&gt;I personally believe that it&amp;rsquo;s very easy for organizers to access the reports themselves in Teams but having the possibility to get them as an admin via PowerShell as well is certainly a welcome addition to my script toolbox. This will be especially useful in case you&amp;rsquo;re asked to export attendance reports on a regular basis. While the fact that you need to know the unique meeting id before you can get an attendance report makes it a bit harder to truly automate this or you may have to chase other attendees for it, if you weren&amp;rsquo;t invited to the meeting yourself but overall, the join meeting Id should be easy enough to retrieve.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Microsoft Graph: Get an Access Token from a PowerShell Session</title>
        <link>https://heusser.pro/p/microsoft-graph-get-an-access-token-from-an-established-powershell-session-zv37e1xmxr86/</link>
        <pubDate>Wed, 05 Jun 2024 19:24:44 +0000</pubDate>
        
        <guid>https://heusser.pro/p/microsoft-graph-get-an-access-token-from-an-established-powershell-session-zv37e1xmxr86/</guid>
        <description>&lt;p&gt;Authentication with the Microsoft Graph PowerShell SDK is pretty easy. All you have to do to establish a session is to run &lt;code&gt;Connect-MgGraph&lt;/code&gt;. After that, you can use all Cmdlets for which you&amp;rsquo;ve installed the necessary modules. It&amp;rsquo;s no secret that not all Cmdlets are as well documented as the REST API itself and in rare cases, the PowerShell Cmdlets might even have some limitations compared to their REST counterparts. In such cases, you can usually just use the universal &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/microsoft.graph.authentication/invoke-mggraphrequest?view=graph-powershell-1.0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;Invoke-MgGraphRequest&lt;/code&gt;&lt;/a&gt; Cmdlet without providing your own access token. This Cmdlet will use the same authentication like any other &lt;strong&gt;&lt;code&gt;Mg*&lt;/code&gt;&lt;/strong&gt; Cmdlet.&lt;/p&gt;
&lt;p&gt;This is how Microsoft describes the &lt;code&gt;Invoke-MgGraphRequest&lt;/code&gt; Cmdlet on Microsoft Learn:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Invoke-MgGraphRequest issues REST API requests to the Graph API. It works for any Graph API if you know the REST URI, method, and optional body parameter. This command is especially useful for accessing APIs for which there isn&amp;rsquo;t an equivalent cmdlet yet.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Note that there is also an alias called &lt;code&gt;Invoke-GraphRequest&lt;/code&gt; for this Cmdlet. A perfect example of where you would need &lt;code&gt;Invoke-MgGraphRequest&lt;/code&gt; is uploading a small file to SharePoint. I recently published a script example making use of this method &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/powershell-script-example-upload-small-files-via-microsoft-graph-z45tbunyoa85&#34; &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;what-is-mgcontext&#34;&gt;What is MgContext?
&lt;/h2&gt;&lt;p&gt;By running &lt;code&gt;Get-MgContext&lt;/code&gt; you can get some information about the current session. Unfortunately, this doesn&amp;rsquo;t reveal any kind of tokens used for requests to the Graph API. Then again, this is most likely by design, because tokens should always be handled with care.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-graph-get-an-access-token-from-an-established-powershell-session-zv37e1xmxr86/image.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-graph-get-an-access-token-from-an-established-powershell-session-zv37e1xmxr86/image_hu_47ba1663556a2ad5.png 480w, https://heusser.pro/p/microsoft-graph-get-an-access-token-from-an-established-powershell-session-zv37e1xmxr86/image_hu_fa5f3458713001be.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Output of Get-MgContext&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-if-you-need-a-token-anyway&#34;&gt;What if you need a token anyway?
&lt;/h2&gt;&lt;p&gt;One option is to provide a client Id and a client secret and make a request to &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://login.microsoftonline.com/%7bYour&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://login.microsoftonline.com/{Your&lt;/a&gt; Tenant Name}/oauth2/v2.0/token&lt;/strong&gt;. If I want to do that, I always come back to this blog post on &lt;a class=&#34;link&#34; href=&#34;https://adamtheautomator.com/powershell-graph-api/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;adamtheautomator.com&lt;/a&gt;. But when I do that, I also want to call the REST API directly for all requests that the script I&amp;rsquo;m working on is doing. In my case, I &lt;strong&gt;want&lt;/strong&gt; to use the SDK and only &lt;strong&gt;need&lt;/strong&gt; to call the API directly for one specific request.&lt;/p&gt;
&lt;p&gt;I recently was working on something where neither the &lt;code&gt;Get-Mg*&lt;/code&gt; nor the &lt;code&gt;Invoke-MgGraphRequest&lt;/code&gt; were working. I wanted to fetch a profile picture of an Entra ID user but wanted to keep the image in memory and not save it to disk. Both the Cmdlets, &lt;code&gt;Get-MgUserPhotoContent&lt;/code&gt; and &lt;code&gt;Invoke-MgGraphRequest&lt;/code&gt; expected a value for an output file though. I know I could have just used a temporary file but if I had given up this easily, I wouldn&amp;rsquo;t have discovered how to get an access token from a Microsoft Graph PowerShell session.&lt;/p&gt;
&lt;p&gt;When I was testing the &lt;code&gt;Invoke-MgGraphRequest&lt;/code&gt; Cmdlet, I noticed that there were different accepted values for the parameter &lt;code&gt;-OutputType&lt;/code&gt;. One of the accepted values is &lt;strong&gt;HttpResponseMessage&lt;/strong&gt; and if you select this, Graph will return the access token in the HTTP response.&lt;/p&gt;
&lt;p&gt;This is the Graph URI/endpoint that I was using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$mgRequest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Invoke-MgGraphRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://graph.microsoft.com/v1.0/users/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$userId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/photo/&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;value&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;image/jpeg&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-OutputType&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HttpResponseMessage&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-graph-get-an-access-token-from-an-established-powershell-session-zv37e1xmxr86/image-1.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-graph-get-an-access-token-from-an-established-powershell-session-zv37e1xmxr86/image-1_hu_de24c5ca676d4f59.png 480w, https://heusser.pro/p/microsoft-graph-get-an-access-token-from-an-established-powershell-session-zv37e1xmxr86/image-1_hu_bc7d332996866ea2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Graph access token retrieved using Invoke-MgGraphRequest&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;To access the token directly, you can use: &lt;code&gt;$mgRequest.RequestMessage.Headers.Authorization.Parameter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-graph-get-an-access-token-from-an-established-powershell-session-zv37e1xmxr86/image-2.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-graph-get-an-access-token-from-an-established-powershell-session-zv37e1xmxr86/image-2_hu_65217b8859c27daf.png 480w, https://heusser.pro/p/microsoft-graph-get-an-access-token-from-an-established-powershell-session-zv37e1xmxr86/image-2_hu_7ed5f848593d0277.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;The access token is now stored in a variable&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you want to build your own Authorization header to call the API directly without first requesting a dedicated token from &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://login.microsoftonline.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://login.microsoftonline.com&lt;/a&gt;&lt;/strong&gt; you can use this code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$authHeader&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Authorization&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$mgRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;RequestMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Authorization&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Scheme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$mgRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;RequestMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Authorization&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Parameter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$profilePhoto&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-WebRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://graph.microsoft.com/v1.0/users/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$userId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/photo/&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;value&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$authHeader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Content&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This allowed me to retrieve the profile photo as a byte array without saving it to disk first.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary
&lt;/h2&gt;&lt;p&gt;This is a very niche use case but I&amp;rsquo;m glad that I discovered how to get an access token from an already authenticated Microsoft Graph PowerShell session. I&amp;rsquo;m sure that this will come in handy again some day and I hope that it will come in handy for you some day as well. I also published the entire example script including helpful comments in one of my GitHub &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Scripts/MicrosoftGraph/Authentication/Get-AccessTokenFromEstablishedMgSession.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;repositories&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>PowerShell Script Example: Upload Small Files to SharePoint via Microsoft Graph</title>
        <link>https://heusser.pro/p/powershell-script-example-upload-small-files-via-microsoft-graph-z45tbunyoa85/</link>
        <pubDate>Sat, 13 Apr 2024 11:25:07 +0000</pubDate>
        
        <guid>https://heusser.pro/p/powershell-script-example-upload-small-files-via-microsoft-graph-z45tbunyoa85/</guid>
        <description>&lt;h2 id=&#34;lacking-documentation&#34;&gt;Lacking Documentation
&lt;/h2&gt;&lt;p&gt;I recently wanted to upload a couple of files to SharePoint Online using Microsoft Graph. It took me a while to figure it out so I thought that sharing my working script examples will probably help other people accomplish this task faster.&lt;/p&gt;
&lt;p&gt;The documentation for uploading files with Microsoft Graph can be found &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/graph/api/driveitem-put-content?view=graph-rest-1.0&amp;amp;tabs=http&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. The problem is that Microsoft Learn only lists an example for a web request and doesn&amp;rsquo;t really include any examples as to what the &lt;strong&gt;Body&lt;/strong&gt; of the request needs to contain.&lt;/p&gt;
&lt;h3 id=&#34;example-as-of-2024-04-13&#34;&gt;Example as of 2024-04-13
&lt;/h3&gt;&lt;p&gt;This is all we get today:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;PUT https://graph.microsoft.com/v1.0/me/drive/root:/FolderA/FileB.txt:/content
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Content-Type: text/plain
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;The contents of the file goes here.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;While there is an example of how to update an existing file using &lt;code&gt;Set-MgDriveItemContent&lt;/code&gt; it doesn&amp;rsquo;t mention how to construct the &lt;code&gt;$params&lt;/code&gt; either:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-PowerShell&#34; data-lang=&#34;PowerShell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Import-Module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Microsoft&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Files&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$params&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;The&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;contents&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;goes&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;here&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Set-MgDriveItemContent&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-DriveId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$driveId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-DriveItemId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$driveItemId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-BodyParameter&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$params&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;script-examples&#34;&gt;Script Examples
&lt;/h2&gt;&lt;p&gt;Through trial and error, I discovered two different ways of uploading files to SharePoint Online through Microsoft Graph. One uses a simple web request using &lt;code&gt;Invoke-RestMethod&lt;/code&gt; and app authentication and the other one uses the &lt;code&gt;Invoke-GraphRequest&lt;/code&gt; Cmdlet from the &lt;code&gt;Microsoft.Graph.Authentication&lt;/code&gt; module. The second one uses delegated permissions.&lt;/p&gt;
&lt;p&gt;As it&amp;rsquo;s often the case with Graph operations, you first need to know some specific Ids before you can make your request. In this case, we need to know the Id of the &lt;strong&gt;drive&lt;/strong&gt; in SharePoint. The DriveId is the Id of the Document Library. However, to get the DriveId, we also need to know the Id of the SharePoint Site. Therefore we must first find the SiteId, and then the DriveId. Unfortunately, the examples on the Graph documentation always assume that we already know these Ids so we need to get this data on our own&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;example-using-delegated-auth-and-invoke-graphrequest&#34;&gt;Example Using Delegated Auth and Invoke-GraphRequest
&lt;/h3&gt;&lt;p&gt;Let&amp;rsquo;s look at the script using the Graph PowerShell module first. The first thing you want to do is to replace &lt;code&gt;$siteName&lt;/code&gt; with the name of your destination site. When you run the script, you&amp;rsquo;ll be prompted to sign into Microsoft Graph. Make sure that you&amp;rsquo;ve previously configured and consented the delegated permissions &lt;code&gt;Sites.Read.All&lt;/code&gt; and &lt;code&gt;Files.ReadWrite.All&lt;/code&gt; to the &lt;strong&gt;Microsoft Graph Command Line Tools&lt;/strong&gt; Enterprise Application or that you&amp;rsquo;re using your own App which has at least these two permissions configured.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$siteName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Azure Automation&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Connect-MgGraph&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Site&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$site&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-MgSite&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Search&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$siteName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$siteId&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$site&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;id&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Drives&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$drives&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-MgSiteDrive&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-SiteId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$siteId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-All&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$drive&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$drives&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Where-Object&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-eq&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Documents&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-or&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-eq&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Dokumente&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# SharePoint Drive Id (Document Library)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$driveId&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$drive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;id&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# File to upload&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$filePath&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;C:\Temp\Test.txt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$fileProperties&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-ChildItem&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Path&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filePath&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Read the file content as a byte array&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$fileContent&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;System.IO.File&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReadAllBytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$filePath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Destination file name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$destinationName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$fileProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BaseName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Get-Date&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Format&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;yyyy-MM-dd HH-mm-ss&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$fileProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Extension&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Upload the file to SharePoint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-GraphRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PUT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://graph.microsoft.com/v1.0/drives/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$driveId&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/root:/Test/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$destinationName&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;`:/content&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Body&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$fileContent&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/octet-stream&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$Header&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This will upload files up to 250 MB to SharePoint Online. If you rather want to use application authentication and not have any dependencies on installed Graph modules, you can do the same using HTTP requests.&lt;/p&gt;
&lt;h3 id=&#34;example-using-app-auth-and-invoke-restmethod&#34;&gt;Example Using App Auth and Invoke-RestMethod
&lt;/h3&gt;&lt;p&gt;The required permissions stay the same as for the first example. However, in this case they need to be application permissions. This script uses an external function to acquire a token which is then used to perform the web requests to the Graph API. The easiest way is to just clone the entire &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;repository&lt;/a&gt;. This will keep the relative paths working. Alternatively, you can download the function from &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Functions/Connect-MgGraphHTTP.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt; and either copy it into the script or adjust the relative path. At this point, I&amp;rsquo;d like to thank Alex Asplund again for providing this awesome function to acquire a token for Microsoft Graph. I use &lt;a class=&#34;link&#34; href=&#34;https://adamtheautomator.com/powershell-graph-api&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;his function&lt;/a&gt; in quite a lot in my scripts.&lt;/p&gt;
&lt;p&gt;Before you run the script, fill in your own data for &lt;code&gt;$TenantId&lt;/code&gt;, &lt;code&gt;$AppId&lt;/code&gt;, &lt;code&gt;$AppSecret&lt;/code&gt; and &lt;code&gt;$SiteName&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$TenantId&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$AppId&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$AppSecret&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$SiteName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Azure Automation&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Functions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Connect-MgGraphHTTP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;ps1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Connect-MgGraphHTTP&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-TenantId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$TenantId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-AppId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$AppId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-AppSecret&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$AppSecret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Site&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$site&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Invoke-RestMethod&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$Header&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://graph.microsoft.com/v1.0/sites?search=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$siteName&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$siteId&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$site&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;id&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Drives&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$drives&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Invoke-RestMethod&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$Header&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://graph.microsoft.com/v1.0/sites/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$siteId&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/drives&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# SharePoint Drive Id (Document Library)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$driveId&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$drives&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Where-Object&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-eq&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Documents&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-or&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-eq&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Dokumente&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Id&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# File to upload&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$filePath&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;C:\Temp\Test.txt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$fileProperties&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-ChildItem&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Path&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filePath&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Read the file content as a byte array&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$fileContent&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;System.IO.File&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReadAllBytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$filePath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Destination file name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$destinationName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$fileProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BaseName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Get-Date&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Format&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;yyyy-MM-dd HH-mm-ss&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$fileProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Extension&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Upload the file to SharePoint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-RestMethod&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PUT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://graph.microsoft.com/v1.0/drives/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$driveId&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/root:/Test/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$destinationName&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;`:/content&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Body&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$fileContent&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/octet-stream&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$Header&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This code will give you the exact same result as the first script does but it will only use out-of-the-box PowerShell commands and doesn&amp;rsquo;t have any dependencies on PowerShell modules.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary
&lt;/h2&gt;&lt;p&gt;I hope you like these two examples on how to upload small files to SharePoint Online using Microsoft Graph. I think this can be a really powerful tool, especially when you pair it with your own Entra ID App Registration/Enterprise Application. When you create your own app to connect to Microsoft Graph, you can limit the use of it to a specific subset of users, such as IT staff and the app is only allowed to read all sites and read/write all files the signed in user has access to.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m thinking of scenarios where IT runs a diagnostic script or any other script that collects information on a users device and then uploads the log files/collected data directly to the specified SharePoint Site.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Manage Microsoft Teams Call Queues with PowerShell (Force-Sync)</title>
        <link>https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/</link>
        <pubDate>Tue, 04 Apr 2023 19:42:18 +0000</pubDate>
        
        <guid>https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/</guid>
        <description>&lt;p&gt;After my last article turned into a twenty-minute read, I want to write a short blog post today. At least I‚Äôll try to. We are talking about managing Microsoft Teams Call Queues with PowerShell again.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/0cTgVlbyGhDlU8uu.jpg&#34;
	width=&#34;1024&#34;
	height=&#34;1024&#34;
	srcset=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/0cTgVlbyGhDlU8uu_hu_20db88508e318f28.jpg 480w, https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/0cTgVlbyGhDlU8uu_hu_72f8da88d38774d.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Pretty much about one year ago, I wrote an article explaining how to force sync a Call Queue which uses a group or a Microsoft Team as its source of agent list.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0&#34; &gt;Microsoft Teams Call Queue Agent Lists (And how to Force-Sync them) | by martin heusser | Medium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since then, I have refined the code a little bit to make it even easier. I wrote two functions which are available in a new &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Modules/TeamsPS.psm1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;PowerShell Module&lt;/strong&gt;&lt;/a&gt; which is available in my &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;TeamsPhoneAutomation&lt;/strong&gt;&lt;/a&gt; repository on GitHub.&lt;/p&gt;
&lt;p&gt;To import the module, simply run the following code after you have &lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;cloned&lt;/a&gt; the repository.&lt;/p&gt;
&lt;p&gt;$localRepoPath = git rev-parse &amp;ndash;show-toplevel&lt;br&gt;
Import-Module &amp;ldquo;$localRepoPath/Modules/TeamsPS.psm1&amp;rdquo; -Force&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git rev-parse --show-toplevel&lt;/code&gt; will resolve the cloned repository‚Äôs root path to the absolute file path on your system. This is really helpful if different users clone the repo to different folders on their own machine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1gNxBkz6hW4pvFJjOSPniow.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1gNxBkz6hW4pvFJjOSPniow_hu_1d085ec536101309.png 480w, https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1gNxBkz6hW4pvFJjOSPniow_hu_20a6aa61280c8d3d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;There are two Call Queue related functions in the module:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Get-MZZCQAgents&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sync-MZZCQAgents&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let‚Äôs start with the &lt;strong&gt;Get&lt;/strong&gt; function.&lt;/p&gt;
&lt;h4 id=&#34;get-mzzcqagents&#34;&gt;Get-MZZCQAgents
&lt;/h4&gt;&lt;p&gt;This is essentially what &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer/blob/main/Functions/Get-CallQueueAgentsStatus.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this script&lt;/a&gt; mentioned in &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485&#34; &gt;this article&lt;/a&gt; does. However, this function doesn‚Äôt have exporting capabilities and the code has been adapted so it plays nice with the &lt;strong&gt;Sync&lt;/strong&gt; function.&lt;/p&gt;
&lt;p&gt;As we already know, when we check a Call Queues¬†&lt;code&gt;.Agent&lt;/code&gt; property, we will only see GUIDs instead of User Principal Names. Thus, my function. It will search for the users by Id and output UPNs instead of Object Ids.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1pLYCkYoqD9HkTxl7bVetPw.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1pLYCkYoqD9HkTxl7bVetPw_hu_194447dcc8fa80a2.png 480w, https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1pLYCkYoqD9HkTxl7bVetPw_hu_67ad1370f68c1f36.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you run the function without parameters, you will be able to choose a Call Queue from a list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/10Zw03oQyVVr3Gp1LcOsQ.png&#34;
	width=&#34;1381&#34;
	height=&#34;659&#34;
	srcset=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/10Zw03oQyVVr3Gp1LcOsQ_hu_176b4c104dd06280.png 480w, https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/10Zw03oQyVVr3Gp1LcOsQ_hu_b44bf68cccf2e728.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;209&#34;
		data-flex-basis=&#34;502px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you already know the Id of your Call Queue, you can pass it via the &lt;code&gt;-CQIdentity&lt;/code&gt; parameter.&lt;/p&gt;
&lt;p&gt;Get-MZZCQAgents -CQIdentity fe77ecb3-f5a5-47ee-9519-cbb3a52d5771&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1C9HchRKUMR6oQBRLXMBfqg.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1C9HchRKUMR6oQBRLXMBfqg_hu_ae37f73038b9d154.png 480w, https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1C9HchRKUMR6oQBRLXMBfqg_hu_dff973ac220249ac.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;sync-mzzcqagents&#34;&gt;Sync-MZZCQAgents
&lt;/h4&gt;&lt;p&gt;This Call Queue uses a Microsoft Teams Team as Agent List, but this also applies to Agents which are assigned to a queue via Security or M365 Groups.&lt;/p&gt;
&lt;p&gt;Think about a scenario where a Team owner adds a new employee to a Team which should also start to receive calls to the queue. Without interaction of a Teams Administrator, it‚Äôs going to take some time until that‚Äôs the case. It will most likely take multiple hours for the change to become effective.&lt;/p&gt;
&lt;p&gt;If we want to speed up that process, we simply need to run &lt;code&gt;Sync-MZZCQAgents&lt;/code&gt;¬†.&lt;/p&gt;
&lt;p&gt;It‚Äôs the same for this function, if you do not specify &lt;code&gt;-CQIdentity&lt;/code&gt; you will be asked to choose &lt;strong&gt;one&lt;/strong&gt; or &lt;strong&gt;multiple&lt;/strong&gt; queues from the list. To select multiple queues, just hold &lt;strong&gt;CTRL&lt;/strong&gt; while selecting list entries.&lt;/p&gt;
&lt;p&gt;Please note that &lt;code&gt;Get-MZZCQAgents&lt;/code&gt; only accepts one selection at a time but &lt;code&gt;Sync-MZZCQAgents&lt;/code&gt; can actually loop through multiple queues after each other if you want to force-sync all or some of your queues.&lt;/p&gt;
&lt;p&gt;The cool thing about this is that the &lt;strong&gt;Sync&lt;/strong&gt; function runs&lt;code&gt;Get-MZZCQAgents&lt;/code&gt; before and after the queue‚Äôs agent list has been synced. This way you can know if the new agent(s) have already been added.&lt;/p&gt;
&lt;p&gt;If you run the function too soon after the membership of a Team or an M365 Group has been updated, chances are that you will get the following output.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1lMTG7LBodcvUifKt7pZVCQ.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1lMTG7LBodcvUifKt7pZVCQ_hu_359e1fad4a3ac16d.png 480w, https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1lMTG7LBodcvUifKt7pZVCQ_hu_a9e88e6ea57acf6f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;First, let‚Äôs remove &lt;strong&gt;Mike&lt;/strong&gt;, who is also an agent of the queue as a member of the Team. We can now see that &lt;strong&gt;Mike&lt;/strong&gt; has been removed from the queue.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1XVULfBs8n282RhyFCWBNUw.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1XVULfBs8n282RhyFCWBNUw_hu_90504891a8460a62.png 480w, https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1XVULfBs8n282RhyFCWBNUw_hu_6d9a9db9221007c0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now let‚Äôs add &lt;strong&gt;Mike&lt;/strong&gt; back but remove &lt;strong&gt;Bobby.&lt;/strong&gt; You‚Äôll get a nice overview of all the agents that were removed or added.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1Q6eapw6UeSnMblJv52ra5Q.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1Q6eapw6UeSnMblJv52ra5Q_hu_1f757111d4bed7f4.png 480w, https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1Q6eapw6UeSnMblJv52ra5Q_hu_6b7bd937630f553c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;There is no need to run &lt;code&gt;Connect-MicrosoftTeams&lt;/code&gt; before you run either of these two functions because a login mechanism, similar to the one the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;M365 Call Flow Visualizer&lt;/strong&gt;&lt;/a&gt; uses is already built into the function &lt;code&gt;Connect-MZZTeams&lt;/code&gt; which is also part of the module. If you‚Äôre not already logged in, you‚Äôll be prompted to enter your Teams Admin Credentials.&lt;/p&gt;
&lt;p&gt;For now, it‚Äôs only these two or rather three functions (if you count the login function) which are part of this module. I‚Äôm sure that I‚Äôll add more useful code over time, so stay tuned and follow me on &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p&#34; &gt;Medium&lt;/a&gt;, &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/mozzeph&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Twitter&lt;/a&gt; or &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/in/martin-heusser117/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LinkedIn&lt;/a&gt;. And yes, the &lt;strong&gt;117&lt;/strong&gt; in my LinkedIn URL is a reference to Master Chief.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Fix UTF-8 Encoding When Calling Azure Child Runbooks Inline</title>
        <link>https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/</link>
        <pubDate>Fri, 03 Mar 2023 10:03:56 +0000</pubDate>
        
        <guid>https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/</guid>
        <description>&lt;p&gt;I recently came across a very strange issue with Azure Runbooks and UTF-8 encoding. For most IT folks, it‚Äôs no issue if everything is in English but if you work with German speaking users, chances are that you‚Äôre going to run into encoding issues with &lt;strong&gt;Umlaute&lt;/strong&gt; or other special characters eventually. For those who have no idea what I‚Äôm talking about, Umlaute are special characters like ‚Äú√§‚Äù, ‚Äú√∂‚Äù and ‚Äú√º‚Äù which are used very frequently in German.&lt;/p&gt;
&lt;p&gt;The scenario is the following: I have a very simple Azure Runbook which sends a message card to a Teams channel.&lt;/p&gt;
&lt;p&gt;$uri = &amp;ldquo;YourWebhookUrl&amp;rdquo;&lt;/p&gt;
&lt;p&gt;$body = @&amp;rsquo;&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;@context&amp;rdquo;: &amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;https://schema.org/extensions%22&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://schema.org/extensions&#34;&lt;/a&gt;,&lt;br&gt;
&amp;ldquo;@type&amp;rdquo;: &amp;ldquo;MessageCard&amp;rdquo;,&lt;br&gt;
&amp;ldquo;themeColor&amp;rdquo;: &amp;ldquo;00A4EF&amp;rdquo;,&lt;br&gt;
&amp;ldquo;title&amp;rdquo;: &amp;ldquo;UTF8 Test&amp;rdquo;,&lt;br&gt;
&amp;ldquo;text&amp;rdquo;: &amp;ldquo;Hello W√∂rld!&amp;rdquo;&lt;br&gt;
}&lt;br&gt;
&amp;lsquo;@&lt;/p&gt;
&lt;p&gt;Invoke-RestMethod -uri $uri -Method Post -body $body -ContentType &amp;lsquo;application/json; charset=UTF-8&amp;rsquo;&lt;/p&gt;
&lt;p&gt;As you can see, I purposely wrote &lt;strong&gt;‚ÄúHello W√∂rld‚Äù&lt;/strong&gt; instead of &lt;strong&gt;‚ÄúHello World‚Äù&lt;/strong&gt; to demonstrate this. If the runbook is run directly (meaning, there‚Äôs no child runbook involved), there‚Äôs no issue at all and the card is sent to Teams using the correct encoding.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1Fjfq1GaXyavb7ynoRqqpg.png&#34;
	width=&#34;1209&#34;
	height=&#34;242&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1Fjfq1GaXyavb7ynoRqqpg_hu_79d5dbf42022d1db.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1Fjfq1GaXyavb7ynoRqqpg_hu_ca67f2b3b3e76880.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;499&#34;
		data-flex-basis=&#34;1199px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;working-with-childrunbooks&#34;&gt;Working With Child¬†Runbooks
&lt;/h4&gt;&lt;p&gt;So far so good. In more complex scenarios, you might want to build modular runbooks. An example of that would be where you have some code and some parameters in one runbook (let‚Äôs call that &lt;strong&gt;main runbook&lt;/strong&gt; or &lt;strong&gt;child runbook&lt;/strong&gt;) and have a couple of other runbooks which call your main runbook inline. Let‚Äôs call these &lt;strong&gt;runner scripts&lt;/strong&gt; because they‚Äôre only used to run the main runbook.&lt;/p&gt;
&lt;p&gt;The advantage of such a setup is that you only need to change the code in one place if you need to update it. For example, if the URL of the webhook changes, we only need to edit the main runbook instead of all the other runbooks as well. You can also read more about that concept in this official Microsoft &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/azure/automation/automation-child-runbooks#call-a-child-runbook-by-using-inline-execution&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Learn article&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;wrong-encoding-in-childrunbooks&#34;&gt;Wrong Encoding in Child¬†Runbooks
&lt;/h4&gt;&lt;p&gt;However, I have found that somehow the encoding gets messed up and special characters are sent to Teams in the wrong format if a child runbook is called inline from another runbook which runs in front of it.&lt;/p&gt;
&lt;p&gt;If you want to call another runbook from any runbook in the same automation account, you can just reference it by its name. All that‚Äôs needed is the following code which really just points to another script. Note that you do need to add¬†&lt;code&gt;.ps1&lt;/code&gt; at the end of your runbook name.&lt;/p&gt;
&lt;p&gt;. .\SendMessageCardMain.ps1&lt;/p&gt;
&lt;p&gt;It doesn‚Äôt make any difference if &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/scripting/learn/ps101/10-script-modules?view=powershell-7.3&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;dot sourcing&lt;/a&gt; is used or not. The encoding will be wrong in either case.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1RIQJDWuX87n08U80GxZBlw.png&#34;
	width=&#34;1213&#34;
	height=&#34;241&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1RIQJDWuX87n08U80GxZBlw_hu_208c308d65b02cc.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1RIQJDWuX87n08U80GxZBlw_hu_7f0d0f4945268ae5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;503&#34;
		data-flex-basis=&#34;1207px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This isn‚Äôt just about the message which is sent to Teams through a web request. The encoding is wrong in general and thus when using &lt;code&gt;Write-Output&lt;/code&gt; as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1RxMMGmOGbr82SmAmzuh3cg.png&#34;
	width=&#34;1414&#34;
	height=&#34;493&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1RxMMGmOGbr82SmAmzuh3cg_hu_8592dd9b790d6def.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1RxMMGmOGbr82SmAmzuh3cg_hu_7e0db4ecb34d250.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;286&#34;
		data-flex-basis=&#34;688px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;workaround&#34;&gt;Workaround
&lt;/h4&gt;&lt;p&gt;The trick is to store the special characters inside a variable which is already known to the runner script (the one which will be submitted to the worker), and then calls the child runbook.&lt;/p&gt;
&lt;p&gt;$externalText = &amp;ldquo;W√∂rld&amp;rdquo;&lt;/p&gt;
&lt;p&gt;. .\SendMessageCardMain.ps1&lt;/p&gt;
&lt;p&gt;The word which contains the special character is replaced by the variable in the main script (child runbook).&lt;/p&gt;
&lt;p&gt;$uri = &amp;ldquo;YourWebhookUrl&amp;rdquo;&lt;/p&gt;
&lt;p&gt;$body = @&amp;rdquo;&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;@context&amp;rdquo;: &amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;https://schema.org/extensions%22&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://schema.org/extensions&#34;&lt;/a&gt;,&lt;br&gt;
&amp;ldquo;@type&amp;rdquo;: &amp;ldquo;MessageCard&amp;rdquo;,&lt;br&gt;
&amp;ldquo;themeColor&amp;rdquo;: &amp;ldquo;00A4EF&amp;rdquo;,&lt;br&gt;
&amp;ldquo;title&amp;rdquo;: &amp;ldquo;UTF8 Test&amp;rdquo;,&lt;br&gt;
&amp;ldquo;text&amp;rdquo;: &amp;ldquo;Hello $externalText!&amp;rdquo;&lt;br&gt;
}&lt;br&gt;
&amp;ldquo;@&lt;/p&gt;
&lt;p&gt;Invoke-RestMethod -uri $uri -Method Post -body $body -ContentType &amp;lsquo;application/json; charset=UTF-8&amp;rsquo;&lt;/p&gt;
&lt;p&gt;This way, the first runbook already knows the correct encoding and it works, just like it did in the first example where we only had one runbook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1SrfMmL5MqVyJJMuygMjA.png&#34;
	width=&#34;1211&#34;
	height=&#34;240&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1SrfMmL5MqVyJJMuygMjA_hu_aa94cdfcbb92053d.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1SrfMmL5MqVyJJMuygMjA_hu_227613bf680279a8.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;504&#34;
		data-flex-basis=&#34;1211px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Let‚Äôs assume that we have one main runbook which will just send Message Cards to Teams, but we also have many different runner scripts which will send different kind of messages to Teams.&lt;/p&gt;
&lt;p&gt;This would make the code quite hard to maintain. Imagine if we want to replace the word ‚ÄúW√∂rld‚Äù with ‚ÄúZ√ºrich‚Äù for example. We‚Äôd have to do this for each runner script if the variable is stored inside each runner script.&lt;/p&gt;
&lt;h4 id=&#34;optimized-workaround-1-using-automation-variables&#34;&gt;Optimized Workaround 1 (Using Automation Variables)
&lt;/h4&gt;&lt;p&gt;Instead, we can just put the code into an Automation Variable as a string. Automation Variables are saved inside the Automation Account but outside of all the runbooks. This effectively gives us a location to store the code once but all runbooks inside that Automation Account will be able to access it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1MUKW9TSOMNz1gnnQcKeQyA.png&#34;
	width=&#34;1681&#34;
	height=&#34;597&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1MUKW9TSOMNz1gnnQcKeQyA_hu_6eaf03aa5d9cf53a.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1MUKW9TSOMNz1gnnQcKeQyA_hu_d0c1f0ebdd1806df.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;281&#34;
		data-flex-basis=&#34;675px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In the runner script, we import the Automation Variable using the &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/azure/automation/shared-resources/variables?tabs=azure-powershell#internal-cmdlets-to-access-variables&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;internal Cmdlet&lt;/a&gt;. This is only available in Azure Runbooks and does not require additional authentication.&lt;/p&gt;
&lt;p&gt;$AutomationVariableCode = Get-AutomationVariable -Name &amp;ldquo;AutomationVariableCode&amp;rdquo; | Out-String&lt;br&gt;
Invoke-Expression $AutomationVariableCode&lt;/p&gt;
&lt;p&gt;. .\SendMessageCardMain.ps1&lt;/p&gt;
&lt;p&gt;There‚Äôs no mention of &lt;code&gt;$externalText&lt;/code&gt; inside the runbook but it‚Äôs set by &lt;code&gt;Invoke-Expression&lt;/code&gt;¬†.&lt;/p&gt;
&lt;p&gt;This allows us to change the value of the variable without touching any of our runner scripts which makes it a lot more scalable and easier to maintain while keeping the correct encoding.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1SRNRxJrIZunrddwFIRVKRg.png&#34;
	width=&#34;1214&#34;
	height=&#34;241&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1SRNRxJrIZunrddwFIRVKRg_hu_c9ce5c53b80a50ca.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1SRNRxJrIZunrddwFIRVKRg_hu_b0eda817e0e82efa.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;503&#34;
		data-flex-basis=&#34;1208px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Of course, the Automation Variable could also contain more complex code like a switch statement to define different messages or contain the same message in different language. For demonstration purposes, I kept it simple by just using a single value variable.&lt;/p&gt;
&lt;p&gt;On the downside, this makes editing the code complicated and error prone, since it‚Äôs just a string stored inside a variable without any kind of syntax checking. To tackle that issue, one would need to copy it to a local IDE (e.g. VS Code) each time the code is updated and paste it back into the Automation Variable once it‚Äôs done.&lt;/p&gt;
&lt;h4 id=&#34;optimized-workaround-2-using-powershell-runbooks&#34;&gt;Optimized Workaround 2 (Using PowerShell Runbooks)
&lt;/h4&gt;&lt;p&gt;What about storing the code in yet another runbook? This would allow for easier editing and testing right in the browser. But is it possible&amp;hellip;? As it turns out, it is!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1KEZF0gbmFG0gzNvtYMRrg.png&#34;
	width=&#34;2017&#34;
	height=&#34;351&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1KEZF0gbmFG0gzNvtYMRrg_hu_b5eb104678cb48b7.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1KEZF0gbmFG0gzNvtYMRrg_hu_e6842afd2d601365.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;574&#34;
		data-flex-basis=&#34;1379px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1wqc76iVn3V2GHxNTOx8w.png&#34;
	width=&#34;884&#34;
	height=&#34;322&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1wqc76iVn3V2GHxNTOx8w_hu_4f34aeb95cb42c26.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1wqc76iVn3V2GHxNTOx8w_hu_d541a687568ccca5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;274&#34;
		data-flex-basis=&#34;658px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;To be able to get the contents/code of what I call the &lt;strong&gt;content runbook&lt;/strong&gt; we need to make sure that the modules &lt;strong&gt;Az.Accounts&lt;/strong&gt; and &lt;strong&gt;Az.Automation&lt;/strong&gt; are installed in our Automation Account.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1azPWChNsXyf25OJAqcoOgQ.png&#34;
	width=&#34;2792&#34;
	height=&#34;387&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1azPWChNsXyf25OJAqcoOgQ_hu_5c8890c92659e12a.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1azPWChNsXyf25OJAqcoOgQ_hu_c9f36f3cf4d9663e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;721&#34;
		data-flex-basis=&#34;1731px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1sZzUKlvhywLqZQhTFgIQwg.png&#34;
	width=&#34;3195&#34;
	height=&#34;390&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1sZzUKlvhywLqZQhTFgIQwg_hu_51cafa52b2acb198.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1sZzUKlvhywLqZQhTFgIQwg_hu_be081c597cb52555.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;819&#34;
		data-flex-basis=&#34;1966px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;We also need a &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Managed Identity&lt;/a&gt; to connect to Azure since we‚Äôll be using regular&lt;code&gt;Az*&lt;/code&gt; Cmdlets and not internal ones this time around.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1mXMuUMBFEAyxBk9gH7Ad5A.png&#34;
	width=&#34;2304&#34;
	height=&#34;1296&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1mXMuUMBFEAyxBk9gH7Ad5A_hu_a9bfac259f1841f0.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1mXMuUMBFEAyxBk9gH7Ad5A_hu_749bab24f4570d2e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Let‚Äôs add a little more code to our runner script. My Tenant Id is also stored inside an Automation Variable, thus it‚Äôs not visible in the code.&lt;/p&gt;
&lt;p&gt;$tenantId = Get-AutomationVariable -Name &amp;ldquo;tenantId&amp;rdquo;&lt;br&gt;
$azAccount = Connect-AzAccount -Identity -TenantId $tenantId&lt;/p&gt;
&lt;p&gt;$exportRb = Export-AzAutomationRunbook -AutomationAccountName &amp;ldquo;mzz-automation-account-001&amp;rdquo; -ResourceGroupName &amp;ldquo;mzz-rmg-001&amp;rdquo; -Name &amp;ldquo;SendMessageCardContent&amp;rdquo; -OutputFolder $env:temp&lt;/p&gt;
&lt;p&gt;Get-Content -Path $env:temp\$exportRb -Encoding UTF8 | Out-String | Invoke-Expression&lt;/p&gt;
&lt;p&gt;. .\SendMessageCardMain.ps1&lt;/p&gt;
&lt;p&gt;With a Managed Identity, we don‚Äôt need to provide any kind of additional authentication. Everything is handled by the Automation Account using the Managed Identity automatically. We only need to provide &lt;code&gt;Connect-AzAccount -Identity -TenantId $tenantId&lt;/code&gt;¬†.&lt;/p&gt;
&lt;p&gt;We then export the runbook using &lt;code&gt;Export-AzAutomationRunbook&lt;/code&gt; to &lt;code&gt;$env:temp&lt;/code&gt;. Finally, we import the runbook‚Äôs content by using &lt;code&gt;Get-Content&lt;/code&gt; and execute its code by piping it through to &lt;code&gt;Invoke-Expression&lt;/code&gt;¬†.&lt;/p&gt;
&lt;p&gt;In case I have lost you at this point, let‚Äôs recap very briefly.&lt;/p&gt;
&lt;p&gt;By using &lt;code&gt;Invoke-Expression&lt;/code&gt; instead of calling the runbook inline, we make sure that the externally stored code is running in the scope of the runner script and not the child runbook, which will keep the encoding intact.&lt;/p&gt;
&lt;p&gt;And we‚Äôre jumping through hoops here by storing the values of the variables in another runbook so that they can be updated without touching each of our runner scripts. If it helps, you can also think about a scenario where you‚Äôre hosting some kind of monitoring or reporting solution for different customers inside your own Tenant/Automation Account. Each customer has its own runner script with their own parameters but there‚Äôs only one main runbook which contains all the code.&lt;/p&gt;
&lt;p&gt;If we need to update the script logic, only the main runbook needs to be updated. If we need to make changes to the content of the messages, only the runbook storing these values needs to be updated.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1mg0Nja4e5HPo9HbQPgQnA.png&#34;
	width=&#34;1219&#34;
	height=&#34;244&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1mg0Nja4e5HPo9HbQPgQnA_hu_d4cb97119c5f860.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1mg0Nja4e5HPo9HbQPgQnA_hu_95deeea0b238b3b0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;499&#34;
		data-flex-basis=&#34;1199px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now let‚Äôs change the word inside the runbook to something else. Instead of editing an Automation Variable, we can just edit the runbook, which is a lot more user friendly.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1NTgYp7gxGHjy3GN4wNJwMA.png&#34;
	width=&#34;2019&#34;
	height=&#34;345&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1NTgYp7gxGHjy3GN4wNJwMA_hu_5876828ffd06a34d.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1NTgYp7gxGHjy3GN4wNJwMA_hu_2f9c93a79433eef4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;585&#34;
		data-flex-basis=&#34;1404px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Don‚Äôt forget to publish the runbook. Otherwise, the values won‚Äôt be updated. As expected, this works like a charm.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1jYFSVZTopjDmtqdrmufrQ.png&#34;
	width=&#34;1217&#34;
	height=&#34;240&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1jYFSVZTopjDmtqdrmufrQ_hu_7ede295ae2176db2.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1jYFSVZTopjDmtqdrmufrQ_hu_a4171da2cb4ca1fa.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;507&#34;
		data-flex-basis=&#34;1217px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If for some reason you don‚Äôt want to read your variables into memory in the runner script and do it in the child runbook instead, you can also use the &lt;code&gt;Invoke-Expression&lt;/code&gt; method from there. This works as well, even if the child runbook is called inline by another runbook and the runner script doesn‚Äôt have any reference to the special character variables at all.&lt;/p&gt;
&lt;p&gt;I have no idea why it doesn‚Äôt work if special characters are included explicitly in child runbooks though. And it took me quite some time to figure out a workaround for this. I hope that this article is useful to you, if you‚Äôve been struggling with modular runbooks and encoding issues as well.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Bulk Deploy Microsoft Teams Call Flows with PowerShell in Minutes</title>
        <link>https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/</link>
        <pubDate>Sat, 18 Feb 2023 17:24:32 +0000</pubDate>
        
        <guid>https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/</guid>
        <description>&lt;p&gt;The M365 Call Flow Visualizer focuses on retrieving configurations of Teams Auto Attendants and Call Queues which have already been built. And it does so by using PowerShell.&lt;/p&gt;
&lt;p&gt;But what about the opposite? Can we use PowerShell to create a new call flow from scratch in just a few minutes as well?&lt;/p&gt;
&lt;p&gt;In this article, I‚Äôm going to show you how you can create a basic, yet fully functional call flow with PowerShell. The only thing you‚Äôll need to do yourself in the end is to add users to the Team.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is Needed to Build a Call Flow?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Before we get into the script, let‚Äôs look at what steps we need to take to build a call flow.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create resource accounts&lt;/li&gt;
&lt;li&gt;License resource accounts (and set Usage Location)&lt;/li&gt;
&lt;li&gt;Assign a phone number (and voice routing policy if it‚Äôs a Direct Routing number) to the resource accounts&lt;/li&gt;
&lt;li&gt;Create a Microsoft 365 Group with a Team (For voice enabled channel and shared voicemail)&lt;/li&gt;
&lt;li&gt;Configure M365 Group for Follow in Inbox and Show in Outlook&lt;/li&gt;
&lt;li&gt;Create and configure the Call Queue&lt;/li&gt;
&lt;li&gt;Assign the Resource Account to the Call Queue&lt;/li&gt;
&lt;li&gt;Create the Auto Attendant and configure forwarding to the queue during business hours&lt;/li&gt;
&lt;li&gt;Assign the Resource Account to the Auto Attendant&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These are quite a few steps to conclude but the hardest part about this is remembering the correct order of all the steps so you can do it as fast as possible. For example, if you forget to set the Usage Location to the same country as the phone number you want to assign, you will have to go back and wait for the change to be propagated.&lt;/p&gt;
&lt;p&gt;Another example is that you should always start at the back of your call flow. You can‚Äôt fully configure a Call Queue if you don‚Äôt have the Team or the M365 Group for shared voicemail yet. And you can‚Äôt finish configuring your Auto Attendant if you haven‚Äôt built the queue before.&lt;/p&gt;
&lt;p&gt;If you want to learn more about resource accounts or shared voicemail, I suggest the following articles of mine.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489&#34; &gt;Everything You Ever Wanted to Know About Teams Resource Accounts | by martin heusser | Medium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24&#34; &gt;Everything you ever wanted to know about Microsoft Teams Phone and Shared Voicemail | by martin heusser | Medium&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;some-notes-about-thisscript&#34;&gt;Some Notes About This¬†Script
&lt;/h4&gt;&lt;p&gt;The script follows my personal best practices when building call flows and considers all the aforementioned examples of steppingstones for maximum efficiency.&lt;/p&gt;
&lt;p&gt;This is not intended to build super complex call flows. Instead, it is just an example of how one can write a deployment script, which does everything from A-Z in an efficient order. It can, however, build multiple call flows in a row.&lt;/p&gt;
&lt;p&gt;While it would be possible to make it even more efficient by, for example, creating and licensing all the resource accounts from the CSV entries first, then create all the Call Queues and at last all the Auto Attendants, I decided not to pursue this road for the sake of simplicity. Instead, the script will create each call flow after the other, which probably takes slightly longer to complete.&lt;/p&gt;
&lt;p&gt;There are some steps where we need to wait for the previous steps to complete. For example, when a Resource Account is created, it usually takes a few seconds for the corresponding User Object in Teams to be created as well. Rest assured though; the script will handle all of that on its own. So don‚Äôt get spooked if you see some red error messages in PowerShell. These are just standard error messages, where the script tries to query a user which couldn‚Äôt be found yet.&lt;/p&gt;
&lt;p&gt;Because we‚Äôre also querying a tenant‚Äôs domain names and modify licenses this script requires some additional scopes for Microsoft Graph. So be sure to have a Global Admin account ready to consent to these scopes.&lt;/p&gt;
&lt;p&gt;Connect-MgGraph -Scopes &amp;ldquo;User.ReadWrite.All&amp;rdquo;, `&lt;br&gt;
&amp;ldquo;Group.ReadWrite.All&amp;rdquo;, `&lt;br&gt;
&amp;ldquo;Domain.ReadWrite.All&amp;rdquo;, `&lt;br&gt;
&amp;ldquo;Organization.ReadWrite.All&amp;rdquo;, `&lt;br&gt;
&amp;ldquo;Directory.ReadWrite.All&amp;rdquo;&lt;/p&gt;
&lt;p&gt;To configure the Microsoft 365 Group the script requires the &lt;strong&gt;ExchangeOnlineManagement&lt;/strong&gt; PowerShell Module in addition to MicrosoftTeams and Microsoft.Graph**.** If you don‚Äôt have it already, you can use the following command to install it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Install-Module ExchangeOnlineManagement&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;how-does-itwork&#34;&gt;How Does it¬†Work?
&lt;/h4&gt;&lt;p&gt;In my &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer/tree/main/Deployment&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub Repository&lt;/a&gt;, you will find a sample file called ‚ÄúVoiceAppList.csv‚Äù. All you need to do is to fill in your information there. And run the script.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1l6dmaJHs10JUjUNsetrVnA.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1l6dmaJHs10JUjUNsetrVnA_hu_730d5432800ea51e.png 480w, https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1l6dmaJHs10JUjUNsetrVnA_hu_f4af86a310a36e69.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;These are the details which can be passed from the CSV file to the script.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DepartmentName&lt;br&gt;
This name of the queue or Team. It will be added to all elements in the call flow: Team, Channel, Resource Accounts, Auto Attendant, Call Queue. For example, if you set ‚ÄúMarketing‚Äù as your DepartmentName, your queue will be called ‚ÄúMarketing CQ‚Äù.&lt;/li&gt;
&lt;li&gt;TopLevelNumber&lt;br&gt;
The number which is called by customers and assigned to the Auto Attendant. It must be an E.164 number. See &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/teams/set-csphonenumberassignment?view=teams-ps#-phonenumber&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; for more information.&lt;/li&gt;
&lt;li&gt;NumberType&lt;br&gt;
This is required for the phone number assignment. Valid values: CallingPlan, OperatorConnect, DirectRouting, &lt;code&gt;$null&lt;/code&gt;¬†. Leave the field empty in the CSV if you don‚Äôt want to assign a number just yet.&lt;/li&gt;
&lt;li&gt;VoiceRoutingPolicyName&lt;br&gt;
This is only required if you want to assign a Direct Routing number. It‚Äôs only needed if the AA should be capable of external transfers later on. It‚Äôs only added as a precaution. You can read how to get the name of your voice routing policies &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/get-csonlinevoiceroutingpolicy?view=skype-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;UsageLocation&lt;br&gt;
This must be the same as the Phone Number if your‚Äôre using Calling Plans. E.g. ‚ÄúCH‚Äù or ‚ÄúGB‚Äù.&lt;/li&gt;
&lt;li&gt;AgentAlertTime&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/set-cscallqueue?view=skype-ps#-agentalerttime&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Set-CsCallQueue (SkypeForBusiness) | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TimeoutThreshold&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/set-cscallqueue?view=skype-ps#-timeoutthreshold&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Set-CsCallQueue (SkypeForBusiness) | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PromptLanguage&lt;br&gt;
This is the language of the text to speech prompt. See &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/fr-fr/powershell/module/skype/get-csautoattendantsupportedlanguage?view=skype-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; MS Learn article for more information. You will be prompted by &lt;code&gt;Out-GridView&lt;/code&gt; if you specify an invalid language Id.&lt;/li&gt;
&lt;li&gt;TimeoutSharedVoicemailPrompt&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/set-cscallqueue?view=skype-ps#-timeoutsharedvoicemailtexttospeechprompt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Set-CsCallQueue (SkypeForBusiness) | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;AfterHoursDisconnectPrompt&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/new-csautoattendantprompt?view=skype-ps#-texttospeechprompt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;New-CsAutoAttendantPrompt (SkypeForBusiness) | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TimeZone&lt;br&gt;
The time zone of the Auto Attendant. See &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/get-csautoattendantsupportedtimezone?view=skype-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; MS Learn article for more information. You will be prompted by &lt;code&gt;Out-GridView&lt;/code&gt;if you specify an invalid time zone Id.&lt;/li&gt;
&lt;li&gt;BusinessHoursStart1&lt;br&gt;
If none of the business hours fields are populated, the script won‚Äôt create an after hours call flow for the Auto Attendant. If only &lt;strong&gt;BusinessHoursStart1&lt;/strong&gt; and &lt;strong&gt;BusinessHoursEnd1&lt;/strong&gt; are populated, the AA will only have one time slot. If &lt;strong&gt;BusinessHoursStart2&lt;/strong&gt; and &lt;strong&gt;BusinessHoursEnd2&lt;/strong&gt; are populated as well, the AA will have two time slots, e.g. lunch break.&lt;br&gt;
E.g. &lt;code&gt;08:00&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;BusinessHoursEnd1&lt;br&gt;
E.g. &lt;code&gt;12:15&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;BusinessHoursStart2&lt;br&gt;
E.g. &lt;code&gt;13:30&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;BusinessHoursEnd2&lt;br&gt;
E.g. &lt;code&gt;17:45&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;DomainSuffix&lt;br&gt;
By default, the script will use your tenant‚Äôs default domain for resource account UPNs or MailNicknames. If you want to change that, you can specify and domain that‚Äôs available in your tenant as &lt;code&gt;-DomainSuffix&lt;/code&gt;¬†. E.g. ‚Äúexample.onmicrosoft.com‚Äù.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Running the script will deploy a simple call flow with an Auto Attendant, business hours and one Call Queue which uses a Voice Enabled Channel for each line in the CSV file. Outside of business hours, the Auto Attendants will play a message and disconnect the call.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1XEyqntZvtv72Qxuzf1aNw.png&#34;
	width=&#34;1073&#34;
	height=&#34;2737&#34;
	srcset=&#34;https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1XEyqntZvtv72Qxuzf1aNw_hu_391dca93c842c9da.png 480w, https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1XEyqntZvtv72Qxuzf1aNw_hu_801189ef241996e8.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;39&#34;
		data-flex-basis=&#34;94px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The Call Queues will time out after the amount of seconds which is defined in &lt;code&gt;-TimeoutThreshold&lt;/code&gt; and then forward the call to shared voicemail once the greeting has been played back.&lt;/p&gt;
&lt;p&gt;The script automatically creates a new Team and a Channel for the Queue as well. I prefer to use dedicated over existing Teams and Channels because not all team members of an existing team are potentially going to answer calls.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1XIhvE9DOsrXKapeR0L3zbA.png&#34;
	width=&#34;982&#34;
	height=&#34;398&#34;
	srcset=&#34;https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1XIhvE9DOsrXKapeR0L3zbA_hu_d9f379042a6a8fef.png 480w, https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1XIhvE9DOsrXKapeR0L3zbA_hu_12bfad10f9e98e75.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;246&#34;
		data-flex-basis=&#34;592px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When a new Team is created and the Microsoft 365 Group has not existed before, the group is by default hidden from Outlook Clients. Because we want the agents of the queue to have access to the group mailbox in Outlook, the script will automatically enable the Follow in Inbox feature and unhide the group from Outlook Clients.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1RQyp3fLFRTkxE2XWTu8Ng.png&#34;
	width=&#34;900&#34;
	height=&#34;671&#34;
	srcset=&#34;https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1RQyp3fLFRTkxE2XWTu8Ng_hu_3e4494ce28775449.png 480w, https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1RQyp3fLFRTkxE2XWTu8Ng_hu_8243c24c6047d723.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;134&#34;
		data-flex-basis=&#34;321px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Shared voicemail is another reason I like to use dedicated groups. With a new group, we can make sure that the only kind of emails received in this group&amp;rsquo;s inbox are voicemails, and we can enable Follow in Inbox without any concern of potentially spamming dozens of other team members by sending all group emails to their personal inboxes.&lt;/p&gt;
&lt;h4 id=&#34;the-script&#34;&gt;The Script
&lt;/h4&gt;&lt;script src=&#34;https://gist.github.com/mozziemozz/8b4640590b85da1e1f296b9ef599ae9a.js&#34;&gt;&lt;/script&gt;

&lt;h4 id=&#34;finishing-up&#34;&gt;Finishing Up
&lt;/h4&gt;&lt;p&gt;While the call flow is technically already able to receive calls after it has been deployed by the script, you‚Äôll still need to add members to the queue. Otherwise, the calls will never be signaled to any agent.&lt;/p&gt;
&lt;p&gt;Remember that only members of the Team who are also Enterprise Voice Enabled will be added to the queue‚Äôs agent list. If you don‚Äôt want to wait a few hours for the agent list to update after you have added the members, you might want to check out &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0&#34; &gt;this&lt;/a&gt; article. It explains how to force sync an agent list of Call Queues.&lt;/p&gt;
&lt;p&gt;As mentioned before, this is a mere example of a very simple call flow. However, if most of your call flows only consist of an Auto Attendant forwarding calls to a Call Queue (Like it‚Äôs common in many small businesses), PowerShell can still be immensely helpful to lay the ground works.&lt;/p&gt;
&lt;p&gt;Naturally, you can still go into TAC and adjust everything to your needs after the script has built your scaffolding. You just won‚Äôt have to bother adding resources accounts and associating them with your voice apps etc.&lt;/p&gt;
&lt;p&gt;Creating Auto Attendants with PowerShell is quite a complex process compared to Call Queues or other Microsoft resources. If you want to adjust my script to your specific needs, a good place to start is the official documentation from Microsoft. As far as I can tell, they recently added updated example scripts which might be helpful.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/new-csautoattendant?view=skype-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;New-CsAutoAttendant (SkypeForBusiness) | Microsoft Learn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/set-csautoattendant?view=skype-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Set-CsAutoAttendant (SkypeForBusiness) | Microsoft Learn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now go ask ChatGPT to write you a script that does the same.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>The Easiest Way to Convert HEIC Images to JPG (on Windows 11)</title>
        <link>https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/</link>
        <pubDate>Fri, 10 Feb 2023 21:10:34 +0000</pubDate>
        
        <guid>https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1zjYShjgSdDz1plzaJGZAdg.png&#34;
	width=&#34;1356&#34;
	height=&#34;1125&#34;
	srcset=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1zjYShjgSdDz1plzaJGZAdg_hu_25ab23cf70ce0656.png 480w, https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1zjYShjgSdDz1plzaJGZAdg_hu_5074657eaf871f95.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;120&#34;
		data-flex-basis=&#34;289px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;By now, most people should have heard about HEIC (or HEIF) and HEVC. HEVC‚Ää‚Äî‚ÄäHigh Efficiency Video Codec is a video codec optimized for 4K content and HEIC is the file name extension for images saved with the High Efficiency Image File Format. Apple iPhones have supported these formats for quite some time now. However, they are mutually exclusive options to each other. Meaning, we can‚Äôt use HEVC for videos and JPG for photos. We can only choose if we want to use the new or the legacy formats in iOS.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/12I41bLPo3IZokvwTQrI6Bw.png&#34;
	width=&#34;750&#34;
	height=&#34;429&#34;
	srcset=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/12I41bLPo3IZokvwTQrI6Bw_hu_6ea776a1894892b6.png 480w, https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/12I41bLPo3IZokvwTQrI6Bw_hu_448fcdf3abd74614.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;174&#34;
		data-flex-basis=&#34;419px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I back up / sync all my photos from my iPhone to OneDrive. Often, these are not just vacation pictures but also photos which I might need to share with others. While most modern systems can display and work with HEIF photos without issues, there are still some scenarios for which a JPG is simply better suited.&lt;/p&gt;
&lt;p&gt;![](*.HEIC image, chances are that the corporate IT department of some companies are lagging behind and might have blocked these AppDownloads. The only solution was to convert the images and send them again.)&lt;/p&gt;
&lt;p&gt;If you bing ‚ÄúHEIC Converter‚Äù you‚Äôll be overwhelmed with the number of websites which claim to offer the best HEIC converter. However, I was looking for a much simpler way. All I want to do is to right click any HEIC image and have it converted to JPG.&lt;/p&gt;
&lt;p&gt;In this &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/launch-windows-terminal-as-admin-from-windows-11-context-menu-8eb2abe7b28b&#34; &gt;post&lt;/a&gt;, I explained how the App &lt;a class=&#34;link&#34; href=&#34;https://www.microsoft.com/store/productId/9PC7BZZ28G0X&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;Custom Context Menu&lt;/strong&gt;&lt;/a&gt; can be used to create your own context menu entries in Windows 11.&lt;/p&gt;
&lt;p&gt;Before we create a custom context menu entry for that, we need to install &lt;a class=&#34;link&#34; href=&#34;https://imagemagick.org/script/download.php#windows&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ImageMagick&lt;/a&gt;. This is a command line tool which lets you do all kinds of image conversion operations.&lt;/p&gt;
&lt;p&gt;Once that is installed, create a new custom context menu entry like in this example.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/17irVXYoTCRb4ec79DqMKZA.png&#34;
	width=&#34;1805&#34;
	height=&#34;1401&#34;
	srcset=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/17irVXYoTCRb4ec79DqMKZA_hu_9abc170864d70968.png 480w, https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/17irVXYoTCRb4ec79DqMKZA_hu_a6df2dd7b81f2ab9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;128&#34;
		data-flex-basis=&#34;309px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Param:&lt;/p&gt;
&lt;p&gt;&amp;ldquo;cmd /c &amp;ldquo;magick &amp;ldquo;{path}&amp;rdquo; &amp;ldquo;{parent}&amp;rdquo;\{name}.jpg&amp;rdquo;&amp;rdquo;&lt;/p&gt;
&lt;p&gt;If you like, you can also create a second one which will remove the original HEIC files after they have been converted to JPG.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1Nm5hmCJ7bnkCXwU8ksqtQ.png&#34;
	width=&#34;1805&#34;
	height=&#34;1401&#34;
	srcset=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1Nm5hmCJ7bnkCXwU8ksqtQ_hu_7d341205afc34e5e.png 480w, https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1Nm5hmCJ7bnkCXwU8ksqtQ_hu_4a154fbccacdda7e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;128&#34;
		data-flex-basis=&#34;309px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Param:&lt;/p&gt;
&lt;p&gt;&amp;ldquo;cmd /c &amp;ldquo;magick &amp;ldquo;{path}&amp;rdquo; &amp;ldquo;{parent}&amp;rdquo;\{name}.jpg &amp;amp; del &amp;ldquo;{path}&amp;rdquo;&amp;rdquo;&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Make sure to copy the params exactly as they are as the double quotes are important.&lt;/p&gt;
&lt;p&gt;Or alternatively, open your custom context menu folder by clicking the folder icon in the upper left corner and create a new *.json file for both the examples.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1uG8cJdskk9ECyaUlIji2g.png&#34;
	width=&#34;1810&#34;
	height=&#34;131&#34;
	srcset=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1uG8cJdskk9ECyaUlIji2g_hu_aaf17301fe2bfaf2.png 480w, https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1uG8cJdskk9ECyaUlIji2g_hu_fc42ca4557127032.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1381&#34;
		data-flex-basis=&#34;3316px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Example: Keep Original Files&lt;/p&gt;
&lt;p&gt;{&lt;br&gt;
&amp;ldquo;title&amp;rdquo;: &amp;ldquo;HEIC to JPG (Keep Original Files)&amp;rdquo;,&lt;br&gt;
&amp;ldquo;exe&amp;rdquo;: &amp;ldquo;\&amp;ldquo;C:\\Windows\\System32\\cmd.exe\&amp;rdquo;&amp;rdquo;,&lt;br&gt;
&amp;ldquo;param&amp;rdquo;: &amp;ldquo;\&amp;ldquo;cmd /c \&amp;ldquo;magick \&amp;quot;{path}\&amp;rdquo; \&amp;quot;{parent}\&amp;rdquo;\\{name}.jpg\&amp;rdquo;\&amp;quot;&amp;quot;,&lt;br&gt;
&amp;ldquo;icon&amp;rdquo;: &amp;ldquo;\&amp;ldquo;C:\\Users\\marti\\OneDrive\\Bilder\\Icons\\Apps\\Gallery.ico\&amp;rdquo;&amp;rdquo;,&lt;br&gt;
&amp;ldquo;acceptExts&amp;rdquo;: &amp;ldquo;.heic .heif&amp;rdquo;,&lt;br&gt;
&amp;ldquo;acceptDirectory&amp;rdquo;: false,&lt;br&gt;
&amp;ldquo;acceptFile&amp;rdquo;: true,&lt;br&gt;
&amp;ldquo;acceptMultipleFilesFlag&amp;rdquo;: 1,&lt;br&gt;
&amp;ldquo;pathDelimiter&amp;rdquo;: &amp;ldquo;&amp;rdquo;,&lt;br&gt;
&amp;ldquo;paramForMultipleFiles&amp;rdquo;: &amp;ldquo;&amp;rdquo;,&lt;br&gt;
&amp;ldquo;index&amp;rdquo;: 1&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;Example: Remove Original Files&lt;/p&gt;
&lt;p&gt;{&lt;br&gt;
&amp;ldquo;title&amp;rdquo;: &amp;ldquo;HEIC to JPG (Remove Original Files)&amp;rdquo;,&lt;br&gt;
&amp;ldquo;exe&amp;rdquo;: &amp;ldquo;\&amp;ldquo;C:\\Windows\\System32\\cmd.exe\&amp;rdquo;&amp;rdquo;,&lt;br&gt;
&amp;ldquo;param&amp;rdquo;: &amp;ldquo;\&amp;ldquo;cmd /c \&amp;ldquo;magick \&amp;quot;{path}\&amp;rdquo; \&amp;quot;{parent}\&amp;rdquo;\\{name}.jpg &amp;amp; del \&amp;quot;{path}\&amp;rdquo;\&amp;quot;\&amp;quot;&amp;quot;,&lt;br&gt;
&amp;ldquo;icon&amp;rdquo;: &amp;ldquo;\&amp;ldquo;C:\\Users\\marti\\OneDrive\\Bilder\\Icons\\Apps\\Gallery.ico\&amp;rdquo;&amp;rdquo;,&lt;br&gt;
&amp;ldquo;acceptExts&amp;rdquo;: &amp;ldquo;.heic .heif&amp;rdquo;,&lt;br&gt;
&amp;ldquo;acceptDirectory&amp;rdquo;: false,&lt;br&gt;
&amp;ldquo;acceptFile&amp;rdquo;: true,&lt;br&gt;
&amp;ldquo;acceptMultipleFilesFlag&amp;rdquo;: 1,&lt;br&gt;
&amp;ldquo;pathDelimiter&amp;rdquo;: &amp;ldquo;&amp;rdquo;,&lt;br&gt;
&amp;ldquo;paramForMultipleFiles&amp;rdquo;: &amp;ldquo;&amp;rdquo;,&lt;br&gt;
&amp;ldquo;index&amp;rdquo;: 2&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;Save and restart your PC.&lt;/p&gt;
&lt;p&gt;The next time you need to quickly convert a HEIC file to JPG, simply right click the file (or files) and select one of the options from your custom context menu.&lt;/p&gt;
&lt;p&gt;Here‚Äôs a short demo of both actions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1XWJSmwZXC8KyVyZkhMlEQ.gif&#34;
	width=&#34;2136&#34;
	height=&#34;1371&#34;
	srcset=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1XWJSmwZXC8KyVyZkhMlEQ_hu_bb18e76d284eecd.gif 480w, https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1XWJSmwZXC8KyVyZkhMlEQ_hu_82a170f68f1743e2.gif 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;373px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1AYTYRznK6xZ8S4vy8ScayA.gif&#34;
	width=&#34;2137&#34;
	height=&#34;1371&#34;
	srcset=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1AYTYRznK6xZ8S4vy8ScayA_hu_44fe4c063e973079.gif 480w, https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1AYTYRznK6xZ8S4vy8ScayA_hu_f2e877c57bbb5696.gif 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;374px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Even though it requires some steps to set up, this is by far the easiest and most convenient way to convert HEIC to JPG. There‚Äôs no need to install any annoying shareware or let alone pay for one.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Teams Auto Attendant and Call Queue Spring-Cleaning</title>
        <link>https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/</link>
        <pubDate>Wed, 01 Feb 2023 20:43:08 +0000</pubDate>
        
        <guid>https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/</guid>
        <description>&lt;p&gt;Are your Teams Auto Attendants, Call Queues and Resource Accounts a mess? Or have you lost track of who created which accounts or Voice Apps? You know what they say‚Ä¶&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Too Many Cooks Spoil the Broth.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1eRzA7AqlES8kea2hT4qYQ.png&#34;
	width=&#34;1800&#34;
	height=&#34;813&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1eRzA7AqlES8kea2hT4qYQ_hu_d03ae5e518582de5.png 480w, https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1eRzA7AqlES8kea2hT4qYQ_hu_46de92bbc0e4195.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;221&#34;
		data-flex-basis=&#34;531px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It‚Äôs not really spring yet but who cares? Cleaning up your environment is always a good thing. Today we‚Äôre talking Teams Phone reporting again. In case you‚Äôve missed some of my previous articles, here‚Äôs an overview of what handy scripts I already released last year.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485&#34; &gt;Report on Teams Call Queue Opt In Status and Assignment Paths&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/find-all-auto-attendants-and-call-queues-a-user-is-associated-with-16710c3adf01&#34; &gt;Find All Auto Attendants and Call Queues a User is Associated with&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154&#34; &gt;Automatically render Microsoft Teams Call Flow Diagrams&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/how-to-export-a-teams-call-flow-to-png-4d38a8c4f183&#34; &gt;How To Export a Teams Call Flow to PNG&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I remember that somebody on social media asked me if it was possible to get a list of all Resource Accounts which are not assigned to any Auto Attendant or Call Queue. That‚Äôs why I wrote this script in December 2022.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer/blob/main/FindUnassignedResourceAccounts.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;M365CallFlowVisualizer/FindUnassignedResourceAccounts.ps1 at main ¬∑ mozziemozz/M365CallFlowVisualizer (github.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This time, I‚Äôve taken it even further and used the M365 Call Flow Visualizer to not only find unused Resource Accounts but also Call Queues and Auto Attendants which are not in use.&lt;/p&gt;
&lt;h4 id=&#34;what-qualifies-as-not-inuse&#34;&gt;What Qualifies as Not in¬†Use?
&lt;/h4&gt;&lt;p&gt;First of all, any Attendant or any Queue which does not have a Resource Account assigned, can‚Äôt be called, or transferred to. They exist, but they‚Äôre useless until a Resource Account is linked. This means that all Queues and Attendants which do not have a Resource Account assigned, will be included in the report.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1CV5FzZbrRUB99oY2E3hSdg.png&#34;
	width=&#34;1775&#34;
	height=&#34;203&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1CV5FzZbrRUB99oY2E3hSdg_hu_d1e9fdca021b967b.png 480w, https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1CV5FzZbrRUB99oY2E3hSdg_hu_c3555177210a6fa4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;874&#34;
		data-flex-basis=&#34;2098px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The concept of how Resource Accounts work in combination with Queues and Attendants is explained in detail in the article linked below.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489&#34; &gt;Everything You Ever Wanted to Know About Teams Resource Accounts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Next, the script checks for all Auto Attendants and Call Queues which have a Resource Account without Phone Number assigned. Of course, these are often nested behind top-level Voice Apps and thus can be called without issues. My new script runs the Visualizer (without creating any diagrams) for all top-level Voice Apps (Attendants and Queues with phone numbers) to create a list of all their nested Voice Apps.&lt;/p&gt;
&lt;p&gt;Because the Visualizer is also able to read and process user calling settings, it will even detect if a Voice App is set as a user‚Äôs forwarding or unanswered target and thus also add it to the list of all nested Voice Apps.&lt;/p&gt;
&lt;p&gt;If this list does not contain the current Voice App, it will be included in the report as well. In complex environments, this will save you a lot of time since you don‚Äôt need to click through all your Voice Apps manually to check them.&lt;/p&gt;
&lt;p&gt;Last but not least, it uses the same code bits from the original ‚ÄúFindUnassignedResourceAccounts.ps1‚Äù script to add any Resource Account which is not associated with any Voice App to the report.&lt;/p&gt;
&lt;h4 id=&#34;caveats&#34;&gt;Caveats
&lt;/h4&gt;&lt;p&gt;There‚Äôs one caveat though. In theory, you could have a Voice App (or multiple) which are only called internally by their SIP Address. In this case, the Voice App doesn‚Äôt need to be nested anywhere and it doesn‚Äôt need a phone number either. All it needs is to have a Resource Account assigned. These Apps will be included in the report as well, so make sure to be extra careful before you actually delete anything.&lt;/p&gt;
&lt;h4 id=&#34;under-thehood&#34;&gt;Under the¬†Hood
&lt;/h4&gt;&lt;p&gt;During testing, I noticed that Voice Apps which are nested inside a Holiday Call Handling were not detected by the script either. I‚Äôve updated my M365 Call Flow Visualizer so that it will now also expand Auto Attendants and Call Queues which are part of a Holiday transfer action.&lt;/p&gt;
&lt;p&gt;Initially, I thought I‚Äôd only be able to do this for transfers to Call Queues and Auto Attendants. But with some persistence I was able to also display IVRs which are configured as part of a Holiday Call Handling! Yes, really! This means that the Visualizer can now render every possible call flow which can be configured. At least to my knowledge.&lt;/p&gt;
&lt;p&gt;Here‚Äôs an example of the new functionality. We can see that the Call Handling for &lt;strong&gt;National Swiss Holiday&lt;/strong&gt; forwards to the Call Queue &lt;strong&gt;Ext Pstn Fwd Test&lt;/strong&gt; inside the Holiday table. Unfortunately, linking both CQ Nodes together, would have messed up the left-right direction of the subgraph and instead made it a top-down one. Therefore, I had to get creative and just link the call flow of the Voice App to the Holiday Subgraph. As an exception, there are now two nodes for the &lt;strong&gt;Call Queue&lt;/strong&gt; &lt;strong&gt;Ext Pstn Fwd Test&lt;/strong&gt;. One is inside the Holiday table, and one is placed in the main diagram.&lt;/p&gt;
&lt;p&gt;It‚Äôs basically the same for Holiday IVRs (Voice Menus). They include the name of the Holiday Call Handling in which they are configured. This makes it a little easier to spot the corresponding node in the main diagram.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/158SyiEyoyXEYRfJ7qCgaw.png&#34;
	width=&#34;2034&#34;
	height=&#34;1696&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/158SyiEyoyXEYRfJ7qCgaw_hu_69e4c6930acba2ef.png 480w, https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/158SyiEyoyXEYRfJ7qCgaw_hu_8dcb814b266c66aa.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;119&#34;
		data-flex-basis=&#34;287px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you want to try this for yourself, you need to add the following parameters when you call the script.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-ShowNestedHolidayCallFlows $true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-ShowNestedHolidayIVRs $true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you‚Äôre interested in learning more about how Holidays work in Teams, consider giving this article a read.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743&#34; &gt;Everything You Ever Wanted to Know About Teams Holidays&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;example-output&#34;&gt;Example Output
&lt;/h4&gt;&lt;p&gt;The script will generate a CSV file containing all unused components including the reason as to why they‚Äôre not in use.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1bhf0biV7bVukIdpxKpnfA.png&#34;
	width=&#34;1619&#34;
	height=&#34;618&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1bhf0biV7bVukIdpxKpnfA_hu_a37a2c6497c21cfc.png 480w, https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1bhf0biV7bVukIdpxKpnfA_hu_6ba4b255c43bf962.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;261&#34;
		data-flex-basis=&#34;628px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I struggled a bit to find a perfect naming for all the columns. The column ‚ÄúAssociation‚Äù tells you whether the Voice App has a Resource Account assigned or if the Resource Account is assigned to a Voice App. The other ones should be self-explanatory.&lt;/p&gt;
&lt;h4 id=&#34;free-download&#34;&gt;Free Download
&lt;/h4&gt;&lt;p&gt;The script is available for free in my &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub Repo&lt;/a&gt; of the M365 Call Flow Visualizer. Make sure that you clone it or download the whole repository as Zip file since there are dependencies.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer/blob/main/FindUnusedVoiceAppsAndResourceAccounts.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;M365CallFlowVisualizer/FindUnusedVoiceAppsAndResourceAccounts.ps1 at main ¬∑ mozziemozz/M365CallFlowVisualizer (github.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Please use this script at your own risk, even though the script does not change or delete anything in your environment. (It only uses &lt;code&gt;Get-*&lt;/code&gt; Cmdlets). Just promise to make sure that you verify that any Auto Attendant or Call Queues are indeed not needed anymore before you hit that delete button. Even if you still have to manually confirm and delete unused Voice Apps, I still hope that the output of the script makes it easier for you to identify them at scale.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Forward SMS Verification Codes From iPhone To a Windows PC</title>
        <link>https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/</link>
        <pubDate>Sun, 27 Nov 2022 12:46:25 +0000</pubDate>
        
        <guid>https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/</guid>
        <description>&lt;p&gt;A few days ago, I wrote ‚Äú&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6&#34; &gt;How To Handle Password and 2FA Madness Like a Pro&lt;/a&gt;‚Äù. In this article I explained why I think it‚Äôs better to use a full-fledged password manager instead of a basic Authenticator App such as Microsoft or Google Authenticator to handle your 2FA codes.&lt;/p&gt;
&lt;p&gt;These types of apps work well when the service for which you want to enable 2FA allows you to add a secret key to your authenticator app. But what about services which don‚Äôt support such apps and instead only send you an SMS with a verification code? Unfortunately, there are still some services which will only allow one-time codes sent by SMS.&lt;/p&gt;
&lt;p&gt;If you‚Äôre using an iPhone and a MAC for example, this shouldn‚Äôt be too big of an issue since you can seamlessly sync your clipboard across devices (at least that‚Äôs what I‚Äôve heard).&lt;/p&gt;
&lt;p&gt;If you‚Äôre using an Android phone together with Phone Link on Windows, you can easily access your SMS from there. But if you use an iPhone and a Windows PC, there‚Äôs no way to seamlessly transfer a code received by SMS on your iPhone to your PC.&lt;/p&gt;
&lt;p&gt;In &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/&#34; &gt;11 Must-Have Apps for Windows 11&lt;/a&gt; I wrote about Clipt which allows you to transfer content between an iPhone and a Windows PC through their Chromium extension.&lt;/p&gt;
&lt;p&gt;When you use this method, you must open the message containing the verification code and manually select and copy it. Once the code is in your iPhone&amp;rsquo;s clipboard, you need to open Clipt and click Send. The copied content will be added to your PCs clipboard automatically and you‚Äôre ready to paste it.&lt;/p&gt;
&lt;p&gt;I didn‚Äôt quite like the manual steps involved on the iPhone. So I thought why not tinker around with Siri Shortcuts again, like I did in &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/use-siri-shortcuts-to-make-microsoft-graph-requests-3804f80adbfa&#34; &gt;this&lt;/a&gt; article.&lt;/p&gt;
&lt;h3 id=&#34;siri-automation&#34;&gt;Siri Automation
&lt;/h3&gt;&lt;h4 id=&#34;building-the-automation&#34;&gt;Building the Automation
&lt;/h4&gt;&lt;p&gt;The good thing is that there is a trigger for &lt;em&gt;‚ÄúWhen I get a message containing &lt;keyword&gt;‚Äù.&lt;/em&gt; The bad thing is that there‚Äôs no way of running it truly automated. You will still need to confirm running the automation each time it‚Äôs triggered.&lt;/p&gt;
&lt;p&gt;But that‚Äôs only one manual interaction on the iPhone compared to four with Clipt (Open messages, copy code, open clipt, send content).&lt;/p&gt;
&lt;p&gt;I set the trigger to match all messages which contain the string &lt;strong&gt;‚Äúverification code‚Äù&lt;/strong&gt;. If that should not work for the messages you receive, you can adjust it to your liking or create multiple automations with different words.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1hvOkUTfWoJtXfbbsied89g.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1hvOkUTfWoJtXfbbsied89g_hu_2d3b82805d8368d6.png 480w, https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1hvOkUTfWoJtXfbbsied89g_hu_cf99e3b124afba09.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Let‚Äôs take a look at the actions. First, we‚Äôre going to use the regular expression &lt;code&gt;\d{6,}&lt;/code&gt; to match all strings which consist of only numbers and are at least six digits long.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1FUqHjHbQq1UXAqH7gkHug.png&#34;
	width=&#34;1361&#34;
	height=&#34;263&#34;
	srcset=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1FUqHjHbQq1UXAqH7gkHug_hu_6ff2be61f073fb62.png 480w, https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1FUqHjHbQq1UXAqH7gkHug_hu_cb3a1ba44a67b79d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;517&#34;
		data-flex-basis=&#34;1241px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Then we‚Äôre going to create a note in Apple Notes with the extracted verification code. After 60 seconds, we‚Äôre going to delete the note.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1KUBIIWC2Zk7hIm6K29sD2A.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1KUBIIWC2Zk7hIm6K29sD2A_hu_5483008a953500fb.png 480w, https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1KUBIIWC2Zk7hIm6K29sD2A_hu_fe37ea6ef61e7083.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;configuring-ios&#34;&gt;Configuring iOS
&lt;/h4&gt;&lt;p&gt;You might ask yourself what good does it do if the verification code is stored in Apple Notes when I want to access it on my PC?&lt;/p&gt;
&lt;p&gt;If you configure your Outlook.com or work or school account as the default account for Notes in iOS settings, your notes will automatically synchronize with Microsoft Sticky Notes. Of course, I‚Äôm assuming that you‚Äôve already added a Microsoft Account to iOS at this point.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1eK5EzyD2ps2osajFS6Zmw.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1eK5EzyD2ps2osajFS6Zmw_hu_4cf78c58ebabd855.png 480w, https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1eK5EzyD2ps2osajFS6Zmw_hu_e42466a8ee32fb44.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;demo-of-the-automation-inaction&#34;&gt;Demo of the Automation in¬†Action
&lt;/h4&gt;&lt;p&gt;To show off the automation, I just sent myself an SMS from Skype to my mobile number containing the following text.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here‚Äôs your verification code: 456789. Thanks for using it.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I added the code between other text and added a full stop right after the code to demonstrate how powerful regular expressions are.&lt;/p&gt;
&lt;p&gt;This is what it looks like on an iPhone. First there will be a notification for the new message. Shortly after, the automation will be triggered, and we‚Äôll need to click it, and then click &lt;em&gt;‚ÄúAusf√ºhren‚Äù&lt;/em&gt; (German for &lt;em&gt;‚ÄúRun‚Äù&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1Cd58DqlhiHJsmyJ43qnR1Q.gif&#34;
	width=&#34;886&#34;
	height=&#34;1920&#34;
	srcset=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1Cd58DqlhiHJsmyJ43qnR1Q_hu_1b64ad0f688fb38f.gif 480w, https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1Cd58DqlhiHJsmyJ43qnR1Q_hu_a685a22f18673918.gif 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;accessing-copied-codes-onwindows&#34;&gt;Accessing Copied Codes on¬†Windows
&lt;/h4&gt;&lt;p&gt;There are many Apps from which you access to your Sticky Notes on Windows.&lt;/p&gt;
&lt;p&gt;The most obvious one is &lt;strong&gt;Sticky Notes&lt;/strong&gt; of course.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1gj6ozy5v4BuGa4RWlxETNw.png&#34;
	width=&#34;648&#34;
	height=&#34;1035&#34;
	srcset=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1gj6ozy5v4BuGa4RWlxETNw_hu_4a3b4d205cfbe0d5.png 480w, https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1gj6ozy5v4BuGa4RWlxETNw_hu_3b81f501717a1b9c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;62&#34;
		data-flex-basis=&#34;150px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;You can also access them in &lt;strong&gt;Outlook&lt;/strong&gt; or &lt;strong&gt;Outlook on the Web&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1UOcsgxeQRRwdEEur32BwRg.png&#34;
	width=&#34;1684&#34;
	height=&#34;873&#34;
	srcset=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1UOcsgxeQRRwdEEur32BwRg_hu_2a9c910007c55137.png 480w, https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1UOcsgxeQRRwdEEur32BwRg_hu_9583e154b3ef9913.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;462px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;And finally, they‚Äôre also available in your &lt;strong&gt;OneNote&lt;/strong&gt; Feed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1MYZQMg0ggzjHrsx6lBk0w.png&#34;
	width=&#34;471&#34;
	height=&#34;1103&#34;
	srcset=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1MYZQMg0ggzjHrsx6lBk0w_hu_3360fffe8c5abb41.png 480w, https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1MYZQMg0ggzjHrsx6lBk0w_hu_3aeec37f1b64e249.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;42&#34;
		data-flex-basis=&#34;102px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;copying-the-verification-code&#34;&gt;Copying the Verification Code
&lt;/h4&gt;&lt;p&gt;Unfortunately, Stick Notes does not support copying the contents of a note from a right-click.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1T3wMGAbPW9enWGJClr1Q.png&#34;
	width=&#34;697&#34;
	height=&#34;489&#34;
	srcset=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1T3wMGAbPW9enWGJClr1Q_hu_b03123b41fea6216.png 480w, https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1T3wMGAbPW9enWGJClr1Q_hu_2d21adad88458b6c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;342px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;We need to open the note, select the text, and then copy it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1vrDPnDLy9MS7pR4ynTxCEw.png&#34;
	width=&#34;462&#34;
	height=&#34;471&#34;
	srcset=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1vrDPnDLy9MS7pR4ynTxCEw_hu_d09fc54fdc7d9ae5.png 480w, https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1vrDPnDLy9MS7pR4ynTxCEw_hu_66c018ef487da2b9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;98&#34;
		data-flex-basis=&#34;235px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a class=&#34;link&#34; href=&#34;https://apps.microsoft.com/store/detail/outlook-for-windows/9NRX63209R7B&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;new Outlook&lt;/a&gt; or Outlook on the Web or OneNote allow you to copy the contents of the note using a right-click though.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1w0YaPyh8JvP8zGVeXsMag.png&#34;
	width=&#34;620&#34;
	height=&#34;620&#34;
	srcset=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1w0YaPyh8JvP8zGVeXsMag_hu_e82a42ac7834e670.png 480w, https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1w0YaPyh8JvP8zGVeXsMag_hu_787f2755e0c01937.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This also works well in the OneNote (for Windows 10) Feed. While it does work in the new, &lt;a class=&#34;link&#34; href=&#34;https://techcommunity.microsoft.com/t5/microsoft-365-blog/refreshing-the-onenote-app-on-windows/ba-p/3401914&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;refreshed version of OneNote&lt;/a&gt;, it was quite buggy and sluggish for me. I‚Äôll let that slide since that‚Äôs an Insider Build.&lt;/p&gt;
&lt;p&gt;OneNote for Windows 10 is not listed in Microsoft Store Search anymore, but you can still get it from &lt;a class=&#34;link&#34; href=&#34;https://www.microsoft.com/store/productId/9WZDNCRFHVJL&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; link. I will keep using OneNote for Windows 10 until the new OneNote also supports vertical sections in &lt;a class=&#34;link&#34; href=&#34;https://www.microsoft.com/en-us/microsoft-365/roadmap?filters=&amp;amp;searchterms=100492&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;March 2023&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1FhUKm1MGidjVrNEd74YA.png&#34;
	width=&#34;463&#34;
	height=&#34;746&#34;
	srcset=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1FhUKm1MGidjVrNEd74YA_hu_89b1522215d5c61a.png 480w, https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1FhUKm1MGidjVrNEd74YA_hu_c7df97196ada57b6.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;62&#34;
		data-flex-basis=&#34;148px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Once the code has been copied from Outlook or OneNote for Windows 10, it will be in your clipboard as plain text without any trailing whitespaces or line breaks so that you‚Äôre ready to paste it wherever you need it.&lt;/p&gt;
&lt;p&gt;This was not the case with the new OneNote App. In this case there were two line breaks before the code and one after.&lt;/p&gt;
&lt;p&gt;While it‚Äôs theoretically possible to also copy the code from the classic Outlook App, the experience is not the same as with the modern Outlook or OWA.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1HXrJSz8Q8JxGFYiZ0kGvCw.png&#34;
	width=&#34;1007&#34;
	height=&#34;308&#34;
	srcset=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1HXrJSz8Q8JxGFYiZ0kGvCw_hu_dd662b68786d11a9.png 480w, https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1HXrJSz8Q8JxGFYiZ0kGvCw_hu_aa0d53d8d3bfbff1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;326&#34;
		data-flex-basis=&#34;784px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When you copy the code from there, it will include additional, unwanted metadata such as the subject and date created.&lt;/p&gt;
&lt;p&gt;Subject Created Categories&lt;/p&gt;
&lt;p&gt;456789 So 27.11.2022 11:59&lt;/p&gt;
&lt;p&gt;I like the experience of copying the verification code from the modern Outlook or OWA the best. It will only show Sticky Notes and allows me to copy the raw code by a right-click. I usually have Outlook open all day anyway so it‚Äôs very convenient to just switch from inbox to notes to copy a new verification code.&lt;/p&gt;
&lt;p&gt;Because the note is only used to store a temporary verification code and we want to avoid clutter, the Automation will remove the note 60 seconds after it has been created. This should give you plenty of time to copy it from your notes.&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h3&gt;&lt;p&gt;Both methods, Clipt and Automation + Sticky Notes require manual user interaction, so none of them are perfect. Clipt requires you to do more manual tasks on the phone and Sticky Notes needs more actions on Windows. I like using the Automation + Sticky Notes more because I believe that working on a Desktop with mouse and keyboard is still king in terms of how fast things can get done. I also like that no additional apps or services are required, especially that no Chromium Extension which runs in the background, even when the browser is closed is needed.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Change Business Hours of a Teams Auto Attendant with PowerShell</title>
        <link>https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/</link>
        <pubDate>Tue, 23 Aug 2022 18:21:59 +0000</pubDate>
        
        <guid>https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/</guid>
        <description>&lt;p&gt;Changing the business hours on a Teams Auto Attendant can be quite cumbersome. Especially if you have multiple hours a day, like a lunch break. If you‚Äôve been working long enough with Teams, you probably remember how easy it was in Skype for Business Online Admin Center. There, we could just select opening hours from a timetable and be done with it. Nowadays we have to select the start and end time from a drop-down list for each day individually.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/1OJWoGKSIPltflYAjr6K4Q.png&#34;
	width=&#34;1235&#34;
	height=&#34;1086&#34;
	srcset=&#34;https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/1OJWoGKSIPltflYAjr6K4Q_hu_598c6903f5ee6bca.png 480w, https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/1OJWoGKSIPltflYAjr6K4Q_hu_9aec423ed1096f32.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;113&#34;
		data-flex-basis=&#34;272px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;To speed up this process, I‚Äôve created a PowerShell Script. Right now, there are no parameters. After all, the idea is to be quicker and not make you pick times from a drop-down in PowerShell rather than in TAC.&lt;/p&gt;
&lt;p&gt;By default, the script will allow you to set a time range for mornings and one for afternoons. These are defined in the variables &lt;code&gt;$tr1&lt;/code&gt; and &lt;code&gt;$tr2&lt;/code&gt; on line 7 and 8. You can adjust them to your liking, as long as they don‚Äôt overlap each other. Only 15minute increments are supported. You must use the 24-hour clock system.&lt;/p&gt;
&lt;p&gt;Edit (08.09.2022): I‚Äôve updated line 16 to look for the CallFlowId of the Auto Attendants CallHandlingAssociation with type ‚ÄúAfterHours‚Äù instead of the CallFlow Name matching ‚ÄúAfter hours call flow‚Äù.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/389d9107fdd2cf5f0727c331ec27d636.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Once you run the script, the defined time ranges will be applied to the Auto Attendant which was selected from the list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/19tJFZYDGgLaWooIZxwZXUQ.png&#34;
	width=&#34;1472&#34;
	height=&#34;382&#34;
	srcset=&#34;https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/19tJFZYDGgLaWooIZxwZXUQ_hu_c59ac7fa5093facc.png 480w, https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/19tJFZYDGgLaWooIZxwZXUQ_hu_2fa92cc125f0f573.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;385&#34;
		data-flex-basis=&#34;924px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This works for both, Auto Attendants which already have business hours configured and Auto Attendants which didn‚Äôt have business hours already. Your configured after hours call flow (e.g. forward to shared voicemail etc.) will not be impacted/overwritten. It will stay exactly the same as it was.&lt;/p&gt;
&lt;p&gt;If your call flow has different business hours for specific days, just add more &lt;code&gt;$tr&lt;/code&gt; variables and make sure to add/change them on line 40. For example, if your business closes early on Fridays but has no lunch break, create a &lt;code&gt;$tr3&lt;/code&gt; variable and change &lt;code&gt;-FridayHours @($tr1,$tr2)&lt;/code&gt; to &lt;code&gt;-FridayHours @($tr3)&lt;/code&gt;¬†.&lt;/p&gt;
&lt;p&gt;By default, the script will not add any business hours for Saturday and Sunday. This means that the after hours call flow will be active on the weekend. If you also want to configure hours for these days, add them using the switch &lt;code&gt;-SaturdayHours&lt;/code&gt; followed by the array &lt;code&gt;@($tr4,$tr5)&lt;/code&gt;¬†.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/1Dwi1PcIhDweQdaV4OSw64w.png&#34;
	width=&#34;713&#34;
	height=&#34;133&#34;
	srcset=&#34;https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/1Dwi1PcIhDweQdaV4OSw64w_hu_8df12f6276101568.png 480w, https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/1Dwi1PcIhDweQdaV4OSw64w_hu_45b1407760c28d87.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;536&#34;
		data-flex-basis=&#34;1286px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;On a final note, when changing business hours via PowerShell, we must use the &lt;code&gt;-Complement&lt;/code&gt; switch. This will invert the time ranges. Meaning that the after hours call flow will be active during times which are outside of what is shown on the timetable. TAC displays the business hours, during which the Auto Attendant is open but it does so on the after hours call flow page. This can be a little misleading. When business hours are set through TAC, the complement flag is automatically enabled.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/12hwGZALSqgnj9JLZEmK8g.png&#34;
	width=&#34;837&#34;
	height=&#34;278&#34;
	srcset=&#34;https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/12hwGZALSqgnj9JLZEmK8g_hu_96ef7199c8a2f67f.png 480w, https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/12hwGZALSqgnj9JLZEmK8g_hu_4543d0ebf638ce3f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;301&#34;
		data-flex-basis=&#34;722px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I hope this helps you save some time as well.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>How To Add a New Domain to M365 with MS Graph PowerShell</title>
        <link>https://heusser.pro/p/how-to-add-a-new-domain-to-m365-with-ms-graph-powershell-e6b41c02bfa3/</link>
        <pubDate>Thu, 21 Jul 2022 15:16:51 +0000</pubDate>
        
        <guid>https://heusser.pro/p/how-to-add-a-new-domain-to-m365-with-ms-graph-powershell-e6b41c02bfa3/</guid>
        <description>&lt;p&gt;As you might have &lt;a class=&#34;link&#34; href=&#34;https://techcommunity.microsoft.com/t5/microsoft-entra-azure-ad-blog/azure-ad-change-management-simplified/ba-p/2967456&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;heard&lt;/a&gt;, Microsoft will soon be deprecating the MSOnline PowerShell Module. Even though Microsoft is giving us a little bit more time (now after December 2022 instead of June 2022) it‚Äôs time to move on and start working with the new, Microsoft.Graph PowerShell Module. I‚Äôm already using it in my &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154&#34; &gt;Microsoft 365 Call Flow Visualizer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Today, I updated a Direct Routing provisioning script which I wrote at work. This script does everything that‚Äôs needed to set up Direct Routing in a tenant.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add the FQDN of the SBC as a new Domain to the customer tenant&lt;/li&gt;
&lt;li&gt;Add the TXT verification DNS record to our Azure DNS zone&lt;/li&gt;
&lt;li&gt;Verify/confirm the domain in the customer tenant&lt;/li&gt;
&lt;li&gt;Create a resource account to &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-activate-fqdn-of-online-pstn-gateway-without-license-85e9ee4ca4cc&#34; &gt;activate the domain&lt;/a&gt; without a license&lt;/li&gt;
&lt;li&gt;Add the gateway, PSTN usage, voice route and voice routing policy&lt;/li&gt;
&lt;li&gt;Remove the activation user/resource account&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;prepare-graph-powershell&#34;&gt;Prepare Graph PowerShell
&lt;/h4&gt;&lt;p&gt;Before you can use Microsoft.Graph PowerShell you need to install the Module.&lt;/p&gt;
&lt;p&gt;Install-Module Microsoft.Graph&lt;/p&gt;
&lt;p&gt;This will install all Graph Modules. It‚Äôs also possible to install only select modules (e.g. &lt;code&gt;Install-Module Microsoft.Graph.Users&lt;/code&gt;) but since many modules have dependencies (e.g. Authentication etc.) it‚Äôs easier to just install all Modules from the get-go.&lt;/p&gt;
&lt;p&gt;When you connect to Microsoft Graph PowerShell you need to provide the required scopes. For the Cmdlets shown in t his blog article you need at least the following:&lt;/p&gt;
&lt;p&gt;Connect-MgGraph -Scopes &amp;ldquo;User.ReadWrite.All&amp;rdquo;,&amp;ldquo;Domain.ReadWrite.All&amp;rdquo;&lt;/p&gt;
&lt;p&gt;If you connect to Graph PowerShell for the first time, you will need to grant consent for the defined scopes. I‚Äôve also defined the scope ‚ÄúGroup.ReadWrite.All‚Äù, that‚Äôs why it also requests access for Read and write all groups.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-add-a-new-domain-to-m365-with-ms-graph-powershell-e6b41c02bfa3/1SX5hicBOkwEmlZmJp8tBw.png&#34;
	width=&#34;541&#34;
	height=&#34;815&#34;
	srcset=&#34;https://heusser.pro/p/how-to-add-a-new-domain-to-m365-with-ms-graph-powershell-e6b41c02bfa3/1SX5hicBOkwEmlZmJp8tBw_hu_aea9d3267614274e.png 480w, https://heusser.pro/p/how-to-add-a-new-domain-to-m365-with-ms-graph-powershell-e6b41c02bfa3/1SX5hicBOkwEmlZmJp8tBw_hu_bbaaa8daba2d81ae.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;66&#34;
		data-flex-basis=&#34;159px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Here are the old MSOnline Cmdlets vs the new Microsoft.Graph Cmdlets for the relevant actions.&lt;/p&gt;
&lt;h4 id=&#34;add-thedomain&#34;&gt;Add the¬†Domain
&lt;/h4&gt;&lt;p&gt;MSol&lt;/p&gt;
&lt;p&gt;New-MsolDomain -Name &amp;ldquo;sbc001.domain.com&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Mg&lt;/p&gt;
&lt;p&gt;New-MgDomain -BodyParameter @{Id=&amp;ldquo;sbc001domain.com&amp;rdquo;;IsDefault=&amp;ldquo;False&amp;rdquo;}&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IsDefault&lt;/code&gt; is optional. The domain won‚Äôt be added as the new default domain, even if you don‚Äôt include this key in the hash table. You can still include it though, it might give you some sort of comfort.&lt;/p&gt;
&lt;h4 id=&#34;get-the-verification-text&#34;&gt;Get the Verification Text
&lt;/h4&gt;&lt;p&gt;This was the only one which was a bit tricky since the actual value is hidden in the ‚ÄúAdditionalProperties‚Äù property which won‚Äôt be shown in the output.&lt;/p&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-add-a-new-domain-to-m365-with-ms-graph-powershell-e6b41c02bfa3/14I3XovOid37okdOGNmCHYw.png&#34;
	width=&#34;1486&#34;
	height=&#34;113&#34;
	srcset=&#34;https://heusser.pro/p/how-to-add-a-new-domain-to-m365-with-ms-graph-powershell-e6b41c02bfa3/14I3XovOid37okdOGNmCHYw_hu_ce92c98eeae2d915.png 480w, https://heusser.pro/p/how-to-add-a-new-domain-to-m365-with-ms-graph-powershell-e6b41c02bfa3/14I3XovOid37okdOGNmCHYw_hu_2724767a5d9a2585.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1315&#34;
		data-flex-basis=&#34;3156px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If we use &lt;code&gt;| Format-Lsit&lt;/code&gt; or &lt;code&gt;| Select-Object *&lt;/code&gt; we will see that there‚Äôs a property called ‚ÄúAdditionalProperties‚Äù.&lt;/p&gt;
&lt;p&gt;This code, however, will store the verification code in the &lt;code&gt;$MgVerificationCode&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;Mg&lt;/p&gt;
&lt;p&gt;$MgVerificationCode = (Get-MgDomainVerificationDnsRecord -DomainId &amp;ldquo;sbc001.domain.com&amp;rdquo; | Where-Object {$_.RecordType -eq &amp;ldquo;Txt&amp;rdquo;}).AdditionalProperties.text&lt;/p&gt;
&lt;p&gt;Msol&lt;/p&gt;
&lt;p&gt;With Msol, the code did not include the first ‚ÄúMS=‚Äù why I needed to add it to the variable before getting the value. This is not the case with Graph anymore.&lt;/p&gt;
&lt;p&gt;$MsolVerificationCode = &amp;ldquo;MS=&amp;quot;+ (Get-MsolDomainVerificationDNS -DomainName $FQDNs.Values.FQDN).Label.Split(&amp;rdquo;.&amp;quot;)[0]&lt;/p&gt;
&lt;h4 id=&#34;verify-thedomain&#34;&gt;Verify the¬†Domain
&lt;/h4&gt;&lt;p&gt;If you use an Azure DNS zone you can now use Az.DNS to create a new TXT record which contains &lt;code&gt;$MgVerificationCode&lt;/code&gt; as the value.&lt;/p&gt;
&lt;p&gt;New-AzDnsRecordSet -Name &amp;ldquo;sbc001&amp;rdquo; -RecordType TXT -ResourceGroupName &amp;ldquo;ResourceGroupX&amp;rdquo; -TTL 3600 -ZoneName &amp;ldquo;domain.com&amp;rdquo; -DnsRecords (New-AzDnsRecordConfig -Value $MgVerificationCode)&lt;/p&gt;
&lt;p&gt;Once the record is created, we can confirm the domain. This usually works within seconds if you use Azure DNS.&lt;/p&gt;
&lt;p&gt;Mg&lt;/p&gt;
&lt;p&gt;Confirm-MgDomain -DomainId &amp;ldquo;sbc001.domain.com&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Msol&lt;/p&gt;
&lt;p&gt;Confirm-MsolDomain -DomainName &amp;ldquo;sbc001.domain.com&amp;rdquo;&lt;/p&gt;
&lt;h4 id=&#34;remvoe-theuser&#34;&gt;Remvoe the¬†User
&lt;/h4&gt;&lt;p&gt;When everything is set up, the activation user can be removed again.&lt;/p&gt;
&lt;p&gt;Mg&lt;/p&gt;
&lt;p&gt;Remove-MgUser -UserId $UpnAA&lt;/p&gt;
&lt;p&gt;Msol&lt;/p&gt;
&lt;p&gt;Remove-MsolUser -UserPrincipalName $UpnAA -Force&lt;/p&gt;
&lt;p&gt;While we needed to specify the &lt;code&gt;-Force&lt;/code&gt; parameter with MSol, we don‚Äôt need to specify anything when using Microsoft Graph. If you wish to make the script interactive and have a user confirm the deletion when using &lt;code&gt;Remove-MgUser&lt;/code&gt;, you can use the &lt;code&gt;-Confirm&lt;/code&gt; parameter instead.&lt;/p&gt;
&lt;p&gt;That‚Äôs all for today. Don‚Äôt fear Microsoft.Graph and happy scripting everybody!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Create a Dynamic Azure AD Group with all Teams Phone Standard Licensed Users</title>
        <link>https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/</link>
        <pubDate>Mon, 28 Mar 2022 15:01:16 +0000</pubDate>
        
        <guid>https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/</guid>
        <description>&lt;p&gt;When it comes to Azure AD and licensing, we usually use Azure AD Groups to assign certain licenses to group members. It‚Äôs an effective way to assign different licenses to different teams within your organization. For example, you could have a group which assigns a Microsoft 365 E5 license to all the IT-Staff.&lt;/p&gt;
&lt;p&gt;Is there a need to do the opposite? Add all users who have a specific service plan assigned to an Azure AD group? Although this scenario might not be as common as the first one, there‚Äôs certainly a use case for it.&lt;/p&gt;
&lt;p&gt;Think about a Teams call queue in a small to mid-sized firm which distributes incoming calls to, let‚Äôs say 5‚Äì10 call agents. If none of these agents are able to answer the call within a certain time, the call is then escalated to a second call queue which contains all the company‚Äôs Teams Phone Standard enabled users. A call queue can have up to &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/microsoftteams/create-a-phone-system-call-queue#teams-channel&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;two hundred&lt;/a&gt; call agents, if they‚Äôre added via a Teams Channel or a group.&lt;/p&gt;
&lt;p&gt;Instead of adding all phone enabled users manually we can create an Azure AD group which uses a dynamic query to include all users which have the service plan ‚ÄúMCOEV‚Äù assigned.&lt;/p&gt;
&lt;h4 id=&#34;heres-how-to-doit&#34;&gt;Here‚Äôs how to do¬†it
&lt;/h4&gt;&lt;p&gt;First, head over to &lt;a class=&#34;link&#34; href=&#34;https://portal.azure.com/#blade/Microsoft_AAD_IAM/GroupsManagementMenuBlade/AllGroups&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;portal.azure.com&lt;/a&gt; and go to Azure AD, Groups. Then click New group.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1gDIaXRlNKUOM1U71nGgEvg.png&#34;
	width=&#34;1422&#34;
	height=&#34;324&#34;
	srcset=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1gDIaXRlNKUOM1U71nGgEvg_hu_5a642efc89e530c0.png 480w, https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1gDIaXRlNKUOM1U71nGgEvg_hu_e8e3d030302e7448.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;438&#34;
		data-flex-basis=&#34;1053px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;You can choose between a Microsoft 365 Group or a Security Group. For the Membership type, choose Dynamic User and then Add dynamic query.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1myN3vL9tTOdiDlRKgoQdyQ.png&#34;
	width=&#34;1035&#34;
	height=&#34;892&#34;
	srcset=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1myN3vL9tTOdiDlRKgoQdyQ_hu_dd6949d0c2dbcfdc.png 480w, https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1myN3vL9tTOdiDlRKgoQdyQ_hu_490647f0bcb8f622.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;116&#34;
		data-flex-basis=&#34;278px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Click the Edit button on Rule syntax.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1y3zKCrheFFtZhMuefUHg.png&#34;
	width=&#34;1556&#34;
	height=&#34;677&#34;
	srcset=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1y3zKCrheFFtZhMuefUHg_hu_6a9e39acd6441e70.png 480w, https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1y3zKCrheFFtZhMuefUHg_hu_6212931c442bbe67.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;229&#34;
		data-flex-basis=&#34;551px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now enter the following query and click OK.&lt;/p&gt;
&lt;p&gt;USER.ASSIGNEDPLANS -ANY (ASSIGNEDPLAN.SERVICEPLANID -EQ &amp;ldquo;4828c8ec-dc2e-4779-b502-87ac9ce28ab7&amp;rdquo; -AND ASSIGNEDPLAN.CAPABILITYSTATUS -EQ &amp;ldquo;ENABLED&amp;rdquo;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1RWeLgN5BP5RFAkr7lS50Q.png&#34;
	width=&#34;1257&#34;
	height=&#34;447&#34;
	srcset=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1RWeLgN5BP5RFAkr7lS50Q_hu_3889ec287706e78f.png 480w, https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1RWeLgN5BP5RFAkr7lS50Q_hu_b8a6dc0381d2c9b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;281&#34;
		data-flex-basis=&#34;674px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The Id we are querying is the Id for the service plan ‚ÄúMCOEV‚Äù which can be seen &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/enterprise-users/licensing-service-plan-reference&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. Since we‚Äôre looking for the service plan Id, it doesn‚Äôt matter if the license is assigned to a user via the Teams Phone Standard add-on, E5 or even Common Area Phone SKU. With the second part of the query (-AND) we‚Äôre also making sure, that we‚Äôre only including users where the service plan is actually enabled.&lt;/p&gt;
&lt;p&gt;Click Save.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1HMIASp06A45oOvCFOU4i6g.png&#34;
	width=&#34;1549&#34;
	height=&#34;710&#34;
	srcset=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1HMIASp06A45oOvCFOU4i6g_hu_95d1fc5902636d06.png 480w, https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1HMIASp06A45oOvCFOU4i6g_hu_3aae5a093cb74e75.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;218&#34;
		data-flex-basis=&#34;523px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;And finally, click Create.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1LsdWbsig2hQJzrErXoUTw.png&#34;
	width=&#34;1026&#34;
	height=&#34;1166&#34;
	srcset=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1LsdWbsig2hQJzrErXoUTw_hu_48b738d6d3ba7e2d.png 480w, https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1LsdWbsig2hQJzrErXoUTw_hu_6ca3f34d0befa947.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;87&#34;
		data-flex-basis=&#34;211px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It will take a while until all the members have been added. We can check if our rule works by clicking on Dynamic membership rules and navigating to Validate Rules (preview). Let‚Äôs add some users and check if they meet the criteria.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1MFwrIBncdH8pWcWrwXFLw.png&#34;
	width=&#34;1551&#34;
	height=&#34;872&#34;
	srcset=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1MFwrIBncdH8pWcWrwXFLw_hu_a61a956d305eeda6.png 480w, https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1MFwrIBncdH8pWcWrwXFLw_hu_690bb4a53c1e9f49.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;By clicking View details we can examine the query and see exactly why a user will be included or not.&lt;/p&gt;
&lt;p&gt;Here‚Äôs an example of a user where the service plan is assigned and also enabled.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1mz1us2OGznfSo1FaVQG8qA.png&#34;
	width=&#34;1243&#34;
	height=&#34;467&#34;
	srcset=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1mz1us2OGznfSo1FaVQG8qA_hu_24e241d412bd0151.png 480w, https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1mz1us2OGznfSo1FaVQG8qA_hu_c0da40d7aa726ebb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;266&#34;
		data-flex-basis=&#34;638px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The user Bill has a Teams Phone Standard License but won‚Äôt be added to the group because the service plan is disabled.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1xeKYbn5MmNhGywENqNvKdw.png&#34;
	width=&#34;1553&#34;
	height=&#34;364&#34;
	srcset=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1xeKYbn5MmNhGywENqNvKdw_hu_f897fd1c468591e8.png 480w, https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1xeKYbn5MmNhGywENqNvKdw_hu_d7561235da6c2a7c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;426&#34;
		data-flex-basis=&#34;1023px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now you can use this group to assign it to a call queue. Whenever you license newly created users for the service plan MCOEV, the agent list of the call queue will automatically be updated. From my experience it can take some time until the agent lists of call queues are updated if you‚Äôre using group or channel assignments. I will write another article on how to force an agent list sync for call queues which use group assignments. So stay tuned!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Opt In or Opt Out Teams Call Queue Agents Remotely</title>
        <link>https://heusser.pro/p/opt-in-or-opt-out-teams-call-queue-agents-remotely-59fe6147f50d/</link>
        <pubDate>Thu, 24 Mar 2022 21:10:13 +0000</pubDate>
        
        <guid>https://heusser.pro/p/opt-in-or-opt-out-teams-call-queue-agents-remotely-59fe6147f50d/</guid>
        <description>&lt;p&gt;This is an interesting one. First of all, let‚Äôs give credits where they‚Äôre due. This blog post is inspired by &lt;a class=&#34;link&#34; href=&#34;https://alexholmeset.blog/2021/12/13/microsoft-teams-speed-dial-contacts-provisioning/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this post&lt;/a&gt; by the great &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/AlexHolmeset&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Alexander Holmeset.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The PowerShell code to generate the TOTP is forked from this &lt;a class=&#34;link&#34; href=&#34;https://github.com/ecspresso/TOTPPowerShellModule&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;repo&lt;/a&gt;. And the code from this repo is from this &lt;a class=&#34;link&#34; href=&#34;https://gist.github.com/jonfriesen/234c7471c3e3199f97d5&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;gist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The code to create the interactive sign in window and to get the token is based of &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/answers/questions/491498/invoke-webrequest-to-get-access-token.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this example&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;disclaimer&#34;&gt;Disclaimer
&lt;/h4&gt;&lt;p&gt;Before we get into it, I should probably add a disclaimer that this is a proof of concept, at best. You should not use it in production as it uses some bad security practices (like sharing a user&amp;rsquo;s password). For real. Don‚Äôt say I didn‚Äôt warn you.&lt;/p&gt;
&lt;h4 id=&#34;whats-this-aboutagain&#34;&gt;What‚Äôs this about¬†again?
&lt;/h4&gt;&lt;p&gt;However, being able to remotely change the opt in status of call queue agents seems to be quite a big ask from several Microsoft Teams admins and customers, so I decided to publish this piece anyway.&lt;/p&gt;
&lt;h4 id=&#34;changing-opt-in-status-as-auser&#34;&gt;Changing opt in status as a¬†user
&lt;/h4&gt;&lt;p&gt;Can the opt in status of a user be changed as an admin? The answer is both yes and no. You can‚Äôt do it in any delegated way if that‚Äôs what you‚Äôre asking. You will need the user‚Äôs credentials.&lt;/p&gt;
&lt;p&gt;If you‚Äôre a Teams User which is also a call queue agent, there are numerous ways to change your own opt in status for call queues. That is, if your admin allows opting out of queues of course. Let‚Äôs go through them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;From Teams Desktop Client Settings&lt;/li&gt;
&lt;li&gt;From a Teams Voice Enabled Channel&lt;/li&gt;
&lt;li&gt;From Teams Web Client Settings&lt;/li&gt;
&lt;li&gt;From Teams Certified Desk Phones&lt;/li&gt;
&lt;li&gt;From Teams Mobile Apps (Android / iOS)&lt;/li&gt;
&lt;li&gt;From the good old &lt;a class=&#34;link&#34; href=&#34;https://aka.ms/cqsettings&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://aka.ms/cqsettings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;im-an-admin-why-cant-i-change-the-damn-opt-instatus&#34;&gt;I‚Äôm an Admin, why can‚Äôt I change the damn opt in¬†status?
&lt;/h4&gt;&lt;p&gt;From a Teams PowerShell session, we can only view the opt in status of a queue‚Äôs agents but not change it.&lt;/p&gt;
&lt;p&gt;(Get-CsCallQueue -Identity xxxxxxxx-f74b-46bb-9743-xxxxxxxxxxxx).Agents&lt;/p&gt;
&lt;p&gt;This will spit out something like this.&lt;/p&gt;
&lt;p&gt;ObjectId                             OptIn&lt;br&gt;
-&amp;mdash;&amp;mdash;-                             &amp;mdash;&amp;ndash;&lt;br&gt;
xxxxxxxx-4d28-4246-9c08-xxxxxxxxxxxx  True&lt;br&gt;
xxxxxxxx-8bae-419d-a4eb-xxxxxxxxxxxx  True&lt;br&gt;
xxxxxxxx-49db-40ee-9d05-xxxxxxxxxxxx False&lt;/p&gt;
&lt;p&gt;Every attempt to change the returned PowerShell object failed. Miserably.&lt;/p&gt;
&lt;h3 id=&#34;how-can-we-at-least-do-it-as-the-user-but-remotely&#34;&gt;How can we at least do it as the user, but remotely?
&lt;/h3&gt;&lt;p&gt;Similar to Alex‚Äôs approach of creating Teams Contacts from CLI we also have to acquire a user token to be able to change the opt in status of a user by CLI.&lt;/p&gt;
&lt;p&gt;In his scenario, he‚Äôs mainly thinking about new users or even accounts which are used to sign into common area phones which might not be MFA enabled yet. In our case this might look different because we want to be able to alter the opt in state of already working staff.&lt;/p&gt;
&lt;p&gt;At first, I also tried to use the AAD Internals PowerShell Module to receive a user token. In this case, however, it turned out to be much more complicated. When a user opens the Calls settings page in Teams, another token is requested from a different issuing service than the one which is used to access all the other features in Teams.&lt;/p&gt;
&lt;p&gt;After a long night of googling and binging (yes, I was this desperate) I finally was able to get a working token by modifying the example from the Docs Q&amp;amp;A which is linked in the intro of this article.&lt;/p&gt;
&lt;h4 id=&#34;prerequisites&#34;&gt;Prerequisites
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Let‚Äôs get one thing straight. This approach ONLY works if you know the password of the user and / or the user agrees to share their password or even an MFA secret with you.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I‚Äôm thinking of the following scenario: we want to be able to automatically and remotely opt in and opt out agents of call queues based on various criteria such as working schedules etc.&lt;/p&gt;
&lt;p&gt;To have at least some kind of security, my script is encrypting the password and the MFA secret before it‚Äôs saved to the disk. Once they‚Äôre encrypted, they can only be decrypted by the same user account and the same Windows system which was used to encrypt them.&lt;/p&gt;
&lt;p&gt;Why do we need to save the password to disk, when it‚Äôs an interactive login process anyway? Well, if you want to automate it by any means, we can use SendKeys to emulate a user&amp;rsquo;s keystrokes. To be completely honest, I only went so far because I wanted to see for myself if I can get it working‚Ä¶&lt;/p&gt;
&lt;h4 id=&#34;how-the-scriptworks&#34;&gt;How the script¬†works
&lt;/h4&gt;&lt;p&gt;The script needs a few parameters to work. We need to provide a user principal name, a user object Id and a call queue Id.&lt;/p&gt;
&lt;p&gt;It will then check the current directory for two or three files depending on whether the -MFA switch is used.&lt;/p&gt;
&lt;p&gt;You will be prompted to enter the password and the MFA secret if these files do not already exist. The token will be saved to a file once you‚Äôve successfully logged in and acquired one. If the token is expired (happens every few hours or so), you will be prompted for credentials again and the token inside the file will be replaced with the new one. Since we also saved the password to disk, you do not need to enter the password again. The script will decrypt and enter the password by emulating automated keystrokes automatically.&lt;/p&gt;
&lt;h4 id=&#34;script-modes&#34;&gt;Script modes
&lt;/h4&gt;&lt;p&gt;The script features a -QueryStatusOnly switch, which will only check if the user is opted in or out of a queue. This will not change anything.&lt;/p&gt;
&lt;p&gt;For the sake of simplicity, I‚Äôve already stored the values of $UserId, $CallQueueId and $UserName as default values for the parameters. Of course, you can pass your own values if you call the script yourself.&lt;/p&gt;
&lt;p&gt;In this video, you can see how the username and password are automatically entered, which will ultimately get us the token we need to call the API and query the user‚Äôs opt in status.&lt;/p&gt;
&lt;p&gt;If we run the same thing again, we will already have a valid token.&lt;/p&gt;
&lt;p&gt;Now let‚Äôs take a look at an MFA enabled user. For this, we use the optional -MFA switch. Besides the password, this will also prompt us for the MFA secret. The script then pulls down the PowerShell Script from GitHub and uses it‚Äôs code to do some magic and generate the TOTP from the secret.&lt;/p&gt;
&lt;h4 id=&#34;okbut-how-do-we-opt-a-userout&#34;&gt;Ok‚Ää‚Äî‚ÄäBut how do we opt a user¬†out!?
&lt;/h4&gt;&lt;p&gt;Since we can already see the opt in status of members either in Voice Enabled Channels or via PowerShell this is nothing new. Let‚Äôs opt a user out already!&lt;/p&gt;
&lt;h4 id=&#34;script&#34;&gt;Script
&lt;/h4&gt;&lt;p&gt;Here‚Äôs the script. Please notice that sometimes, activating the AAD Login Window does not always work, so you might have to cancel and run it again. For me, it usually worked the second time I ran the script.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/ce70f39f720bf17632f60a3d6b1be110.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Here‚Äôs an example of running the script with parameters.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;.\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CallQueueOptInOptOutGist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;ps1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-UserId&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;xxxxxxxx-8bae-419d-a4eb-xxxxxxxxxxxx&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-UserName&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;user@domain.com&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-CallQueueId&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;xxxxxxxx-f74b-46bb-9743-xxxxxxxxxxxx&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Action&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OptOut&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h4&gt;&lt;p&gt;Even though this method uses some real dirty tricks it still get‚Äôs the job done. Well, kind of, at least. I really hope that Microsoft will add the functionality to allow Queue managers to remotely opt in or opt out their agents in a more practical way. It‚Äôs a real pity that not even the new &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/powershell/module/teams/set-csusercallingsettings?view=teams-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Set-CsUserCallingSettings&lt;/a&gt; or the Boss/Admin feature can do this!&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
