<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Microsot Teams on HEUSSER.PRO</title>
        <link>https://heusser.pro/categories/microsot-teams/</link>
        <description>Recent content in Microsot Teams on HEUSSER.PRO</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 10 Mar 2022 19:01:47 +0000</lastBuildDate><atom:link href="https://heusser.pro/categories/microsot-teams/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>How to Permanently Forward PSTN Calls in Microsoft Teams (Without License)</title>
        <link>https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/</link>
        <pubDate>Thu, 10 Mar 2022 19:01:47 +0000</pubDate>
        
        <guid>https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/</guid>
        <description>&lt;p&gt;When you’re using Microsoft Teams Direct Routing as your primary calling solution, chances are that sometimes you also need to permanently forward calls to one of your numbers to another external phone number.&lt;/p&gt;
&lt;p&gt;In many cases, forwarding of numbers can also be handled outside of Teams. Most SIP providers offer a web-based portal for number management and forwarding. However, controlling all your numbers inside Teams without relying on third parties can still be an advantage sometimes.&lt;/p&gt;
&lt;p&gt;Note: this blog post only considers Teams Direct Routing scenarios. Calling Plans or Operator Connect are not covered.&lt;/p&gt;
&lt;h4 id=&#34;forwarding-by-a-licensed-teamsuser&#34;&gt;Forwarding by a Licensed Teams User
&lt;/h4&gt;&lt;p&gt;Setting up a forwarding of numbers can be achieved in multiple ways. The most obvious one to just create and license a Teams user and setup a permanent call forwarding for that user in the Teams Client.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1hF9oWNMacZgIt1dCtfkcOQ.png&#34;
	width=&#34;1156&#34;
	height=&#34;485&#34;
	srcset=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1hF9oWNMacZgIt1dCtfkcOQ_hu_841e30e4e318d3d8.png 480w, https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1hF9oWNMacZgIt1dCtfkcOQ_hu_c9ea9c611629ad97.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;238&#34;
		data-flex-basis=&#34;572px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This user will need at minimum a Business Basic + Teams Phone Standard License. A CAP (Common Area Phone License) *in theory* should also present this option when using the Desktop or Web Client but call forwarding won’t be available when using a Teams certified Desk Phone. Thus, this is an unsupported scenario and should not be used. There’s a better way which will even allow you to get rid of the license costs entirely. I’ll explain how later in this article.&lt;/p&gt;
&lt;p&gt;Since there is no voice app like an auto attendant or call queue involved in this scenario, all calls to the direct number of this particular user will be forwarded right away. This also means that the caller will hear the ring back tone, until the external participant (forwaring target) answers the call.&lt;/p&gt;
&lt;p&gt;Advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Direct forwarding, call does not get picked up or intercepted by Teams&lt;/li&gt;
&lt;li&gt;Should be possible to forward calls to a FAX number&lt;/li&gt;
&lt;li&gt;Good for scenarios where the forwarding target often changes (can be changed by other Teams users from inside their client by using the Boss/Delegate feature)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Disadvantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;License costs&lt;/li&gt;
&lt;li&gt;Configuration can only be reviewed or changed by logging in, using Boss/Delegate or PowerShell Preview Cmdlets (Get-CsUserCallingSettings)&lt;/li&gt;
&lt;li&gt;Can’t use Service or Toll-Free numbers&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;forwaring-by-a-resourceaccount&#34;&gt;Forwaring by a Resource Account
&lt;/h4&gt;&lt;p&gt;It’s also possible to transfer calls to external PSTN numbers by using resource accounts assigned to auto attendants or call queues. Before you can assign a number to a resource account, you need to assign a free &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/microsoftteams/teams-add-on-licensing/virtual-user#virtual-user-license-allocation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Teams Phone Standard — Virtual User License&lt;/a&gt; to the resource account.&lt;/p&gt;
&lt;p&gt;Once the license is assigned, we need to assign a phone number to the resource account:&lt;/p&gt;
&lt;p&gt;Set-CsPhoneNumberAssignment -Identity ra_cq_PS_Test@mozzism.ch -PhoneNumber +41445124077 -PhoneNumberType DirectRouting&lt;/p&gt;
&lt;p&gt;Next we also need to assign it a Voice Routing Policy:&lt;/p&gt;
&lt;p&gt;Grant-CsOnlineVoiceRoutingPolicy -Identity &lt;a class=&#34;link&#34; href=&#34;mailto:ra_cq_PS_Test@mozzism.ch&#34; &gt;ra_cq_PS_Test@mozzism.ch&lt;/a&gt; -PolicyName &amp;ldquo;FirstTrunk&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The most obvious way, at least for me was to create an auto attendant and set it up without business hours so it will always perform the same action: forward the call to an external number. This works, no doubt but the problem is that the auto attendant *ALWAYS* answers the call before it’s actually forwarded. Because of that, this method can’t be used to forward calls to a FAX number.&lt;/p&gt;
&lt;p&gt;Since it’s also possible to forward calls from a call queue to an external number, we can leverage this to create a similar experience as to when the call is permanently forwarded by a Teams user.&lt;/p&gt;
&lt;p&gt;A call queue has two options to control actions or forwardings. Overflow (max. number of simultaneous calls) or timeout.&lt;/p&gt;
&lt;p&gt;If we set the timeout to zero (0 minutes, 0 seconds) the queue still answers the call, before it’s forwarded. Even if there is no greeting configured.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1YgnBVoi8wRNzxMl3TedyyQ.png&#34;
	width=&#34;1768&#34;
	height=&#34;734&#34;
	srcset=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1YgnBVoi8wRNzxMl3TedyyQ_hu_bd99a2240be77e72.png 480w, https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1YgnBVoi8wRNzxMl3TedyyQ_hu_fea59af5794aed07.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;240&#34;
		data-flex-basis=&#34;578px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;A good example to see that the queue picked up the call is that the counter starts on any phone. Here I’m using Skype to call the call queue and you can see that the call has been established for 5 seconds, even though the configured forwarding target has not answered the call yet. While the call rings the forwarding target, Teams will generate a ring back tone inside the already established call.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1QAUIogXcABSjdUwIzj5LDQ.png&#34;
	width=&#34;1590&#34;
	height=&#34;1017&#34;
	srcset=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1QAUIogXcABSjdUwIzj5LDQ_hu_47bbf5da1fe47.png 480w, https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1QAUIogXcABSjdUwIzj5LDQ_hu_42e461b91d16c734.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;156&#34;
		data-flex-basis=&#34;375px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If we set the overflow threshold of the queue to zero on the other hand, TAC shows a warning message that the queue won’t play the greeting when the overflow threshold is set to 0.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1jxc3VpgcSiWVumahjggBRg.png&#34;
	width=&#34;1766&#34;
	height=&#34;765&#34;
	srcset=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1jxc3VpgcSiWVumahjggBRg_hu_5d09179a7af773c3.png 480w, https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1jxc3VpgcSiWVumahjggBRg_hu_d3c4145501ecbc36.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;230&#34;
		data-flex-basis=&#34;554px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It’s not entirely clear that this has always been the case, but I’m pretty sure that at least this warning message has been introduced a only few weeks ago when the call queue wizard was redesigned. It was this warning message that tipped me of and inspired me to test this.&lt;/p&gt;
&lt;p&gt;So, let’s make another call to the queue’s number. This time, there’s no counter visible in Skype’s call screen which means that the call gets forwarded without being intercepted by the queue first. In this case, because I’m using Skype I can only hear Skype’s own “ring back jingle”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1d3NXW1fGGCCxHfm0jhDKzw.png&#34;
	width=&#34;1590&#34;
	height=&#34;1017&#34;
	srcset=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1d3NXW1fGGCCxHfm0jhDKzw_hu_f2faa17964f42f1d.png 480w, https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1d3NXW1fGGCCxHfm0jhDKzw_hu_989698dac2a90602.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;156&#34;
		data-flex-basis=&#34;375px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When using a “real phone” like my cell phone the ring back tone gets played back just like when any other number is dialed.&lt;/p&gt;
&lt;p&gt;Altough I haven’t actually tested sending a FAX message end to end, I tested forwarding to a FAX number and was able to hear the typical FAX noises when I called the queue’s number. I can’t see any reason why this shouldn’t work.&lt;/p&gt;
&lt;p&gt;Advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No License costs&lt;/li&gt;
&lt;li&gt;Can use Service or Toll-Free numbers&lt;/li&gt;
&lt;li&gt;Should be possible to forward calls to a FAX number (when using a CQ)&lt;/li&gt;
&lt;li&gt;Configured forwarding is more obvious because it’s visible in TAC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Disadvantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Only Teams admins can change the forwarding target&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;summary&#34;&gt;Summary
&lt;/h4&gt;&lt;p&gt;Even though it might not be an obvious solution, using a call queue to permanently forward calls is still a great way to have more control over all your DIDs right inside Teams itself without adding any license costs.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Microsoft Teams: Activate FQDN of Online PSTN Gateway without License</title>
        <link>https://heusser.pro/p/microsoft-teams-activate-fqdn-of-online-pstn-gateway-without-license-85e9ee4ca4cc/</link>
        <pubDate>Tue, 08 Feb 2022 21:29:25 +0000</pubDate>
        
        <guid>https://heusser.pro/p/microsoft-teams-activate-fqdn-of-online-pstn-gateway-without-license-85e9ee4ca4cc/</guid>
        <description>&lt;p&gt;If you’re a Microsoft Teams Admin, like me, you are probably aware that setting up a new Online PSTN Gateway in Teams Admin Center (TAC) or via PowerShell requires the domain of the SBC’s FQDN to be activated. This is done by creating at least one account using the SBC’s FQDN as the UPN Suffix.&lt;/p&gt;
&lt;h3 id=&#34;domains&#34;&gt;Domains
&lt;/h3&gt;&lt;p&gt;Now keep in mind that there are two ways how you can add an Online PSTN Gateway in Teams. Either you use your own Gateway in which case the domain usually has one segment less and is a subdomain of your main domain. E.g.&lt;/p&gt;
&lt;p&gt;sbc.domain.com&lt;/p&gt;
&lt;p&gt;In this case you don’t need to create a user to activate the domain because &lt;em&gt;domain.com&lt;/em&gt; is already used for other UPNs and thus already known in your tenant.&lt;/p&gt;
&lt;p&gt;If you want to use Direct Routing offered by one of the various managed service providers, your FQDN might look something like this. E.g.&lt;/p&gt;
&lt;p&gt;customer1.customers.domain.com&lt;/p&gt;
&lt;p&gt;In this case you need to add a user with the following UPN. E.g.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;mailto:domainactivation@customer1.customers.domain.com&#34; &gt;domainactivation@customer1.customers.domain.com&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;microsoft-docs&#34;&gt;Microsoft Docs
&lt;/h3&gt;&lt;p&gt;The information on Microsoft’s &lt;a class=&#34;link&#34; href=&#34;https://t.umblr.com/redirect?z=https%3A%2F%2Fdocs.microsoft.com%2Fen-us%2Fmicrosoftteams%2Fdirect-routing-sbc-multiple-tenants%23activate-the-subdomain-name&amp;amp;t=OTVkYjk5ZDBiMDNhNmNhOGIxNjY2YzlmYjZkZTdjMzA3ODkxYjk1Yiw5MmY5MzI0OTk0Y2RjZTUwZWM0N2I0YmIyOWYxNWM2YzQ2ZmY1ZmIw&amp;amp;ts=1633444148&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;official documentation&lt;/a&gt; is a bit controversial. They have two sections mentioning the activation of the domain. One time for the base domain (Carrier Tenant) and one time for the subdomains (Customer Tenants).&lt;/p&gt;
&lt;p&gt;As of writing this article, the information looks like this.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://t.umblr.com/redirect?z=https%3A%2F%2Fdocs.microsoft.com%2Fen-us%2Fmicrosoftteams%2Fdirect-routing-sbc-multiple-tenants%23activate-the-domain-name&amp;amp;t=OWMxYjUzYzU2ZDI3OWRiZDBkNjQ3YWJjYjZjMTBmZTJhNzg3MDVlMiwxNWQ4NjM5NjY2NzdhZDgzZGM1NTU2NTBmOGFlMGY2YzhkMjIxMjA1&amp;amp;ts=1633444148&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Base Domain&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After you have registered a domain name, you need to activate it by adding at least one user with Phone System license and assigning a SIP address with the FQDN portion of the SIP address matching the created base domain.&lt;/p&gt;
&lt;p&gt;Previously, Microsoft always said that this user needs an E5 License. This is still visible in their screenshots. If you want to review the change history of this particular documentation, you can always see it here on &lt;a class=&#34;link&#34; href=&#34;https://href.li/?https://github.com/MicrosoftDocs/OfficeDocs-SkypeForBusiness/commits/live/Teams/direct-routing-sbc-multiple-tenants.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you’re a customer and want to add a domain name assigned to you by your managed service provider, you don’t need to worry about this part. The assigned licenses will determine what voice capabilities your tenant has. You can check this by running the following in a Teams PowerShell session.&lt;/p&gt;
&lt;p&gt;(Get-CsTenant).ProvisionedPlan&lt;/p&gt;
&lt;p&gt;This will return an XML string containing all assigned licenses. It’s still a little weird that they only mention Phone System. Because Phone System is just an add-on which can’t be assigned without a corresponding Enterprise License (one of the SKUs which actually triggers the creation of an SfB user object), unless you use Common Area Phone.&lt;/p&gt;
&lt;p&gt;Oddly enough though, for the subdomain they don’t mention licensing at all. The subdomain part describes what needs to be done in the customer tenant.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://t.umblr.com/redirect?z=https%3A%2F%2Fdocs.microsoft.com%2Fen-us%2Fmicrosoftteams%2Fdirect-routing-sbc-multiple-tenants%23activate-the-subdomain-name&amp;amp;t=OTVkYjk5ZDBiMDNhNmNhOGIxNjY2YzlmYjZkZTdjMzA3ODkxYjk1Yiw5MmY5MzI0OTk0Y2RjZTUwZWM0N2I0YmIyOWYxNWM2YzQ2ZmY1ZmIw&amp;amp;ts=1633444148&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Sub Domains&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After you register a domain name, you need to activate it by adding at least one user and assign a SIP address with the FQDN portion of the SIP address matching the created subdomain in the customer tenant.&lt;/p&gt;
&lt;p&gt;Here they just say that the user needs to be assigned a SIP address, which is not possible without assigning a SfB Online Plan 2 license. Unless you keep on reading…&lt;/p&gt;
&lt;h3 id=&#34;what-will-assigning-the-licensedo&#34;&gt;What will assigning the license do?
&lt;/h3&gt;&lt;p&gt;So why is a License needed in the first place? Assigning a user a SfB License will provision an SfB Online user object for each licensed user.&lt;/p&gt;
&lt;p&gt;Once the SfB user is provisioned, the domain will also be stored in your tenants DomainUrlMap. If the FQDN of your Gateway is not present in your DomainUrlMap, you will not be able to create the gateway. MVP Luca Vitali has en excellent &lt;a class=&#34;link&#34; href=&#34;https://href.li/?https://lucavitali.wordpress.com/2019/03/15/new-csonlinepstngateway/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Blog Post&lt;/a&gt; about that.&lt;/p&gt;
&lt;h3 id=&#34;do-we-really-need-a-license-to-create-thegateway&#34;&gt;Do we really need a license to create the Gateway?
&lt;/h3&gt;&lt;p&gt;Based on my various tests, it really doesn’t matter if it’s an E1, E3, E5 or even a Business Basic License. As long as the SKU includes SfB Online Plan 2, a SIP address and an entry in the DomainUrlMap for that domain will be created.&lt;/p&gt;
&lt;p&gt;So, I asked myself, is there an easier way to activate the domain? One without assigning a license which would help automate things even further? Turns out there is indeed!&lt;/p&gt;
&lt;p&gt;A resource account in Teams does not need a license, unless you want to assign a phone number to it. If you create one without a license, Microsoft 365 will still provision an SfB Online object for this resource account and add its domain to your DomainUrlMap.&lt;/p&gt;
&lt;p&gt;By running &lt;em&gt;Get-CsOnlineApplicationInstance&lt;/em&gt; we can query our resource accounts in Teams.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-activate-fqdn-of-online-pstn-gateway-without-license-85e9ee4ca4cc/0ERujVXcteQftrsYE.png&#34;
	width=&#34;640&#34;
	height=&#34;351&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-activate-fqdn-of-online-pstn-gateway-without-license-85e9ee4ca4cc/0ERujVXcteQftrsYE_hu_30e853f80a917f42.png 480w, https://heusser.pro/p/microsoft-teams-activate-fqdn-of-online-pstn-gateway-without-license-85e9ee4ca4cc/0ERujVXcteQftrsYE_hu_a00fc7556c9f78c5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;437px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;After a few minutes, the account will also be visible when you run Get-CsOnlineUser. I always create my resource accounts using &lt;em&gt;ra_aa_&lt;/em&gt; as a UPN prefix. Another easy way of identifying resource accounts is to look for the &lt;em&gt;Department Attribute.&lt;/em&gt; A resource account will always have &lt;em&gt;Microsoft Communication Application Instance&lt;/em&gt; set as &lt;em&gt;Department.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-activate-fqdn-of-online-pstn-gateway-without-license-85e9ee4ca4cc/0yI6AyClljJe7j1X0.png&#34;
	width=&#34;640&#34;
	height=&#34;351&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-activate-fqdn-of-online-pstn-gateway-without-license-85e9ee4ca4cc/0yI6AyClljJe7j1X0_hu_9b6c738558f6a53f.png 480w, https://heusser.pro/p/microsoft-teams-activate-fqdn-of-online-pstn-gateway-without-license-85e9ee4ca4cc/0yI6AyClljJe7j1X0_hu_8e778b9209d74db4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;437px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;caveats&#34;&gt;Caveats
&lt;/h3&gt;&lt;p&gt;The only caveat is that you don’t usually configure the SfB Online DNS entries for a domain which you want to use for your Direct Routing Gateway domain. If the DNS records are not configured, creating a resource account using your SBC FQDN will fail. Jeff Brown over at Jeff Brown Tech also has a great &lt;a class=&#34;link&#34; href=&#34;https://href.li/?https://jeffbrown.tech/microsoft-teams-unable-to-create-resource-accounts/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Blog Post&lt;/a&gt; covering this topic.&lt;/p&gt;
&lt;p&gt;According to my research and testing, the only record that’s needed in order to create the resource account is the &lt;a class=&#34;link&#34; href=&#34;https://t.umblr.com/redirect?z=https%3A%2F%2Fdocs.microsoft.com%2Fen-us%2FSkypeForBusiness%2Ftroubleshoot%2Fonline-configuration%2Fdns-configuration-issue%23solution&amp;amp;t=NDY5M2UyYjRmZGZhNjdjYTJkZjFjMGQ5NDdmMzgwNjBkZGYwNjU1MCxhMjFjMmJjOTg1YWQ2Zjk2MjU2NzE0Yzc5MGNjMzE5NzllMTBmY2I4&amp;amp;ts=1633642291&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SIP Federation TLS SRV Record.&lt;/a&gt; The other three SfB records can be ignored.&lt;/p&gt;
&lt;p&gt;Once this record is created you will be able to create a resource account using your SBCs FQDN as UPN suffix. Now you just have to wait for the account to be provisioned and for the domain to show up in your DomainUrlMap. This usually takes around 5–15 minutes but can take a lot longer sometimes.&lt;/p&gt;
&lt;p&gt;You can check your DomainUrlMap using this command:&lt;/p&gt;
&lt;p&gt;(Get-CsTenant).DomainUrlMap&lt;/p&gt;
&lt;p&gt;Based on my Testing, DomainMapUrl was not available anymore in Teams PowerShell Modules above version 2.6.0. This caused my provisioning script to end up in an infinite loop because it was checking the DomainUrlMap every few minutes but always returned empty.&lt;/p&gt;
&lt;p&gt;The last module I know of which returned the DomainUrlMap was 2.3.1. Since we’re now at version 3.1.1 I suggest to query the SfB users by using Get-CsOnlineUser to check if the domain is already activated. However, it might still take a few minutes before the gateway can be created. By working with Try {} Catch{} and a Do-Until loop you can keep trying to create the gateway until it succeeds.&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h3&gt;&lt;p&gt;So, there you have it. It’s indeed possible to create a PSTN Online Gateway without ever assigning a license. Not every tenant even has available licenses and not every tenant has the same type of available licenses. This means that you don’t need to make sure anymore that your script is assigning the correct license or even that enough licenses are available in the first place. In scenarios where you want to automate everything using unattended scripts, this comes in quite handy.&lt;/p&gt;
&lt;p&gt;Because the license and the user can be removed after you created the gateway, I see no problem in setting up a resource account without a license. Unless you’re setting up the carrier tenant. In this case you don’t usually have any other production users which means that you need to keep at minimum one license assigned. Otherwise, the tenant will lose its voice capabilities and break your Direct Routing configuration for all your customers.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Automatically render Microsoft Teams Call Flow Diagrams</title>
        <link>https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/</link>
        <pubDate>Tue, 04 Jan 2022 20:50:28 +0000</pubDate>
        
        <guid>https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/</guid>
        <description>&lt;p&gt;I am very pleased to announce version 2 of my “&lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Microsoft 365 Call Flow Visualizer&lt;/a&gt;” Script. Those who follow me on Twitter, might have already seen a glimpse of what I’ve been working on in my spare time for the past few months.&lt;/p&gt;
&lt;h4 id=&#34;what-am-i-talkingabout&#34;&gt;What am I talking about?
&lt;/h4&gt;&lt;p&gt;At work, I build or configure Microsoft Teams call flows almost daily. Even though the Teams Admin Center provides an easy-to-use graphical user interface to set up auto attendants and call queues, the solutions are not always that straight forward. If you’re creating your very first call flow, chances are that you will start by creating an auto attendant. Why wouldn’t you, it’s where the call first hits your system, isn’t it? Later on, you discover that you can’t even configure the most basic call flow, because you have not created your target call queue yet.&lt;/p&gt;
&lt;h4 id=&#34;living-in-a-fast-pacedworld&#34;&gt;Living in a fast paced world
&lt;/h4&gt;&lt;p&gt;What if three months down the road somebody from the office or a customer asks you how their main number handles incoming calls? Are you still able to answer that without logging into the Teams Admin Center and clicking through all the nested auto attendants and call queues?&lt;/p&gt;
&lt;p&gt;They probably want to know things like how long does it ring before a call is transferred? Where is it transferred to? And which users are configured to answer calls? Just to name a few. If you manage a lot of customers, or work for a large organization with dozens of call queues, answering these kinds of questions can cost quite some time and resources.&lt;/p&gt;
&lt;p&gt;What if I told you that you could just run a script which will render a diagram containing your call flows automatically? Would that be something you might be interested in? (Shout out to all the Entourage fans out there.)&lt;/p&gt;
&lt;h4 id=&#34;finding-inspiration-in-microsoft-docs&#34;&gt;Finding inspiration in Microsoft Docs
&lt;/h4&gt;&lt;p&gt;docs.microsoft.com is arguably one of the best product documentation sites on the web. Of course, that can differ from product to product but overall, it’s a very solid approach to documentation. When docs.microsoft.com was &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/teamblog/introducing-docs-microsoft-com#readability&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;introduced in 2016&lt;/a&gt; Microsoft even said that eye tracking studies have shown that content with a fixed width is easier to read. This really got my attention and made me believe that Microsoft has put some real effort into creating their product documentations.&lt;/p&gt;
&lt;p&gt;I am by no means a professional developer. I didn’t even really know what Markdown is at that time. After doing some research I quickly understood that all or most of their documentation content is based on Markdown files which are hosted on GitHub and rendered into a website.&lt;/p&gt;
&lt;p&gt;I started to pay attention and noticed that many other companies, like &lt;a class=&#34;link&#34; href=&#34;https://bitwarden.com/help/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Bitwarden&lt;/a&gt;, my favorite password manager, also use Markdown based documentation websites. This underlined my hunch that Markdown based docs are the real deal.&lt;/p&gt;
&lt;p&gt;No more confusing file versions, people creating and changing their own versions of documentations without telling anyone and so forth. With a Markdown based documentation solution, everything is stored in a central repository and every change is tracked with GIT. I need this too. But how do they do it?&lt;/p&gt;
&lt;p&gt;Another quick research session led me to &lt;a class=&#34;link&#34; href=&#34;https://dotnet.github.io/docfx/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DocFx&lt;/a&gt;, a static website generator for Markdown files maintained by the .NET team. After some tweaks here and there, my documentation site was already up and running.&lt;/p&gt;
&lt;h4 id=&#34;lazy-is-the-newsmart&#34;&gt;Lazy is the new smart
&lt;/h4&gt;&lt;p&gt;Nobody likes writing documentations. Including me. But what if I could start to write some PowerShell scripts which will automatically retrieve specific information about a Microsoft 365 tenant and save it to Markdown files? Basically, let the scripts do the work for me? What at first was a proof of concept quickly turned into a full-fledged documentation website containing all sorts of data.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/1MrTseh4yHR5hpsbg3RrQ.png&#34;
	width=&#34;1758&#34;
	height=&#34;1038&#34;
	srcset=&#34;https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/1MrTseh4yHR5hpsbg3RrQ_hu_10c74c78716ed1f5.png 480w, https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/1MrTseh4yHR5hpsbg3RrQ_hu_b89dbcb4213f63a0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;169&#34;
		data-flex-basis=&#34;406px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;one-tool-down-two-togo&#34;&gt;One tool down, two to go
&lt;/h4&gt;&lt;p&gt;With DocFx I was able to automatically structure and render information into a user friendly and comprehensible website. Next up are diagrams. I hate fiddling around with diagram drawing tools. Creating links between nodes, rearranging, and resizing shapes etc. can be a really frustrating and time-consuming chore. Once again, I searched the web for a tool or a technology which can render diagrams from code. That’s when I discovered &lt;a class=&#34;link&#34; href=&#34;https://mermaid-js.github.io/mermaid/#/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Mermaid&lt;/a&gt;. Mermaid uses JavaScript to render diagrams and flow charts from code. The learning curve was quite big at first. I probably would have been faster if I had just drawn a call flow diagram in Visio. But since Mermaid also offers an excellent &lt;a class=&#34;link&#34; href=&#34;https://mermaid.live/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;live editor&lt;/a&gt;, I essentially got the hang of it. Now I can create diagrams a hundred times faster and without the hassle of manually drawing them.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/19wkpjx2ZmqSSBLXUfDmPNg.png&#34;
	width=&#34;1512&#34;
	height=&#34;1374&#34;
	srcset=&#34;https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/19wkpjx2ZmqSSBLXUfDmPNg_hu_95fb3e23b9d3dec7.png 480w, https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/19wkpjx2ZmqSSBLXUfDmPNg_hu_dd7cf49abccf9243.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;110&#34;
		data-flex-basis=&#34;264px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;the-finalpiece&#34;&gt;The final piece
&lt;/h4&gt;&lt;p&gt;The final step of my vision was to connect all the dots. Use PowerShell to read call flows from Microsoft Teams, save them to markdown files and generate a website which will display said call flows. Of course, all of this should happen automatically and update the contents of the website on a schedule. I’ve got everything I need to achieve this except the tool to generate the flow charts.&lt;/p&gt;
&lt;p&gt;For this one, I was sure that there’s no off the shelf solution. So I started writing some PowerShell code to get all the details needed in order to display a call flow. This was a mere proof of concept at first too. I soon discovered that this project would be much more complex than initially anticipated. But I just kept on coding, experimenting, and adding stuff to my script. After a few weeks of working on this project on weekends and evenings I published a first version of my script on GitHub.&lt;/p&gt;
&lt;h4 id=&#34;the-challenges-kept-oncoming&#34;&gt;The challenges kept on coming
&lt;/h4&gt;&lt;p&gt;Even though you can only create two different types of voice apps in Teams, the number of possibilities how they might be connected to each other seem limitless. I quickly realized that I will never achieve my goal with the current version. So, I started working on an updated version.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/1BRQwWnFDQSNofwNK1yfxA.jpeg&#34;
	width=&#34;1904&#34;
	height=&#34;3627&#34;
	srcset=&#34;https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/1BRQwWnFDQSNofwNK1yfxA_hu_2fc9166f94f463a9.jpeg 480w, https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/1BRQwWnFDQSNofwNK1yfxA_hu_ba9c0ee58d06b48c.jpeg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;52&#34;
		data-flex-basis=&#34;125px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;learnings&#34;&gt;Learnings
&lt;/h4&gt;&lt;p&gt;I started learning PowerShell about three years ago. Since then, I’ve created numerous smaller and larger scripts to automate things. But I’ve never even attempted to write something as big and complex as this. Nor had I used functions a lot. Nevertheless, this feels like I was able to put almost everything I learned about PowerShell in the last years to good use. Once I realized that the script needs to be much more flexible and dynamic, I started to divide my first version of the script into separate functions. Even then, I hit several dead ends and had to rewrite a lot of the code.&lt;/p&gt;
&lt;p&gt;Even though it was a lot of work and I’m sure that it’s not the most efficient or clean code you will find on GitHub, I still learned a lot during the development of my tool. The most important part of this story is that you don’t necessarily have to be a pro dev to create something like this. We live in a world full of developers who create awesome tools, frameworks, or other technologies every day. Sometimes it’s just about vision, determination and being able to understand how different technologies can work together.&lt;/p&gt;
&lt;p&gt;I’m very proud of what I achieved and super happy with the result. Feel free to head over to &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt; and give the &lt;strong&gt;M365 Call Flow Visualizer&lt;/strong&gt; a spin. I hope that you like what I’ve done and that you may find it useful. Please contact me on &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/mozzeph&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Twitter&lt;/a&gt; if you have any questions or feedback.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
