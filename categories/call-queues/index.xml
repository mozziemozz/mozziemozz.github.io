<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Call Queues on HEUSSER.PRO</title>
        <link>https://heusser.pro/categories/call-queues/</link>
        <description>Recent content in Call Queues on HEUSSER.PRO</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 15 Nov 2024 17:31:43 +0000</lastBuildDate><atom:link href="https://heusser.pro/categories/call-queues/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Get Missed Call Notifications for Teams Call Queues (Free Community Solution)</title>
        <link>https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/</link>
        <pubDate>Fri, 15 Nov 2024 17:31:43 +0000</pubDate>
        
        <guid>https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/</guid>
        <description>&lt;img src="https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/cover.png" alt="Featured image of post Get Missed Call Notifications for Teams Call Queues (Free Community Solution)" /&gt;&lt;h2 id=&#34;intro&#34;&gt;Intro
&lt;/h2&gt;&lt;p&gt;If you&amp;rsquo;re reading this, it will likely mean that you&amp;rsquo;ve noticed that Teams doesn&amp;rsquo;t show missed calls on call queues and that you&amp;rsquo;re desperately looking for a solution which doesn&amp;rsquo;t cost a fortune or requires that you give a 3rd party access to your Teams call records. If that&amp;rsquo;s the case, stay with me because I&amp;rsquo;m going to show you how you can build your own notification mechanism inside your Microsoft 365 tenant.&lt;/p&gt;
&lt;p&gt;But first I&amp;rsquo;d like to point out a couple of things about the history of this issue.&lt;/p&gt;
&lt;h2 id=&#34;where-can-i-see-missed-calls-on-call-queues&#34;&gt;Where Can I See Missed Calls on Call Queues?
&lt;/h2&gt;&lt;p&gt;The only place where you can actually see if a call was missed on a call queue is in the iOS call history of an iPhone where a call queue agent is signed in on the Teams app on iOS. An iPhone will only show missed calls if the call was offered to the signed in agent. So, this only works with attendant routing (all agents are offered the call at the same time) and presence based routing &lt;strong&gt;off&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;limitations-disclaimer&#34;&gt;Limitations Disclaimer
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Read this very carefully&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;This solution is based on the assumption that there&amp;rsquo;s &lt;strong&gt;always&lt;/strong&gt; an agent (M365 User) opted into a call queue which &lt;strong&gt;doesn&amp;rsquo;t use presence based routing&lt;/strong&gt; and uses &lt;strong&gt;attendant&lt;/strong&gt; routing. &lt;strong&gt;Any other routing method won&amp;rsquo;t work&lt;/strong&gt; since we can&amp;rsquo;t be sure that the &lt;em&gt;monitoring&lt;/em&gt; user got offered the call as well.&lt;/p&gt;
&lt;p&gt;This solution is primarily intended for small businesses that have simple, non-presence based attendant routing queues and don&amp;rsquo;t want to purchase a 3rd party solution to get missed call notifications on call queues. If this isn&amp;rsquo;t feasible for your scenario, you&amp;rsquo;re welcome to continue reading (my discoveries might still be very interesting to you nonetheless) but I&amp;rsquo;m sorry to tell you that this solution won&amp;rsquo;t work for you.&lt;/p&gt;
&lt;h3 id=&#34;tl-dr&#34;&gt;TL; DR
&lt;/h3&gt;&lt;p&gt;If you don&amp;rsquo;t care about all the details and just want to deploy this straight away, feel free to jump directly to &lt;a class=&#34;link&#34; href=&#34;#clone-repository&#34; &gt;Clone Repo&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;#video-tutorial&#34; &gt;Video Tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;missed-call-queue-calls-on-ios&#34;&gt;Missed Call Queue Calls on iOS
&lt;/h3&gt;&lt;p&gt;I actually mentioned using iOS as the closest workaround to seeing missed calls on call queues in one of the many &lt;a class=&#34;link&#34; href=&#34;https://techcommunity.microsoft.com/t5/microsoft-teams/missed-calls-are-not-shown-on-history-that-came-through-call/m-p/1484151/highlight/true#M63193&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Tech Community threads&lt;/a&gt; back in 2020. This gives us a good idea of just how long this issue has been persisting. Sadly, a moderator of this thread just confirmed this as the best response and marked the questions as solved. (LOL?)&lt;/p&gt;
&lt;p&gt;I always like to say that not being able to see missed calls on call queues is the Achilles&amp;rsquo; heel of Teams Phone and I just don&amp;rsquo;t understand why Microsoft hasn&amp;rsquo;t provided a solution yet. It&amp;rsquo;s such a basic feature after all.&lt;/p&gt;
&lt;p&gt;Anyway, let&amp;rsquo;s look at some examples on how missed calls on call queues are shown on an iPhone. This won&amp;rsquo;t work on an iPad or an iPod (if that&amp;rsquo;s still a thing?) since these devices don&amp;rsquo;t have a &lt;em&gt;phone&lt;/em&gt; app. It only works on an iPhone and &lt;strong&gt;Show Teams calls in call log&lt;/strong&gt; must be enabled in the Teams app&amp;rsquo;s settings.&lt;/p&gt;
&lt;p&gt;Unlike normal missed calls, missed calls from call queues won&amp;rsquo;t display a badge counter on the iPhone&amp;rsquo;s phone app and they aren&amp;rsquo;t shown in the notification center or the lock screen either. The badge counter is only shown &lt;em&gt;within&lt;/em&gt; the phone app on the call history icon. This is the first reason why this solution is basically useless. You&amp;rsquo;ll see why I mention it anyway later on.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_184922000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;335&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_184922000_iOS_hu3936109838447749479.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_184922000_iOS_hu4528669562238723060.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;No Badge Counter on Phone App&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;335&#34;
		data-flex-basis=&#34;805px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;That means that someone who&amp;rsquo;s an agent in the queue that should be monitored would constantly need to go into the phone app and check if there were any missed calls. There&amp;rsquo;s also no efficient way of extracting call logs from iOS and send them somewhere. Believe me, I have tried everything from getting the data through Siri Shortcuts to getting it from an iCloud or a local backup.&lt;/p&gt;
&lt;p&gt;Once you go into the call history, it&amp;rsquo;s at least possible to filter for missed calls or search for &lt;code&gt;Teams&lt;/code&gt; or even the call queue name, despite that being truncated and not visible at all.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_184914000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_184914000_iOS_hu7911133146697936565.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_184914000_iOS_hu5387452047220649022.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Missed Call Queue Call&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185013000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185013000_iOS_hu13323565535541130799.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185013000_iOS_hu6328059162366975320.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Missed Call Queue Call Details&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I do no need to apologize for the German screenshots. This is my main device and I didn&amp;rsquo;t want to change the language. In case it&amp;rsquo;s not clear: &lt;em&gt;Verpasster Anruf&lt;/em&gt; means &lt;em&gt;Missed Call&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at the next example. In this case the call was answered by another agent or by the same agent on another device. In that case, the call history item won&amp;rsquo;t be &lt;em&gt;red&lt;/em&gt; and the details of the entry say &lt;em&gt;Answered on another device&lt;/em&gt; &lt;em&gt;(Auf anderem Ger√§t angenommen)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185055000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185055000_iOS_hu2119501650622820240.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185055000_iOS_hu16693605357456167788.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Answered Call Queue Call&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185100000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185100000_iOS_hu1350302172964426250.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185100000_iOS_hu1257743425889126939.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Answered Call Queue Call Details (Answered on Another Device)&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;For a very small company this &lt;em&gt;might&lt;/em&gt; be acceptable, at best. But this becomes problematic as soon as you have at least one nested (overflow) queue. In that case, the call on the first queue will be shown as missed, even when it was answered in the overflow queue. This is the second reason why this isn&amp;rsquo;t a practical solution.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185217000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185217000_iOS_hu9082802642001809077.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185217000_iOS_hu2389946594797770318.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1st Call: Answered in Overflow | 2nd Call: Missed in Top-Level Queue (Top to bottom)&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185221000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185221000_iOS_hu10272365200242678344.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185221000_iOS_hu5407667514355529783.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;2nd Call in History (Top to Bottom)&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185226000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185226000_iOS_hu15789092261060193159.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185226000_iOS_hu17379064014447751259.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1st Call in History (Top to Bottom)&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;A real solution needs to be able to recognize if a call was answered in an overflow queue and not report calls as missed, if nobody was able to answer in a top-level queue.&lt;/p&gt;
&lt;h2 id=&#34;will-microsoft-ever-add-this-feature&#34;&gt;Will Microsoft Ever Add This Feature?
&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;ve got good news and bad news for you. The good part is: Yes. The bad part is, believe it or not, that this will be part of Teams Premium. This has been confirmed to me by &lt;em&gt;Ilya Bukshteyn - VP, Microsoft Teams Calling and Devices&lt;/em&gt; on LinkedIn.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/LinkedInComment.jpg&#34;
	width=&#34;946&#34;
	height=&#34;458&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/LinkedInComment_hu12049634540349275782.jpg 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/LinkedInComment_hu10653473519316024250.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;LinkedIn Comment&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;206&#34;
		data-flex-basis=&#34;495px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve said before that I totally understand that Microsoft is charging for Teams Premium features like Intelligent Recap since that requires actual processing power and costs Microsoft Money to operate. But I&amp;rsquo;m keeping my stance here, something basic as missed call notification should not cost money, regardless of how this is going to be implemented. I really hope that Microsoft realizes this and will re-think that decision, especially since I&amp;rsquo;ve just proven that iOS already logs missed calls.&lt;/p&gt;
&lt;h3 id=&#34;the-queues-app&#34;&gt;The Queues App
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://support.microsoft.com/en-us/office/use-the-queues-app-for-microsoft-teams-370ad83e-c2c1-4a9f-8a59-16c98be102e9&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;This&lt;/a&gt; is the official support article for the new Queues app in Teams. There&amp;rsquo;s a section about &lt;strong&gt;View call history&lt;/strong&gt; which as of the time of writing this article states the following:&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;&lt;p&gt;To view past calls, including calls or voicemails you may have missed, select Calls under Manage queue.&lt;/p&gt;
&lt;p&gt;You can select any call in your history to see more detailed information and call that number back using the number associated with your call queue.&lt;/p&gt;
&lt;p&gt;Currently, call history includes the past calls that you have picked up or calls that you have missed that have a voicemail.&lt;/p&gt;
&lt;/p&gt;&lt;span class=&#34;cite&#34;&gt;&lt;span&gt;‚Äï &lt;/span&gt;&lt;span&gt;Microsoft Support&lt;/span&gt;&lt;cite&gt;&lt;/cite&gt;&lt;/span&gt;&lt;/blockquote&gt;
&lt;p&gt;In other words, there is no shared call history yet, not even for Teams Premium customers.&lt;/p&gt;
&lt;h2 id=&#34;what-about-teams-on-windows&#34;&gt;What About Teams on Windows?
&lt;/h2&gt;&lt;p&gt;Even without the Queues app, it&amp;rsquo;s exactly as the support article says. Agents only see the calls they answered. They don&amp;rsquo;t see any missed calls or calls answered by other agents, not even if they&amp;rsquo;re a delegate of the user who answered a call queue call. The call from &lt;code&gt;21:43&lt;/code&gt; is not visible on the right because it was answered by the user on the left.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image_hu13672943771796416826.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image_hu17308296513252721316.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Call History for Answered Call Queue Calls for a Specific Agent&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-1.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-1_hu14479257733501308996.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-1_hu12947687684252391244.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Call Queue Call History for Another Agent&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The fact that the call history does show answered calls &lt;strong&gt;and&lt;/strong&gt; that the iOS call history includes missed calls and calls that were answered by another agent/on another device got me thinking. This data &lt;em&gt;must&lt;/em&gt; be available somewhere&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;where-does-teams-fetch-the-call-history-from&#34;&gt;Where Does Teams Fetch the Call History From?
&lt;/h2&gt;&lt;p&gt;I opened up Teams in the browser and used the Edge Dev Tools to see what&amp;rsquo;s going on under the hood when I open a user&amp;rsquo;s call history in Teams. I was hoping that this would be a standard Graph request but of course this had to be an internal, unofficial, undocumented API. Sigh.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-rest&#34; data-lang=&#34;rest&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;GET&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;https://teams.microsoft.com/api/csa/emea/api/v1/chats/48%3Acalllogs/messages?messagePageSize=200&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-2.png&#34;
	width=&#34;1041&#34;
	height=&#34;758&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-2_hu5853036115275124898.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-2_hu14992833615567621255.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;JSON Response&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;137&#34;
		data-flex-basis=&#34;329px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Using unofficial APIs isn&amp;rsquo;t really suited for production but I&amp;rsquo;m going to show it to you anyway. The browser tools have this neat little feature that lets you copy a request for various CLIs. Of course I&amp;rsquo;m choosing PowerShell.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-3.png&#34;
	width=&#34;1048&#34;
	height=&#34;1073&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-3_hu3871041827454489038.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-3_hu6919312840070147398.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Copy Request as PowerShell&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;97&#34;
		data-flex-basis=&#34;234px&#34;
	
&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$session&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;New-Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Microsoft&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;PowerShell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Commands&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;WebRequestSession&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;UserAgent&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36 Edg/130.0.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-WebRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-UseBasicParsing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://teams.microsoft.com/api/csa/emea/api/v1/chats/48%3Acalllogs/messages?messagePageSize=200&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;-WebSession&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$session&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-user-type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;real-user&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;authorization&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Bearer (Token Removed)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;cache-control&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;no-store, no-cache&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-client-type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cdlworker&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-session-id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;22f0ef6c-d8b7-46a8-aea2-58451d1fd722&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;Referer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://teams.microsoft.com/v2/worker/precompiled-web-worker-b686ae686e2a6f80.js&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-migration&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;True&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-client-version&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1415/24090101423&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-request-id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;072d879b-e316-4fd6-8c54-b02d82e8f9f6&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-client-caller&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-partition&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;emea01&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-region&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;emea&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ringoverride&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;general&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;All I need to do is store the outputs of line 3 in a variable to access the raw data after the request has been made in PowerShell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$callLogs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Invoke-WebRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-UseBasicParsing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://teams.microsoft.com/api/csa/emea/api/v1/chats/48%3Acalllogs/messages?messagePageSize=200&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Then I needed to convert the JSON response into a PowerShell object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$callLogs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$callLogs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Content&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ConvertFrom-Json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;messages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This of course, includes all call logs. To filter for call queues only, I wrote this code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$callLogProperties&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$callLogs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;call-log&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ConvertFrom-Json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Where-Object&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;callType&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-eq&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;multiParty&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;By inspecting the call log items, I discovered that it even lists the id of the call queue on which the call was received. Yes, the id of the call queue, not the one of the resource account associated with the call queue.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-4.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-4_hu12871650644665689346.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-4_hu16907089813732580330.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Example of a Single Call Queue Call Log Entry&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;To get a table of all call queue calls for this user, I came up with this code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Note: This is only displaying the first 6 items&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$callLogProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Select-Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;startTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;callDirection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;callState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;callId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;callerNumber&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Expression&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;participants&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;4:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)}}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Format-Table&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-5.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-5_hu17246017893898536124.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-5_hu620952256029961148.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Filtered PowerShell Output of Call Queue Call History for a Specific User&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Sadly, this endpoint does not return missed calls. It does however, include calls that were answered by this user, by another user or declined by this user.&lt;/p&gt;
&lt;p&gt;So, the call history in iOS remains the only place where missed call queue calls are actually visible in a UI. However, if you search the Teams logs in the cache directory (&lt;code&gt;%APPDATA%\Local\Packages\MSTeams_8wekyb3d8bbwe\LocalCache\Microsoft\MSTeams&lt;/code&gt;) long enough, you&amp;rsquo;ll find some client logs of missed call queue calls eventually but this is purely educational.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-6.png&#34;
	width=&#34;1614&#34;
	height=&#34;33&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-6_hu3129591316885723803.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-6_hu12143840759698855516.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Missed Call Reference in Teams Client Logs&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;4890&#34;
		data-flex-basis=&#34;11738px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s interesting here is that it says &lt;code&gt;callingEnableMissedCallNotification=false&lt;/code&gt;. &lt;em&gt;Dear Teams, why won&amp;rsquo;t you tell us about missed call queue calls!?&lt;/em&gt; (This is a rhetorical question.)&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get back to PowerShell. When you copy that request from the browser dev tools, it copies a JWT (JSON Web Token) with it. Obviously this token won&amp;rsquo;t live forever and will need to be renewed at some point. The token expires after roughly 24 hours which seems quite long to me. But still, nobody wants to manually refresh the token every day.&lt;/p&gt;
&lt;p&gt;Just to prove the concept, I hacked together a small PowerShell script which uses bits of the &lt;a class=&#34;link&#34; href=&#34;https://aadinternals.com/aadinternals/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;AADInternals&lt;/a&gt; PowerShell module to get a token for the &lt;code&gt;https://chatsvcagg.teams.microsoft.com&lt;/code&gt; audience. I was able to get a token using a call queue agent&amp;rsquo;s username and password but I couldn&amp;rsquo;t get it to work when MFA is enforced. Since we won&amp;rsquo;t need this for this solution anyway, I&amp;rsquo;m not going to publish this script here.&lt;/p&gt;
&lt;p&gt;At this point I realized that I need to work with what I had. If I can get a list of all calls that were answered &lt;em&gt;somewhere&lt;/em&gt; by &lt;em&gt;someone&lt;/em&gt; I can still use that to determine if a call queue call was missed. All I need to do is get a hold of the call id and check if it&amp;rsquo;s in the call log of a user that&amp;rsquo;s an agent of the queue I want to monitor for missed calls.&lt;/p&gt;
&lt;p&gt;But then there was the problem that all this data was retrieved through an internal API. When you look at the JSON response again, you&amp;rsquo;ll notice that there&amp;rsquo;s a property called &lt;strong&gt;containerId&lt;/strong&gt; and it&amp;rsquo;s value is &lt;code&gt;48:calllogs&lt;/code&gt;. That sounds interesting, doesn&amp;rsquo;t it?&lt;/p&gt;
&lt;h2 id=&#34;fetching-a-users-call-history-through-graph-api&#34;&gt;Fetching a Users Call History Through Graph API
&lt;/h2&gt;&lt;p&gt;My next step was to see if I can get this information &lt;em&gt;officially&lt;/em&gt; from Graph by signing into Graph PowerShell with the credentials of a call queue agent.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$user&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-MgUser&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-UserId&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;evelyn@nocaptech.ch&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$userCallHistory&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-MgUserChatMessage&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-UserId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Id&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ChatId&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;48:calllogs&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Bingo. It works.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-7.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-7_hu9530422137382753659.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-7_hu9705475114274137444.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Get Teams User Call History via Graph PowerShell&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;But the Graph API returns much less data than the &lt;em&gt;Chat Service Aggregator&lt;/em&gt;. For example, I can&amp;rsquo;t see if the call was accepted, accepted elsewhere or declined by the user.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-8.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-8_hu17424764256241255055.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-8_hu9232055101926601248.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Example of Single Call Record&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;But when I access the &lt;code&gt;body&lt;/code&gt; property of an object inside the array, I can see the call id.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-9.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-9_hu2213861242925042041.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-9_hu13604203926659761804.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Body\Content Contains Call Id&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;So, now I&amp;rsquo;m able to retrieve a list of all calls that were either answered or declined by this user, or that this user was offered by the call queue but was answered by another agent. This brings us to a very important part about the limitations of this solution.&lt;/p&gt;
&lt;h2 id=&#34;limitations-of-this-solution&#34;&gt;Limitations of This Solution
&lt;/h2&gt;&lt;p&gt;You will either need to define a &lt;em&gt;real&lt;/em&gt; agent user which will always be opted-in to the queue and you must ensure that this agent will never decline a call. (If an agent declines a call, the call id will show up in their call log but when the call log is retrieved via Graph, the results don&amp;rsquo;t include the callState like &lt;code&gt;accepted&lt;/code&gt; or &lt;code&gt;declined&lt;/code&gt;.) Because you can&amp;rsquo;t really control that, I highly recommend to set up a service account and add it to the queue as an agent instead, even if that adds a small monthly license cost to it.&lt;/p&gt;
&lt;p&gt;Your queue must not use presence based routing and the service account must always be signed in on a Teams device/app. I recommend signing the user in on a spare iPhone if you have one. If you don&amp;rsquo;t have one, you can also use Teams desktop, a Teams desk phone or an iPad or whatever you can spare. It just needs to be a device which is running and connected to the internet 24/7 and where the service account is signed into the Teams app persistently.&lt;/p&gt;
&lt;p&gt;I made lots of test calls while my service account was signed in on the Teams app on my iPad and this worked flawlessly. The important thing is that the service user always gets offered the calls but never declines them. Since it&amp;rsquo;s not a problem if the service account answers calls, this could also be a non-personal account for a CAP (Common Area Phone) you might already have in place. If you decide to use dedicated service account for monitoring your call queues, you can also add the same service account to multiple queues, even if the different queues don&amp;rsquo;t share the same agents. Just keep in mind that there&amp;rsquo;s a limit of how many chat messages of the call logs chat Power Automate can fetch through the Graph API. This limit is &lt;strong&gt;50&lt;/strong&gt;. So, if you expect more than 50 calls in a window of 30 minutes, you&amp;rsquo;ll likely need a dedicated service account per queue. Again, this solution is intended for small companies which just want to see when they missed a call on their main number.&lt;/p&gt;
&lt;p&gt;The service account must be licensed with a license that includes Teams, Teams Phone Standard and SharePoint/OneDrive.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve only tested this with call queues which have Conference Mode &lt;strong&gt;enabled&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;securing-the-credentials-to-access-the-graph-api&#34;&gt;Securing The Credentials to Access The Graph API
&lt;/h2&gt;&lt;p&gt;What I did before, to interactively sign into Graph PowerShell using the user&amp;rsquo;s credentials isn&amp;rsquo;t an ideal solution. Even if I was using a service account already. I always try to use MFA, even for service accounts. Let&amp;rsquo;s see if I can get the same result using app only authentication.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-10.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-10_hu9538763137943079228.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-10_hu651095785959676177.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;App Only Authentication Doesn&amp;rsquo;t Work&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, it&amp;rsquo;s not possible to query the &lt;code&gt;48:calllogs&lt;/code&gt; chat id using application permissions, even when the app has the appropriate permission &lt;code&gt;Chat.Read.All&lt;/code&gt;. That meant that I had to find another way to securely get the messages in the Call Log Chat. At some point I&amp;rsquo;ll be building a Power Automate Flow to send the Adaptive Cards for the missed call notifications anyway. So why not try to get the chat messages through a Graph Request from Power Automate as well? That would certainly solve the authentication/token issue.&lt;/p&gt;
&lt;h2 id=&#34;high-level-solution-architecture&#34;&gt;High-Level Solution Architecture
&lt;/h2&gt;&lt;p&gt;Alright, it&amp;rsquo;s time to start architecting this whole thing. It might look a little overkill at first but that&amp;rsquo;s because I&amp;rsquo;m a perfectionist.&lt;/p&gt;
&lt;p&gt;The whole process is kicked off approximately 15-30 minutes after a Teams call has ended. That&amp;rsquo;s how long it usually takes for Microsoft to make the call record available in your tenant. By using a &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/graph/api/subscription-post-subscriptions?view=graph-rest-1.0&amp;amp;tabs=http&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Graph Subscription&lt;/a&gt; I can have Graph send me a notification every time a new record is created or when an existing one is updated. Notifications can be delivered to an endpoint of your choice. I&amp;rsquo;m using an &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/azure/azure-functions/functions-overview?pivots=programming-language-powershell&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Azure Function&lt;/a&gt; for this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Q%20Works%20Lite%20Diagram%20V2.png&#34;
	width=&#34;1280&#34;
	height=&#34;720&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Q%20Works%20Lite%20Diagram%20V2_hu2690247017224506447.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Q%20Works%20Lite%20Diagram%20V2_hu13522805150411089401.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;High-level Diagram&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This will kick off a chain of events to determine if a call to a call queue was answered or missed and notify the Team members if it was missed.&lt;/p&gt;
&lt;h2 id=&#34;how-to-build-this-solution&#34;&gt;How To Build This Solution
&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s dive into how you can build this solution in your own environment. I&amp;rsquo;ve invested quite a few additional hours to make this as easy as possible for you by writing some deployment scripts. What I didn&amp;rsquo;t script is the creation of the service account, it&amp;rsquo;s licensing or updating the group description. You&amp;rsquo;ll need to follow the instructions below to prepare everything.&lt;/p&gt;
&lt;h3 id=&#34;service-account&#34;&gt;Service Account
&lt;/h3&gt;&lt;p&gt;Create a new account in Entra ID and assign any combination of licenses that include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft Teams&lt;/li&gt;
&lt;li&gt;Skype for Business Online Plan 2&lt;/li&gt;
&lt;li&gt;Exchange Online (Plan 1 or 2)&lt;/li&gt;
&lt;li&gt;SharePoint Online&lt;/li&gt;
&lt;li&gt;Power Automate Free&lt;/li&gt;
&lt;li&gt;Microsoft Teams Phone Standard&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The account doesn&amp;rsquo;t necessarily need a phone number. If you don&amp;rsquo;t assign one, the user must be enabled for &lt;strong&gt;Enterprise Voice&lt;/strong&gt; through PowerShell. This is needed so that the account can be added to call queues.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Set-CsPhoneNumberAssignment&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Identity&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$userId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-EnterpriseVoiceEnabled&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;$true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;example-scenario&#34;&gt;Example Scenario
&lt;/h3&gt;&lt;p&gt;Here we have an example call flow. The number is mapped to an auto attendant which then forwards to a call queue which has a nested call queue, in case nobody is able to answer the call in the first queue. Not all agents are opted into the &lt;em&gt;Level 1&lt;/em&gt; call queue because only &lt;em&gt;Evelyn Carter&lt;/em&gt; is primarily answering calls. If she fails to answer calls in the &lt;em&gt;Level 1&lt;/em&gt; queue, the calls overflows into the &lt;em&gt;Level 2&lt;/em&gt; queue, where all the agents are opted in. On the left you can see that the service user &lt;em&gt;Q Works&lt;/em&gt; hasn&amp;rsquo;t been added as an agent to the queue yet. On the right, the &lt;em&gt;Q Works&lt;/em&gt; user is also an agent, so that I can use the Graph API via Power Automate to check if calls were answered by other agents of the queue.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Main_Number_US_AA_CallFlow.png&#34;
	width=&#34;3920&#34;
	height=&#34;16765&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Main_Number_US_AA_CallFlow_hu12861199453210911393.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Main_Number_US_AA_CallFlow_hu14191321893858572969.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Call Queue without Service Account Agent&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;23&#34;
		data-flex-basis=&#34;56px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Main_Number_US_AA_CallFlow-QWorksEnabled.png&#34;
	width=&#34;3920&#34;
	height=&#34;17605&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Main_Number_US_AA_CallFlow-QWorksEnabled_hu9978655096263468338.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Main_Number_US_AA_CallFlow-QWorksEnabled_hu7779682590270298608.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Call Queue with Service Account Agent&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;22&#34;
		data-flex-basis=&#34;53px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;So far, I have only tested the solution with an auto attendant and a maximum of 2 nested queues or an auto attendant with an IVR which has 2 queues as menu options. In theory, this solution should work with any amount of nested queues or IVR options.&lt;/p&gt;
&lt;h3 id=&#34;teams&#34;&gt;Teams
&lt;/h3&gt;&lt;p&gt;To receive alerts about missed calls on call queues, you need to map your inbound numbers of top-level call queues or queues which are nested behind a top-level auto attendant to the Teams in which you want to receive the notifications. To map a number to a Team, simply adjust the Team&amp;rsquo;s description by adding &lt;code&gt;Q.Works Phone Number:&amp;lt;Your Phone Number&amp;gt;&lt;/code&gt; at the very beginning of the description. Do not add any other characters after the phone number.&lt;/p&gt;
&lt;p&gt;Make sure to paste the phone number exactly as it appears in Teams Admin Center on your resource account, including all the spaces. Do not add any other characters such as hyphens or dots.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-11.png&#34;
	width=&#34;1426&#34;
	height=&#34;767&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-11_hu5671432014897291338.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-11_hu16986070873644479388.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Description in Entra ID Admin Center&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;185&#34;
		data-flex-basis=&#34;446px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Q Works Lite expects only one Team to receive notifications per phone number. If you&amp;rsquo;re an owner of the Team, you can edit the description directly in the Teams App. But you can also edit the group&amp;rsquo;s description in the M365 Admin or the Entra Admin Center.&lt;/p&gt;
&lt;p&gt;When the Azure function runs, it will fetch the phone number that was called and then look for the Team by searching for the matching description, so that it knows in which Team the notifications need to be posted.&lt;/p&gt;
&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites
&lt;/h3&gt;&lt;p&gt;First of all, make sure that you&amp;rsquo;ve got all these tools and PowerShell modules installed on your machine.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PowerShell 7&lt;/li&gt;
&lt;li&gt;Azure Function Core Tools&lt;/li&gt;
&lt;li&gt;Azure CLI&lt;/li&gt;
&lt;li&gt;Python 3.11.9&lt;/li&gt;
&lt;li&gt;Node.JS
&lt;ul&gt;
&lt;li&gt;M365 CLI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PowerShell Modules:
&lt;ul&gt;
&lt;li&gt;Microsoft.Graph.Applications&lt;/li&gt;
&lt;li&gt;Microsoft.Graph.Users&lt;/li&gt;
&lt;li&gt;Az.Accounts&lt;/li&gt;
&lt;li&gt;Az.Functions&lt;/li&gt;
&lt;li&gt;Az.KeyVault&lt;/li&gt;
&lt;li&gt;Az.Storage&lt;/li&gt;
&lt;li&gt;Az.Resources&lt;/li&gt;
&lt;li&gt;Az.Websites&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;clone-repository&#34;&gt;Clone Repository
&lt;/h3&gt;&lt;p&gt;Before anything is installed/deployed you&amp;rsquo;ll need to clone my git repository or download a &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/Q-Works-Lite-Public&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;zip file&lt;/a&gt; of the code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clone&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;github&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;com&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mozziemozz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Q-Works&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-Lite-Public&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;git&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;You can use the below scripts to install everything. Make sure that you run both scripts as administrator. After installing the tools, close PowerShell and make sure to run the second script in PowerShell 7.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;Install-Prerequisites-Tools.ps1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;Install-Prerequisites-Modules.ps1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;customize-for-your-environment&#34;&gt;Customize For Your Environment
&lt;/h3&gt;&lt;p&gt;Open the Json file located at &lt;code&gt;.\Deployment\environment.json&lt;/code&gt; to customize the deployment for your environment. You can specify a name for the solution, your company shortname and the Azure region.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;SolutionName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Q Works Lite V3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;CompanyShortName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;NCT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;RedirectURI&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://localhost&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;AzureRegion&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Switzerland North&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;run-setupps1&#34;&gt;Run Setup.ps1
&lt;/h3&gt;&lt;p&gt;Once all the required tools and modules are installed, run the &lt;code&gt;Setup.ps1&lt;/code&gt; script located in the &lt;code&gt;.\Deployment&lt;/code&gt; folder of the repo. This will deploy all the resources in Azure. Your account will need global administrator permission and it needs permission to be able to create new Azure resources, including resource groups.&lt;/p&gt;
&lt;h3 id=&#34;enable-solution&#34;&gt;Enable Solution
&lt;/h3&gt;&lt;p&gt;To enable Q Works Lite, you will need to import the Power Automate Flow to the service user&amp;rsquo;s Power Automate environment so that you can then copy the trigger URL and paste it into the deployment script. (You&amp;rsquo;ll be prompted to paste at some point). Don&amp;rsquo;t just import the Zip file that&amp;rsquo;s located in &lt;code&gt;.\PowerAutomate&lt;/code&gt;. The deployment script will extract this archive, make some changes specific to your environment and repackage a new zip file which then needs to be uploaded. Finally, run the &lt;code&gt;Renew-GraphSubscription&lt;/code&gt; PowerShell function once from the portal or wait for it to be &lt;code&gt;12:15&lt;/code&gt; UTC either on this day or the next day. This function will create a new subscription the first time it runs.&lt;/p&gt;
&lt;p&gt;Everything is explained in much more detail in the tutorial video. I highly recommend to watch it either while you&amp;rsquo;re deploying this yourself or before you&amp;rsquo;re getting started.&lt;/p&gt;
&lt;h3 id=&#34;video-tutorial&#34;&gt;Video Tutorial
&lt;/h3&gt;&lt;p&gt;Because I felt like this is too much to type, I&amp;rsquo;m trying something different this time around and I recorded a YouTube video where I run the setup myself and explain everything in detail instead.&lt;/p&gt;
&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe loading=&#34;lazy&#34; 
            src=&#34;https://www.youtube.com/embed/C0Y5yiOghwo&#34; 
            allowfullscreen 
            title=&#34;YouTube Video&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;what-do-the-functions-and-the-flow-do&#34;&gt;What do the Functions and the Flow do?
&lt;/h2&gt;&lt;p&gt;There are four functions in total. Three of them are PowerShell functions and one of them is a Python function but all of them use the same Linux App Service Plan. One of these functions is solely used to manage and renew the Graph subscription so it doesn&amp;rsquo;t expire. The Python function uses a Python library called &lt;strong&gt;phonenumbers&lt;/strong&gt; to format the raw E.164 numbers into an international format which is easier to read for humans. It basically inserts spaces at the correct positions for any given phone number in the world. I&amp;rsquo;ve used and written about &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/prettify-and-sync-teams-phone-numbers-to-azure-ad-e973755f83d5/&#34; &gt;this&lt;/a&gt; in an Azure Runbook before. Now I&amp;rsquo;ve created my own Azure Python Function so this can be used by the &lt;strong&gt;Analyze-CallRecord&lt;/strong&gt; PowerShell function. And finally, the &lt;strong&gt;Receive-GraphNotifications&lt;/strong&gt; function is receiving the notifications from Graph. Graph &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/graph/change-notifications-delivery-webhooks?tabs=http#http-codes-and-retry-logic&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;expects a response within 10 seconds&lt;/a&gt; so this function is really minimalistic. All it does is save the call Id to a storage queue in the storage account that was created for the PowerShell Function App. A new message in the storage queue will then trigger the &lt;strong&gt;Analyze-CallRecord&lt;/strong&gt; function which does the actual leg-work.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-12.png&#34;
	width=&#34;1703&#34;
	height=&#34;1199&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-12_hu7909063992293898443.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-12_hu2260457866614080552.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Azure Resources&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;340px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The authentication to Graph is done through an Entra Application which uses application permissions/app only authentication with a client secret. The client secret is stored securely in an Azure Key Vault and the permissions on the Key Vault secrets are assigned to the managed identity of the PowerShell Function App.&lt;/p&gt;
&lt;p&gt;The main function (Analyze-CallRecord) then checks if it was a &lt;code&gt;groupCall&lt;/code&gt; (call queue call) and if it was a PSTN or an internal call. The function only processes external calls to call queues, everything else is disregarded. Unfortunately, it&amp;rsquo;s not possible to create a Graph subscription only for certain types of call records so the function will be called for any new call records. That includes internal calls and Teams meetings as well. However, the free plan includes 1 million executions per month which should be plenty enough for small businesses.&lt;/p&gt;
&lt;p&gt;Once the function has gathered all the details about the call, and if it was indeed a PSTN call to a call queue, the function will then trigger the Power Automate Flow.&lt;/p&gt;
&lt;p&gt;The flow will fetch the &lt;a class=&#34;link&#34; href=&#34;#fetching-a-users-call-history-through-graph-api&#34; &gt;call logs chat history&lt;/a&gt; of the service account (which is also a member of the call queues) and checks if the current call id is present in the call logs or not. If the call id is found in the call logs chat history, it means that the call was answered by another agent. If the call id is not present, it means that the call was missed by all agents and it went unanswered.&lt;/p&gt;
&lt;p&gt;If the call was missed, the flow will post a new adaptive card to the Teams channel and wait for a response (until a call queue agent has clicked the &lt;em&gt;Call Back Completed&lt;/em&gt; button).&lt;/p&gt;
&lt;h2 id=&#34;end-user-experience&#34;&gt;End User Experience
&lt;/h2&gt;&lt;p&gt;This is how it looks like in Teams. Once the &lt;strong&gt;Call Completed&lt;/strong&gt; button was clicked, the card will update for all users so everybody will be able to see, who called the customer/caller back. (Completed By: {User Name})&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-14.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-14_hu16145688351392887223.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-14_hu9621980744674811618.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;New Notification&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-13.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-13_hu12806696484080169787.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-13_hu8109597909639808360.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Call Back Button&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-16.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-16_hu13351373814562171716.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-16_hu12594891214410082248.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Updated Card&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary
&lt;/h2&gt;&lt;p&gt;My goal was to deliver a missed call notification as quickly as possible &lt;strong&gt;but&lt;/strong&gt; do it with close to 100% accuracy with V1 of the call records. (I purposely said &lt;em&gt;close to 100%&lt;/em&gt; because there could still be occasional outages with the Graph notification service etc.) That&amp;rsquo;s why I chose to go the route of having an always opted in &lt;em&gt;monitoring&lt;/em&gt; agent in the queue. The problem is, especially with complex call flows that have a lot of nested queues, IVRs etc. that it can take multiple hours for the call records to have enough information to determine whether a call was answered or missed. If you analyze the data too soon, you&amp;rsquo;ll get false positives and if you wait until the data is complete, it will take much longer until the agents receive the notification.&lt;/p&gt;
&lt;p&gt;I may extend this solution in the future by also processing &lt;em&gt;updated&lt;/em&gt; call records to create a shared call history for call queues in a SharePoint list. But for now, or at least until Microsoft delivers shared call history as a feature of Teams Premium / the Queues app, I believe this is as close as we can get to quick and reliable missed call notifications for call queues today.&lt;/p&gt;
&lt;p&gt;The fact that this solution needs a service account, or at least a normal agent who&amp;rsquo;s opted into the queue all the time and that it can only be used on non-presence based attendant routing queues sure is a bummer but I just can&amp;rsquo;t see any other way to deliver accurate notifications as fast as they are with this solution.&lt;/p&gt;
&lt;p&gt;Even with it&amp;rsquo;s limitations, I&amp;rsquo;m very proud of my work and I&amp;rsquo;m very excited to share it with the community today. I&amp;rsquo;ve literally spent hundreds of hours developing this solution and I&amp;rsquo;ve experienced many set-backs and had to iterate through a lot of different approaches to achieve what I&amp;rsquo;ve published today. The good thing is that in the end, I got much more joy than frustration out of it.&lt;/p&gt;
&lt;p&gt;Since I&amp;rsquo;ve only been using this in my lab so far, I don&amp;rsquo;t have any insights of what the Azure resources are going to cost per month but since the Function Apps are using a consumption plan (Y1) and nothing is really stored in these storage accounts, the monthly cost should be next to nothing. Of course this is also depending on your call volume since this will impact how many times your function is invoked.&lt;/p&gt;
&lt;p&gt;If what I said about costs turns out to be true and you like what I&amp;rsquo;ve done for the community and Teams Phone customers, I would very much appreciate it, if you consider supporting this project with a small donation on either &lt;a class=&#34;link&#34; href=&#34;https://buymeacoffee.com/martin.heusser&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Buy me a Coffee&lt;/a&gt; or &lt;a class=&#34;link&#34; href=&#34;https://github.com/sponsors/mozziemozz?frequency=one-time&amp;amp;sponsor=mozziemozz&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub Sponsors&lt;/a&gt;. Thank you!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Microsoft Teams: Change Call Queue Opt In Status on Behalf of Other User</title>
        <link>https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/</link>
        <pubDate>Fri, 14 Jun 2024 16:48:53 +0000</pubDate>
        
        <guid>https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/</guid>
        <description>&lt;p&gt;&lt;strong&gt;Update 29.09.2024&lt;/strong&gt; This post features a proof of concept and was an experimental project leveraging not supported ways of achieving what was presented. It looks like Microsoft has made changes to the &lt;strong&gt;Send an HTTP request to SharePoint&lt;/strong&gt; and tightened the security around it. Some of the actions outlined in this blog post are no longer possible and now throw an &lt;strong&gt;Unauthorized&lt;/strong&gt; error. While it was nice to be able to do these things, I fully believe that Microsoft is doing the right thing by adding more security to their services. If you want to be able to opt in/out another user on their behalf, I recommend to use the now available &lt;strong&gt;Queues&lt;/strong&gt; app in Teams.&lt;/p&gt;
&lt;h2 id=&#34;history-lesson&#34;&gt;History Lesson
&lt;/h2&gt;&lt;p&gt;Up until now, it hasn&amp;rsquo;t been possible for a queue manager to opt in or opt out other agents on their behalf. Opting in or out of a queue was always an action that had to be done by agents themselves. This changes with the &lt;strong&gt;Queues&lt;/strong&gt; app which is currently still in private preview. If you&amp;rsquo;re reading this blog, I doubt that this is the first time that you&amp;rsquo;re hearing of this but nevertheless, I&amp;rsquo;m still going to add a couple of links to this blog post.&lt;/p&gt;
&lt;p&gt;You can read the official announcement of the Queues app &lt;a class=&#34;link&#34; href=&#34;https://techcommunity.microsoft.com/t5/microsoft-teams-blog/introducing-the-queues-app-enabling-customer-engagement-in/ba-p/4095971&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt; and you&amp;rsquo;ll find the official support article &lt;a class=&#34;link&#34; href=&#34;https://support.microsoft.com/en-us/office/use-the-queues-app-for-microsoft-teams-370ad83e-c2c1-4a9f-8a59-16c98be102e9&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. On &lt;a class=&#34;link&#34; href=&#34;https://regale.cloud/Microsoft/viewer/2963/queues-app/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; page you can see an interactive demo of the queues app.&lt;/p&gt;
&lt;p&gt;While this will finally make it possible to change the opt in status on someone else&amp;rsquo;s behalf, it comes at a price. The Queues app will be part of Teams Premium and thus increase your monthly license costs. At this point, I don&amp;rsquo;t think it&amp;rsquo;s confirmed if only a supervisor can have a Teams Premium license and still be able to change the opt in status of others, or if all the members of a queue will require a Teams Premium license. My best guess is that every member of the queue will require an additional license but please don&amp;rsquo;t take my word for it.&lt;/p&gt;
&lt;p&gt;Since this was one of the most requested features of Teams Phone customers, I already experimented with creating something that would allow somebody to change an agent&amp;rsquo;s opt in statuses remotely in the past. I blogged about this &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/opt-in-or-opt-out-teams-call-queue-agents-remotely-59fe6147f50d&#34; &gt;here&lt;/a&gt;. I don&amp;rsquo;t think that this method still works today but it did work at the time. However, this never made it past a proof of concept because it required the username, password and potentially an MFA secret for the user account for which the opt in status needed to be changed.&lt;/p&gt;
&lt;p&gt;Today, I&amp;rsquo;m presenting a different solution. It&amp;rsquo;s still very much a proof of concept and not very scalable but at least it doesn&amp;rsquo;t need user credentials anymore. But most importantly, it doesn&amp;rsquo;t need any additional licenses.&lt;/p&gt;
&lt;h2 id=&#34;inspiration-from-the-community&#34;&gt;Inspiration from the Community
&lt;/h2&gt;&lt;p&gt;I initially got the idea from fellow MVP &lt;a class=&#34;link&#34; href=&#34;https://www.loryanstrant.com/2023/06/05/automatically-change-your-microsoft-teams-working-location-with-home-assistant/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Loryan Strant&lt;/a&gt;. In this blog post, he explains how you can leverage the &lt;strong&gt;Send an HTTP request to SharePoint&lt;/strong&gt; in Power Automate to make web requests to other end points. In his case, he&amp;rsquo;s targeting the endpoint which is used to update a user&amp;rsquo;s work location. Unknowingly at that time, I worked on &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d&#34; &gt;my own way&lt;/a&gt; of programmatically setting my work location using PowerShell and AADInternals. I&amp;rsquo;ll soon be writing something new about this too but today&amp;rsquo;s issue is all about call queues and changing opt in statuses.&lt;/p&gt;
&lt;p&gt;My next step was to look at the browser dev tools in Edge to see if anything had changed in how the Teams web client handles an opt in change. I already used this method in my first proof of concept over two years ago and I learned how you can effectively use the browser dev tools to see what&amp;rsquo;s going on under the hood from Alexander Holmeset in &lt;a class=&#34;link&#34; href=&#34;https://alexholmeset.blog/2021/02/28/teams-network-planner-automated/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; blog post. On that note I want to point out that I&amp;rsquo;ll forever be grateful for that post. Acquiring this skill has helped me achieve something so many times already!&lt;/p&gt;
&lt;p&gt;In V1 of this PoC the request used to update an agent&amp;rsquo;s opt in status looked like this and the call queue Id was referenced in the payload.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-RestMethod&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://api.interfaces.records.teams.microsoft.com/Teams.VoiceApps/cq-agents/{User Id}&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Body&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$payload&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Put&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$Headers&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Today, this request looks like this and the call queue Id is now part of the URI:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-RestMethod&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://api.interfaces.records.teams.microsoft.com/Teams.DLX/optinsettings/callqueues/{Call Queue Id}/agents/{User Id}&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Body&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;optIn&amp;#34;: {true/false}&amp;#39;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Put&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$Headers&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;I have no idea what &lt;strong&gt;DLX&lt;/strong&gt; stands for. The only thing I could find was &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/openspecs/office_protocols/ms-dlx/fa0e41cd-2b34-4081-b3cf-59ecdad7a5da&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; reference.&lt;/p&gt;
&lt;p&gt;The challenge with these web requests is that you still need to provide a valid access token in the authorization header. In PowerShell, there&amp;rsquo;s no way around user credentials to obtain a token. This is different in Power Automate though.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-the-prerequisites&#34;&gt;Setting up the Prerequisites
&lt;/h2&gt;&lt;p&gt;Before we build the Flow, we&amp;rsquo;ll need something to trigger it. The best and easiest thing I could think of was to create a SharePoint list and add it as a tab to the Teams channel that&amp;rsquo;s linked to the call queue. If you don&amp;rsquo;t already know how to do that, follow the steps below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-1.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-1_hu11913583426385938427.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-1_hu9304733878779632263.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Click the &amp;#43; to add a tab.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-2.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-2_hu530063749930359838.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-2_hu15157909680239559655.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Search for &amp;lsquo;Lists&amp;rsquo; and click on it.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-3.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-3_hu7937741121339155755.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-3_hu17538482900093854851.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Click Save.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-4.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-4_hu2377144743537114884.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-4_hu4314821337011684003.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Select Create a list.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-5.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-5_hu5463564391803077305.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-5_hu6123452386488159593.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Click on Blank list.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-6.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-6_hu17252448217805581256.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-6_hu4365632963787324501.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Give your list a name and select a color and an icon. Then click create.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now that the tab shows your list, we&amp;rsquo;ll need to add the columns. Start by clicking &lt;strong&gt;+ Add column&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-8.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-8_hu129451366560112092.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-8_hu245937803451660543.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Select Person and click Next.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-7.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-7_hu6970902461574767365.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-7_hu1498024393115296102.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Enter &amp;lsquo;Agent&amp;rsquo; as column name and toggle Show profile photos to Yes.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-9.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-9_hu8043155632980410742.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-9_hu8963576290552745298.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Add another column and choose Yes/No as type.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-10.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-10_hu962999845287303447.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-10_hu1603584529402314834.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Name it &amp;lsquo;Opt In&amp;rsquo; and click Save.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-11.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-11_hu16542849257511873056.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-11_hu16932690610536722226.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Add another Yes/No column called &amp;lsquo;Updated by Power Automate&amp;rsquo; and set the default value to No.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Next, hide the &lt;strong&gt;Title&lt;/strong&gt; column from the view. We don&amp;rsquo;t need it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-12.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-12_hu9770511780570287800.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-12_hu9399227338352732912.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Click on the column, then select Column settings, Show/hide columns.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-13.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-13_hu4303637038459811682.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-13_hu6139821486824365882.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Uncheck Title and click Apply.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now select &lt;strong&gt;Edit in grid view&lt;/strong&gt; and add your call queue agents to the list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-14.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-14_hu12602022400071259707.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-14_hu18177151818299355995.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Add all call queue agents to the Agent column.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;re done, click &lt;strong&gt;Exit grid view&lt;/strong&gt; to save the list. It should look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-18.png&#34;
	width=&#34;2108&#34;
	height=&#34;1216&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-18_hu11655581890386546295.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-18_hu5477638153986702771.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Tip: You can reorder tabs by dragging. I&amp;rsquo;ve put my List tab next to the Calls tab.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;173&#34;
		data-flex-basis=&#34;416px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-power-of-power-automate&#34;&gt;The Power of Power Automate
&lt;/h2&gt;&lt;p&gt;In Power Automate, Flows are able to leverage connections for which Power Automate will automatically obtain a token for the user that&amp;rsquo;s running the Flow. While you can&amp;rsquo;t view the token, you can certainly use it to make web requests. The principle is quite simple. Each user needs to set up a Power Automate Flow which will update their opt in status when the Flow is triggered.&lt;/p&gt;
&lt;p&gt;The downside is that a Flow needs to be set up for each user and for each call queue where you want to leverage this custom solution. So, if a user is part of multiple queues, there also need to be multiple Flows per user. To be fair, I did say that this is a PoC at the beginning.&lt;/p&gt;
&lt;p&gt;The good thing about this is that I&amp;rsquo;ve built the Flow in a way, in which it will work for any user. A queue supervisor or an IT admin can just create Flow and then share it with all the agents. Each of the agents can then access the Flow using their own account and save a copy of the Flow to their own Flows. If they&amp;rsquo;ve never worked with Power Automate before, they might need help doing that but sharing and saving a copy is still the quickest way to set it all up.&lt;/p&gt;
&lt;h3 id=&#34;flow-for-each-agent&#34;&gt;Flow For Each Agent
&lt;/h3&gt;&lt;p&gt;Let&amp;rsquo;s look at the first Flow. I&amp;rsquo;ll call this the &lt;strong&gt;User-Flow&lt;/strong&gt; from now on.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image.png&#34;
	width=&#34;2064&#34;
	height=&#34;1823&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image_hu9639506191421241325.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image_hu17382347141440935731.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;This is the Power Automate Flow in all it&amp;rsquo;s glory.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;113&#34;
		data-flex-basis=&#34;271px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The Flow will trigger any time the SharePoint list which is now a tab in Teams is updated.&lt;/p&gt;
&lt;h4 id=&#34;import-the-flow-package&#34;&gt;Import the Flow Package
&lt;/h4&gt;&lt;p&gt;Start by downloading the Flow from &lt;a class=&#34;link&#34; href=&#34;#download-flow-packages&#34; &gt;here&lt;/a&gt; and then import it in Power Automate with a user that is part of the call queue, for which you want to add the functionality.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-21.png&#34;
	width=&#34;876&#34;
	height=&#34;242&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-21_hu17969875031334252726.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-21_hu7863184465684036780.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Click on Import Package (Legacy).&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;361&#34;
		data-flex-basis=&#34;868px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-22.png&#34;
	width=&#34;2233&#34;
	height=&#34;431&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-22_hu9378649849066676247.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-22_hu5514892286775171662.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Next, select and upload the Zip file.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;518&#34;
		data-flex-basis=&#34;1243px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-23.png&#34;
	width=&#34;1847&#34;
	height=&#34;1147&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-23_hu17564494902182706656.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-23_hu4258437063927111829.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Click the first Wrench Icon to update the name of the Flow.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;161&#34;
		data-flex-basis=&#34;386px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-24.png&#34;
	width=&#34;1895&#34;
	height=&#34;1326&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-24_hu4213196471572211845.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-24_hu15721084507449836354.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Click the Wrench Icon for both connections and choose an existing connection or set up a new one.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;342px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-25.png&#34;
	width=&#34;1856&#34;
	height=&#34;1326&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-25_hu5151078014175545705.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-25_hu4840205175460810919.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Finally, click Import.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;139&#34;
		data-flex-basis=&#34;335px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;After successfully importing the Flow, it will be disabled at first. Navigate to &lt;strong&gt;My flows&lt;/strong&gt; and click on the imported Flow to enable it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-26.png&#34;
	width=&#34;1439&#34;
	height=&#34;515&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-26_hu18259315964895338768.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-26_hu7481541286255530911.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Click Trun on&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;279&#34;
		data-flex-basis=&#34;670px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Then, click &lt;strong&gt;Edit&lt;/strong&gt;. Now you need to update the trigger and select the correct Team/Site and List for the trigger. This will be the SharePoint site of the Team in which you created the list tab.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-15.png&#34;
	width=&#34;933&#34;
	height=&#34;330&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-15_hu1602228107939671958.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-15_hu18399674530512702439.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Set the Flow trigger to your Site and List.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;282&#34;
		data-flex-basis=&#34;678px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In the third step &lt;strong&gt;Initialize CallQueueId&lt;/strong&gt; fill in the Id of your call queue. The easiest way to obtain the Id is to edit the queue in Teams Admin Center and copy the Id from the URL.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-16.png&#34;
	width=&#34;937&#34;
	height=&#34;298&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-16_hu17774634404559597013.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-16_hu4017430030039818292.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Set the call queue Id&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;314&#34;
		data-flex-basis=&#34;754px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;These are the only two things you need to adjust. Because the Flow uses the action &lt;strong&gt;Get my profile (V2)&lt;/strong&gt; you don&amp;rsquo;t need to set anything that&amp;rsquo;s user specific. That action will always get the details of the user that is running the Flow.&lt;/p&gt;
&lt;h4 id=&#34;share-the-flow-with-all-the-other-agents&#34;&gt;Share the Flow with all the other Agents
&lt;/h4&gt;&lt;p&gt;Now that you have the Flow imported to your account, share it with all agents of the call queue.&lt;/p&gt;
&lt;p&gt;Go back to &lt;strong&gt;My flows&lt;/strong&gt; and select the Flow again to share it with your team.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-27.png&#34;
	width=&#34;1440&#34;
	height=&#34;422&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-27_hu8528806638046816043.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-27_hu1128282297428298293.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;From there, click Share.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;341&#34;
		data-flex-basis=&#34;818px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-28.png&#34;
	width=&#34;1716&#34;
	height=&#34;470&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-28_hu5086464589580250981.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-28_hu7595605989610089656.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Search for another call queue agent and select them from the drop-down menu.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;365&#34;
		data-flex-basis=&#34;876px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-29.png&#34;
	width=&#34;1039&#34;
	height=&#34;734&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-29_hu167498132066773330.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-29_hu3234347335798673121.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Confirm by clicking Ok.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;141&#34;
		data-flex-basis=&#34;339px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now ask the user you shared the Flow with to sing in to &lt;a class=&#34;link&#34; href=&#34;https://make.powerautomate.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Power Automate&lt;/a&gt; and navigate to &lt;strong&gt;My flows&lt;/strong&gt; and switch to the &lt;strong&gt;Shared with me&lt;/strong&gt; tab.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-30.png&#34;
	width=&#34;1403&#34;
	height=&#34;955&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-30_hu4561416554919895521.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-30_hu5466886728487689714.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Instruct them to click the three dots and select Save as.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;146&#34;
		data-flex-basis=&#34;352px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-31.png&#34;
	width=&#34;1030&#34;
	height=&#34;472&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-31_hu2857392925328974134.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-31_hu17070033798895599830.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Instruct them to create the connections by clicking Continue.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;218&#34;
		data-flex-basis=&#34;523px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-32.png&#34;
	width=&#34;1038&#34;
	height=&#34;420&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-32_hu5182470505484744005.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-32_hu3043512181455849335.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;They can rename the Flow before saving.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;247&#34;
		data-flex-basis=&#34;593px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-33.png&#34;
	width=&#34;1057&#34;
	height=&#34;947&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-33_hu17293382911932268230.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-33_hu9749183023347001063.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Finally, they&amp;rsquo;ll need to go to My flows again and turn on the copied Flow using the menu behind the three dots.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;111&#34;
		data-flex-basis=&#34;267px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Repeat these steps for all the other call queue agents. Each agent needs to have this Flow in their own Power Automate environment since the Flow will need to run with their credentials to be able to change their opt in status.&lt;/p&gt;
&lt;h3 id=&#34;flow-to-keep-the-list-in-sync&#34;&gt;Flow to keep the List in Sync
&lt;/h3&gt;&lt;p&gt;Obviously the agents will still be able to change their opt in status on their own using their Teams clients. In that case, we want to keep the SharePoint list updated as well and reflect changes to opt in status made outside of the list. For this, I&amp;rsquo;ve created another Flow. I&amp;rsquo;ll call that one the &lt;strong&gt;Sync-Flow&lt;/strong&gt;. This Flow will update the list for all agents and it will need to be created only once. In my Lab, I&amp;rsquo;ve configured this Flow with a recurring trigger every 15 minutes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-17.png&#34;
	width=&#34;1428&#34;
	height=&#34;1835&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-17_hu18094835676414418205.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-17_hu11659137885635116474.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Flow to update the List if CQ Agents opt in/out via Teams clients.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;77&#34;
		data-flex-basis=&#34;186px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This Flow will send an HTTP Get request via the &lt;strong&gt;Send an HTTP request to SharePoint&lt;/strong&gt; to the call queue endpoint used to read and write the opt in states of agents. This is basically the same as what I&amp;rsquo;m using to update the opt in states but this time, I&amp;rsquo;m only reading from it. The JSON response will include a list of each agent&amp;rsquo;s Object Id and their current opt in state. Then it uses the &lt;strong&gt;Get user profile (V2)&lt;/strong&gt; action to find the email address of the current user by Object Id. This is needed so that the Flow can query the list item of each agent.&lt;/p&gt;
&lt;p&gt;Once the Flow knows both values, the actual opt in state and what&amp;rsquo;s currently stored in the list, it will compare the values. If they&amp;rsquo;re the same, nothing happens. If they&amp;rsquo;re not the same, the Flow will update the SharePoint list with the actual value.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-19.png&#34;
	width=&#34;2108&#34;
	height=&#34;1216&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-19_hu1896115540196913194.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-19_hu11852883048610094001.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;The List tab after it&amp;rsquo;s been updated by Power Automate.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;173&#34;
		data-flex-basis=&#34;416px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If an opt in status was updated by Power Automate, it will also set the value in &lt;strong&gt;Updated by Power Automate&lt;/strong&gt; to &lt;code&gt;True&lt;/code&gt; (Checkmark). By doing it like this, we can avoid an infinite trigger loop on the User-Flows. Since they use &lt;strong&gt;When an item is created or modified&lt;/strong&gt; as their trigger, they would be triggered any time the List is updated. That will include updates made by the recurring Sync-Flow.&lt;/p&gt;
&lt;p&gt;Since we definitely don&amp;rsquo;t want that, I&amp;rsquo;ve added a trigger condition to the User-Flows. A trigger condition is an expression, which must evaluate to &lt;code&gt;True&lt;/code&gt; for the Flow to be triggered.&lt;/p&gt;
&lt;p&gt;This expression will check if the &lt;strong&gt;Updated by Power Automate&lt;/strong&gt; checkbox is not checked. So, whenever the list is updated by the Sync-Flow, the user Flows won&amp;rsquo;t be triggered.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@equals(triggerOutputs()?[&amp;#39;body/UpdatedByPowerAutomate&amp;#39;], false)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-20.png&#34;
	width=&#34;917&#34;
	height=&#34;1395&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-20_hu5708539168798782398.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-20_hu437063029256463986.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;The trigger condition will prevent infinite trigger loops.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;65&#34;
		data-flex-basis=&#34;157px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s important to note that when you or somebody else wants to change the opt in status of an agent again from the list, the &lt;strong&gt;Updated by Power Automate&lt;/strong&gt; checkbox must be unchecked again. Otherwise the User-Flows won&amp;rsquo;t run and the opt in status won&amp;rsquo;t be changed.&lt;/p&gt;
&lt;h4 id=&#34;import-the-flow-package-1&#34;&gt;Import the Flow Package
&lt;/h4&gt;&lt;p&gt;You can download this Flow from &lt;a class=&#34;link&#34; href=&#34;#download-flow-packages&#34; &gt;here&lt;/a&gt;. Use the same process to import the Flow package as you already did with the User-Flow and don&amp;rsquo;t forget to turn it as well on once you&amp;rsquo;re done. In this Flow, you will need to do the following adjustments.&lt;/p&gt;
&lt;p&gt;Replace the value of the &lt;strong&gt;CallQueueId&lt;/strong&gt; variable with your call queue Id.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-35.png&#34;
	width=&#34;923&#34;
	height=&#34;410&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-35_hu2117963138089312102.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-35_hu8761090421070259272.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Set the CallQueueId variable.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;225&#34;
		data-flex-basis=&#34;540px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Then expand all the action boxes and select your &lt;strong&gt;Site Address&lt;/strong&gt; and &lt;strong&gt;List Name&lt;/strong&gt; in the action &lt;strong&gt;Get items&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-36.png&#34;
	width=&#34;939&#34;
	height=&#34;446&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-36_hu8017697667298753491.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-36_hu10571986564566521542.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Replace Site Address and List Name.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;210&#34;
		data-flex-basis=&#34;505px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Finally, do the same for the &lt;strong&gt;Update item&lt;/strong&gt; action inside the &lt;strong&gt;If yes&lt;/strong&gt; condition.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-37.png&#34;
	width=&#34;969&#34;
	height=&#34;717&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-37_hu17667313924104665433.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-37_hu8836776512602459146.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Replace Site Address and List Name.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;135&#34;
		data-flex-basis=&#34;324px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it for the set up part. Let&amp;rsquo;s take a look at the user experience!&lt;/p&gt;
&lt;h2 id=&#34;user-experience&#34;&gt;User Experience
&lt;/h2&gt;&lt;p&gt;Here you can see how it works. Anyone that has access to the list, can simply edit the list and change the opt in status of another colleague.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/TeamsCQOptIn.gif&#34;
	width=&#34;1195&#34;
	height=&#34;672&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/TeamsCQOptIn_hu9871273669532964979.gif 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/TeamsCQOptIn_hu332530050797161910.gif 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Note: The Flow was in test mode to speed up the demo. In real life, it will usually take a few minutes to change an opt in status.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Bonus tip: If you switch to the new designer in Power Automate you can change how often it checks for updated list items in the trigger configuration.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-34.png&#34;
	width=&#34;1488&#34;
	height=&#34;1090&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-34_hu860538479537783540.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-34_hu15071899178839810327.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;The default polling interval is 5 minutes.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;136&#34;
		data-flex-basis=&#34;327px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;additional-benefits&#34;&gt;Additional Benefits
&lt;/h2&gt;&lt;p&gt;As you may know, the &lt;strong&gt;Calls&lt;/strong&gt; tab in channels is not supported on the Teams mobile app. The call queue agents and their opt in status can only be viewed in the Teams desktop or web client. At this point I want to clarify again, that mobile clients can still receive calls from a call queue, even when the call queue is linked to a voice enabled channel. It&amp;rsquo;s only the view/tab that&amp;rsquo;s not supported on Teams mobile apps.&lt;/p&gt;
&lt;p&gt;But since this solution uses a SharePoint list, it will actually give you the ability to view and change the opt in status of other agents from a mobile device too. This can be done by either opening the list tab in Teams mobile or by accessing the list directly in the Lists mobile app.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/20240619_184713000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/20240619_184713000_iOS_hu11523580541972779827.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/20240619_184713000_iOS_hu1652069061924224646.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;List tab in Teams mobile.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/20240619_185305000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/20240619_185305000_iOS_hu18018118354172697295.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/20240619_185305000_iOS_hu2060395788159105390.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Editing a list item in Teams mobile.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/20240619_185536000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/20240619_185536000_iOS_hu18422803775100028305.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/20240619_185536000_iOS_hu12898352815111235887.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Toggle switches in Lists app.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The list app will even give you toggle switches which not only looks better but is also easier to edit compared to the experience within the Teams mobile app.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary
&lt;/h2&gt;&lt;p&gt;While Teams Premium provides a lot of benefits over the Standard license, the additional $10 per user per month can make quite the difference in your monthly license cost. I fully understand the price tag since Teams Premium also includes AI generated notes which use a lot of computing resources and thus cost Microsoft more money to run their services in the backend.&lt;/p&gt;
&lt;p&gt;However, if you&amp;rsquo;re only looking for a way to opt in/out other call queue agents on their behalf and don&amp;rsquo;t want to spend another $10 PUPM, I think this solution can be a suitable workaround. Especially for small companies which don&amp;rsquo;t have a lot of call queues with a lot of agents. Of course there is some work to be done by admins and the end users (agents) but it should be manageable for small teams. And let&amp;rsquo;s not forget the fact this will even allow you to change the opt in status for other agents on mobile platforms too!&lt;/p&gt;
&lt;h3 id=&#34;download-flow-packages&#34;&gt;Download Flow Packages
&lt;/h3&gt;&lt;p&gt;You can download both Flow packages for free from &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Scripts/PowerAutomate/Flows/UpdateCallQueueOptInStatus_20240614215253.zip&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Scripts/PowerAutomate/Flows/SyncOptInStatustoList_20240614215356.zip&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. If you like what I&amp;rsquo;ve presented in this blog post and if it will save you the money you would have otherwise spent on Teams Premium licenses, you can still choose to support me by &lt;a class=&#34;link&#34; href=&#34;https://buymeacoffee.com/martin.heusser&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;buying me a coffee&lt;/a&gt; or by sponsoring me on &lt;a class=&#34;link&#34; href=&#34;https://github.com/sponsors/mozziemozz?frequency=one-time&amp;amp;sponsor=mozziemozz&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Microsoft Teams Auto Attendants: What You Didn&#39;t Know Part 2</title>
        <link>https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/</link>
        <pubDate>Sun, 26 May 2024 10:06:44 +0000</pubDate>
        
        <guid>https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/</guid>
        <description>&lt;h2 id=&#34;intro&#34;&gt;Intro
&lt;/h2&gt;&lt;p&gt;I always love it when members of the community reach out to me via Twitter (Sorry, I&amp;rsquo;m still not calling it X&amp;hellip;), LinkedIn, or any other way. Last week, somebody named Ben reached out to me regarding an issue one of his Teams Phone clients was facing. He turned to me because apparently he couldn&amp;rsquo;t find an answer anywhere online and nor was Microsoft Support able to help him. To me, that&amp;rsquo;s what being an MVP is all about. Being able to help others by sharing knowledge and by providing technical expertise.&lt;/p&gt;
&lt;h2 id=&#34;the-problem&#34;&gt;The Problem
&lt;/h2&gt;&lt;p&gt;The problem was that Teams auto attendants are automatically disconnecting a call after some time, if the caller makes no selection in a voice menu. I tested this myself and discovered that the auto attendant will disconnect the call after the IVR greeting has been played back three times. That means that there is no hardcoded timeout value and the time to disconnect depends on how long the greeting is. Before the call is disconnected, callers will hear the greeting: &lt;code&gt;Sorry, we cannot connect your call at the moment. Please try again later.&lt;/code&gt; Even though I personally don&amp;rsquo;t view this as a real problem but rather a slight inconvenience, it was really important to Ben/his client that the caller is sent to voicemail if no selection is made by the caller in the voice menu.&lt;/p&gt;
&lt;h2 id=&#34;the-solution&#34;&gt;The Solution
&lt;/h2&gt;&lt;p&gt;After understanding the issue, I just thought that adding an operator to the auto attendant and assigning a dial key to the operator in the voice menu will likely fix the issue. Luckily, I was correct and that indeed proved itself to be the solution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you don&amp;rsquo;t want to hang up on callers who just &amp;ldquo;hang out&amp;rdquo; in your auto attendant menus, make sure that you add an operator to your attendant.&lt;/strong&gt; As a reminder, an operater can be one of the following types:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/44b04089-e32a-40ed-b42f-08001084f0fb.png&#34;
	width=&#34;973&#34;
	height=&#34;532&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/44b04089-e32a-40ed-b42f-08001084f0fb_hu14851462302786448309.png 480w, https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/44b04089-e32a-40ed-b42f-08001084f0fb_hu448945375679584024.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Supported operator types are: Teams user (Person in your organization), voice apps (auto attendants, call queues) or external phone numbers (in this case the auto attendant&amp;rsquo;s resource account needs to be set up for outbound calling as well).&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;438px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Read more about the requirements for auto attendant transfers to external phone numbers &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/microsoftteams/create-a-phone-system-auto-attendant?tabs=general-info#external-phone-number-transfers---technical-details&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to send callers who idle around in a voice menu to a voicemail, I still recommend to set up a call queue with overflow threshold 0 instead of an auto attendant. I explained the reason for that &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/#one-lastcaveat&#34; &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;example-diagrams&#34;&gt;Example Diagrams
&lt;/h3&gt;&lt;p&gt;Here you can see that this auto attendant has a default call flow greeting and an a voice menu greeting. Only the voice menu greeting will be repeated if no selection is made. The default call flow greeting will only be played back once.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/NoOperator.png&#34;
	width=&#34;7840&#34;
	height=&#34;11980&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/NoOperator_hu7953662304062153028.png 480w, https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/NoOperator_hu6705914819138974575.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Since there is no operator configured on this auto attendant, the call will disconnect if the caller hasn&amp;rsquo;t made a selection before the voice menu greeting has been played back three times.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;65&#34;
		data-flex-basis=&#34;157px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/WithOperator.png&#34;
	width=&#34;7840&#34;
	height=&#34;12490&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/WithOperator_hu12331189327536050016.png 480w, https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/WithOperator_hu2297273125649902917.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;In this case, I&amp;rsquo;ve added an operator to the auto attendant and also added it as a selection in the voice menu which means the call will be transferred to the operator, if no selection is made by the caller before the message has been played back three times.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;62&#34;
		data-flex-basis=&#34;150px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t want callers to dial the operator straight away, you can just not include any hint in the greeting, that it could be dialed by pressing &lt;code&gt;0&lt;/code&gt; (or whatever dial key you&amp;rsquo;ve assigned to the operator). You can see that my greeting &lt;code&gt;Please press 1 for English or 2 for German&lt;/code&gt; doesn&amp;rsquo;t mention anything about an operator.&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t expand the nested queues in these diagrams so the operator only shows as &lt;strong&gt;Call Queue VIP Support CQ&lt;/strong&gt; but that actually forwards to a shared voicemail immediately.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/CallQueueVoicemail.png&#34;
	width=&#34;480&#34;
	height=&#34;732&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/CallQueueVoicemail_hu7181741673081178407.png 480w, https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/CallQueueVoicemail_hu12805424679206703717.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;This is the call queue that forwards immediately to shared voicemail.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;65&#34;
		data-flex-basis=&#34;157px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;configuration-in-teams-admin-center&#34;&gt;Configuration in Teams Admin Center
&lt;/h3&gt;&lt;p&gt;This is how your auto attendant must be configured.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/image.png&#34;
	width=&#34;1313&#34;
	height=&#34;813&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/image_hu14265974945821577944.png 480w, https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/image_hu2024102495687502039.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;First, add an operator to the auto attendant. In this case, I&amp;rsquo;m using a voice app (call queue).&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;161&#34;
		data-flex-basis=&#34;387px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/image-1.png&#34;
	width=&#34;1522&#34;
	height=&#34;942&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/image-1_hu16665900811370573752.png 480w, https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/image-1_hu1293707548514766031.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;In the default call flow, make sure to assign a dial key to the operator and not to the voice app itself.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;161&#34;
		data-flex-basis=&#34;387px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary
&lt;/h2&gt;&lt;p&gt;I think this is another great example that Teams Phone is slowly maturing and that in fact, most features and scenarios one would expect can be realized. It&amp;rsquo;s just that sometimes it can be a little hard to discover or figure our how something can be achieved. That&amp;rsquo;s what we have the Teams community for. I hope that this short tutorial helps others as well.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Manage Microsoft Teams Call Queues with PowerShell (Force-Sync)</title>
        <link>https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/</link>
        <pubDate>Tue, 04 Apr 2023 19:42:18 +0000</pubDate>
        
        <guid>https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/</guid>
        <description>&lt;p&gt;After my last article turned into a twenty-minute read, I want to write a short blog post today. At least I‚Äôll try to. We are talking about managing Microsoft Teams Call Queues with PowerShell again.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/0cTgVlbyGhDlU8uu.jpg&#34;
	width=&#34;1024&#34;
	height=&#34;1024&#34;
	srcset=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/0cTgVlbyGhDlU8uu_hu7312025414285845708.jpg 480w, https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/0cTgVlbyGhDlU8uu_hu14035592005649927666.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Pretty much about one year ago, I wrote an article explaining how to force sync a Call Queue which uses a group or a Microsoft Team as its source of agent list.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0&#34; &gt;Microsoft Teams Call Queue Agent Lists (And how to Force-Sync them) | by martin heusser | Medium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since then, I have refined the code a little bit to make it even easier. I wrote two functions which are available in a new &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Modules/TeamsPS.psm1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;PowerShell Module&lt;/strong&gt;&lt;/a&gt; which is available in my &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;TeamsPhoneAutomation&lt;/strong&gt;&lt;/a&gt; repository on GitHub.&lt;/p&gt;
&lt;p&gt;To import the module, simply run the following code after you have &lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;cloned&lt;/a&gt; the repository.&lt;/p&gt;
&lt;p&gt;$localRepoPath = git rev-parse &amp;ndash;show-toplevel&lt;br&gt;
Import-Module &amp;ldquo;$localRepoPath/Modules/TeamsPS.psm1&amp;rdquo; -Force&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git rev-parse --show-toplevel&lt;/code&gt; will resolve the cloned repository‚Äôs root path to the absolute file path on your system. This is really helpful if different users clone the repo to different folders on their own machine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1gNxBkz6hW4pvFJjOSPniow.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1gNxBkz6hW4pvFJjOSPniow_hu5749059079391346380.png 480w, https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1gNxBkz6hW4pvFJjOSPniow_hu13606053274944188612.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;There are two Call Queue related functions in the module:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Get-MZZCQAgents&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sync-MZZCQAgents&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let‚Äôs start with the &lt;strong&gt;Get&lt;/strong&gt; function.&lt;/p&gt;
&lt;h4 id=&#34;get-mzzcqagents&#34;&gt;Get-MZZCQAgents
&lt;/h4&gt;&lt;p&gt;This is essentially what &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer/blob/main/Functions/Get-CallQueueAgentsStatus.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this script&lt;/a&gt; mentioned in &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485&#34; &gt;this article&lt;/a&gt; does. However, this function doesn‚Äôt have exporting capabilities and the code has been adapted so it plays nice with the &lt;strong&gt;Sync&lt;/strong&gt; function.&lt;/p&gt;
&lt;p&gt;As we already know, when we check a Call Queues¬†&lt;code&gt;.Agent&lt;/code&gt; property, we will only see GUIDs instead of User Principal Names. Thus, my function. It will search for the users by Id and output UPNs instead of Object Ids.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1pLYCkYoqD9HkTxl7bVetPw.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1pLYCkYoqD9HkTxl7bVetPw_hu5594660934134805191.png 480w, https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1pLYCkYoqD9HkTxl7bVetPw_hu16787920456326015620.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you run the function without parameters, you will be able to choose a Call Queue from a list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/10Zw03oQyVVr3Gp1LcOsQ.png&#34;
	width=&#34;1381&#34;
	height=&#34;659&#34;
	srcset=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/10Zw03oQyVVr3Gp1LcOsQ_hu15179510362454810428.png 480w, https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/10Zw03oQyVVr3Gp1LcOsQ_hu9097874711858499036.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;209&#34;
		data-flex-basis=&#34;502px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you already know the Id of your Call Queue, you can pass it via the &lt;code&gt;-CQIdentity&lt;/code&gt; parameter.&lt;/p&gt;
&lt;p&gt;Get-MZZCQAgents -CQIdentity fe77ecb3-f5a5-47ee-9519-cbb3a52d5771&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1C9HchRKUMR6oQBRLXMBfqg.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1C9HchRKUMR6oQBRLXMBfqg_hu6232341117406185152.png 480w, https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1C9HchRKUMR6oQBRLXMBfqg_hu10102379018466620008.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;sync-mzzcqagents&#34;&gt;Sync-MZZCQAgents
&lt;/h4&gt;&lt;p&gt;This Call Queue uses a Microsoft Teams Team as Agent List, but this also applies to Agents which are assigned to a queue via Security or M365 Groups.&lt;/p&gt;
&lt;p&gt;Think about a scenario where a Team owner adds a new employee to a Team which should also start to receive calls to the queue. Without interaction of a Teams Administrator, it‚Äôs going to take some time until that‚Äôs the case. It will most likely take multiple hours for the change to become effective.&lt;/p&gt;
&lt;p&gt;If we want to speed up that process, we simply need to run &lt;code&gt;Sync-MZZCQAgents&lt;/code&gt;¬†.&lt;/p&gt;
&lt;p&gt;It‚Äôs the same for this function, if you do not specify &lt;code&gt;-CQIdentity&lt;/code&gt; you will be asked to choose &lt;strong&gt;one&lt;/strong&gt; or &lt;strong&gt;multiple&lt;/strong&gt; queues from the list. To select multiple queues, just hold &lt;strong&gt;CTRL&lt;/strong&gt; while selecting list entries.&lt;/p&gt;
&lt;p&gt;Please note that &lt;code&gt;Get-MZZCQAgents&lt;/code&gt; only accepts one selection at a time but &lt;code&gt;Sync-MZZCQAgents&lt;/code&gt; can actually loop through multiple queues after each other if you want to force-sync all or some of your queues.&lt;/p&gt;
&lt;p&gt;The cool thing about this is that the &lt;strong&gt;Sync&lt;/strong&gt; function runs&lt;code&gt;Get-MZZCQAgents&lt;/code&gt; before and after the queue‚Äôs agent list has been synced. This way you can know if the new agent(s) have already been added.&lt;/p&gt;
&lt;p&gt;If you run the function too soon after the membership of a Team or an M365 Group has been updated, chances are that you will get the following output.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1lMTG7LBodcvUifKt7pZVCQ.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1lMTG7LBodcvUifKt7pZVCQ_hu16949007379380796820.png 480w, https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1lMTG7LBodcvUifKt7pZVCQ_hu16340735682578843006.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;First, let‚Äôs remove &lt;strong&gt;Mike&lt;/strong&gt;, who is also an agent of the queue as a member of the Team. We can now see that &lt;strong&gt;Mike&lt;/strong&gt; has been removed from the queue.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1XVULfBs8n282RhyFCWBNUw.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1XVULfBs8n282RhyFCWBNUw_hu1689960116587757785.png 480w, https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1XVULfBs8n282RhyFCWBNUw_hu150485239013318151.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now let‚Äôs add &lt;strong&gt;Mike&lt;/strong&gt; back but remove &lt;strong&gt;Bobby.&lt;/strong&gt; You‚Äôll get a nice overview of all the agents that were removed or added.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1Q6eapw6UeSnMblJv52ra5Q.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1Q6eapw6UeSnMblJv52ra5Q_hu16042623954153291382.png 480w, https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1Q6eapw6UeSnMblJv52ra5Q_hu15703359297663669272.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;There is no need to run &lt;code&gt;Connect-MicrosoftTeams&lt;/code&gt; before you run either of these two functions because a login mechanism, similar to the one the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;M365 Call Flow Visualizer&lt;/strong&gt;&lt;/a&gt; uses is already built into the function &lt;code&gt;Connect-MZZTeams&lt;/code&gt; which is also part of the module. If you‚Äôre not already logged in, you‚Äôll be prompted to enter your Teams Admin Credentials.&lt;/p&gt;
&lt;p&gt;For now, it‚Äôs only these two or rather three functions (if you count the login function) which are part of this module. I‚Äôm sure that I‚Äôll add more useful code over time, so stay tuned and follow me on &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p&#34; &gt;Medium&lt;/a&gt;, &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/mozzeph&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Twitter&lt;/a&gt; or &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/in/martin-heusser117/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LinkedIn&lt;/a&gt;. And yes, the &lt;strong&gt;117&lt;/strong&gt; in my LinkedIn URL is a reference to Master Chief.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Bulk Deploy Microsoft Teams Call Flows with PowerShell in Minutes</title>
        <link>https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/</link>
        <pubDate>Sat, 18 Feb 2023 17:24:32 +0000</pubDate>
        
        <guid>https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/</guid>
        <description>&lt;p&gt;The M365 Call Flow Visualizer focuses on retrieving configurations of Teams Auto Attendants and Call Queues which have already been built. And it does so by using PowerShell.&lt;/p&gt;
&lt;p&gt;But what about the opposite? Can we use PowerShell to create a new call flow from scratch in just a few minutes as well?&lt;/p&gt;
&lt;p&gt;In this article, I‚Äôm going to show you how you can create a basic, yet fully functional call flow with PowerShell. The only thing you‚Äôll need to do yourself in the end is to add users to the Team.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is Needed to Build a Call Flow?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Before we get into the script, let‚Äôs look at what steps we need to take to build a call flow.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create resource accounts&lt;/li&gt;
&lt;li&gt;License resource accounts (and set Usage Location)&lt;/li&gt;
&lt;li&gt;Assign a phone number (and voice routing policy if it‚Äôs a Direct Routing number) to the resource accounts&lt;/li&gt;
&lt;li&gt;Create a Microsoft 365 Group with a Team (For voice enabled channel and shared voicemail)&lt;/li&gt;
&lt;li&gt;Configure M365 Group for Follow in Inbox and Show in Outlook&lt;/li&gt;
&lt;li&gt;Create and configure the Call Queue&lt;/li&gt;
&lt;li&gt;Assign the Resource Account to the Call Queue&lt;/li&gt;
&lt;li&gt;Create the Auto Attendant and configure forwarding to the queue during business hours&lt;/li&gt;
&lt;li&gt;Assign the Resource Account to the Auto Attendant&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These are quite a few steps to conclude but the hardest part about this is remembering the correct order of all the steps so you can do it as fast as possible. For example, if you forget to set the Usage Location to the same country as the phone number you want to assign, you will have to go back and wait for the change to be propagated.&lt;/p&gt;
&lt;p&gt;Another example is that you should always start at the back of your call flow. You can‚Äôt fully configure a Call Queue if you don‚Äôt have the Team or the M365 Group for shared voicemail yet. And you can‚Äôt finish configuring your Auto Attendant if you haven‚Äôt built the queue before.&lt;/p&gt;
&lt;p&gt;If you want to learn more about resource accounts or shared voicemail, I suggest the following articles of mine.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489&#34; &gt;Everything You Ever Wanted to Know About Teams Resource Accounts | by martin heusser | Medium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24&#34; &gt;Everything you ever wanted to know about Microsoft Teams Phone and Shared Voicemail | by martin heusser | Medium&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;some-notes-about-thisscript&#34;&gt;Some Notes About This¬†Script
&lt;/h4&gt;&lt;p&gt;The script follows my personal best practices when building call flows and considers all the aforementioned examples of steppingstones for maximum efficiency.&lt;/p&gt;
&lt;p&gt;This is not intended to build super complex call flows. Instead, it is just an example of how one can write a deployment script, which does everything from A-Z in an efficient order. It can, however, build multiple call flows in a row.&lt;/p&gt;
&lt;p&gt;While it would be possible to make it even more efficient by, for example, creating and licensing all the resource accounts from the CSV entries first, then create all the Call Queues and at last all the Auto Attendants, I decided not to pursue this road for the sake of simplicity. Instead, the script will create each call flow after the other, which probably takes slightly longer to complete.&lt;/p&gt;
&lt;p&gt;There are some steps where we need to wait for the previous steps to complete. For example, when a Resource Account is created, it usually takes a few seconds for the corresponding User Object in Teams to be created as well. Rest assured though; the script will handle all of that on its own. So don‚Äôt get spooked if you see some red error messages in PowerShell. These are just standard error messages, where the script tries to query a user which couldn‚Äôt be found yet.&lt;/p&gt;
&lt;p&gt;Because we‚Äôre also querying a tenant‚Äôs domain names and modify licenses this script requires some additional scopes for Microsoft Graph. So be sure to have a Global Admin account ready to consent to these scopes.&lt;/p&gt;
&lt;p&gt;Connect-MgGraph -Scopes &amp;ldquo;User.ReadWrite.All&amp;rdquo;, `&lt;br&gt;
&amp;ldquo;Group.ReadWrite.All&amp;rdquo;, `&lt;br&gt;
&amp;ldquo;Domain.ReadWrite.All&amp;rdquo;, `&lt;br&gt;
&amp;ldquo;Organization.ReadWrite.All&amp;rdquo;, `&lt;br&gt;
&amp;ldquo;Directory.ReadWrite.All&amp;rdquo;&lt;/p&gt;
&lt;p&gt;To configure the Microsoft 365 Group the script requires the &lt;strong&gt;ExchangeOnlineManagement&lt;/strong&gt; PowerShell Module in addition to MicrosoftTeams and Microsoft.Graph**.** If you don‚Äôt have it already, you can use the following command to install it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Install-Module ExchangeOnlineManagement&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;how-does-itwork&#34;&gt;How Does it¬†Work?
&lt;/h4&gt;&lt;p&gt;In my &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer/tree/main/Deployment&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub Repository&lt;/a&gt;, you will find a sample file called ‚ÄúVoiceAppList.csv‚Äù. All you need to do is to fill in your information there. And run the script.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1l6dmaJHs10JUjUNsetrVnA.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1l6dmaJHs10JUjUNsetrVnA_hu7971886601495406351.png 480w, https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1l6dmaJHs10JUjUNsetrVnA_hu17430508486725092070.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;These are the details which can be passed from the CSV file to the script.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DepartmentName&lt;br&gt;
This name of the queue or Team. It will be added to all elements in the call flow: Team, Channel, Resource Accounts, Auto Attendant, Call Queue. For example, if you set ‚ÄúMarketing‚Äù as your DepartmentName, your queue will be called ‚ÄúMarketing CQ‚Äù.&lt;/li&gt;
&lt;li&gt;TopLevelNumber&lt;br&gt;
The number which is called by customers and assigned to the Auto Attendant. It must be an E.164 number. See &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/teams/set-csphonenumberassignment?view=teams-ps#-phonenumber&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; for more information.&lt;/li&gt;
&lt;li&gt;NumberType&lt;br&gt;
This is required for the phone number assignment. Valid values: CallingPlan, OperatorConnect, DirectRouting, &lt;code&gt;$null&lt;/code&gt;¬†. Leave the field empty in the CSV if you don‚Äôt want to assign a number just yet.&lt;/li&gt;
&lt;li&gt;VoiceRoutingPolicyName&lt;br&gt;
This is only required if you want to assign a Direct Routing number. It‚Äôs only needed if the AA should be capable of external transfers later on. It‚Äôs only added as a precaution. You can read how to get the name of your voice routing policies &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/get-csonlinevoiceroutingpolicy?view=skype-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;UsageLocation&lt;br&gt;
This must be the same as the Phone Number if your‚Äôre using Calling Plans. E.g. ‚ÄúCH‚Äù or ‚ÄúGB‚Äù.&lt;/li&gt;
&lt;li&gt;AgentAlertTime&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/set-cscallqueue?view=skype-ps#-agentalerttime&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Set-CsCallQueue (SkypeForBusiness) | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TimeoutThreshold&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/set-cscallqueue?view=skype-ps#-timeoutthreshold&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Set-CsCallQueue (SkypeForBusiness) | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PromptLanguage&lt;br&gt;
This is the language of the text to speech prompt. See &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/fr-fr/powershell/module/skype/get-csautoattendantsupportedlanguage?view=skype-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; MS Learn article for more information. You will be prompted by &lt;code&gt;Out-GridView&lt;/code&gt; if you specify an invalid language Id.&lt;/li&gt;
&lt;li&gt;TimeoutSharedVoicemailPrompt&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/set-cscallqueue?view=skype-ps#-timeoutsharedvoicemailtexttospeechprompt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Set-CsCallQueue (SkypeForBusiness) | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;AfterHoursDisconnectPrompt&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/new-csautoattendantprompt?view=skype-ps#-texttospeechprompt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;New-CsAutoAttendantPrompt (SkypeForBusiness) | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TimeZone&lt;br&gt;
The time zone of the Auto Attendant. See &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/get-csautoattendantsupportedtimezone?view=skype-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; MS Learn article for more information. You will be prompted by &lt;code&gt;Out-GridView&lt;/code&gt;if you specify an invalid time zone Id.&lt;/li&gt;
&lt;li&gt;BusinessHoursStart1&lt;br&gt;
If none of the business hours fields are populated, the script won‚Äôt create an after hours call flow for the Auto Attendant. If only &lt;strong&gt;BusinessHoursStart1&lt;/strong&gt; and &lt;strong&gt;BusinessHoursEnd1&lt;/strong&gt; are populated, the AA will only have one time slot. If &lt;strong&gt;BusinessHoursStart2&lt;/strong&gt; and &lt;strong&gt;BusinessHoursEnd2&lt;/strong&gt; are populated as well, the AA will have two time slots, e.g. lunch break.&lt;br&gt;
E.g. &lt;code&gt;08:00&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;BusinessHoursEnd1&lt;br&gt;
E.g. &lt;code&gt;12:15&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;BusinessHoursStart2&lt;br&gt;
E.g. &lt;code&gt;13:30&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;BusinessHoursEnd2&lt;br&gt;
E.g. &lt;code&gt;17:45&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;DomainSuffix&lt;br&gt;
By default, the script will use your tenant‚Äôs default domain for resource account UPNs or MailNicknames. If you want to change that, you can specify and domain that‚Äôs available in your tenant as &lt;code&gt;-DomainSuffix&lt;/code&gt;¬†. E.g. ‚Äúexample.onmicrosoft.com‚Äù.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Running the script will deploy a simple call flow with an Auto Attendant, business hours and one Call Queue which uses a Voice Enabled Channel for each line in the CSV file. Outside of business hours, the Auto Attendants will play a message and disconnect the call.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1XEyqntZvtv72Qxuzf1aNw.png&#34;
	width=&#34;1073&#34;
	height=&#34;2737&#34;
	srcset=&#34;https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1XEyqntZvtv72Qxuzf1aNw_hu11112130877948609804.png 480w, https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1XEyqntZvtv72Qxuzf1aNw_hu3333577758708294408.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;39&#34;
		data-flex-basis=&#34;94px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The Call Queues will time out after the amount of seconds which is defined in &lt;code&gt;-TimeoutThreshold&lt;/code&gt; and then forward the call to shared voicemail once the greeting has been played back.&lt;/p&gt;
&lt;p&gt;The script automatically creates a new Team and a Channel for the Queue as well. I prefer to use dedicated over existing Teams and Channels because not all team members of an existing team are potentially going to answer calls.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1XIhvE9DOsrXKapeR0L3zbA.png&#34;
	width=&#34;982&#34;
	height=&#34;398&#34;
	srcset=&#34;https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1XIhvE9DOsrXKapeR0L3zbA_hu1555490491309770912.png 480w, https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1XIhvE9DOsrXKapeR0L3zbA_hu11382112277469271014.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;246&#34;
		data-flex-basis=&#34;592px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When a new Team is created and the Microsoft 365 Group has not existed before, the group is by default hidden from Outlook Clients. Because we want the agents of the queue to have access to the group mailbox in Outlook, the script will automatically enable the Follow in Inbox feature and unhide the group from Outlook Clients.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1RQyp3fLFRTkxE2XWTu8Ng.png&#34;
	width=&#34;900&#34;
	height=&#34;671&#34;
	srcset=&#34;https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1RQyp3fLFRTkxE2XWTu8Ng_hu15482926005537838719.png 480w, https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1RQyp3fLFRTkxE2XWTu8Ng_hu654571234181897439.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;134&#34;
		data-flex-basis=&#34;321px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Shared voicemail is another reason I like to use dedicated groups. With a new group, we can make sure that the only kind of emails received in this group&amp;rsquo;s inbox are voicemails, and we can enable Follow in Inbox without any concern of potentially spamming dozens of other team members by sending all group emails to their personal inboxes.&lt;/p&gt;
&lt;h4 id=&#34;the-script&#34;&gt;The Script
&lt;/h4&gt;&lt;script src=&#34;https://gist.github.com/mozziemozz/8b4640590b85da1e1f296b9ef599ae9a.js&#34;&gt;&lt;/script&gt;

&lt;h4 id=&#34;finishing-up&#34;&gt;Finishing Up
&lt;/h4&gt;&lt;p&gt;While the call flow is technically already able to receive calls after it has been deployed by the script, you‚Äôll still need to add members to the queue. Otherwise, the calls will never be signaled to any agent.&lt;/p&gt;
&lt;p&gt;Remember that only members of the Team who are also Enterprise Voice Enabled will be added to the queue‚Äôs agent list. If you don‚Äôt want to wait a few hours for the agent list to update after you have added the members, you might want to check out &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0&#34; &gt;this&lt;/a&gt; article. It explains how to force sync an agent list of Call Queues.&lt;/p&gt;
&lt;p&gt;As mentioned before, this is a mere example of a very simple call flow. However, if most of your call flows only consist of an Auto Attendant forwarding calls to a Call Queue (Like it‚Äôs common in many small businesses), PowerShell can still be immensely helpful to lay the ground works.&lt;/p&gt;
&lt;p&gt;Naturally, you can still go into TAC and adjust everything to your needs after the script has built your scaffolding. You just won‚Äôt have to bother adding resources accounts and associating them with your voice apps etc.&lt;/p&gt;
&lt;p&gt;Creating Auto Attendants with PowerShell is quite a complex process compared to Call Queues or other Microsoft resources. If you want to adjust my script to your specific needs, a good place to start is the official documentation from Microsoft. As far as I can tell, they recently added updated example scripts which might be helpful.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/new-csautoattendant?view=skype-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;New-CsAutoAttendant (SkypeForBusiness) | Microsoft Learn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/set-csautoattendant?view=skype-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Set-CsAutoAttendant (SkypeForBusiness) | Microsoft Learn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now go ask ChatGPT to write you a script that does the same.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Teams Auto Attendant and Call Queue Spring-Cleaning</title>
        <link>https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/</link>
        <pubDate>Wed, 01 Feb 2023 20:43:08 +0000</pubDate>
        
        <guid>https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/</guid>
        <description>&lt;p&gt;Are your Teams Auto Attendants, Call Queues and Resource Accounts a mess? Or have you lost track of who created which accounts or Voice Apps? You know what they say‚Ä¶&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Too Many Cooks Spoil the Broth.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1eRzA7AqlES8kea2hT4qYQ.png&#34;
	width=&#34;1800&#34;
	height=&#34;813&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1eRzA7AqlES8kea2hT4qYQ_hu5241722818773632713.png 480w, https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1eRzA7AqlES8kea2hT4qYQ_hu12954061458128429846.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;221&#34;
		data-flex-basis=&#34;531px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It‚Äôs not really spring yet but who cares? Cleaning up your environment is always a good thing. Today we‚Äôre talking Teams Phone reporting again. In case you‚Äôve missed some of my previous articles, here‚Äôs an overview of what handy scripts I already released last year.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485&#34; &gt;Report on Teams Call Queue Opt In Status and Assignment Paths&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/find-all-auto-attendants-and-call-queues-a-user-is-associated-with-16710c3adf01&#34; &gt;Find All Auto Attendants and Call Queues a User is Associated with&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154&#34; &gt;Automatically render Microsoft Teams Call Flow Diagrams&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/how-to-export-a-teams-call-flow-to-png-4d38a8c4f183&#34; &gt;How To Export a Teams Call Flow to PNG&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I remember that somebody on social media asked me if it was possible to get a list of all Resource Accounts which are not assigned to any Auto Attendant or Call Queue. That‚Äôs why I wrote this script in December 2022.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer/blob/main/FindUnassignedResourceAccounts.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;M365CallFlowVisualizer/FindUnassignedResourceAccounts.ps1 at main ¬∑ mozziemozz/M365CallFlowVisualizer (github.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This time, I‚Äôve taken it even further and used the M365 Call Flow Visualizer to not only find unused Resource Accounts but also Call Queues and Auto Attendants which are not in use.&lt;/p&gt;
&lt;h4 id=&#34;what-qualifies-as-not-inuse&#34;&gt;What Qualifies as Not in¬†Use?
&lt;/h4&gt;&lt;p&gt;First of all, any Attendant or any Queue which does not have a Resource Account assigned, can‚Äôt be called, or transferred to. They exist, but they‚Äôre useless until a Resource Account is linked. This means that all Queues and Attendants which do not have a Resource Account assigned, will be included in the report.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1CV5FzZbrRUB99oY2E3hSdg.png&#34;
	width=&#34;1775&#34;
	height=&#34;203&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1CV5FzZbrRUB99oY2E3hSdg_hu16263056333637277059.png 480w, https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1CV5FzZbrRUB99oY2E3hSdg_hu11891032310525869956.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;874&#34;
		data-flex-basis=&#34;2098px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The concept of how Resource Accounts work in combination with Queues and Attendants is explained in detail in the article linked below.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489&#34; &gt;Everything You Ever Wanted to Know About Teams Resource Accounts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Next, the script checks for all Auto Attendants and Call Queues which have a Resource Account without Phone Number assigned. Of course, these are often nested behind top-level Voice Apps and thus can be called without issues. My new script runs the Visualizer (without creating any diagrams) for all top-level Voice Apps (Attendants and Queues with phone numbers) to create a list of all their nested Voice Apps.&lt;/p&gt;
&lt;p&gt;Because the Visualizer is also able to read and process user calling settings, it will even detect if a Voice App is set as a user‚Äôs forwarding or unanswered target and thus also add it to the list of all nested Voice Apps.&lt;/p&gt;
&lt;p&gt;If this list does not contain the current Voice App, it will be included in the report as well. In complex environments, this will save you a lot of time since you don‚Äôt need to click through all your Voice Apps manually to check them.&lt;/p&gt;
&lt;p&gt;Last but not least, it uses the same code bits from the original ‚ÄúFindUnassignedResourceAccounts.ps1‚Äù script to add any Resource Account which is not associated with any Voice App to the report.&lt;/p&gt;
&lt;h4 id=&#34;caveats&#34;&gt;Caveats
&lt;/h4&gt;&lt;p&gt;There‚Äôs one caveat though. In theory, you could have a Voice App (or multiple) which are only called internally by their SIP Address. In this case, the Voice App doesn‚Äôt need to be nested anywhere and it doesn‚Äôt need a phone number either. All it needs is to have a Resource Account assigned. These Apps will be included in the report as well, so make sure to be extra careful before you actually delete anything.&lt;/p&gt;
&lt;h4 id=&#34;under-thehood&#34;&gt;Under the¬†Hood
&lt;/h4&gt;&lt;p&gt;During testing, I noticed that Voice Apps which are nested inside a Holiday Call Handling were not detected by the script either. I‚Äôve updated my M365 Call Flow Visualizer so that it will now also expand Auto Attendants and Call Queues which are part of a Holiday transfer action.&lt;/p&gt;
&lt;p&gt;Initially, I thought I‚Äôd only be able to do this for transfers to Call Queues and Auto Attendants. But with some persistence I was able to also display IVRs which are configured as part of a Holiday Call Handling! Yes, really! This means that the Visualizer can now render every possible call flow which can be configured. At least to my knowledge.&lt;/p&gt;
&lt;p&gt;Here‚Äôs an example of the new functionality. We can see that the Call Handling for &lt;strong&gt;National Swiss Holiday&lt;/strong&gt; forwards to the Call Queue &lt;strong&gt;Ext Pstn Fwd Test&lt;/strong&gt; inside the Holiday table. Unfortunately, linking both CQ Nodes together, would have messed up the left-right direction of the subgraph and instead made it a top-down one. Therefore, I had to get creative and just link the call flow of the Voice App to the Holiday Subgraph. As an exception, there are now two nodes for the &lt;strong&gt;Call Queue&lt;/strong&gt; &lt;strong&gt;Ext Pstn Fwd Test&lt;/strong&gt;. One is inside the Holiday table, and one is placed in the main diagram.&lt;/p&gt;
&lt;p&gt;It‚Äôs basically the same for Holiday IVRs (Voice Menus). They include the name of the Holiday Call Handling in which they are configured. This makes it a little easier to spot the corresponding node in the main diagram.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/158SyiEyoyXEYRfJ7qCgaw.png&#34;
	width=&#34;2034&#34;
	height=&#34;1696&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/158SyiEyoyXEYRfJ7qCgaw_hu4796220925664920490.png 480w, https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/158SyiEyoyXEYRfJ7qCgaw_hu9686493325680696300.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;119&#34;
		data-flex-basis=&#34;287px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you want to try this for yourself, you need to add the following parameters when you call the script.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-ShowNestedHolidayCallFlows $true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-ShowNestedHolidayIVRs $true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you‚Äôre interested in learning more about how Holidays work in Teams, consider giving this article a read.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743&#34; &gt;Everything You Ever Wanted to Know About Teams Holidays&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;example-output&#34;&gt;Example Output
&lt;/h4&gt;&lt;p&gt;The script will generate a CSV file containing all unused components including the reason as to why they‚Äôre not in use.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1bhf0biV7bVukIdpxKpnfA.png&#34;
	width=&#34;1619&#34;
	height=&#34;618&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1bhf0biV7bVukIdpxKpnfA_hu13843907923752754230.png 480w, https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1bhf0biV7bVukIdpxKpnfA_hu662461431392645132.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;261&#34;
		data-flex-basis=&#34;628px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I struggled a bit to find a perfect naming for all the columns. The column ‚ÄúAssociation‚Äù tells you whether the Voice App has a Resource Account assigned or if the Resource Account is assigned to a Voice App. The other ones should be self-explanatory.&lt;/p&gt;
&lt;h4 id=&#34;free-download&#34;&gt;Free Download
&lt;/h4&gt;&lt;p&gt;The script is available for free in my &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub Repo&lt;/a&gt; of the M365 Call Flow Visualizer. Make sure that you clone it or download the whole repository as Zip file since there are dependencies.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer/blob/main/FindUnusedVoiceAppsAndResourceAccounts.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;M365CallFlowVisualizer/FindUnusedVoiceAppsAndResourceAccounts.ps1 at main ¬∑ mozziemozz/M365CallFlowVisualizer (github.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Please use this script at your own risk, even though the script does not change or delete anything in your environment. (It only uses &lt;code&gt;Get-*&lt;/code&gt; Cmdlets). Just promise to make sure that you verify that any Auto Attendant or Call Queues are indeed not needed anymore before you hit that delete button. Even if you still have to manually confirm and delete unused Voice Apps, I still hope that the output of the script makes it easier for you to identify them at scale.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Microsoft Teams Shared Voicemail Now Supports Distribution Lists and Mail Enabled Security Groups</title>
        <link>https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/</link>
        <pubDate>Fri, 27 Jan 2023 21:57:19 +0000</pubDate>
        
        <guid>https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/</guid>
        <description>&lt;p&gt;Today I discovered that there has been an update to Microsoft Teams Auto Attendants and Call Queues Shared Voicemail. In the past it was only possible to configure a Microsoft 365 Group as the transfer target of shared voicemail, as it‚Äôs described in &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24&#34; &gt;this&lt;/a&gt; article.&lt;/p&gt;
&lt;p&gt;Now the search box in Auto Attendant or Call Queue Wizards also return Distribution Lists and Mail Enabled Security Groups.&lt;/p&gt;
&lt;p&gt;I don‚Äôt know when this change was implemented but there‚Äôs evidence out there that it has been around for at least some time or even since shared voicemail has been rolled out.&lt;/p&gt;
&lt;p&gt;Since all the official Microsoft documentation I could find (then and now) only mentioned Microsoft 365 Groups, I honestly never even tried to search for another group type.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;I feel like it‚Äôs been like this for a bit but I couldn‚Äôt tell you when.&lt;/p&gt;&amp;mdash; Robert Schoneman (@rschoneman) &lt;a href=&#34;https://twitter.com/rschoneman/status/1618980759829905408?ref_src=twsrc%5Etfw&#34;&gt;January 27, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;A customer insisted on trying it 2 years ago and to my surprise it worked&lt;/p&gt;&amp;mdash; Dario Woitasen üá¶üá∑üáÆüáπüá™üá∏ (@dariomws) &lt;a href=&#34;https://twitter.com/dariomws/status/1619090730412118017?ref_src=twsrc%5Etfw&#34;&gt;January 27, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Has always worked since shared voicemail was an option, could never understand why one would create a m365 group to route voicemail. The search exposed it the first time I went to set it.&lt;/p&gt;&amp;mdash; Michael LaMontagne (@RealTimeUC) &lt;a href=&#34;https://twitter.com/RealTimeUC/status/1619202283383980033?ref_src=twsrc%5Etfw&#34;&gt;January 28, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;p&gt;The &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/set-cscallqueue?view=skype-ps#-overflowactiontarget&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;documentation&lt;/a&gt; is not updated yet. Better yet, it still says Office 365 instead of Microsoft 365 group.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The OverflowActionTarget parameter represents the target of the overflow action. If the OverFlowAction is set to Forward, this parameter must be set to a Guid or a telephone number with a mandatory ‚Äòtel:‚Äô prefix. If the OverflowAction is set to SharedVoicemail, this parameter must be set to an Office 365 Group ID. Otherwise, this parameter is optional.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The description in the Auto Attendant and Call Queue Wizard also still references Microsoft 365 Groups only. But it does return Distribution Lists and Mail Enabled Security Groups when we search for them.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/13YB1Og9yfkOkiNZKbDKg.png&#34;
	width=&#34;876&#34;
	height=&#34;616&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/13YB1Og9yfkOkiNZKbDKg_hu17119430686332828254.png 480w, https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/13YB1Og9yfkOkiNZKbDKg_hu3181526310369424081.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;341px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It does not find security groups, which makes sense, since they‚Äôre not capable of receiving emails.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1M5usMrSDeoKiOqNGRlgNGw.png&#34;
	width=&#34;951&#34;
	height=&#34;357&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1M5usMrSDeoKiOqNGRlgNGw_hu7840854127303225648.png 480w, https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1M5usMrSDeoKiOqNGRlgNGw_hu14702933075240090703.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;266&#34;
		data-flex-basis=&#34;639px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;testing&#34;&gt;Testing
&lt;/h3&gt;&lt;p&gt;This begs the question: is it only possible to choose these new group types or are shared voicemails actually delivered to Distribution Lists too?&lt;/p&gt;
&lt;p&gt;Let‚Äôs find out‚Ä¶&lt;/p&gt;
&lt;p&gt;It seems to be working just fine. Here‚Äôs a screenshot of the email received in Outlook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1ZLo1CQSHUDNCnguoMCCP2w.png&#34;
	width=&#34;701&#34;
	height=&#34;323&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1ZLo1CQSHUDNCnguoMCCP2w_hu10704610254177074120.png 480w, https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1ZLo1CQSHUDNCnguoMCCP2w_hu13142576507612622373.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;217&#34;
		data-flex-basis=&#34;520px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When hovering over the recipient&amp;rsquo;s address, we can see what type of group it is.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1TPAYZAcYUwiaSscVCws4A.png&#34;
	width=&#34;756&#34;
	height=&#34;371&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1TPAYZAcYUwiaSscVCws4A_hu6706837038067884672.png 480w, https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1TPAYZAcYUwiaSscVCws4A_hu8522562194709732531.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;203&#34;
		data-flex-basis=&#34;489px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1PzGe2QO2fRKCMmnwmYOOjw.png&#34;
	width=&#34;728&#34;
	height=&#34;367&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1PzGe2QO2fRKCMmnwmYOOjw_hu7570771173621813816.png 480w, https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1PzGe2QO2fRKCMmnwmYOOjw_hu4167460844397363353.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;198&#34;
		data-flex-basis=&#34;476px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Note that shared voicemail emails to Distribution Lists and Mail Enabled Security Groups look exactly the same in Outlook. Both are labeled as ‚ÄúDistribution list‚Äù, even though they are technically of different group types.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/14C4zaaKVkpfl2CXVpnoRw.png&#34;
	width=&#34;945&#34;
	height=&#34;144&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/14C4zaaKVkpfl2CXVpnoRw_hu1060428813913649098.png 480w, https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/14C4zaaKVkpfl2CXVpnoRw_hu1128029790804243081.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;656&#34;
		data-flex-basis=&#34;1575px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1myvn5NVYxFzjQVDYpzKzGA.png&#34;
	width=&#34;927&#34;
	height=&#34;132&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1myvn5NVYxFzjQVDYpzKzGA_hu10279551885168975531.png 480w, https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1myvn5NVYxFzjQVDYpzKzGA_hu13042370833420879614.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;702&#34;
		data-flex-basis=&#34;1685px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;powershell&#34;&gt;PowerShell
&lt;/h4&gt;&lt;p&gt;Nothing has changed on the PowerShell side of things. The &lt;code&gt;OverflowAction&lt;/code&gt; is still called &lt;strong&gt;‚ÄúSharedVoicemail‚Äù&lt;/strong&gt; and the &lt;code&gt;OverflowActionTarget.Type&lt;/code&gt; is still &lt;strong&gt;‚ÄúMailbox‚Äù&lt;/strong&gt; while &lt;code&gt;OverflowActionTarget.Id&lt;/code&gt; remains the group‚Äôs Object Id.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PS V:\GitHub\M365CallFlowVisualizer&amp;gt; $cq.OverflowAction                                        
SharedVoicemail

PS V:\GitHub\M365CallFlowVisualizer&amp;gt; $cq.OverflowActionTarget  
  
Id                                   Type  
--                                   ----  
413a7c2e-e359-4424-b2f7-xxxxxxxxxxxx MailBox
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Auto Attendant properties also remain unchanged.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PS V:\GitHub\\M365CallFlowVisualizer&amp;gt; $aa.DefaultCallFlow.Menu.MenuOptions  
  
  
Action         : TransferCallToTarget  
DtmfResponse   : Automatic  
VoiceResponses : {}  
CallTarget     : Type = SharedVoicemail  
                 Id = 413a7c2e-e359-4424-b2f7-xxxxxxxxxxxx  
Prompt         :  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Luckily, this means that I don‚Äôt have to update the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;M365 Call Flow Visualizer&lt;/a&gt; and everything continues to work like it did before.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1NuirKnHyD9ADHTxl4nnAiw.png&#34;
	width=&#34;249&#34;
	height=&#34;768&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1NuirKnHyD9ADHTxl4nnAiw_hu574531425213632084.png 480w, https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1NuirKnHyD9ADHTxl4nnAiw_hu17576736967519618207.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;32&#34;
		data-flex-basis=&#34;77px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;configuring-via-powershell&#34;&gt;Configuring via PowerShell
&lt;/h4&gt;&lt;p&gt;What‚Äôs a bit worrisome is that I was able to set the Id of a Security Group as the Shared Voicemail Target for a Call Queue through PowerShell. It doesn‚Äôt look like PowerShell is evaluating the group type when the queue is saved.&lt;/p&gt;
&lt;p&gt;Once the queue has been updated through PowerShell, TAC will even display the name of the Security Group in the Wizard. As long as we don‚Äôt remove the Security group from the Shared Voicemail Target, it‚Äôs even possible to edit and save the queue through TAC. The invalid group remains.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1PwAoySn5n1VQ6glOIAmBrA.png&#34;
	width=&#34;755&#34;
	height=&#34;117&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1PwAoySn5n1VQ6glOIAmBrA_hu3469211875181172639.png 480w, https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1PwAoySn5n1VQ6glOIAmBrA_hu14680188991468717058.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;645&#34;
		data-flex-basis=&#34;1548px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When I delete the group and search for it again, nothing is returned anymore, as it should be.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1ycvEqbDKWYKbNSDYQI8Q.png&#34;
	width=&#34;924&#34;
	height=&#34;198&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1ycvEqbDKWYKbNSDYQI8Q_hu12243258727256465698.png 480w, https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1ycvEqbDKWYKbNSDYQI8Q_hu1638924913591060911.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;466&#34;
		data-flex-basis=&#34;1120px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;To test this, I made a call to the queue. In this case, my overflow threshold was set to zero, so the call failed immediately with a busy tone.&lt;/p&gt;
&lt;p&gt;I then did the same for the timeout action target and called the queue again. As soon as the timeout was reached, I could hear the transfer beep and then the call failed with a busy tone too.&lt;/p&gt;
&lt;p&gt;Luckily, it‚Äôs a different story with Auto Attendants. When I tried the same thing there, an error was returned, like I expected for Call Queues in the first place.&lt;/p&gt;
&lt;p&gt;Microsoft.Teams.ConfigAPI.Cmdlets.internal\Set-CsAutoAttendant :&lt;br&gt;
A mail-enabled group with Id (da027ae9-467b-4334-829c-xxxxxxxxxxxx)&lt;br&gt;
could not be found. Please give correct parameter value.&lt;/p&gt;
&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h4&gt;&lt;p&gt;While I wouldn‚Äôt implement this in a production environment until the official documentation is updated and we know for sure, that this is working as Microsoft intended, I think it‚Äôs a great feature update for Teams Phone. Only being able to just use Microsoft 365 Groups, also meant that we always had to make sure that users are subscribed to receive all group emails or enabled the &lt;a class=&#34;link&#34; href=&#34;https://support.microsoft.com/en-us/office/follow-a-group-in-outlook-e147fc19-f548-4cd2-834f-80c6235b7c36&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Follow in Inbox&lt;/a&gt; feature for themselves.&lt;/p&gt;
&lt;p&gt;I will report the missing group type validation for &lt;code&gt;Set-CsCallQueue&lt;/code&gt; to Microsoft and hope that they fix it soon. In the mean time, make sure that you‚Äôre extra careful and only configure Group Ids of M365 Groups, Distribution Lists or Mail Enabled Security Groups.&lt;/p&gt;
&lt;p&gt;I‚Äôll also see if I can update the Visualizer to include group type for shared voicemail in the diagrams.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>What‚Äôs Up with Teams Auto Attendants Suddenly Using a Male Voice for TTS?</title>
        <link>https://heusser.pro/p/whats-up-with-teams-auto-attendants-suddenly-using-a-male-voice-for-tts-5c6f717d60a/</link>
        <pubDate>Sun, 22 Jan 2023 23:52:58 +0000</pubDate>
        
        <guid>https://heusser.pro/p/whats-up-with-teams-auto-attendants-suddenly-using-a-male-voice-for-tts-5c6f717d60a/</guid>
        <description>&lt;p&gt;If you‚Äôre reading this article; it probably means that you‚Äôre wondering why suddenly some of your auto attendants are using male voices in greetings. Just as I was. You might also have noticed, that Microsoft introduced a few new supported languages for Teams auto attendant and call queue text-to-speech (TTS) greetings a couple of months ago.&lt;/p&gt;
&lt;p&gt;Which is very nice‚Ää‚Äî‚Ääin theory. But in reality, they messed up, at least to some exent. All newly created or any existing auto attendant where you change the language will now default to a male voice in TTS greetings for many languages. Before that it was female for at least all the languages I had worked with in the past.&lt;/p&gt;
&lt;h4 id=&#34;why-is-that-aproblem&#34;&gt;Why Is That a¬†Problem?
&lt;/h4&gt;&lt;p&gt;There‚Äôs no option to change the &lt;strong&gt;VoiceId&lt;/strong&gt; (female/male) from Teams Admin Center for either auto attendants or call queues. Call Queues still default to a female VoiceId while auto attendants now default to a male voice for most major languages. This means that if your call flow uses both, attendants and queues (like most call flows do), you will face a rather unpleasant inconsistency. In one part of the call flow, your callers will hear male voices and in other parts they will hear female voices in greetings and announcements. This is not a good user experience.&lt;/p&gt;
&lt;h4 id=&#34;what-about-powershell&#34;&gt;What About PowerShell?
&lt;/h4&gt;&lt;p&gt;While it‚Äôs possible to change the voice (female/male) on an auto attendant with PowerShell, it‚Äôs not possible to do the same for call queues.&lt;/p&gt;
&lt;p&gt;This means that greetings of call queues will always be synthesized by a female voice. There‚Äôs not even a &lt;strong&gt;VoiceId&lt;/strong&gt; property returned by PowerShell, only &lt;strong&gt;LanguageId&lt;/strong&gt;. The only way to verify this is to actually call the queue and listen to the announcements.&lt;/p&gt;
&lt;p&gt;I did just that. I created a new call queue with &lt;strong&gt;en-US&lt;/strong&gt; set as it‚Äôs language and configured a TTS welcome greeting. Once I called the number, I was indeed greeted by a female voice, like it‚Äôs always been.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-up-with-teams-auto-attendants-suddenly-using-a-male-voice-for-tts-5c6f717d60a/1Ru2MOHg0zn9BLAreKRV5PQ.png&#34;
	width=&#34;1719&#34;
	height=&#34;559&#34;
	srcset=&#34;https://heusser.pro/p/whats-up-with-teams-auto-attendants-suddenly-using-a-male-voice-for-tts-5c6f717d60a/1Ru2MOHg0zn9BLAreKRV5PQ_hu11838926212760777633.png 480w, https://heusser.pro/p/whats-up-with-teams-auto-attendants-suddenly-using-a-male-voice-for-tts-5c6f717d60a/1Ru2MOHg0zn9BLAreKRV5PQ_hu7977033582984922068.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;307&#34;
		data-flex-basis=&#34;738px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Welcome greetings are not the only greetings a caller can hear when interacting with a call queue though. Other scenarios are shared voicemail on timeout or overflow. The funny thing with the welcome TTS greeting is that as of the time of drafting this article, there‚Äôs still no option to set or even view this property in PowerShell. Not even in Teams PowerShell 4.9.1.&lt;/p&gt;
&lt;p&gt;If you‚Äôre using TTS welcome greetings on your call queues in production, please read the following section very carefully. &lt;strong&gt;Because there‚Äôs no PowerShell support for TTS welcome greetings on call queues yet, any configured TTS welcome greeting will be deleted from your queues, every time you save a queue using PowerShell!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Don‚Äôt believe me? I‚Äôm going to show you. Notice how I only changed the overflow threshold. This doesn‚Äôt even remotely have anything to do with greetings or language settings.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-up-with-teams-auto-attendants-suddenly-using-a-male-voice-for-tts-5c6f717d60a/1XOkmcCdXA0ImkELMcYqjQ.gif&#34;
	width=&#34;3819&#34;
	height=&#34;1761&#34;
	srcset=&#34;https://heusser.pro/p/whats-up-with-teams-auto-attendants-suddenly-using-a-male-voice-for-tts-5c6f717d60a/1XOkmcCdXA0ImkELMcYqjQ_hu13701402403191459912.gif 480w, https://heusser.pro/p/whats-up-with-teams-auto-attendants-suddenly-using-a-male-voice-for-tts-5c6f717d60a/1XOkmcCdXA0ImkELMcYqjQ_hu16415711175501172227.gif 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;216&#34;
		data-flex-basis=&#34;520px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;After the queue has been updated by PowerShell, the TTS welcome greeting is gone. For Teams Voice Admins, this means that we either can‚Äôt use TTS welcome greetings, if we frequently use PS to update our queues, we can only use TAC to update queues or that we have to think about setting the greeting in TAC again, every time a change was made via PowerShell. None of them are good options and the last of them certainly defeats the purpose of PowerShell entirely. The only real option here is to use an audio file as welcome greeting until Microsoft has fixed this.&lt;/p&gt;
&lt;h4 id=&#34;what-about-auto-attendants&#34;&gt;What About Auto Attendants?
&lt;/h4&gt;&lt;p&gt;So far, we‚Äôve established that call queues always use a female voice for TTS greetings. On auto attendants it‚Äôs actually possible to change the VoiceId by PowerShell.&lt;/p&gt;
&lt;p&gt;Here‚Äôs a newly created auto attendant with en-US language.&lt;/p&gt;
&lt;p&gt;$aa =  Get-CsAutoAttendant -Identity 77b1706a-59a8-4832-9f49-f7ff80e0da97&lt;br&gt;
$aa&lt;/p&gt;
&lt;p&gt;Identity                 : 77b1706a-59a8-4832-9f49-f7ff80e0da97&lt;br&gt;
TenantId                 : 4bffbf87-53a0-4fce-b58b-4179cb3a3b7d&lt;br&gt;
Name                     : Test Voice&lt;br&gt;
LanguageId               : en-US&lt;br&gt;
VoiceId                  : Male&lt;br&gt;
DefaultCallFlow          : Test Voice Default call flow&lt;br&gt;
Operator                 :&lt;br&gt;
TimeZoneId               : W. Europe Standard Time&lt;br&gt;
VoiceResponseEnabled     : False&lt;br&gt;
CallFlows                : Test Voice After hours call flow&lt;br&gt;
Schedules                : After hours Test Voice&lt;br&gt;
CallHandlingAssociations : AfterHours(1)&lt;br&gt;
Status                   :&lt;br&gt;
DialByNameResourceId     :&lt;br&gt;
DirectoryLookupScope     :&lt;br&gt;
ApplicationInstances     : {}&lt;br&gt;
AuthorizedUsers          : {}&lt;/p&gt;
&lt;p&gt;To change the VoiceId we can use the following code.&lt;/p&gt;
&lt;p&gt;$aa.VoiceId = &amp;ldquo;Female&amp;rdquo;&lt;br&gt;
Set-CsAutoAttendant -Instance $aa&lt;/p&gt;
&lt;p&gt;This will return the following output. Notice how the VoiceId changed to Female.&lt;/p&gt;
&lt;p&gt;Identity                 : 77b1706a-59a8-4832-9f49-f7ff80e0da97&lt;br&gt;
TenantId                 : 4bffbf87-53a0-4fce-b58b-4179cb3a3b7d&lt;br&gt;
Name                     : Test Voice&lt;br&gt;
LanguageId               : en-US&lt;br&gt;
VoiceId                  : Female&lt;br&gt;
DefaultCallFlow          : Test Voice Default call flow&lt;br&gt;
Operator                 :&lt;br&gt;
TimeZoneId               : W. Europe Standard Time&lt;br&gt;
VoiceResponseEnabled     : False&lt;br&gt;
CallFlows                : Test Voice After hours call flow&lt;br&gt;
Schedules                : After hours Test Voice&lt;br&gt;
CallHandlingAssociations : AfterHours(1)&lt;br&gt;
Status                   :&lt;br&gt;
DialByNameResourceId     :&lt;br&gt;
DirectoryLookupScope     :&lt;br&gt;
ApplicationInstances     : {}&lt;br&gt;
AuthorizedUsers          : {}&lt;/p&gt;
&lt;p&gt;When I initially discovered this a couple of months ago, I could have sworn that every time I changed something in TAC, that the VoiceId was reset to male. While writing this article I did some further tests, and I was not able to reproduce this 100% or recognize a pattern anymore. Sometimes, it defaulted back to male, sometimes it stayed on female, no matter which setting I changed in TAC. Therefore, I‚Äôm going to leave it like that and just tell you to be extra careful, when updating auto attendants through TAC, if you want to keep a female voice. You definitely shouldn‚Äôt count on TAC preserving your configured VoiceId.&lt;/p&gt;
&lt;p&gt;One thing is for sure though, every time you change the language of an auto attendant through TAC, it will default to male for all the affected languages. We‚Äôre going to see which they are in a bit.&lt;/p&gt;
&lt;p&gt;Again, this is very bad news for Teams Voice Admins as this basically restricts us to either using TAC only (if we‚Äôre fine with male voices even though call queues use female voices) or using PowerShell only, if we want to make sure that we‚Äôre always using a female voice.&lt;/p&gt;
&lt;h4 id=&#34;why-has-this-happened&#34;&gt;Why Has This Happened?
&lt;/h4&gt;&lt;p&gt;Auto attendants and call queues use the Azure Cognitive Services TTS API, which is actually available to all Azure customers. You can try the different voices &lt;a class=&#34;link&#34; href=&#34;https://azure.microsoft.com/en-us/products/cognitive-services/text-to-speech/#features&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. Many of them are also used by Teams. Over time, some of these voices get imporved or some languages even get entirely new voices. I don‚Äôt know when it happend exactly, but Microsoft added support for new voices a couple of months ago. For example, there‚Äôs an option for my native language, Swiss German available now.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-up-with-teams-auto-attendants-suddenly-using-a-male-voice-for-tts-5c6f717d60a/1QTgYIJQa3uUyIBBUwF0elA.png&#34;
	width=&#34;1125&#34;
	height=&#34;253&#34;
	srcset=&#34;https://heusser.pro/p/whats-up-with-teams-auto-attendants-suddenly-using-a-male-voice-for-tts-5c6f717d60a/1QTgYIJQa3uUyIBBUwF0elA_hu11330653138037206283.png 480w, https://heusser.pro/p/whats-up-with-teams-auto-attendants-suddenly-using-a-male-voice-for-tts-5c6f717d60a/1QTgYIJQa3uUyIBBUwF0elA_hu16104546312007917271.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;444&#34;
		data-flex-basis=&#34;1067px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Available voices on Teams auto attendants are not particularly easy to find. There‚Äôs &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/new-csautoattendant?view=skype-ps#-voiceid&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; Learn article which has some info on it though.&lt;/p&gt;
&lt;p&gt;By using this code, we can get all the available voices for e.g., en-US.&lt;/p&gt;
&lt;p&gt;PS C:\Temp&amp;gt; (Get-CsAutoAttendantSupportedLanguage -Identity &amp;ldquo;en-US&amp;rdquo;).Voices&lt;/p&gt;
&lt;p&gt;Name : GuyNeural&lt;br&gt;
Id   : Male&lt;/p&gt;
&lt;p&gt;Name : JessaNeural&lt;br&gt;
Id   : Female&lt;/p&gt;
&lt;p&gt;Name : AriaNeural&lt;br&gt;
Id   : Female&lt;/p&gt;
&lt;p&gt;Name : JennyNeural&lt;br&gt;
Id   : Female&lt;/p&gt;
&lt;p&gt;Let‚Äôs do the same for Swiss German, which is a newly supported language.&lt;/p&gt;
&lt;p&gt;PS C:\Temp&amp;gt; (Get-CsAutoAttendantSupportedLanguage -Identity &amp;ldquo;de-CH&amp;rdquo;).Voices&lt;/p&gt;
&lt;p&gt;Name : JanNeural&lt;br&gt;
Id   : Male&lt;/p&gt;
&lt;p&gt;Name : LeniNeural&lt;br&gt;
Id   : Female&lt;/p&gt;
&lt;p&gt;The docs say that we can retrieve the default voice used for any language by using this code.&lt;/p&gt;
&lt;p&gt;PS C:\Temp&amp;gt; (Get-CsAutoAttendantSupportedLanguage -Identity &amp;ldquo;en-US&amp;rdquo;).Voices.Id[0]&lt;br&gt;
Male&lt;/p&gt;
&lt;p&gt;I can‚Äôt say for sure, but I‚Äôm fairly confident that TAC just reads the array of supported languages and uses whichever comes first as the default voice. That‚Äôs why en-US or de-CH now have male voices by default now.&lt;/p&gt;
&lt;p&gt;Here‚Äôs a little script I wrote to extract the default VoiceId for all the supported languages and export them to CSV.&lt;/p&gt;
&lt;p&gt;Connect-MicrosoftTeams&lt;/p&gt;
&lt;p&gt;$allLanguages = Get-CsAutoAttendantSupportedLanguage&lt;/p&gt;
&lt;p&gt;$languageVoiceTable = @()&lt;/p&gt;
&lt;p&gt;foreach ($language in $allLanguages) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$currentLanguageVoice = New-Object -TypeName psobject  

$currentLanguageVoice | Add-Member -MemberType NoteProperty -Name &amp;quot;LanguageId&amp;quot; -Value $language.Id  
$currentLanguageVoice | Add-Member -MemberType NoteProperty -Name &amp;quot;LanguageName&amp;quot; -Value $language.DisplayName  
$currentLanguageVoice | Add-Member -MemberType NoteProperty -Name &amp;quot;VoiceId&amp;quot; -Value $language.Voices\[0\].Id  

$languageVoiceTable += $currentLanguageVoice  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;$languageVoiceTable | Export-Csv -Path C:\Temp\autoAttendantLanguageVoiceTable.csv -Delimiter &amp;ldquo;;&amp;rdquo; -NoTypeInformation -Encoding UTF8 -Force&lt;/p&gt;
&lt;p&gt;Here‚Äôs the full list which should help you identify if you‚Äôre using any affected languages.&lt;/p&gt;
&lt;p&gt;LanguageId LanguageName VoiceId&lt;br&gt;
ar-EG Arabic (Egypt) Female&lt;br&gt;
ar-SA Arabic (Saudi Arabia) Female&lt;br&gt;
bg-BG Bulgarian (Bulgaria) Female&lt;br&gt;
ca-ES Catalan (Spain) Female&lt;br&gt;
cs-CZ Czech (Czech) &lt;strong&gt;Male&lt;/strong&gt;&lt;br&gt;
cy-GB Welsh (United Kingdom) Female&lt;br&gt;
da-DK Danish (Denmark) Female&lt;br&gt;
de-AT German (Austria) Female&lt;br&gt;
de-CH German (Switzerland) &lt;strong&gt;Male&lt;/strong&gt;&lt;br&gt;
de-DE German (Germany) Female&lt;br&gt;
el-GR Greek (Greek) Female&lt;br&gt;
en-AU English (Australia) &lt;strong&gt;Male&lt;/strong&gt;&lt;br&gt;
en-CA English (Canada) &lt;strong&gt;Male&lt;/strong&gt;&lt;br&gt;
en-GB English (United Kingdom) &lt;strong&gt;Male&lt;/strong&gt;&lt;br&gt;
en-IE English (Ireland) &lt;strong&gt;Male&lt;/strong&gt;&lt;br&gt;
en-IN English (India) &lt;strong&gt;Male&lt;/strong&gt;&lt;br&gt;
en-PH English (Philippines) &lt;strong&gt;Male&lt;/strong&gt;&lt;br&gt;
en-US English (United States) &lt;strong&gt;Male&lt;/strong&gt;&lt;br&gt;
en-ZA English (South Africa) Female&lt;br&gt;
es-ES Spanish (Spain) Female&lt;br&gt;
es-MX Spanish (Mexico) Female&lt;br&gt;
et-EE Estonian (Estonia) Female&lt;br&gt;
fi-FI Finnish (Finland) Female&lt;br&gt;
fr-BE French (Belgium) Female&lt;br&gt;
fr-CA French (Canada) Female&lt;br&gt;
fr-CH French (Switzerland) Female&lt;br&gt;
fr-FR French (France) Female&lt;br&gt;
he-IL Hebrew (Israel) &lt;strong&gt;Male&lt;/strong&gt;&lt;br&gt;
hi-IN Hindi (India) Female&lt;br&gt;
hr-HR Croatian (Croatia) Female&lt;br&gt;
hu-HU Hungarian (Hungary) Female&lt;br&gt;
id-ID Indonesian (Indonesia) Female&lt;br&gt;
it-IT Italian (Italy) Female&lt;br&gt;
lt-LT Lithuanian (Lithuania) &lt;strong&gt;Male&lt;/strong&gt;&lt;br&gt;
lv-LV Latvian (Latvia) Female&lt;br&gt;
ja-JP Japanese (Japan) Female&lt;br&gt;
ko-KR Korean (Korea) Female&lt;br&gt;
nb-NO Norwegian, Bokm√•l (Norway) Female&lt;br&gt;
nl-BE Dutch (Belgium) Female&lt;br&gt;
nl-NL Dutch (Netherlands) Female&lt;br&gt;
pl-PL Polish (Poland) Female&lt;br&gt;
pt-BR Portuguese (Brazil) Female&lt;br&gt;
pt-PT Portuguese (Portugal) Female&lt;br&gt;
ro-RO Romanian (Romania) Female&lt;br&gt;
ru-RU Russian (Russia) Female&lt;br&gt;
sk-SK Slovak (Slovakia) &lt;strong&gt;Male&lt;/strong&gt;&lt;br&gt;
sl-SI Slovenian (Slovenia) Female&lt;br&gt;
sv-SE Swedish (Sweden) Female&lt;br&gt;
th-TH Thai (Thai) Female&lt;br&gt;
tr-TR Turkish (Turkey) Female&lt;br&gt;
vi-VN Vietnamese (Vietnam) Female&lt;br&gt;
zh-CN Chinese (Simplified, PRC) Female&lt;br&gt;
zh-HK Chinese (Traditional, Hong Kong S.A.R.) Female&lt;br&gt;
zh-TW Chinese (Traditional, Taiwan) Female&lt;/p&gt;
&lt;p&gt;You can use this one-liner to check if any of your existing auto attendants are currently using a male voice.&lt;/p&gt;
&lt;p&gt;Get-CsAutoAttendant -First 1000 | ft Name, LanguageId, VoiceId&lt;/p&gt;
&lt;p&gt;I really hope that Microsofts recognizes that this is a major annoyance and that they fix it rather sooner than later. In the meantime, I hope that I was able to provide you with some useful insight and hope that it helps you keeping the problem in check.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Teams Auto Attendant Stuff You Didn‚Äôt Know About</title>
        <link>https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/</link>
        <pubDate>Tue, 20 Dec 2022 11:04:41 +0000</pubDate>
        
        <guid>https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/</guid>
        <description>&lt;p&gt;Hello everybody. At the beginning of this year, I set myself a goal of writing at least one article per month. Since I will meet my goal with today‚Äôs article, I‚Äôll make sure to take a break over the holidays and recharge.&lt;/p&gt;
&lt;p&gt;But before I do that, we‚Äôre going to talk about some lesser-known stuff about Teams Cloud PBX features. Over the years, auto attendants and call queues have gotten a lot of new or updated features. Did you know that there‚Äôs a dedicated &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/get-csautoattendanttenantinformation?view=skype-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Cmdlet&lt;/a&gt; to see what features are enabled for your tenant? Use the following code to get the complete list.&lt;/p&gt;
&lt;p&gt;(Get-CsAutoAttendantTenantInformation).FlightedFeatures&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 29.06.2023&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I‚Äôve written a Bot which sends any new entries in this list to a channel on my Discord Server. If you want to stay up to date, you can join my Server using &lt;a class=&#34;link&#34; href=&#34;https://discord.gg/wbdAfvwRwq&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; link. If you want to learn more about my Discord Server, check &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/discord.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; link.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;/Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At the time of drafting this article, this is what‚Äôs returned by the Cmdlet. Unfortunately, many of these features were added without an MCP (Message Center Post) or a M355 Road Map entry. I‚Äôll try to decipher it and explain what each of these entries mean.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BackupConfigInBvd&lt;br&gt;
NgcProvisioning&lt;br&gt;
UserValidationViaAdminService&lt;br&gt;
AutoAttendantSharedVoicemailEnabled&lt;br&gt;
AutoAttendantAnnouncementAsMenuOptionEnabled&lt;br&gt;
AuthorizedUsersEnabled&lt;br&gt;
CallQueueAllowPstnNumberAsTargetInCmdlets&lt;br&gt;
DirectorySearchByExtensionEnabled&lt;br&gt;
PstnTransferOutEnabled&lt;br&gt;
CallQueueSharedVoicemailEnabled&lt;br&gt;
CallQueueConferenceModeEnabled&lt;br&gt;
CallQueuePresenceAwareRoutingEnabled&lt;br&gt;
CallQueueLongestIdleRoutingEnabled&lt;br&gt;
GranularSchedulesEnabled&lt;br&gt;
AVSCallQueueZodiac&lt;br&gt;
CallQueueEnableResourceAccountsForOboV2&lt;br&gt;
EnableSharedVoicemailSystemPromptSuppression&lt;br&gt;
OboMobileFeatureEnabled&lt;br&gt;
AVSAdminEnableVerificationOfXMSUserIdHeader&lt;br&gt;
AVSEnableMenuOptionExpansion&lt;br&gt;
CallQueueEnableSharedVoicemailSystemPromptSuppression&lt;br&gt;
SupervisorDelegatedAdminPart1Enabled&lt;br&gt;
SupervisorDelegatedAdminPart2Enabled&lt;br&gt;
SupervisorDelegatedAdminPart3Enabled&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;autoattendantannouncementasmenuoptionenabled&#34;&gt;AutoAttendantAnnouncementAsMenuOptionEnabled
&lt;/h4&gt;&lt;p&gt;This feature added the possibility to choose either a Text-To-Speech or an audio file announcement as auto attendant menu options. Once the announcement has been played back, the caller will be returned to the initial IVR greeting (this will create a loop).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1SGMClnPKvA02S4gDAlpIIA.png&#34;
	width=&#34;1535&#34;
	height=&#34;303&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1SGMClnPKvA02S4gDAlpIIA_hu4397197591838933580.png 480w, https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1SGMClnPKvA02S4gDAlpIIA_hu13076543237307971482.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;506&#34;
		data-flex-basis=&#34;1215px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;authorizedusersenabled&#34;&gt;AuthorizedUsersEnabled
&lt;/h4&gt;&lt;p&gt;As far as I can tell, this feature is not yet enabled yet, even though it already shows in flighted features. I can only assume that this will allow admins to delegate certain admin tasks to non-admin users.&lt;/p&gt;
&lt;p&gt;There are also three other references which look related to this.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SupervisorDelegatedAdminPart1Enabled&lt;/li&gt;
&lt;li&gt;SupervisorDelegatedAdminPart2Enabled&lt;/li&gt;
&lt;li&gt;SupervisorDelegatedAdminPart3Enabled&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;callqueueallowpstnnumberastargetincmdlets&#34;&gt;CallQueueAllowPstnNumberAsTargetInCmdlets
&lt;/h4&gt;&lt;p&gt;I am not 100% sure with this one but the name kind of suggests that this added the possibility to set an external PSTN number as overflow or timeout target on call queues using PowerShell, after PSTN transfer had been rolled out for auto attendants.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1M9Ivkq0Or1ke6sWiSC8ioA.png&#34;
	width=&#34;1397&#34;
	height=&#34;347&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1M9Ivkq0Or1ke6sWiSC8ioA_hu8712313444478715968.png 480w, https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1M9Ivkq0Or1ke6sWiSC8ioA_hu2139596776718602806.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;402&#34;
		data-flex-basis=&#34;966px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;pstntransferoutenabled&#34;&gt;PstnTransferOutEnabled
&lt;/h4&gt;&lt;p&gt;If I remember correctly, transfer to PSTN was enabled for auto attendants before call queues. Thus, there‚Äôs another entry for that feature next to CallQueueAllowPstnNumberAsTargetInCmdlets.&lt;/p&gt;
&lt;h4 id=&#34;directorysearchbyextensionenabled&#34;&gt;DirectorySearchByExtensionEnabled
&lt;/h4&gt;&lt;p&gt;This feature allows inbound callers to reach people who have an extension through an auto attendant. The caller will enter a person&amp;rsquo;s extension followed by &lt;code&gt;#&lt;/code&gt;and the auto attendant will forward the call to the recipient. The extension must be configured in Azure AD (Phone Number) and not in Teams (LineURI) for it to work.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1CFmwLZaK7QF3YzC79tBNA.png&#34;
	width=&#34;831&#34;
	height=&#34;140&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1CFmwLZaK7QF3YzC79tBNA_hu15299671515477939474.png 480w, https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1CFmwLZaK7QF3YzC79tBNA_hu5363597428709294282.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;593&#34;
		data-flex-basis=&#34;1424px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the user does not have an extension set for it‚Äôs LineURI.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/12sqS0b4T9eEhvjCWOf2rw.png&#34;
	width=&#34;1135&#34;
	height=&#34;367&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/12sqS0b4T9eEhvjCWOf2rw_hu7682262947278564878.png 480w, https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/12sqS0b4T9eEhvjCWOf2rw_hu11826309869695414714.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;309&#34;
		data-flex-basis=&#34;742px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;We do not need to set any dial keys if we only want Dial by extension without any other options.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1ufTy8uYSsF4oG2rDTDoKA.png&#34;
	width=&#34;1646&#34;
	height=&#34;1248&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1ufTy8uYSsF4oG2rDTDoKA_hu12695305594804149638.png 480w, https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1ufTy8uYSsF4oG2rDTDoKA_hu8926119894691261523.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;131&#34;
		data-flex-basis=&#34;316px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Any auto attendant can only be enabled for dial by extension or dial by name. If you want both to be available to your callers, you will need to follow the example on &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/microsoftteams/create-a-phone-system-auto-attendant?tabs=call-flow#directory-search&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Microsoft Learn&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you want to use both the Dial by name and Dial by extension features, you can assign a dial key on your main auto attendant to reach an auto attendant enabled for Dial by name. Within that auto attendant, you can assign the 1 key (which has no letters associated with it) to reach the Dial by extension auto attendant.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It‚Äôs also possible to limit the dial scope to certain groups.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/15bQzvIaG3Lrw9safocEBQ.png&#34;
	width=&#34;1553&#34;
	height=&#34;743&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/15bQzvIaG3Lrw9safocEBQ_hu7404270680580980479.png 480w, https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/15bQzvIaG3Lrw9safocEBQ_hu6012431811750095682.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;209&#34;
		data-flex-basis=&#34;501px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bonus Tip&lt;/strong&gt;: You can directly dial an extension from some phones by adding¬†&lt;code&gt;,,&amp;lt;extension&amp;gt;#&lt;/code&gt; at the end of the number. At least an iPhone will dial the keys automatically once the announcement has been played back. This is the same technique which Microsoft uses for Calling Links in Teams Meetings which support audio conferencing.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1cKz4ArQJFvLhzpaYA6eOw.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1cKz4ArQJFvLhzpaYA6eOw_hu13187346932429807588.png 480w, https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1cKz4ArQJFvLhzpaYA6eOw_hu10805491274122383732.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;callqueuesharedvoicemailenabled&#34;&gt;CallQueueSharedVoicemailEnabled
&lt;/h4&gt;&lt;p&gt;This feature enabled the much-requested shared voicemail on call queues. Before that, we had to license users which would permanently forward to voicemail which was super painful because there‚Äôs still no way to upload an audio file for voicemail greetings on user accounts. The voicemail greeting needs to be recorded using the Teams client. If you want to know more about Teams shared voicemail, I recommend to check out &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24&#34; &gt;this&lt;/a&gt; very comprehensive article.&lt;/p&gt;
&lt;h4 id=&#34;autoattendantsharedvoicemailenabled&#34;&gt;AutoAttendantSharedVoicemailEnabled
&lt;/h4&gt;&lt;p&gt;This feature was also enabled for auto attendants after it has been enabled for call queues.&lt;/p&gt;
&lt;h4 id=&#34;callqueueconferencemodeenabled&#34;&gt;CallQueueConferenceModeEnabled
&lt;/h4&gt;&lt;p&gt;Conference mode will create a meeting when a call is connected to an agent which vastly improves the connection time. This means that agents will hear callers much sooner / without delays. The default value was changed from false to true in 2022. The docs were updated accordingly on August 15 2022 in &lt;a class=&#34;link&#34; href=&#34;https://github.com/MicrosoftDocs/office-docs-powershell/commit/27e8165f7af0d15a0377ff9c700e4af14a754c32&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; commit.&lt;/p&gt;
&lt;h4 id=&#34;callqueuepresenceawareroutingenabled&#34;&gt;CallQueuePresenceAwareRoutingEnabled
&lt;/h4&gt;&lt;p&gt;The default value for Presence based routing was also changed from false to true in the same commit linked above.&lt;/p&gt;
&lt;h4 id=&#34;callqueuelongestidleroutingenabled&#34;&gt;CallQueueLongestIdleRoutingEnabled
&lt;/h4&gt;&lt;p&gt;I think that these names are sometimes a little misleading. While I assume that CallQueueConferenceModeEnabled and CallQueuePresenceAwareRoutingEnabled refer to the new default values, this one can‚Äôt since it‚Äôs not a boolean value. Here‚Äôs the description from &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/new-cscallqueue?view=skype-ps#-routingmethod&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Microsoft Learn&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The RoutingMethod defines how agents will be called in a Call Queue. If the routing method is set to Serial, then agents will be called one at a time. If the routing method is set to Attendant, then agents will be called in parallel. If routing method is set to RoundRobin, the agents will be called using Round Robin strategy so that all agents share the call-load equally. If routing method is set to LongestIdle, the agents will be called based on their idle time, i.e., the agent that has been idle for the longest period will be called.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I can‚Äôt remember if Longest Idle was always there or if it was added later on. But since there‚Äôs an entry in flighted features, I assume it was added at some point.&lt;/p&gt;
&lt;h4 id=&#34;granularschedulesenabled&#34;&gt;GranularSchedulesEnabled
&lt;/h4&gt;&lt;p&gt;I‚Äôve been working with Teams Voice since the beginning, when we still had to use Skype for Business Online Admin Center to configure auto attendants and call queues (v1). From there, it was super easy to select business hours from a timetable. This only supported 30 minutes increments though.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1Ao8BKZuMaZlUtWDtqScEsg.png&#34;
	width=&#34;770&#34;
	height=&#34;1017&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1Ao8BKZuMaZlUtWDtqScEsg_hu7783256039878128872.png 480w, https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1Ao8BKZuMaZlUtWDtqScEsg_hu9747832729459284102.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;75&#34;
		data-flex-basis=&#34;181px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When auto attendants were moved to TAC, they only supported 30 minutes increments at first too. 15 minutes increments were added quite early on though.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1IRUMV9um1nnepnOQlMkcjQ.png&#34;
	width=&#34;928&#34;
	height=&#34;136&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1IRUMV9um1nnepnOQlMkcjQ_hu2278602918688366050.png 480w, https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1IRUMV9um1nnepnOQlMkcjQ_hu17679163928807988854.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;682&#34;
		data-flex-basis=&#34;1637px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Because business hours now support 15 minutes increments, the drop-down list is awfully long which makes it kind of time intensive to configure. I‚Äôve published an article and an accompanying PowerShell script to combat this &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2&#34; &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;avscallqueuezodiac&#34;&gt;AVSCallQueueZodiac
&lt;/h4&gt;&lt;p&gt;Zodiac was the code name for Voice Enabled Channels which is also known as Collaborative Calling. I don‚Äôt know how this name made it into production. üôÉ&lt;/p&gt;
&lt;p&gt;This update was mentioned rather briefly in &lt;a class=&#34;link&#34; href=&#34;https://techcommunity.microsoft.com/t5/microsoft-teams-blog/what-s-new-in-microsoft-teams-february-and-march-2021/ba-p/2245944&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; TechNet blog post under calling.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Voice-enabled channels&lt;/strong&gt;&lt;br&gt;
Voice-enabled channels allow connecting a call queue to a channel in Microsoft Teams. Users can collaborate and share information within the channel while taking calls in the queue. This feature is ideal for scenarios such an IT help desk or HR hotline. IT admins can quickly connect call queues to specific channels, and team owners can manage the settings.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;callqueueenableresourceaccountsforobov2&#34;&gt;CallQueueEnableResourceAccountsForOboV2
&lt;/h4&gt;&lt;p&gt;With Voice Enabled Channles, it was finally possible to make outbound calls using a number of a resource account. This only worked if you used the dialer located in the channel but not standard dialer from the Calls app at first. I‚Äôm guessing ‚ÄúObo‚Äù stands for Outbound something and V2 also enabled this feature in the Calls App dialer. This was mentioned in Roadmap entry &lt;a class=&#34;link&#34; href=&#34;https://www.microsoft.com/en-us/microsoft-365/roadmap?filters=Microsoft%20Teams&amp;amp;searchterms=86992&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;86992&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 03.06.2023&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I‚Äôm now fairly confident that &lt;strong&gt;Obo&lt;/strong&gt; stands for &lt;strong&gt;On behalf of&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;/Update&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;enablesharedvoicemailsystempromptsuppression&#34;&gt;EnableSharedVoicemailSystemPromptSuppression
&lt;/h4&gt;&lt;p&gt;When a call goes to voicemail on an auto attendant, a so-called system greeting is being played back by default. In English it sounds like this.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Please leave a message after the tone. When you have finished, please hang up.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Since many companies use professionally recorded audio files for their announcements, it can be disturbing that a custom greeting is followed by the system greeting which will be Text-To-Speech. Because of that, Microsoft has added the ability to suppress it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1n6mmIzdyHlToybU63o4r9g.png&#34;
	width=&#34;1610&#34;
	height=&#34;460&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1n6mmIzdyHlToybU63o4r9g_hu5212571105908921511.png 480w, https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1n6mmIzdyHlToybU63o4r9g_hu13355503245486913461.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;350&#34;
		data-flex-basis=&#34;840px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When suppressing the system greeting on an auto attendant, you have to be careful though. There will be two different beep tones because the auto attendant forwards the call to shared voicemail, which will play back the first beep and then play onther (different sounding) one as a ‚Äúready to leave a message‚Äù indicator. I‚Äôve also covered that in more detail under ‚ÄúOne Last Caveat‚Äù &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24&#34; &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;callqueueenablesharedvoicemailsystempromptsuppression&#34;&gt;CallQueueEnableSharedVoicemailSystemPromptSuppression
&lt;/h4&gt;&lt;p&gt;When you read the article linked above, you will find the following paragraph.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For call queues, this is slightly different. There is no option to suppress the system greeting. A call queue‚Äôs primary purpose is to route calls to agents so there are only routing options for overflow or timeout scenarios. This also means that there‚Äôs no option to configure a greeting inside the scope of an overflow or a timeout action.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;When you upload your own audio file, the system greeting is automatically suppressed by the call queue. There‚Äôs no option to enable it. (Why would you anyway?)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;At the time of writing, this was true. But now Microsoft has added the option to suppress the system message for TTS greetings and not suppress it for audio files on call queues as well. Remember that you can always use my &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;M365 Call Flow Visualizer&lt;/a&gt; to see exactly which greetings are configured on any call flow.&lt;/p&gt;
&lt;h4 id=&#34;obomobilefeatureenabled&#34;&gt;OboMobileFeatureEnabled
&lt;/h4&gt;&lt;p&gt;I‚Äôd be lying if I said that I knew what this references to. My best guess is that it‚Äôs related to &lt;a class=&#34;link&#34; href=&#34;https://techcommunity.microsoft.com/t5/microsoft-teams-blog/announcing-operator-connect-mobile-delivering-mobile-first/ba-p/3252902#:~:text=Single-number%20simplicity%20and%20the%20flexibility%20to%20work%20from,devices%20and%20hardware%20to%20purchase%2C%20manage%2C%20and%20support.&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Operator Connect Mobile&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;avsenablemenuoptionexpansion&#34;&gt;AVSEnableMenuOptionExpansion
&lt;/h4&gt;&lt;p&gt;I have no idea what that is. It would be a lot easier if we would see at which dates these entries have been added. The only thing I can think of is support for pound and asterisk key on auto attendant menu options.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1z737i841L01TVQILLF1MKA.png&#34;
	width=&#34;1594&#34;
	height=&#34;398&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1z737i841L01TVQILLF1MKA_hu12077855412288229822.png 480w, https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1z737i841L01TVQILLF1MKA_hu4802040136285232727.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;400&#34;
		data-flex-basis=&#34;961px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;backupconfiginbvd&#34;&gt;BackupConfigInBvd
&lt;/h4&gt;&lt;p&gt;As far as I know, BVD stands for Business Voice Directory and it is an internal Microsoft system. This is most likely an internal service update which has no impact on admin exposed settings.&lt;/p&gt;
&lt;h4 id=&#34;other-entries&#34;&gt;Other Entries
&lt;/h4&gt;&lt;p&gt;There are a couple of entries where I really don‚Äôt have the slightest idea what they could mean.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NgcProvisioning&lt;/li&gt;
&lt;li&gt;UserValidationViaAdminService&lt;/li&gt;
&lt;li&gt;AVSAdminEnableVerificationOfXMSUserIdHeader&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Get-CsAutoAttendantTenantInformation&lt;/code&gt; allows us to get a vague overview of which features have been added or might be added soon. It won‚Äôt help you configure or unlock anything, but I still hope that I was able to explain some things which you might not have known before.&lt;/p&gt;
&lt;p&gt;I wish you all happy holidays. See you next year!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1tpVtUXleSztgTqWH64g.png&#34;
	width=&#34;1485&#34;
	height=&#34;866&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1tpVtUXleSztgTqWH64g_hu16920676678968498683.png 480w, https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1tpVtUXleSztgTqWH64g_hu3529321899559793572.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;171&#34;
		data-flex-basis=&#34;411px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Report on Teams Call Queue Opt In Status and Assignment Paths</title>
        <link>https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/</link>
        <pubDate>Thu, 29 Sep 2022 17:22:31 +0000</pubDate>
        
        <guid>https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/</guid>
        <description>&lt;p&gt;At the beginning of September, I wrote &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/find-all-auto-attendants-and-call-queues-a-user-is-associated-with-16710c3adf01&#34; &gt;this&lt;/a&gt; article, where I presented a way to quickly see all Call Queues and Auto Attendants any user is associated with by running a PowerShell script.&lt;/p&gt;
&lt;p&gt;Today, we‚Äôre going to wrap up September by taking a look at the other way around. We want to see all the agents which are part of a specific queue. Of course, the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;M365 Call Flow Visualizer&lt;/a&gt; will also show this information in the diagram but sometimes all we need is just a plain old CSV file.&lt;/p&gt;
&lt;p&gt;If you‚Äôre using a Teams Voice Enabled Channel (also known as Collaborative Calling) you will be able to see which agents are currently opted in to the Queue in the Teams Client.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1sQNinlL8ABHZcYr69HUZ5w.png&#34;
	width=&#34;1896&#34;
	height=&#34;1238&#34;
	srcset=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1sQNinlL8ABHZcYr69HUZ5w_hu4548159933489841370.png 480w, https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1sQNinlL8ABHZcYr69HUZ5w_hu10440408992545865194.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;153&#34;
		data-flex-basis=&#34;367px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;However, this only works for Voice Enabled Channels and only agents which are part of the Queue can see this information. If you‚Äôre a Teams Voice Admin like me, you might want to see the opt in status of agents from other queues or check the assignment path (Direct, Groups or Channel) as well. If you‚Äôre confused about Call Queues and agent lists, please have a look at &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0&#34; &gt;this&lt;/a&gt; article.&lt;/p&gt;
&lt;h3 id=&#34;the-problem&#34;&gt;The Problem
&lt;/h3&gt;&lt;p&gt;It has always been possible to retrieve some of the information about Call Queue agents by PowerShell. The problem is that the properties of a Call Queue will only display the Object Ids of agents but no Display Names.&lt;/p&gt;
&lt;p&gt;Let‚Äôs store the properties of a Call Queue in a variable.&lt;/p&gt;
&lt;p&gt;$callQueue = Get-CsCallQueue -Identity a3b9ffff-f74b-46bb-9743-0c5146a61f31&lt;/p&gt;
&lt;p&gt;We can now view the agent list by accessing the &lt;strong&gt;Agents&lt;/strong&gt; property. This will give us an output which looks like this.&lt;/p&gt;
&lt;p&gt;PS C:\Temp\M365CallFlowVisualizer&amp;gt; $callQueue.Agents&lt;/p&gt;
&lt;p&gt;ObjectId                             OptIn&lt;br&gt;
-&amp;mdash;&amp;mdash;-                             &amp;mdash;&amp;ndash;&lt;br&gt;
61d8b739-2e10-4e47-8e63-e66cc73d0a24  True&lt;br&gt;
fa19b242-8bae-419d-a4eb-12796577c81f  True&lt;br&gt;
76606d0b-4d28-4246-9c08-2a0f95f96141  True&lt;br&gt;
9a7c1bb4-49db-40ee-9d05-26f5dfd338c2  True&lt;/p&gt;
&lt;p&gt;We can also see that two distribution lists (groups) are associated with this Call Queue by entering the following.&lt;/p&gt;
&lt;p&gt;PS C:\Temp\M365CallFlowVisualizer&amp;gt; $callQueue.DistributionLists&lt;/p&gt;
&lt;p&gt;Guid&lt;br&gt;
-&amp;mdash;&lt;br&gt;
57e8de46-1552-4271-9f93-a602216c32ad&lt;br&gt;
942d0869-2713-407d-8b6f-70b946039877&lt;/p&gt;
&lt;p&gt;So far, we only know the Opt In status of the agents (without names) and that there are two groups linked to this Call Queue. But we still don‚Äôt know the user principal or display names of the agents, or if they‚Äôve been added to the queue by a group or a direct assignment. If they‚Äôve indeed been added by a group, we also don‚Äôt know from which one(s).&lt;/p&gt;
&lt;h3 id=&#34;the-solution&#34;&gt;The Solution
&lt;/h3&gt;&lt;p&gt;I‚Äôve created a PowerShell function inside a script which will give us just that. The script is available on my &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer/blob/main/Functions/Get-CallQueueAgentsStatus.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt; profile. Make sure that you download or clone the whole repository, since this re-uses the &lt;code&gt;Connect-M365CFV&lt;/code&gt; function which is part of the Visualizer. Because some data, like group memberships can‚Äôt be retrieved by Teams PS alone, we also need to connect to Microsoft.Graph Powershell and thus need this function.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1mZw6xKKup3ayftvTLiY4kw.png&#34;
	width=&#34;1798&#34;
	height=&#34;483&#34;
	srcset=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1mZw6xKKup3ayftvTLiY4kw_hu3013088646032455184.png 480w, https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1mZw6xKKup3ayftvTLiY4kw_hu17258070075377003276.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;372&#34;
		data-flex-basis=&#34;893px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;how-to-run-thescript&#34;&gt;How To Run the¬†Script
&lt;/h4&gt;&lt;p&gt;Basically, all the code is inside a single function. The script has a Cmdlet-Binding with two optional parameters though.&lt;/p&gt;
&lt;p&gt;-CallQueueId&lt;br&gt;
-Export&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;CallQueueId&lt;/strong&gt; can be the Id of any Call Queue. You can copy this from the URL in TAC for example.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1NmlnNylGa7Y9vxBjnjYg.png&#34;
	width=&#34;1143&#34;
	height=&#34;177&#34;
	srcset=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1NmlnNylGa7Y9vxBjnjYg_hu5870877725515140569.png 480w, https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1NmlnNylGa7Y9vxBjnjYg_hu15750932798925538655.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;645&#34;
		data-flex-basis=&#34;1549px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you don‚Äôt specify an Id, you will be able to select any Call Queue from a list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1V3XpQnRhcbiSGCTMdcrw.png&#34;
	width=&#34;1896&#34;
	height=&#34;474&#34;
	srcset=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1V3XpQnRhcbiSGCTMdcrw_hu9185512610470280828.png 480w, https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1V3XpQnRhcbiSGCTMdcrw_hu16804573644544577824.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;400&#34;
		data-flex-basis=&#34;960px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Export&lt;/strong&gt; is a Validate Set where &lt;strong&gt;WorkingDir&lt;/strong&gt; and &lt;strong&gt;CustomDir&lt;/strong&gt; are valid inputs. &lt;strong&gt;WorkingDir&lt;/strong&gt; will export a CSV file to your current working directory and &lt;strong&gt;CustomDir&lt;/strong&gt; will prompt you to choose a destination folder.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1fJjtD9WrLPnxwvtm6Ocwg.png&#34;
	width=&#34;617&#34;
	height=&#34;744&#34;
	srcset=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1fJjtD9WrLPnxwvtm6Ocwg_hu7951620904386624932.png 480w, https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1fJjtD9WrLPnxwvtm6Ocwg_hu1856957241382854365.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;82&#34;
		data-flex-basis=&#34;199px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you don‚Äôt include any of the two values, no CSV file will be exported.&lt;/p&gt;
&lt;p&gt;If we want to run the script from the root of the repository, we can do it like this.&lt;/p&gt;
&lt;p&gt;.\Functions\Get-CallQueueAgentsStatus.ps1&lt;/p&gt;
&lt;p&gt;Or like this.&lt;/p&gt;
&lt;p&gt;.\Functions\Get-CallQueueAgentsStatus.ps1 -Export CustomDir -CallQueueId b138ee51-75e0-4c39-b3a8-c14c01170ee0&lt;/p&gt;
&lt;h3 id=&#34;output-of-different-scenarios&#34;&gt;Output of Different Scenarios
&lt;/h3&gt;&lt;p&gt;Let‚Äôs check out some examples of the results.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; Here, all the agents are assigned directly.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1bWLc7yMh3ze3I6dpECPVQA.png&#34;
	width=&#34;1896&#34;
	height=&#34;234&#34;
	srcset=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1bWLc7yMh3ze3I6dpECPVQA_hu17005450918094897034.png 480w, https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1bWLc7yMh3ze3I6dpECPVQA_hu16210969928033827541.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;810&#34;
		data-flex-basis=&#34;1944px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1noowArUNCiqMWCqN3KfjQ.png&#34;
	width=&#34;1375&#34;
	height=&#34;633&#34;
	srcset=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1noowArUNCiqMWCqN3KfjQ_hu5680088528202909621.png 480w, https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1noowArUNCiqMWCqN3KfjQ_hu6295521782947182607.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;217&#34;
		data-flex-basis=&#34;521px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; This one is a little more interesting. Here we can see that one user is assigned directly, two are assigned by two groups and one is assigned by only one group. We can also see that the first user does not have a direct phone number assigned.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1FeNdBPyrxK0FCUQajL2acA.png&#34;
	width=&#34;1896&#34;
	height=&#34;302&#34;
	srcset=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1FeNdBPyrxK0FCUQajL2acA_hu473250061551964928.png 480w, https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1FeNdBPyrxK0FCUQajL2acA_hu18244288678899315677.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;627&#34;
		data-flex-basis=&#34;1506px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1VdnttMWdiPNxH4qp5uVjdw.png&#34;
	width=&#34;1373&#34;
	height=&#34;965&#34;
	srcset=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1VdnttMWdiPNxH4qp5uVjdw_hu12429644061160051051.png 480w, https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1VdnttMWdiPNxH4qp5uVjdw_hu4857553254850597373.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;341px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; And in this last example, all the agents have the same assignment path. Because only direct (users) and groups can be combined, all the agents are assigned by the same Team and Channel. Last but not least, we can see that the last user is currently not opted in to the queue.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1GGTgZcdZuXLz6WPAavIuQ.png&#34;
	width=&#34;1896&#34;
	height=&#34;266&#34;
	srcset=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1GGTgZcdZuXLz6WPAavIuQ_hu4631170938195282592.png 480w, https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1GGTgZcdZuXLz6WPAavIuQ_hu4819588395003963256.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;712&#34;
		data-flex-basis=&#34;1710px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1bTLk3fjZ1Yitj3loiLdRQ.png&#34;
	width=&#34;1376&#34;
	height=&#34;225&#34;
	srcset=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1bTLk3fjZ1Yitj3loiLdRQ_hu5227779477075756600.png 480w, https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1bTLk3fjZ1Yitj3loiLdRQ_hu11139419805013718294.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;611&#34;
		data-flex-basis=&#34;1467px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the output of my script provides a lot of valuable information about Call Queue agents which is nowhere to be found in Teams Admin Center.&lt;/p&gt;
&lt;p&gt;I hope that you enjoy my work and that you too‚Ää‚Äî‚Ääwill find this script useful.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Automatically Enable Overflow Action on Call Queues if No Agents are Opted In</title>
        <link>https://heusser.pro/p/automatically-enable-overflow-action-on-call-queues-if-no-agents-are-opted-in-f1c9bea7cb87/</link>
        <pubDate>Sun, 04 Sep 2022 16:07:25 +0000</pubDate>
        
        <guid>https://heusser.pro/p/automatically-enable-overflow-action-on-call-queues-if-no-agents-are-opted-in-f1c9bea7cb87/</guid>
        <description>&lt;p&gt;One of the biggest pain points of Microsoft Teams Call Queues is that a configured time out is always honored, even if no agents are available to answer the calls. It doesn‚Äôt matter if they have opted out, are offline or even if the queue has no agents configured at all. The call will only be forwarded after the timeout has been reached.&lt;/p&gt;
&lt;p&gt;To conquer this issue, I‚Äôve created a small PowerShell script which can be implemented and executed on a schedule as an Azure Runbook.&lt;/p&gt;
&lt;p&gt;The idea is quite simple. The script loops through all Call Queues and checks if there‚Äôs at least one agent opted in. If all agents are opted out, the script will set the Queue‚Äôs overflow threshold to zero.&lt;/p&gt;
&lt;p&gt;If there‚Äôs at least one agent who‚Äôs opted in, it will check if the overflow threshold is still zero. If that‚Äôs the case, the script will update the overflow threshold to any value you set in the script.&lt;/p&gt;
&lt;p&gt;This means that every time the script detects a Queue where no agents are opted in, the configured overflow action will be active immediately. As soon as the script sees that agents are available again, the immediate overflow action is disabled again.&lt;/p&gt;
&lt;p&gt;I‚Äôve also added a simple alerting mechanism using Teams incoming webhooks. Messages will only be sent when something was changed.&lt;/p&gt;
&lt;h4 id=&#34;azure-runbook-codeexample&#34;&gt;Azure Runbook Code¬†Example
&lt;/h4&gt;&lt;p&gt;Here‚Äôs the example code. Please keep in mind that this is in fact only an example. All the Message Cards go into the same Teams Channel because there‚Äôs no link between a Queue and a Channel which it might be associated with (e.g., a Voice Enabled Channel). I‚Äôm also using the same &lt;code&gt;$defaultOverFlowThreshold&lt;/code&gt; for all Call Queues.&lt;/p&gt;
&lt;p&gt;If you‚Äôre not familiar with Azure Runbooks, Automation Credentials and Teams Webhooks, please refer to &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851&#34; &gt;this article&lt;/a&gt;. The steps to create these things are the same.&lt;/p&gt;
&lt;p&gt;Insert your webhook URL on line 3 and make sure that the name of the Automation Credentials matches yours on line 5.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/a5f7245d99e0752410f8d67cc9a63344.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Unless the examples of my previous articles, were the Runbooks were triggered by a webhook, we‚Äôll need to create a schedule for this one. I recommend a schedule which runs every 15 minutes. This should be good enough to cover most scenarios.&lt;/p&gt;
&lt;p&gt;In the Azure Portal, switch to Schedules and click + Add a schedule.&lt;/p&gt;
&lt;p&gt;Next, click Link a schedule to your runbook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-enable-overflow-action-on-call-queues-if-no-agents-are-opted-in-f1c9bea7cb87/1FPVs3DbJVXhXhMR1mS5Tw.png&#34;
	width=&#34;1422&#34;
	height=&#34;285&#34;
	srcset=&#34;https://heusser.pro/p/automatically-enable-overflow-action-on-call-queues-if-no-agents-are-opted-in-f1c9bea7cb87/1FPVs3DbJVXhXhMR1mS5Tw_hu5869243131641688800.png 480w, https://heusser.pro/p/automatically-enable-overflow-action-on-call-queues-if-no-agents-are-opted-in-f1c9bea7cb87/1FPVs3DbJVXhXhMR1mS5Tw_hu14652432475669185589.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;498&#34;
		data-flex-basis=&#34;1197px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Click on + Add a schedule.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-enable-overflow-action-on-call-queues-if-no-agents-are-opted-in-f1c9bea7cb87/1j3DMLkjJkMSam186QP6pWQ.png&#34;
	width=&#34;1496&#34;
	height=&#34;147&#34;
	srcset=&#34;https://heusser.pro/p/automatically-enable-overflow-action-on-call-queues-if-no-agents-are-opted-in-f1c9bea7cb87/1j3DMLkjJkMSam186QP6pWQ_hu8690756960641033982.png 480w, https://heusser.pro/p/automatically-enable-overflow-action-on-call-queues-if-no-agents-are-opted-in-f1c9bea7cb87/1j3DMLkjJkMSam186QP6pWQ_hu13062287718435634665.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1017&#34;
		data-flex-basis=&#34;2442px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Give it a name and use the settings below. The smallest increment Azure Runbooks support is hourly. If we want to run it every 15 minutes, we‚Äôll need to create four schedules where each schedule starts at a different time. Let‚Äôs start with the one which will run at every full hour.&lt;/p&gt;
&lt;p&gt;Repeat the same step three more times using the following start times (based on this example): 15:15, 15:30, 15:45.&lt;/p&gt;
&lt;p&gt;Once you‚Äôre done, it should look like this.&lt;/p&gt;
&lt;p&gt;The Runbook will now run every 15 minutes and automatically enable or disable the immediate overflow action based on agent availability (opt in status).&lt;/p&gt;
&lt;p&gt;Let me know if you would be interested in a more sophisticated solution of this Runbook. I‚Äôm thinking of a way where we can store and link information about individual Call Queues such as different webhook URLs, different overflow thresholds etc. or even the minimum number of agents which should be available before a Queue is being enabled again. I already have an idea in store how this could be achieved‚Ä¶&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Find All Auto Attendants and Call Queues a User is Associated with</title>
        <link>https://heusser.pro/p/find-all-auto-attendants-and-call-queues-a-user-is-associated-with-16710c3adf01/</link>
        <pubDate>Sun, 04 Sep 2022 11:12:16 +0000</pubDate>
        
        <guid>https://heusser.pro/p/find-all-auto-attendants-and-call-queues-a-user-is-associated-with-16710c3adf01/</guid>
        <description>&lt;p&gt;I‚Äôd be lying if I said that many people have asked me about such a script. But one person has. Frankly, this was all the motivation I needed. The question was &lt;strong&gt;if there‚Äôs a way to see all call flows any user is associated with&lt;/strong&gt;. I figured that I‚Äôd take a shot and see if I can come up with anything. And come up I did.&lt;/p&gt;
&lt;p&gt;First, let‚Äôs talk about where a Teams User could be configured in a call flow.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Auto Attendant Holiday Call Handlings&lt;/li&gt;
&lt;li&gt;Auto Attendant Default Call Flows (transfer or IVR option)&lt;/li&gt;
&lt;li&gt;Auto Attendant After Hours Call Flows (transfer or IVR option)&lt;/li&gt;
&lt;li&gt;Auto Attendant Operator (IVR option)&lt;/li&gt;
&lt;li&gt;Call Queue Agent&lt;/li&gt;
&lt;li&gt;Call Queue Timeout Target (transfer or personal voicemail)&lt;/li&gt;
&lt;li&gt;Call Queue Overflow Target (transfer or personal voicemail)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;how-does-itwork&#34;&gt;How Does it¬†Work?
&lt;/h4&gt;&lt;p&gt;To achieve this, I‚Äôve modified the M365 Call Flow Visualizer Script. Since the Visualizer is already able to read configurations from Auto Attendants and Call Queues, this wasn‚Äôt too hard. All I had to do was to write another function which will pull the Ids of all Voice Apps into an array. I then loop through all the Ids and run the Visualizer for each Voice App. When the Visualizer detects that a call is forwarded to a User at any point in the call flow, the details of said forwarding will be added to a PSObject which will then be added to a variable which only exists in the new function. I called this variable &lt;code&gt;$userLinkVoiceApps&lt;/code&gt;¬†. Because the Visualizer is running for each Voice App, this variable must exist outside of the main script. Otherwise, it would get overwritten after each run.&lt;/p&gt;
&lt;p&gt;. .\Functions\Find-CallQueueAndAutoAttendantUserLinks.ps1&lt;/p&gt;
&lt;p&gt;. Find-CallQueueAndAutoAttendantUserLinks -SearchScope All&lt;/p&gt;
&lt;p&gt;I‚Äôve added this script to my &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer/blob/main/CallFlowUserFinder.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;repository&lt;/a&gt;. Make sure you clone the whole repo or download it as a zip file so that all relative file paths work.&lt;/p&gt;
&lt;p&gt;If you don‚Äôt specify the &lt;code&gt;-SearchUserId&lt;/code&gt; you will be able to select a user from the Out-GridView Table. Otherwise, you can pass an Azure AD ObjectId to the function using this parameter. You can also limit the search scope to just &lt;code&gt;AutoAttendants&lt;/code&gt;or &lt;code&gt;CallQueues&lt;/code&gt;¬†. By default, the search Scope &lt;code&gt;All&lt;/code&gt; is used.&lt;/p&gt;
&lt;p&gt;The M365CallFlowVisualizer.ps1 is run with the parameters shown below. The &lt;code&gt;-FindUserLinks&lt;/code&gt; switch tells the script to write all user related information into the external &lt;code&gt;$userLinkVoiceApps&lt;/code&gt; variable. Since we‚Äôre running the script for each Voice App anyway, there‚Äôs no point in expanding nested call flows. We don‚Äôt need to create diagrams either, therefore all diagram output options are disabled.&lt;/p&gt;
&lt;p&gt;. .\M365CallFlowVisualizerV2.ps1 -Identity $searchScopeIncludedVoiceApp -FindUserLinks -SaveToFile $false -SetClipBoard $false -ExportHtml $false -ShowNestedCallFlows $false -ShowUserCallingSettings $false&lt;/p&gt;
&lt;p&gt;Depending on the amount of Voice Apps you have, it will take some time to finish. After all the information has been gathered, it will be exported to a CSV file at&lt;code&gt;.\Output\VoiceAppsLinkedTo_$UserId.csv&lt;/code&gt;¬†.&lt;/p&gt;
&lt;p&gt;Here‚Äôs an example of the generated output (the actual output will also include User Ids and Voice App Ids). We‚Äôre now able to see to which Voice Apps and where in these Voice Apps a user is configured at a glance.&lt;/p&gt;
&lt;h4 id=&#34;good-toknow&#34;&gt;Good to¬†Know
&lt;/h4&gt;&lt;p&gt;The M365 Call Flow Visualizer does not support reading IVRs on Holiday Call Handlings. Thus, this script won‚Äôt be able to tell if a user is linked to an Auto Attendant on a Holiday IVR.&lt;/p&gt;
&lt;p&gt;The Visualizer is built in a way in which it represents an accurate diagram of the &lt;strong&gt;active&lt;/strong&gt; configuration of a Voice App. For example, if you‚Äôve configured an Operator but it isn‚Äôt linked to an IVR menu option, the Operator won‚Äôt be drawn in the diagram, even if it‚Äôs present in the configuration. The same goes for configured after hours call flows, which don‚Äôt use a schedule (in which case the default call flow is active all the time). Because of that, the script won‚Äôt include users which are configured on &lt;strong&gt;inactive&lt;/strong&gt; configurations on Auto Attendants.&lt;/p&gt;
&lt;p&gt;For Call Queues which are configured to either immediately time out or overflow it‚Äôs a little bit different. The Visualizer won‚Äôt draw the call distribution subgraph because there‚Äôs no distribution happening when zero-time outs or overflows are configured but the agent will still be included in the exported CSV file.&lt;/p&gt;
&lt;p&gt;Here we can see that the Call Queue ‚ÄúPS Test CQ‚Äù immediately overflows to an external number.&lt;/p&gt;
&lt;p&gt;In Teams Admin Center, agents are assigned using a Team though.&lt;/p&gt;
&lt;p&gt;If you would like to learn more about Call Queues and Agent Lists, please refer to &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0&#34; &gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nevertheless, the CallFlowUserFinder.ps1 will still include this user in the exported table so that you can see all the Queues a user is associated with.&lt;/p&gt;
&lt;p&gt;I hope that this script/method helps you figure which Voice Apps a specific user is linked to.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Microsoft Teams Self-Service Call Queue Solution (Part 2)</title>
        <link>https://heusser.pro/p/microsoft-teams-self-service-call-queue-solution-part-2-ab8201157831/</link>
        <pubDate>Sat, 03 Sep 2022 13:21:48 +0000</pubDate>
        
        <guid>https://heusser.pro/p/microsoft-teams-self-service-call-queue-solution-part-2-ab8201157831/</guid>
        <description>&lt;p&gt;There was an issue with my code in this article. The solution described in this article assumes that your call queue overflow and timeout actions already forward to an external PSTN number. If it was set to any other option like voicemail or disconnect, the runbook failed. I‚Äôve updated the &lt;strong&gt;Runbook&lt;/strong&gt; code sample on GitHub accordingly.&lt;/p&gt;
&lt;h4 id=&#34;original-article&#34;&gt;Original Article
&lt;/h4&gt;&lt;p&gt;A while ago I published &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851&#34; &gt;this&lt;/a&gt; article which explains how we can build a self-service solution for changing the configurations of Auto Attendants and Call Queues using Azure Automation Tools. The main reason behind this is so that we don‚Äôt have to grant admin privileges to users which would like to manage Queues and Attendants.&lt;/p&gt;
&lt;p&gt;In my last post, I provided an example how an Auto Attendant can be manually closed or opened. Today I‚Äôm going to show you an example of how we can let users change some settings on Call Queues.&lt;/p&gt;
&lt;p&gt;I‚Äôve written the code for the following changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Immediately forward a Call Queue to an external number&lt;/li&gt;
&lt;li&gt;Disable the immediate forwarding again&lt;/li&gt;
&lt;li&gt;Change the external number for forwarding on Timeout&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Immediate forwarding is configured through an overflow Threshold of 0 and not a Timeout of 0. This is because, typically, Overflow Threshold is less used than timeout. I always recommend using Overflow Threshold 0 when you want to do an immediate forwarding. Unlike Timeout 0, the call is forwarded directly, without the Queue answering the call first when using Overflow. You can read more about that &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6&#34; &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If the immediate forwarding is disabled again, the value of the Overflow Threshold will be set to 50 again. This is the default value which is configured for new Call Queues. Of course, you change that in the Runbook code.&lt;/p&gt;
&lt;p&gt;This is what the Message Card looks like when it‚Äôs sent by the Azure Function.&lt;/p&gt;
&lt;h3 id=&#34;lets-buildit&#34;&gt;Let‚Äôs Build¬†It
&lt;/h3&gt;&lt;p&gt;To build this on your own, please refer to my first article since the configuration steps are the same. You just need to replace the code of the Azure Functions and Runbooks from the Gists below.&lt;/p&gt;
&lt;h4 id=&#34;runbook-code&#34;&gt;Runbook Code
&lt;/h4&gt;&lt;p&gt;Insert the Webhook URL of your Teams Channel on line 7 and make sure that you‚Äôve created the Automation Credentials as described in the article linked at the beginning of this post.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/30c4ff283d8736f3b1b47acd81d40b95.js&#34;&gt;&lt;/script&gt;

&lt;h4 id=&#34;refresh-card-functioncode&#34;&gt;Refresh Card Function¬†Code
&lt;/h4&gt;&lt;p&gt;Insert the URL of your Azure Runbook Webhook trigger on line 11.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/7928bf7f6dabcbf0c5283566511488e5.js&#34;&gt;&lt;/script&gt;

&lt;h4 id=&#34;request-card-functioncode&#34;&gt;Request Card Function¬†Code
&lt;/h4&gt;&lt;p&gt;To get a drop-down list with all your queues, we need to create one first.&lt;/p&gt;
&lt;p&gt;You can use the following code to create a list, which we‚Äôll insert in our Function code later.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/767ebef524b966842b67436cc2ba9a0a.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This will create part of the JSON code and put it in your clipboard. You‚Äôll need it later. If you‚Äôre already using Windows Clipboard, you will be able to pull it up by pressing Windows + V.&lt;/p&gt;
&lt;p&gt;Here‚Äôs the code for the Azure Function which will send the Update Call Queue Config stuff. Insert your URLs on line 6 and 7 and make sure to paste your list of Call Queue choices on line 27.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/315f3d455144ea86bc2c94c0a8a92a45.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;After you‚Äôve inserted your list, it should look like this. Yours will show real Ids of course.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-call-queue-solution-part-2-ab8201157831/1DHb1Es27FcAN3yemT5wQ.png&#34;
	width=&#34;1124&#34;
	height=&#34;292&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-call-queue-solution-part-2-ab8201157831/1DHb1Es27FcAN3yemT5wQ_hu4010058252657163386.png 480w, https://heusser.pro/p/microsoft-teams-self-service-call-queue-solution-part-2-ab8201157831/1DHb1Es27FcAN3yemT5wQ_hu13690025378348908854.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;384&#34;
		data-flex-basis=&#34;923px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;That‚Äôs all. Now your users will be able to request a config change card. Let‚Äôs go through the process again.&lt;/p&gt;
&lt;p&gt;First, the outgoing webhook is mentioned in a channel. The Function will then confirm that the request has been received.&lt;/p&gt;
&lt;p&gt;The Function will also send the config change card.&lt;/p&gt;
&lt;p&gt;Once the user has entered all the information, they will be able to submit the config. This will also update the card and confirm the settings.&lt;/p&gt;
&lt;p&gt;It takes a while until the Runbook has finished. But one it has done its job, it will send us another card, confirming the settings.&lt;/p&gt;
&lt;p&gt;Note: Setting a new number as the Queue‚Äôs Timeout Action will also reset the configured Overflow Threshold to 50. (If the Overflow Threshold would still be 0, the Timeout settings would have no effect at all.)&lt;/p&gt;
&lt;p&gt;I hope that these code examples help you to build your own self-service solution for your users.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Everything You Ever Wanted to Know About Teams Resource Accounts</title>
        <link>https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/</link>
        <pubDate>Mon, 29 Aug 2022 19:45:51 +0000</pubDate>
        
        <guid>https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/</guid>
        <description>&lt;p&gt;Today we‚Äôre going to take a detailed look at Teams Resource Accounts.&lt;/p&gt;
&lt;p&gt;Resource Accounts are special Azure AD Objects (or Microsoft 365 User Accounts, if you will) which can only be created from Teams Admin Center or via Teams PowerShell. It‚Äôs not possible to create such an account in M365 Admin or Azure AD. What‚Äôs funny though is that they can only be deleted from M365 Admin or AAD but not from Teams Admin Center or Teams PowerShell.&lt;/p&gt;
&lt;h4 id=&#34;the-basics&#34;&gt;The Basics
&lt;/h4&gt;&lt;p&gt;Currently, there are two different types of so called first-party (Microsoft) Resource Accounts. Call Queues and Auto Attendants. These accounts are then associated with corresponding types of Voice App, which are again, Call Queues or Auto Attendants.&lt;/p&gt;
&lt;p&gt;Each Resource Account can only be associated with &lt;strong&gt;one&lt;/strong&gt; Voice App, but a Voice App can have multiple Resource Accounts associated. Just like with Teams users, each Resource Account can also only have &lt;strong&gt;one&lt;/strong&gt; phone number assigned. For example, you can have an Auto Attendant which has multiple Resource Accounts assigned, where each Resource Account has a phone number from a different country. This way you can have an Auto Attendant which serves customers across multiple countries, but each customer will be able to call a local number.&lt;/p&gt;
&lt;h4 id=&#34;how-to-create-a-resourceaccount&#34;&gt;How to Create a Resource¬†Account
&lt;/h4&gt;&lt;p&gt;You can create new Resource Accounts from TAC. They are located under &lt;a class=&#34;link&#34; href=&#34;https://admin.teams.microsoft.com/company-wide-settings/resource-accounts&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Voice\Resource accounts&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are a few things to consider here. The first one is naming. If you have a complex call flow, chances are that you will have many Auto Attendants, Call Queues and Resource Accounts. I always use a prefix and suffix system.&lt;/p&gt;
&lt;p&gt;The Display Name is followed by the suffix ‚ÄúAA‚Äù or ‚ÄúCQ‚Äù. This way it will be easier to identify the correct Resource Account, when you associate it with a Voice App. The User Principal Name is led by the prefix ‚Äúra_aa_‚Äù or ‚Äúra_cq_‚Äù so that they can easily be filtered in AAD. Of course, this is only a suggestion, you‚Äôre free to name them however you want.&lt;/p&gt;
&lt;p&gt;Usually, I just use the *.onmicrosoft.com name of the Tenant as the domain suffix. External users won‚Äôt be able to interact with these kinds of accounts, so it doesn‚Äôt matter if you don‚Äôt use your default custom domain name.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1AWJTS0fgG35lia04bwh5w.png&#34;
	width=&#34;507&#34;
	height=&#34;614&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1AWJTS0fgG35lia04bwh5w_hu12053700160931387887.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1AWJTS0fgG35lia04bwh5w_hu1306369263536924111.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;82&#34;
		data-flex-basis=&#34;198px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Here are the &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/powershell/module/skype/new-csonlineapplicationinstance?view=skype-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PowerShell equivalent commands&lt;/a&gt; to create Resoure Accounts.&lt;/p&gt;
&lt;p&gt;Auto Attendant:&lt;/p&gt;
&lt;p&gt;# App Id Auto Attendants: ce933385-9390-45d1-9512-c8d228074e07&lt;/p&gt;
&lt;p&gt;New-CsOnlineApplicationInstance -UserPrincipalName &amp;ldquo;ra_aa_example_ps@domain.com&amp;rdquo; -ApplicationId &amp;ldquo;ce933385-9390-45d1-9512-c8d228074e07&amp;rdquo; -DisplayName &amp;ldquo;Example PS AA&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Call Queues:&lt;/p&gt;
&lt;p&gt;# App Id Call Queues: 11cd3e2e-fccb-42ad-ad00-878b93575e07&lt;/p&gt;
&lt;p&gt;New-CsOnlineApplicationInstance -UserPrincipalName &amp;ldquo;ra_cq_example_ps@domain.com&amp;rdquo; -ApplicationId &amp;ldquo;11cd3e2e-fccb-42ad-ad00-878b93575e07&amp;rdquo; -DisplayName &amp;ldquo;Example PS CQ&amp;rdquo;&lt;/p&gt;
&lt;h4 id=&#34;searching-for-resourceaccounts&#34;&gt;Searching for Resource¬†Accounts
&lt;/h4&gt;&lt;p&gt;If you want to return all Resource Accounts by PowerShell, the MicrosoftTeams Module 4.6.0 now supports a parameter to only return Resource Accounts: &lt;code&gt;Get-CsOnlineUser -AccountType ResourceAccount&lt;/code&gt;¬†. If we didn‚Äôt include a prefix or a suffix, there‚Äôs currently no way to tell if the returned objects are Queues or Attendants.&lt;/p&gt;
&lt;p&gt;For that, we need to use&lt;code&gt;Get-CsOnlineApplicationInstance&lt;/code&gt;¬†. This will return a list with some basic information like Display Name, UPN, Phone Number and Application Id.&lt;/p&gt;
&lt;h4 id=&#34;licensing-resourceaccounts&#34;&gt;Licensing Resource¬†Accounts
&lt;/h4&gt;&lt;p&gt;A Resource Account must be licensed in the following cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you want to assign a phone number to it&lt;/li&gt;
&lt;li&gt;If the Resource Accounts needs to be able to transfer calls to external numbers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Update 29.01.2023&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Microsoft updated their documentation. From now on, &lt;strong&gt;every&lt;/strong&gt; Resource Account must be licensed, regardless of if a phone number is assigned or not. You can find more info &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/microsoftteams/manage-resource-accounts#assign-a-license&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;An easy way to ensure that every Teams Resource Account is licensed properly is to use a dynamic user Azure AD Group which automatically assigns the license. The easiest way to do so is to filter on the Department attribute.&lt;/p&gt;
&lt;p&gt;(user.department -eq &amp;ldquo;Microsoft Communication Application Instance&amp;rdquo;)&lt;/p&gt;
&lt;p&gt;If you need step-by-step instructions on how to create an Azure AD Group with a dynamic query, please consult &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739&#34; &gt;this&lt;/a&gt; article and just replace the query with the one above.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 06.02.2023&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thanks to a reader &lt;a class=&#34;link&#34; href=&#34;https://medium.com/p/3c1dad7d67c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;comment&lt;/a&gt;, it was brought to my attention, that group based licensing actually requires an Azure AD Premium P1 license, for any user which takes advantage of the feature. This is documented &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-licensing-whatis-azure-portal#licensing-requirements&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I don‚Äôt know if a resource account qualifies as ‚Äúuser‚Äù because they are resource account and sign-in blocked. If you want to be absolutely sure, I recommend that you have a P1 license for each resource account or that you contact your account manager at Microsoft and ask them about this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Licensing can‚Äôt be done from TAC. We need to use AAD or M365 Admin. As we can see, the account ‚ÄúExample AA‚Äù has now been created in AAD.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1evT4xkagZq7LVOGeSDAn5w.png&#34;
	width=&#34;1759&#34;
	height=&#34;382&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1evT4xkagZq7LVOGeSDAn5w_hu10803518805684150560.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1evT4xkagZq7LVOGeSDAn5w_hu1471218762489957167.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;460&#34;
		data-flex-basis=&#34;1105px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Because this is a special kind of account, it‚Äôs Sign-in blocked. This means that the account doesn‚Äôt support interactive sign-ins.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1juIc9FR7liYQzHJAbkhg.png&#34;
	width=&#34;854&#34;
	height=&#34;220&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1juIc9FR7liYQzHJAbkhg_hu16544409666129367199.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1juIc9FR7liYQzHJAbkhg_hu9006468249252283723.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;388&#34;
		data-flex-basis=&#34;931px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Another important info is that these accounts have ‚ÄúMicrosoft Communication Application Instance‚Äù set as their department. Just leave this as it is and don‚Äôt change anything.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1LXbE3uikECfwcAvF4MvTkw.png&#34;
	width=&#34;819&#34;
	height=&#34;117&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1LXbE3uikECfwcAvF4MvTkw_hu421341093819503716.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1LXbE3uikECfwcAvF4MvTkw_hu6859564053439145706.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;700&#34;
		data-flex-basis=&#34;1680px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Based on my experience, it‚Äôs no problem to change its Display or User Principal Name though.&lt;/p&gt;
&lt;p&gt;If you want to assign a phone number to a Resource Account, you will need to assign a license to it. Microsoft has recently renamed the old license ‚ÄúMicrosoft Teams Phone‚Ää‚Äî‚ÄäVirtual User‚Äù to ‚ÄúMicrosoft Teams Phone Resource Account‚Äù.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/17nSgscEOXkNkdAbl5pliw.png&#34;
	width=&#34;511&#34;
	height=&#34;87&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/17nSgscEOXkNkdAbl5pliw_hu3990370854299847398.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/17nSgscEOXkNkdAbl5pliw_hu1735576842386264307.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;587&#34;
		data-flex-basis=&#34;1409px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;What‚Äôs really nice about these licenses, is that their free. &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/microsoftteams/teams-add-on-licensing/virtual-user#resource-account-license-allocation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;At least to some extent&lt;/a&gt;. If you have at least one Teams Phone license, you will get 25 Teams Phone Resource Account licenses for free. After that, you will get 1 Resource Account license for every 10 Teams Phone licenses. The ‚ÄúPowerShell Name‚Äù or rather the AccountSkuId of this license is still called ‚ÄúTenantName:PHONESYSTEM_VIRTUALUSER‚Äù. Unlike Teams Phone which needs a ‚Äúbase license‚Äù like a Business Premium or Enterprise E3, Resource Account licenses can be assigned as standalone licenses.&lt;/p&gt;
&lt;h4 id=&#34;how-to-assign-phone-numbers-to-resourceaccounts&#34;&gt;How to Assign Phone Numbers to Resource¬†Accounts
&lt;/h4&gt;&lt;p&gt;Once you‚Äôve assigned a license to a Resource Account you can either use TAC or PowerShell to assign a phone number to the account.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1vhe0ahawllXMWMWFpxQ.png&#34;
	width=&#34;498&#34;
	height=&#34;750&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1vhe0ahawllXMWMWFpxQ_hu16120385284101701379.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1vhe0ahawllXMWMWFpxQ_hu12306703891133596579.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;66&#34;
		data-flex-basis=&#34;159px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;For PowerShell, you can use the same command as you would with a normal user. You might stumble upon outdated articles which mention the following command.&lt;/p&gt;
&lt;p&gt;Set-CsOnlineApplicationInstance -Identity &amp;ldquo;ra_aa_example_ps@domain.com&amp;rdquo; -OnPremPhoneNumber +4144512xxxx&lt;/p&gt;
&lt;p&gt;The new one is the following:&lt;/p&gt;
&lt;p&gt;Set-CsPhoneNumberAssignment -Identity &amp;ldquo;ra_aa_example_ps@domain.com&amp;rdquo; -PhoneNumber +4144512xxxx -PhoneNumberType DirectRouting&lt;/p&gt;
&lt;p&gt;Even though the Resource Account now has a phone number assigned to it, the number won‚Äôt be active until the Resource Account is associated with a Voice App. We‚Äôll get to that later.&lt;/p&gt;
&lt;h4 id=&#34;how-to-assign-a-voice-routing-policy-to-a-resourceaccount&#34;&gt;How to Assign a Voice Routing Policy to a Resource¬†Account
&lt;/h4&gt;&lt;p&gt;If the Resource Account should be able to transfer calls to external PSTN numbers using Direct Routing, we will also need to assign a Voice Routing Policy to it. This can also be done from TAC. Select your Resource Account and click on Edit. Now choose your desired Voice Routing Policy and click Save.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1au4ToHQ2IwpJc3nIrDgPqQ.png&#34;
	width=&#34;511&#34;
	height=&#34;532&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1au4ToHQ2IwpJc3nIrDgPqQ_hu10090952863407953147.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1au4ToHQ2IwpJc3nIrDgPqQ_hu9506605876879637003.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;96&#34;
		data-flex-basis=&#34;230px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Doing it with PowerShell is again, the same as if it was a normal user.&lt;/p&gt;
&lt;p&gt;Grant-CsOnlineVoiceRoutingPolicy -Identity &amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;mailto:ra_aa_example_ps@domain.com&#34; &gt;ra_aa_example_ps@domain.com&lt;/a&gt;&amp;rdquo; -PolicyName &amp;ldquo;Test&amp;rdquo;&lt;/p&gt;
&lt;h4 id=&#34;how-to-change-the-type-of-a-resourceaccount&#34;&gt;How to Change the Type of a Resource¬†Account
&lt;/h4&gt;&lt;p&gt;On that same ‚ÄúEdit resource account‚Äù window, it‚Äôs also possible to change the type of a Resource Account. This can also be done by PowerShell. Just use the &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/powershell/module/skype/set-csonlineapplicationinstance?view=skype-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Set-CsApplicationInstance&lt;/a&gt; cmdlet and include the &lt;code&gt;-Identity&lt;/code&gt; and &lt;code&gt;-ApplicationId&lt;/code&gt; parameters. Even though this should work in theory, I haven‚Äôt tested it myself since I recommend re-creating them, if ever needed. Also be careful when 3rd party resource accounts e.g. from Attendant Console or Contact Center vendors are in play. TAC only supports first party Application Ids and won‚Äôt allow you to save changes you made without choosing a Resource Account type. Use PowerShell if you need to assign an online voice routing policy to a 3rd party resource account.&lt;/p&gt;
&lt;h4 id=&#34;how-to-associate-a-resource-account-with-a-voiceapp&#34;&gt;How to Associate a Resource Account with a Voice¬†App
&lt;/h4&gt;&lt;p&gt;In most cases, having one Resource Account per Queue or Attendant is enough. Let‚Äôs make a small detour and talk about naming again for a second. To avoid confusion, I always make sure that the Display Name for the Queue/Attendant and the Resource Account are the same. If a Voice App needs multiple resource accounts, I use numbering on the resource account names. It‚Äôs important to note that the Display Name of the Resource Account is the name which a recipient of a call which was transferred by an Attendant or a Queue will see on the Teams toast notification.&lt;/p&gt;
&lt;p&gt;Here we can see that this Call Queue is called ‚ÄúMS Test CQ‚Äù but the associated resource account is called ‚ÄúTeam Green CQ‚Äù.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1RGhZfRUJ9Hj7L0u8ko1uYQ.png&#34;
	width=&#34;1766&#34;
	height=&#34;593&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1RGhZfRUJ9Hj7L0u8ko1uYQ_hu10995506755829298583.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1RGhZfRUJ9Hj7L0u8ko1uYQ_hu2266947287255679149.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;297&#34;
		data-flex-basis=&#34;714px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Since the toast will show the Display Name of the resource account, it will say that there‚Äôs a call for ‚ÄúTeam Green CQ‚Äù and not ‚ÄúMS Test CQ‚Äù.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/16eE5gPpiQQQ7E0HWidOcrw.png&#34;
	width=&#34;452&#34;
	height=&#34;438&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/16eE5gPpiQQQ7E0HWidOcrw_hu4956417634049058738.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/16eE5gPpiQQQ7E0HWidOcrw_hu13562316492204465355.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;103&#34;
		data-flex-basis=&#34;247px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I talked about the importance of the AA/CQ suffix at the beginning of this post. Microsoft has improved TAC and now shows assigned phone numbers in the drop-down list, if we search for a Voice App redirection target.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1ROuuUDhMjYnjORsGLjOiLQ.png&#34;
	width=&#34;1380&#34;
	height=&#34;382&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1ROuuUDhMjYnjORsGLjOiLQ_hu16230915797487241735.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1ROuuUDhMjYnjORsGLjOiLQ_hu18443815272207643589.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;361&#34;
		data-flex-basis=&#34;867px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;But let‚Äôs assume that neither of these accounts had a phone number assigned and we didn‚Äôt use a suffix either. Good luck figuring out which one of these is the Auto Attendant and which one is the Call Queue.&lt;/p&gt;
&lt;h4 id=&#34;enterprise-voice&#34;&gt;Enterprise Voice
&lt;/h4&gt;&lt;p&gt;This is an interesting one. As far as I can tell, resource accounts which were created at least a few months ago, are still Enterprise Voice enabled, even if they don‚Äôt have a Teams Phone Resource Account License assigned.&lt;/p&gt;
&lt;p&gt;Here‚Äôs an example of such a relict. This resource account is Enterprise Voice enabled, despite not having a LineURI or a Feature Type. FeatureTypes is a relatively new property which is returned by &lt;code&gt;Get-CsOnlineUser&lt;/code&gt;¬†.&lt;/p&gt;
&lt;p&gt;DisplayName            : Support Number Business Hours AA&lt;br&gt;
EnterpriseVoiceEnabled : True&lt;br&gt;
LineUri                :&lt;br&gt;
FeatureTypes           : {}&lt;/p&gt;
&lt;p&gt;For reference, here‚Äôs a screenshot of the M365 Admin Portal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1PqykXYuUDlX2lTaW1z4Q.png&#34;
	width=&#34;1338&#34;
	height=&#34;200&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1PqykXYuUDlX2lTaW1z4Q_hu3760032923757303541.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1PqykXYuUDlX2lTaW1z4Q_hu17345467872058178809.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;669&#34;
		data-flex-basis=&#34;1605px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If we check ‚ÄúSupport Number AA‚Äù (which does have a license) by PowerShell using the search query below, we can see that it includes ‚ÄúVoiceApp‚Äù under FeatureTypes.&lt;/p&gt;
&lt;p&gt;Get-CsOnlineUser -Identity &lt;a class=&#34;link&#34; href=&#34;mailto:ra_aa_support_number@mozzism.ch&#34; &gt;ra_aa_support_number@mozzism.ch&lt;/a&gt; | FL DisplayName, EnterpriseVoiceEnabled, LineURI, FeatureTypes&lt;/p&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;p&gt;DisplayName            : Support Number AA&lt;br&gt;
EnterpriseVoiceEnabled : True&lt;br&gt;
LineUri                : tel:+4144xxxxxxx&lt;br&gt;
FeatureTypes           : {VoiceApp}&lt;/p&gt;
&lt;p&gt;If we check a normal Teams user account, we can see that they‚Äôll have ‚ÄúPhoneSystem‚Äù and ‚ÄúTeams‚Äù included in their FeatureTypes.&lt;/p&gt;
&lt;p&gt;DisplayName            : Ben Kim&lt;br&gt;
EnterpriseVoiceEnabled : True&lt;br&gt;
FeatureTypes           : {PhoneSystem, Teams}&lt;/p&gt;
&lt;p&gt;But beware that a user can also include the Feature Type ‚ÄúPhoneSystem‚Äù without actually being Enterprise Voice enabled. (In this case the user has a Teams Phone License but is not configured for EV yet.)&lt;/p&gt;
&lt;p&gt;DisplayName            : Bill Stearn&lt;br&gt;
EnterpriseVoiceEnabled : False&lt;br&gt;
FeatureTypes           : {PhoneSystem, Teams}&lt;/p&gt;
&lt;p&gt;I wasn‚Äôt able to reproduce this scenario. When I created a new resource account and didn‚Äôt assign a license, it was always set to Enterprise Voice enabled False.&lt;/p&gt;
&lt;p&gt;DisplayName            : Example PS AA&lt;br&gt;
EnterpriseVoiceEnabled : False&lt;br&gt;
FeatureTypes           : {}&lt;/p&gt;
&lt;p&gt;Let‚Äôs see how this looks, after we‚Äôve added a Microsoft Teams Phone Resource Account License to ‚ÄúExample PS AA‚Äù. After a few minutes, the Feature Type will be added, and EV will be set to True. I was spamming the Get-CsOnlineUser query so often, that I even managed to get an output right before and after the change.&lt;/p&gt;
&lt;p&gt;Here we can see that the Feature Type ‚ÄúVoiceApp‚Äù was added but Enterprise Voice was still disabled.&lt;/p&gt;
&lt;p&gt;DisplayName            : Example PS AA&lt;br&gt;
EnterpriseVoiceEnabled : False&lt;br&gt;
FeatureTypes           : {VoiceApp}&lt;/p&gt;
&lt;p&gt;Literally seconds later, I ran it again and now Enterprise Voice has been enabled.&lt;/p&gt;
&lt;p&gt;DisplayName            : Example PS AA&lt;br&gt;
EnterpriseVoiceEnabled : True&lt;br&gt;
FeatureTypes           : {VoiceApp}&lt;/p&gt;
&lt;p&gt;Assigning the license will automatically set Enterprise Voice enabled to True. This is different than with normal user accounts. They will stay False until we either assign them a number through TAC or use &lt;code&gt;Set-CsPhoneNumberAssignment -EnterpriseVoiceEnabled $true&lt;/code&gt;¬†.&lt;/p&gt;
&lt;p&gt;If the license is removed from the resource account, EV will be disabled again.&lt;/p&gt;
&lt;h4 id=&#34;external-pstn-transfer-from-resourceaccounts&#34;&gt;External PSTN Transfer from Resource¬†Accounts
&lt;/h4&gt;&lt;p&gt;The official documentation of the technical requirements which are needed for external PSTN transfers can be viewed &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/microsoftteams/create-a-phone-system-auto-attendant?tabs=general-info#external-phone-number-transfers---technical-details&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. I‚Äôm only covering Direct Routing Scenarios in this article.&lt;/p&gt;
&lt;p&gt;These requirements need to be met by all resource accounts which are associated with a Voice App. For example, if you have an Auto Attendant which has two resource accounts / numbers assigned and it forwards to an external number outside of business hours, both resource accounts will need to have a valid voice routing policy assigned. TAC won‚Äôt display a warning or an error message, even if none of the associated resource account have an online voice routing policy assigned. So, in other words: If a call is made to a Resource Account which doesn‚Äôt have a voice routing policy assigned, the call transfer will fail.&lt;/p&gt;
&lt;p&gt;What about nesting? Although I don‚Äôt think that this is officially documented, I have found that only the top-level resource account, which is the one with the number which is dialed, needs to be configured properly.&lt;/p&gt;
&lt;p&gt;Let‚Äôs take a look at the configuration of the resource accounts used in this scenario.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1GRf3ngbTvUo9hndInnZg.png&#34;
	width=&#34;545&#34;
	height=&#34;1376&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1GRf3ngbTvUo9hndInnZg_hu15775211236375912717.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1GRf3ngbTvUo9hndInnZg_hu12463302668281308512.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;39&#34;
		data-flex-basis=&#34;95px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Obviously, the Call Queue ‚ÄúTest EV Enabled CQ‚Äù and not the ‚ÄúTest EV Enabled AA‚Äù does the PSTN transfer. But only the Auto Attendant is configured for outbound PSTN calling. The call transfer in this scenario works.&lt;/p&gt;
&lt;p&gt;DisplayName              : Test EV Enabled AA&lt;br&gt;
EnterpriseVoiceEnabled   : True&lt;br&gt;
FeatureTypes             : {VoiceApp}&lt;br&gt;
OnlineVoiceRoutingPolicy : FirstTrunk&lt;/p&gt;
&lt;p&gt;DisplayName              : Test EV Enabled CQ&lt;br&gt;
EnterpriseVoiceEnabled   : False&lt;br&gt;
FeatureTypes             : {}&lt;br&gt;
OnlineVoiceRoutingPolicy :&lt;/p&gt;
&lt;p&gt;In the PSTN and SMS (preview) usage report in TAC, we can see that it‚Äôs the initially called resource account, rather than the one associated with the call queue which does the outbound call. Outbound Direct Routing calls from Voice Apps are labelled as ‚Äúdr_out_bot‚Äù.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1OeqBbcYeZ8ZTXWRwP1xyyA.png&#34;
	width=&#34;1594&#34;
	height=&#34;198&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1OeqBbcYeZ8ZTXWRwP1xyyA_hu13991202051321085709.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1OeqBbcYeZ8ZTXWRwP1xyyA_hu16125934156488472994.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;805&#34;
		data-flex-basis=&#34;1932px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;To be absolutely sure, I created another configuration. This time the other way around. The top-level Auto Attendant does not have an online voice routing policy assigned, but the nested Call Queue does.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/14WDSbZwQEdURpq3c7BpcgQ.png&#34;
	width=&#34;364&#34;
	height=&#34;898&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/14WDSbZwQEdURpq3c7BpcgQ_hu1214559806733227981.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/14WDSbZwQEdURpq3c7BpcgQ_hu12345265494982398451.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;40&#34;
		data-flex-basis=&#34;97px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When I called the number of the Auto Attendant, the PSTN transfer of the Call Queue did not work, even though the Queue is configured for outbound calling. When I called the number of the Queue directly, forwarding to PSTN worked perfectly.&lt;/p&gt;
&lt;p&gt;P.S. If you‚Äôre wondering, how I created that flow chart and didn‚Äôt get the memo before, besides blogging, I‚Äôm also the creator of this &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PowerShell Tool&lt;/a&gt; which allows anybody to automatically render these cool diagrams for free.&lt;/p&gt;
&lt;h4 id=&#34;finding-auto-attendants-and-call-queues-inteams&#34;&gt;Finding Auto Attendants and Call Queues in¬†Teams
&lt;/h4&gt;&lt;p&gt;If you can‚Äôt find all your Auto Attendants and Call Queues when you search for them in Teams, you should definitely take a look at &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681&#34; &gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;one-lastthing&#34;&gt;One Last¬†Thing
&lt;/h4&gt;&lt;p&gt;Although it‚Äôs now possible to do most of the things, like assigning online voice routing policies or phone numbers in TAC, some things are still missing from TAC. For example, you won‚Äôt find your resource accounts under ‚ÄúManage users‚Äù. You can, however, replace the Object Id of a user in the URL, with an Object Id of a Resource Account. This will allow you to view some data, like recent calls.&lt;/p&gt;
&lt;p&gt;If you‚Äôre too lazy to grab the Object Id, you can also click the Display Name of a Resource Account from the PSTN and SMS (preview) usage report.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1aUlQ20axCxy0nA86UlRjw.png&#34;
	width=&#34;1489&#34;
	height=&#34;128&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1aUlQ20axCxy0nA86UlRjw_hu14807130083324372531.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1aUlQ20axCxy0nA86UlRjw_hu7176291588536469236.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1163&#34;
		data-flex-basis=&#34;2791px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This will yield an error message that TAC can‚Äôt get the policies of this account. But you‚Äôll still be able to see it‚Äôs call history under the ‚ÄúMeetings &amp;amp; calls‚Äù tab.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1gzkRCHSpGq5csQDU7FQuA.png&#34;
	width=&#34;2040&#34;
	height=&#34;634&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1gzkRCHSpGq5csQDU7FQuA_hu2958981489420660838.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1gzkRCHSpGq5csQDU7FQuA_hu9306422127044150529.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;321&#34;
		data-flex-basis=&#34;772px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I hope this article helps you better understand how Resource Accounts work in Teams Phone. Feel free to reach out if you have any questions left.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Why Can Only some Users Search Auto Attendants and Call Queues in Teams?</title>
        <link>https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/</link>
        <pubDate>Fri, 26 Aug 2022 08:27:12 +0000</pubDate>
        
        <guid>https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/</guid>
        <description>&lt;p&gt;Have you ever wondered why you or some of your users can‚Äôt see all Auto Attendants or Call Queues when you search for them in Teams? Start following me on Medium and wonder no more.&lt;/p&gt;
&lt;p&gt;The users who can find them are most likely agents of the queues which show up when they search for it or have previously received a call forwarded by an Auto Attendant. Based on my testing, Auto Attendants and Call Queues only show up in search, if there has been some form of interaction between the user and the resource account before.&lt;/p&gt;
&lt;p&gt;Here‚Äôs an example where the resource account ‚ÄúExample AA‚Äù which is associated with an Auto Attendant can‚Äôt be found by a user.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1tg14cxCdjlonXkMgRPiUJg.png&#34;
	width=&#34;1227&#34;
	height=&#34;152&#34;
	srcset=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1tg14cxCdjlonXkMgRPiUJg_hu14437231759176176982.png 480w, https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1tg14cxCdjlonXkMgRPiUJg_hu11174074311918998385.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;807&#34;
		data-flex-basis=&#34;1937px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;And here‚Äôs the same search query from a different user, which has interacted with ‚ÄúExample AA‚Äù before.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1C6dCc5y1jWlQtTgdyD6fIQ.png&#34;
	width=&#34;1190&#34;
	height=&#34;258&#34;
	srcset=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1C6dCc5y1jWlQtTgdyD6fIQ_hu4978360523962273181.png 480w, https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1C6dCc5y1jWlQtTgdyD6fIQ_hu8315937992463865787.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;461&#34;
		data-flex-basis=&#34;1106px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;So, what can you do if you want your users to find Call Queues and Auto Attendants in Teams, if they‚Äôre not part of the queue or don‚Äôt get calls from an Auto Attendant?&lt;/p&gt;
&lt;p&gt;Certainly, adding all users to a queue or configuring an Auto Attendant a hundred times over and making actual calls to its number so that the user receives a call from the attendant is no option.&lt;/p&gt;
&lt;p&gt;Let‚Äôs explore other options.&lt;/p&gt;
&lt;h4 id=&#34;deep-links--user-self-service&#34;&gt;Deep Links / User Self-Service
&lt;/h4&gt;&lt;p&gt;I‚Äôve blogged about &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/creating-microsoft-teams-calling-deep-links-f7c9d62eacdd&#34; &gt;deep links&lt;/a&gt; in Teams before. If we create a deep link to call a resource account‚Äôs user principal name, the resource account will somehow magically be added to the user‚Äôs Teams contacts, once the user clicks on the link. This user will then be able to find this Auto Attendant or Call Queue from search.&lt;/p&gt;
&lt;p&gt;Let‚Äôs call this a self-service approach. We as admins will provide our users a list with deep links and the users choose themselves, which accounts they want to add.&lt;/p&gt;
&lt;p&gt;A deep link will look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://teams.microsoft.com/l/call/0/0?users=ra_aa_example@mozzism.onmicrosoft.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we copy this link and paste it in our favorite browser (which should be Microsoft Edge of course) we will see the following pop-up.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1rbe0FSPUNi533rul0Kxg.png&#34;
	width=&#34;766&#34;
	height=&#34;245&#34;
	srcset=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1rbe0FSPUNi533rul0Kxg_hu3316523803561364377.png 480w, https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1rbe0FSPUNi533rul0Kxg_hu7525775336615953877.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;312&#34;
		data-flex-basis=&#34;750px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Next, we need to click ‚ÄúOpen‚Äù in order to initiate the call in Teams. That‚Äôs all that‚Äôs needed already. We don‚Äôt actually need to call the Auto Attendant.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1Jc77DF5dftfPiJZdcrbNg.png&#34;
	width=&#34;891&#34;
	height=&#34;230&#34;
	srcset=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1Jc77DF5dftfPiJZdcrbNg_hu11373595790547908476.png 480w, https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1Jc77DF5dftfPiJZdcrbNg_hu3581808810723974548.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;387&#34;
		data-flex-basis=&#34;929px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Note: This will only work if the resource account is in fact associated with a voice app.&lt;/p&gt;
&lt;p&gt;If we cancel and search for ‚Äúexample‚Äù again, the Auto Attendant / resource account now shows up, everywhere we could possibly search for it. This includes the search and action bar, the people picker on the dial pad and the new number or contact search field in call answering rules.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/17ormYlPnrP6skX1LiImA.png&#34;
	width=&#34;540&#34;
	height=&#34;674&#34;
	srcset=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/17ormYlPnrP6skX1LiImA_hu4123186348420681452.png 480w, https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/17ormYlPnrP6skX1LiImA_hu6776090529755090140.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;80&#34;
		data-flex-basis=&#34;192px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1MTkOifCqgHWKRSmU9ZudVg.png&#34;
	width=&#34;678&#34;
	height=&#34;413&#34;
	srcset=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1MTkOifCqgHWKRSmU9ZudVg_hu4557616402886855011.png 480w, https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1MTkOifCqgHWKRSmU9ZudVg_hu12133494059475949672.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;164&#34;
		data-flex-basis=&#34;393px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;What if we‚Äôve got hundreds of resource accounts? I‚Äôve got you covered here as well. Just use this code to generate a deep link for each resource account in your tenant.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/35167cfa3c0dd14511d1e63d56633fe8.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This will read all first party resource accounts (Auto Attendants and Call Queues, other 3rd party resource accounts, such as Landis or Luware won‚Äôt be included) from your tenant, create a deep link for each account and put them in your clipboard.&lt;/p&gt;
&lt;p&gt;Now we can publish these links anywhere we want. I put mine in a Teams Wiki for example.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1MrRVxccFvYQn9p3B3OPuzQ.png&#34;
	width=&#34;1404&#34;
	height=&#34;942&#34;
	srcset=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1MrRVxccFvYQn9p3B3OPuzQ_hu2002095523606246124.png 480w, https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1MrRVxccFvYQn9p3B3OPuzQ_hu7183566897489535557.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;357px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;All that‚Äôs left to do for the users is to click on a link and then cancel or make the call.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1ezGtnmlIwS6F2EdhN2RmVA.png&#34;
	width=&#34;2130&#34;
	height=&#34;1236&#34;
	srcset=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1ezGtnmlIwS6F2EdhN2RmVA_hu10933760025642905812.png 480w, https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1ezGtnmlIwS6F2EdhN2RmVA_hu10471300132546590124.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;172&#34;
		data-flex-basis=&#34;413px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;That‚Äôs one way to do it. But what if you want to go the extra mile for your users and automatically make all your Attendants and Queues available for all your users?&lt;/p&gt;
&lt;h4 id=&#34;the-powershell-way--going-the-extramile&#34;&gt;The PowerShell Way / Going the Extra¬†Mile
&lt;/h4&gt;&lt;p&gt;Although it‚Äôs possible to do this at scale, this method does come with a caveat. We‚Äôll see what that is later. Instead of launching a deep link to a call, we‚Äôre going to create a chat between the user and the resource account. But how can we create a chat with the resource account, if we can‚Äôt search for it in the first place?&lt;/p&gt;
&lt;p&gt;I have found that it‚Äôs possible to use Microsoft Graph to create a chat between a user and a resource account.&lt;/p&gt;
&lt;p&gt;Here‚Äôs an example script. Use it at your own risk. As I already stated in &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6&#34; &gt;this article&lt;/a&gt;, the function to authenticate against MS Graph is baes on the work of &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/AlexAsplund&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Alex Asplund&lt;/a&gt; from &lt;a class=&#34;link&#34; href=&#34;https://adamtheautomator.com/powershell-graph-api/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this article&lt;/a&gt;. You will need an Azure App Registration with at least the following Application permissions: ‚Äúprofile‚Äù, ‚Äúopenid‚Äù, ‚ÄúUser.Read.All‚Äù, ‚ÄúChat.Create‚Äù.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/da5e36678540355993ff93abde3f8bba.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Fill in &lt;code&gt;$AppId&lt;/code&gt;¬†,&lt;code&gt;$AppSecret&lt;/code&gt; and &lt;code&gt;$TenantName&lt;/code&gt; with your own credentials and domain name on lines 4‚Äì6. Once you run the script, it will retrieve all your resource accounts and all users which have a Teams Phone Standard License assigned. This serves merely as an example. Of course, you can create your own filter for the variable &lt;code&gt;$allTeamsPhoneUsers&lt;/code&gt; or import a CSV file etc.&lt;/p&gt;
&lt;p&gt;Next, the script will loop through all users, and create an empty chat with each resource account, which will ultimately make the resource accounts discoverable for the user.&lt;/p&gt;
&lt;p&gt;Let‚Äôs see the result. Again, before the script was executed, the account ‚ÄúUSA Toll Free Test AA‚Äù does not show up in this user‚Äôs search box.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1eRdP6AZLSl6vyCJXJRiicQ.png&#34;
	width=&#34;1232&#34;
	height=&#34;157&#34;
	srcset=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1eRdP6AZLSl6vyCJXJRiicQ_hu8425082174513145961.png 480w, https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1eRdP6AZLSl6vyCJXJRiicQ_hu18196109449743519408.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;784&#34;
		data-flex-basis=&#34;1883px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Once the script has run for any Teams user, they will see a bunch of new, empty chats in their Teams chats. Unfortunately, I don‚Äôt know why Teams won‚Äôt show the Display Name here.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1Yu9h1Z97KR8zknhzVdXCEg.png&#34;
	width=&#34;644&#34;
	height=&#34;816&#34;
	srcset=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1Yu9h1Z97KR8zknhzVdXCEg_hu448696478015984145.png 480w, https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1Yu9h1Z97KR8zknhzVdXCEg_hu12085572968717311813.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;78&#34;
		data-flex-basis=&#34;189px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Funny enough, the Display Name will show up if we switch to the Organization Tab in the chat.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/10jKaL3o2x7v1HXY0rVOPBA.png&#34;
	width=&#34;1126&#34;
	height=&#34;327&#34;
	srcset=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/10jKaL3o2x7v1HXY0rVOPBA_hu14199143020605339815.png 480w, https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/10jKaL3o2x7v1HXY0rVOPBA_hu5578371883648170040.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;344&#34;
		data-flex-basis=&#34;826px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;And of course, the account now shows up in search, which is what we want.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1Tgx0nPdJDN76Z4w2ymwqQ.png&#34;
	width=&#34;1238&#34;
	height=&#34;273&#34;
	srcset=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1Tgx0nPdJDN76Z4w2ymwqQ_hu3087662420570539259.png 480w, https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1Tgx0nPdJDN76Z4w2ymwqQ_hu9947624487043068140.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;453&#34;
		data-flex-basis=&#34;1088px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;So, there you have it. Something which could be used to make all Auto Attendants and Call Queues discoverable in Teams for all your users. Because we‚Äôre only using the Graph permission ‚ÄúCreate.Chat‚Äù we can use Application permissions and don‚Äôt need to worry about delegation and user tokens. The only downside is that depending on the amount of voice apps you add, the users will see a boatload of new, unread chats, all titled with ‚ÄúUnkown User‚Äù. Depending on user activity in Teams, these could get moved down the list pretty quickly though. Or users can just choose to hide them if they don‚Äôt want a messy chats section.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1z3kdGAc4NyA27AMG2X8FUg.png&#34;
	width=&#34;526&#34;
	height=&#34;652&#34;
	srcset=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1z3kdGAc4NyA27AMG2X8FUg_hu17430453791695090129.png 480w, https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1z3kdGAc4NyA27AMG2X8FUg_hu3691192838411361080.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;80&#34;
		data-flex-basis=&#34;193px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I hope that this article helps lighten some confusion around why only some users can search for voice apps. Furthermore, I hope that my script to programmatically add all resource accounts to Teams will help you make your users happy.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Microsoft Teams Call Queue Agent Lists (And how to Force-Sync them)</title>
        <link>https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/</link>
        <pubDate>Sun, 10 Apr 2022 10:13:53 +0000</pubDate>
        
        <guid>https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/</guid>
        <description>&lt;p&gt;The purpose of a call queue in Teams is to distribute incoming calls to multiple call agents. Every call queue stores its own ‚ÄúAgent List‚Äù which is basically just an array of Microsoft 365 users object Ids. Incoming Teams or PSTN calls are then distributed to the call queue‚Äôs agents. In this post, we‚Äôll take a look at the types of agent lists which are available and how to configure them. We‚Äôll also explore some useful tips how to cope with unexpected behavior during configuration.&lt;/p&gt;
&lt;h4 id=&#34;agent-listtypes&#34;&gt;Agent List¬†Types
&lt;/h4&gt;&lt;p&gt;There are three (or four, depending how you look at it) different ways of adding Agents to a queue&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Direct user assignments&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Users are assigned by display name and will be visible directly in a queue‚Äôs settings. This method is suitable for small teams because you can see who‚Äôs in the queue in TAC without checking the group members in M365 Admin or AAD. Since you can‚Äôt control the order agents will be added in when using a group or channel based agent list, direct assignments are crucial when your queue is using serial routing. &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/microsoftteams/create-a-phone-system-call-queue#users-and-groups&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;You can add up to 20 agents individually.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1JnhguYQCBAml6b1TDgAiA.png&#34;
	width=&#34;1383&#34;
	height=&#34;927&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1JnhguYQCBAml6b1TDgAiA_hu4624359094245889128.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1JnhguYQCBAml6b1TDgAiA_hu7440995731541908993.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;358px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;2. Group assignments&lt;/p&gt;
&lt;p&gt;With group assignments, you can add up to 200 agents but you can‚Äôt control the order in which the agents are added. Thus, you can‚Äôt control the order in which the users are signaled by the queue when using serial routing either. Based on my testing, the order of the agent list will correspond to the order in which the users show up when viewing it in AAD. Although it might not be a common scenario, you can even add multiple groups to the list. &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/microsoftteams/create-a-phone-system-call-queue#users-and-groups&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;All common group types are supported.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/17ssSjJFxHxXZTdtm8BpupQ.png&#34;
	width=&#34;1380&#34;
	height=&#34;923&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/17ssSjJFxHxXZTdtm8BpupQ_hu3454825494505405552.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/17ssSjJFxHxXZTdtm8BpupQ_hu6665414061781772818.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;358px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;3. Combination of direct and groups&lt;/p&gt;
&lt;p&gt;If you want to use a group but still need to add other users which are not a member of this group, you can add them individually. Here I‚Äôve got a group called ‚ÄúCQ Agents 1‚Äù which has two members.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1Dkc15OvPzERAne0L7pTXgA.png&#34;
	width=&#34;1109&#34;
	height=&#34;292&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1Dkc15OvPzERAne0L7pTXgA_hu10132922361264669627.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1Dkc15OvPzERAne0L7pTXgA_hu9471272347000908589.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;379&#34;
		data-flex-basis=&#34;911px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I‚Äôve also added Mike and Bobby as individual agents. Of course. the queue will add Mike only once.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1r2hQr9rHxDqI24577P61lg.png&#34;
	width=&#34;1380&#34;
	height=&#34;1251&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1r2hQr9rHxDqI24577P61lg_hu3830103635279499078.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1r2hQr9rHxDqI24577P61lg_hu16709566556683402381.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;110&#34;
		data-flex-basis=&#34;264px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, querying the queue‚Äôs agents only yields object Ids and no display names.&lt;/p&gt;
&lt;p&gt;(Get-CsCallQueue -Identity a11d15d3-79d8-4bd2-8a35-xxxxxxxxxxxx).Agents&lt;/p&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ObjectId                             OptIn  
--------                             -----  
76606d0b-4d28-4246-9c08-xxxxxxxxxxxx  True This is Bobby&#39;s Object Id  
9a7c1bb4-49db-40ee-9d05-xxxxxxxxxxxx  True This is Mike&#39;s Object Id  
fa19b242-8bae-419d-a4eb-xxxxxxxxxxxx  True This is Wendy&#39;s Object Id
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, individually added agents will be first in the list, just like TAC is displaying it (individual agents above groups).&lt;/p&gt;
&lt;p&gt;I have now replaced the direct assignment of Mike with Wendy and placed her on top.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1ua3yDYWFbd0Z2T5OKyeBIQ.png&#34;
	width=&#34;1276&#34;
	height=&#34;360&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1ua3yDYWFbd0Z2T5OKyeBIQ_hu12277071145650163849.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1ua3yDYWFbd0Z2T5OKyeBIQ_hu13070033741543739106.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;354&#34;
		data-flex-basis=&#34;850px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When we query the agent list again, we can see that Wendy is on top now, even though she would be added last if we‚Äôre using just a group.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ObjectId                             OptIn  
--------                             -----  
fa19b242-8bae-419d-a4eb-xxxxxxxxxxxx  True This is Wendy&#39;s Object Id  
76606d0b-4d28-4246-9c08-xxxxxxxxxxxx  True This is Bobby&#39;s Object Id  
9a7c1bb4-49db-40ee-9d05-xxxxxxxxxxxx  True This is Mike&#39;s Object Id
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4. Teams channel assignment&lt;/p&gt;
&lt;p&gt;The third and last option is to use a Teams Channel. In this case, the group type obviously needs to be a Team. &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/microsoftteams/create-a-phone-system-call-queue#teams-channel&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Private or shared channels are not supported.&lt;/a&gt; From an agent list perspective this method is the same as a group-based assignment, except that you can‚Äôt add individual members or multiple groups as well.&lt;/p&gt;
&lt;h4 id=&#34;summary-andcaveats&#34;&gt;Summary and¬†Caveats
&lt;/h4&gt;&lt;p&gt;In order for a user to be added as an agent, Enterprise Voice must be enabled. &lt;strong&gt;Having a Teams Phone Standard license is not enough&lt;/strong&gt;. Unfortunately, there‚Äôs no straightforward way of checking if EV is enabled in TAC.&lt;/p&gt;
&lt;p&gt;You might think that the ‚ÄúPhone System‚Äù Column in Teams Users will tell you that but that‚Äôs actually just evaluating if the user is licensed for Teams Phone Standard. (I hope Microsoft updates the column name at some point‚Ä¶).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1o3uFzdE2500fMsfRDgRo3Q.png&#34;
	width=&#34;1273&#34;
	height=&#34;126&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1o3uFzdE2500fMsfRDgRo3Q_hu10157465739223765630.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1o3uFzdE2500fMsfRDgRo3Q_hu6102132805025825507.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1010&#34;
		data-flex-basis=&#34;2424px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When you try to add a user which is not EV enabled to a queue, TAC will throw an error message:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1onUinLhMf93WDYAt0S0g.png&#34;
	width=&#34;568&#34;
	height=&#34;101&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1onUinLhMf93WDYAt0S0g_hu234468928925580709.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1onUinLhMf93WDYAt0S0g_hu9386983541380322553.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;562&#34;
		data-flex-basis=&#34;1349px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This is the only way I know of to check if a user is EV enabled or not through a GUI based tool. It‚Äôs easy in PS though:&lt;/p&gt;
&lt;p&gt;Get-CsOnlineUser -Identity &lt;a class=&#34;link&#34; href=&#34;mailto:bill@domain.com&#34; &gt;bill@domain.com&lt;/a&gt; | ft DisplayName,FeatureTypes,EnterpriseVoiceEnabled&lt;/p&gt;
&lt;p&gt;Again, having a Teams Phone service plan, does not mean EV is enabled by default. A user‚Äôs feature types can be read from the¬†.FeatureTypes attribute (Teams PS 4.x.x and later).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DisplayName FeatureTypes         EnterpriseVoiceEnabled  
----------- ------------         ----------------------  
Bill Stearn {PhoneSystem, Teams}                  False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Does this mean we can only add groups to an agent list if all the members are already EV enabled? Certainly not. In this case, only EV enabled members will be added to a queue but you won‚Äôt see any warnings or errors if your group contains users without EV.&lt;/p&gt;
&lt;p&gt;I‚Äôve added Bill to the ‚ÄúCQ Agents 1‚Äù group:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1pTf4EjM79Dcv21SuFa1IPQ.png&#34;
	width=&#34;1107&#34;
	height=&#34;212&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1pTf4EjM79Dcv21SuFa1IPQ_hu7202724362427495587.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1pTf4EjM79Dcv21SuFa1IPQ_hu2208609482913681505.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;522&#34;
		data-flex-basis=&#34;1253px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Let‚Äôs check our queue again by storing it‚Äôs properties in the variable &lt;code&gt;$cq&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$cq&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-CsCallQueue&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Identity&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a11d15d3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;79d8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;4bd2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;8a35-xxxxxxxxxxxx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;By accessing $cq.DistributionListsLastExpanded we can verify that the queue has indeed updated its agent list when we saved it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1MP0g1DqtuGySqfMbguKw.png&#34;
	width=&#34;1059&#34;
	height=&#34;28&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1MP0g1DqtuGySqfMbguKw_hu6641488412924843684.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1MP0g1DqtuGySqfMbguKw_hu379062195373226584.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;3782&#34;
		data-flex-basis=&#34;9077px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;As expected, the object Id of bill does not show up when we check $cq.Agents. I‚Äôve also removed the direct assignments, that‚Äôs why we only see two object Ids now.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ObjectId                             OptIn  
--------                             -----  
fa19b242-8bae-419d-a4eb-xxxxxxxxxxxx  True That&#39;s Wendy&#39;s Object Id  
9a7c1bb4-49db-40ee-9d05-xxxxxxxxxxxx  True That&#39;s Mike&#39;s Object Id
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What‚Äôs interesting is that even though the direct assignments were removed, the queue remembered the specific order we defined using direct assignments before. Wendy is still above mike.&lt;/p&gt;
&lt;p&gt;No matter in which way the agents are added, in the end, all EV enabled agents will always be stored in one single array on the queue‚Äôs properties in the ‚ÄúAgents‚Äù attribute.&lt;/p&gt;
&lt;h4 id=&#34;agent-listsync&#34;&gt;Agent List¬†Sync
&lt;/h4&gt;&lt;p&gt;Now you know what types of agent lists you can have and how to configure them. Let‚Äôs talk about syncing agent lists. With direct assignments, it‚Äôs easy. Every time you add or remove an agent and save the queue, the agent list is updated immediately.&lt;/p&gt;
&lt;p&gt;If you‚Äôre adding a group which already has a bunch of users in it, that‚Äôs no problem either. But what about if you add a Team or a group which does not have any members yet, or if you add new users to an existing group which is already linked to a queue?&lt;/p&gt;
&lt;p&gt;I created a new, empty Team called ‚ÄúPS Test CQ‚Äù and added it to the queue‚Äôs agent list. As expected, TAC now says that this queue has zero agents.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1TnPbQ99tL2GNctNLkDd9A.png&#34;
	width=&#34;1850&#34;
	height=&#34;253&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1TnPbQ99tL2GNctNLkDd9A_hu8322762143216251733.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1TnPbQ99tL2GNctNLkDd9A_hu14436610452597022364.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;731&#34;
		data-flex-basis=&#34;1754px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;So, let‚Äôs head over to Teams and add some members. After a browser refresh, TAC still shows zero call agents. Let‚Äôs check again with PowerShell:&lt;/p&gt;
&lt;p&gt;(Get-CsCallQueue -Identity a11d15d3-79d8-4bd2-8a35-xxxxxxxxxxxx) | ft Name, DistributionListsLastExpanded, Agents&lt;/p&gt;
&lt;p&gt;Although the output at least tells us when the agent list was last synchronized, it also shows no agents:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Name       DistributionListsLastExpanded Agents  
----       ----------------------------- ------  
PS Test CQ 04/10/2022 09:12:22 +00:00    {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don‚Äôt know the exact interval Teams uses to sync call queue agent lists. But I‚Äôm guessing it checks every few hours or so. Is there a way to force a sync?&lt;/p&gt;
&lt;h4 id=&#34;force-agent-list-sync-usingtac&#34;&gt;Force Agent List Sync using¬†TAC
&lt;/h4&gt;&lt;p&gt;If we‚Äôre doing it via TAC, we must change any value of the queue to be able to save it. Otherwise, the submit button will be greyed out.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1Cuo5HASr68JnCdmDDLpxKQ.png&#34;
	width=&#34;1224&#34;
	height=&#34;725&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1Cuo5HASr68JnCdmDDLpxKQ_hu13130181157063994701.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1Cuo5HASr68JnCdmDDLpxKQ_hu13664233868313221304.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;168&#34;
		data-flex-basis=&#34;405px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you want to do it via TAC, I recommend changing a non-critical value like up the overflow threshold value by 1 and submit.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1rCOHPX3fUTdnLRivr8ckdQ.png&#34;
	width=&#34;666&#34;
	height=&#34;536&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1rCOHPX3fUTdnLRivr8ckdQ_hu13206429619811014146.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1rCOHPX3fUTdnLRivr8ckdQ_hu4652016108392997367.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;124&#34;
		data-flex-basis=&#34;298px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This will submit the new configuration which will also update the agent list. Now our queue has 1 agent (the one we added to the Team earlier).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1Y80efOkZInQnO0FtDwHNMw.png&#34;
	width=&#34;1731&#34;
	height=&#34;137&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1Y80efOkZInQnO0FtDwHNMw_hu6244119816568820495.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1Y80efOkZInQnO0FtDwHNMw_hu16439938901305447569.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1263&#34;
		data-flex-basis=&#34;3032px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;To minimize service impact, remember to revert the change back to its original value and submit again.&lt;/p&gt;
&lt;p&gt;Since TAC evaluates if you changed anything before you‚Äôre allowed to save the queue and you always have to save the queue twice to force a sync, this is a pretty cumbersome way to do it.&lt;/p&gt;
&lt;h4 id=&#34;force-agent-list-sync-by-powershell&#34;&gt;Force Agent List Sync by PowerShell
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Update 05.04.2023&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I wrote a new function to make this even easier. Please check out this article.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552&#34; &gt;Manage Microsoft Teams Call Queues with PowerShell (Force-Sync) | by martin heusser | Apr, 2023 | Medium&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;/Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Luckily, PowerShell allows us to save queues, even if none of the values have changed. To test this, I‚Äôve added another EV enabled user to the Team.&lt;/p&gt;
&lt;p&gt;With this little code snippet, we will get all our call queues and set the OverflowThreshold value to the exact same value which was returned by PowerShell.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/10283870a4485a30ae9792da12f9a91b.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;To use Set-CsCallQueue we need to provide at least one property and a value which should be changed. But unlike TAC, PS doesn‚Äôt care if the new value is the same as the old value. Hence, we only need to touch each queue once.&lt;/p&gt;
&lt;p&gt;Tip: If you only want to sync queues which have no agents at all, just change the first line to:&lt;/p&gt;
&lt;p&gt;$callQueues = Get-CsCallQueue | Where-Object {$_.Agents.Count -lt 1}&lt;/p&gt;
&lt;p&gt;After running this foreach loop, our queue now shows two agents, and all the other queues settings remain unchanged.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/13kP8m8OOxnADWJlDOpjQ.png&#34;
	width=&#34;1735&#34;
	height=&#34;145&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/13kP8m8OOxnADWJlDOpjQ_hu5339345108459704101.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/13kP8m8OOxnADWJlDOpjQ_hu9635891742992071574.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1196&#34;
		data-flex-basis=&#34;2871px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;addendum&#34;&gt;Addendum
&lt;/h4&gt;&lt;p&gt;There‚Äôs also a Cmdlet called ‚Äú&lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/es-es/powershell/module/skype/sync-csonlineapplicationinstance?view=skype-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Sync-CsOnlineApplicationInstance&lt;/a&gt;‚Äù. Microsoft says the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Use the Sync-CsOnlineApplicationInstance cmdlet to sync the application instance from Azure Active Directory into Agent Provisioning Service.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Based on my testing, this had no effect on a queue&amp;rsquo;s agent list. Since it‚Äôs also the only Cmdlet containing *Sync-Cs* in its name, I assume that there currently is no easier workaround as the one described by me in this blog post.&lt;/p&gt;
&lt;p&gt;I hope that this information is useful to you when planning and deploying Microsoft Teams Phone solutions. But most importantly, I hope that you don‚Äôt get chills when all your queues show up with no agents even though you long added the Team or group members!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>How to Permanently Forward PSTN Calls in Microsoft Teams (Without License)</title>
        <link>https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/</link>
        <pubDate>Thu, 10 Mar 2022 19:01:47 +0000</pubDate>
        
        <guid>https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/</guid>
        <description>&lt;p&gt;When you‚Äôre using Microsoft Teams Direct Routing as your primary calling solution, chances are that sometimes you also need to permanently forward calls to one of your numbers to another external phone number.&lt;/p&gt;
&lt;p&gt;In many cases, forwarding of numbers can also be handled outside of Teams. Most SIP providers offer a web-based portal for number management and forwarding. However, controlling all your numbers inside Teams without relying on third parties can still be an advantage sometimes.&lt;/p&gt;
&lt;p&gt;Note: this blog post only considers Teams Direct Routing scenarios. Calling Plans or Operator Connect are not covered.&lt;/p&gt;
&lt;h4 id=&#34;forwarding-by-a-licensed-teamsuser&#34;&gt;Forwarding by a Licensed Teams¬†User
&lt;/h4&gt;&lt;p&gt;Setting up a forwarding of numbers can be achieved in multiple ways. The most obvious one to just create and license a Teams user and setup a permanent call forwarding for that user in the Teams Client.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1hF9oWNMacZgIt1dCtfkcOQ.png&#34;
	width=&#34;1156&#34;
	height=&#34;485&#34;
	srcset=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1hF9oWNMacZgIt1dCtfkcOQ_hu7334412102813973079.png 480w, https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1hF9oWNMacZgIt1dCtfkcOQ_hu17740516734568649930.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;238&#34;
		data-flex-basis=&#34;572px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This user will need at minimum a Business Basic + Teams Phone Standard License. A CAP (Common Area Phone License) *in theory* should also present this option when using the Desktop or Web Client but call forwarding won‚Äôt be available when using a Teams certified Desk Phone. Thus, this is an unsupported scenario and should not be used. There‚Äôs a better way which will even allow you to get rid of the license costs entirely. I‚Äôll explain how later in this article.&lt;/p&gt;
&lt;p&gt;Since there is no voice app like an auto attendant or call queue involved in this scenario, all calls to the direct number of this particular user will be forwarded right away. This also means that the caller will hear the ring back tone, until the external participant (forwaring target) answers the call.&lt;/p&gt;
&lt;p&gt;Advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Direct forwarding, call does not get picked up or intercepted by Teams&lt;/li&gt;
&lt;li&gt;Should be possible to forward calls to a FAX number&lt;/li&gt;
&lt;li&gt;Good for scenarios where the forwarding target often changes (can be changed by other Teams users from inside their client by using the Boss/Delegate feature)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Disadvantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;License costs&lt;/li&gt;
&lt;li&gt;Configuration can only be reviewed or changed by logging in, using Boss/Delegate or PowerShell Preview Cmdlets (Get-CsUserCallingSettings)&lt;/li&gt;
&lt;li&gt;Can‚Äôt use Service or Toll-Free numbers&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;forwaring-by-a-resourceaccount&#34;&gt;Forwaring by a Resource¬†Account
&lt;/h4&gt;&lt;p&gt;It‚Äôs also possible to transfer calls to external PSTN numbers by using resource accounts assigned to auto attendants or call queues. Before you can assign a number to a resource account, you need to assign a free &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/microsoftteams/teams-add-on-licensing/virtual-user#virtual-user-license-allocation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Teams Phone Standard‚Ää‚Äî‚ÄäVirtual User License&lt;/a&gt; to the resource account.&lt;/p&gt;
&lt;p&gt;Once the license is assigned, we need to assign a phone number to the resource account:&lt;/p&gt;
&lt;p&gt;Set-CsPhoneNumberAssignment -Identity ra_cq_PS_Test@mozzism.ch -PhoneNumber +41445124077 -PhoneNumberType DirectRouting&lt;/p&gt;
&lt;p&gt;Next we also need to assign it a Voice Routing Policy:&lt;/p&gt;
&lt;p&gt;Grant-CsOnlineVoiceRoutingPolicy -Identity &lt;a class=&#34;link&#34; href=&#34;mailto:ra_cq_PS_Test@mozzism.ch&#34; &gt;ra_cq_PS_Test@mozzism.ch&lt;/a&gt; -PolicyName &amp;ldquo;FirstTrunk&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The most obvious way, at least for me was to create an auto attendant and set it up without business hours so it will always perform the same action: forward the call to an external number. This works, no doubt but the problem is that the auto attendant *ALWAYS* answers the call before it‚Äôs actually forwarded. Because of that, this method can‚Äôt be used to forward calls to a FAX number.&lt;/p&gt;
&lt;p&gt;Since it‚Äôs also possible to forward calls from a call queue to an external number, we can leverage this to create a similar experience as to when the call is permanently forwarded by a Teams user.&lt;/p&gt;
&lt;p&gt;A call queue has two options to control actions or forwardings. Overflow (max. number of simultaneous calls) or timeout.&lt;/p&gt;
&lt;p&gt;If we set the timeout to zero (0 minutes, 0 seconds) the queue still answers the call, before it‚Äôs forwarded. Even if there is no greeting configured.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1YgnBVoi8wRNzxMl3TedyyQ.png&#34;
	width=&#34;1768&#34;
	height=&#34;734&#34;
	srcset=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1YgnBVoi8wRNzxMl3TedyyQ_hu5825257289193836885.png 480w, https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1YgnBVoi8wRNzxMl3TedyyQ_hu11243998685325979720.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;240&#34;
		data-flex-basis=&#34;578px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;A good example to see that the queue picked up the call is that the counter starts on any phone. Here I‚Äôm using Skype to call the call queue and you can see that the call has been established for 5 seconds, even though the configured forwarding target has not answered the call yet. While the call rings the forwarding target, Teams will generate a ring back tone inside the already established call.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1QAUIogXcABSjdUwIzj5LDQ.png&#34;
	width=&#34;1590&#34;
	height=&#34;1017&#34;
	srcset=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1QAUIogXcABSjdUwIzj5LDQ_hu9766534438864654142.png 480w, https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1QAUIogXcABSjdUwIzj5LDQ_hu1478327829307482086.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;156&#34;
		data-flex-basis=&#34;375px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If we set the overflow threshold of the queue to zero on the other hand, TAC shows a warning message that the queue won‚Äôt play the greeting when the overflow threshold is set to 0.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1jxc3VpgcSiWVumahjggBRg.png&#34;
	width=&#34;1766&#34;
	height=&#34;765&#34;
	srcset=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1jxc3VpgcSiWVumahjggBRg_hu1696287274826999028.png 480w, https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1jxc3VpgcSiWVumahjggBRg_hu12063151730845777216.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;230&#34;
		data-flex-basis=&#34;554px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It‚Äôs not entirely clear that this has always been the case, but I‚Äôm pretty sure that at least this warning message has been introduced a only few weeks ago when the call queue wizard was redesigned. It was this warning message that tipped me of and inspired me to test this.&lt;/p&gt;
&lt;p&gt;So, let‚Äôs make another call to the queue‚Äôs number. This time, there‚Äôs no counter visible in Skype‚Äôs call screen which means that the call gets forwarded without being intercepted by the queue first. In this case, because I‚Äôm using Skype I can only hear Skype‚Äôs own ‚Äúring back jingle‚Äù.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1d3NXW1fGGCCxHfm0jhDKzw.png&#34;
	width=&#34;1590&#34;
	height=&#34;1017&#34;
	srcset=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1d3NXW1fGGCCxHfm0jhDKzw_hu8125541619123768573.png 480w, https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1d3NXW1fGGCCxHfm0jhDKzw_hu14852082102541377492.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;156&#34;
		data-flex-basis=&#34;375px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When using a ‚Äúreal phone‚Äù like my cell phone the ring back tone gets played back just like when any other number is dialed.&lt;/p&gt;
&lt;p&gt;Altough I haven‚Äôt actually tested sending a FAX message end to end, I tested forwarding to a FAX number and was able to hear the typical FAX noises when I called the queue‚Äôs number. I can‚Äôt see any reason why this shouldn‚Äôt work.&lt;/p&gt;
&lt;p&gt;Advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No License costs&lt;/li&gt;
&lt;li&gt;Can use Service or Toll-Free numbers&lt;/li&gt;
&lt;li&gt;Should be possible to forward calls to a FAX number (when using a CQ)&lt;/li&gt;
&lt;li&gt;Configured forwarding is more obvious because it‚Äôs visible in TAC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Disadvantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Only Teams admins can change the forwarding target&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;summary&#34;&gt;Summary
&lt;/h4&gt;&lt;p&gt;Even though it might not be an obvious solution, using a call queue to permanently forward calls is still a great way to have more control over all your DIDs right inside Teams itself without adding any license costs.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Automatically render Microsoft Teams Call Flow Diagrams</title>
        <link>https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/</link>
        <pubDate>Tue, 04 Jan 2022 20:50:28 +0000</pubDate>
        
        <guid>https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/</guid>
        <description>&lt;p&gt;I am very pleased to announce version 2 of my ‚Äú&lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Microsoft 365 Call Flow Visualizer&lt;/a&gt;‚Äù Script. Those who follow me on Twitter, might have already seen a glimpse of what I‚Äôve been working on in my spare time for the past few months.&lt;/p&gt;
&lt;h4 id=&#34;what-am-i-talkingabout&#34;&gt;What am I talking¬†about?
&lt;/h4&gt;&lt;p&gt;At work, I build or configure Microsoft Teams call flows almost daily. Even though the Teams Admin Center provides an easy-to-use graphical user interface to set up auto attendants and call queues, the solutions are not always that straight forward. If you‚Äôre creating your very first call flow, chances are that you will start by creating an auto attendant. Why wouldn‚Äôt you, it‚Äôs where the call first hits your system, isn‚Äôt it? Later on, you discover that you can‚Äôt even configure the most basic call flow, because you have not created your target call queue yet.&lt;/p&gt;
&lt;h4 id=&#34;living-in-a-fast-pacedworld&#34;&gt;Living in a fast paced¬†world
&lt;/h4&gt;&lt;p&gt;What if three months down the road somebody from the office or a customer asks you how their main number handles incoming calls? Are you still able to answer that without logging into the Teams Admin Center and clicking through all the nested auto attendants and call queues?&lt;/p&gt;
&lt;p&gt;They probably want to know things like how long does it ring before a call is transferred? Where is it transferred to? And which users are configured to answer calls? Just to name a few. If you manage a lot of customers, or work for a large organization with dozens of call queues, answering these kinds of questions can cost quite some time and resources.&lt;/p&gt;
&lt;p&gt;What if I told you that you could just run a script which will render a diagram containing your call flows automatically? Would that be something you might be interested in? (Shout out to all the Entourage fans out there.)&lt;/p&gt;
&lt;h4 id=&#34;finding-inspiration-in-microsoft-docs&#34;&gt;Finding inspiration in Microsoft Docs
&lt;/h4&gt;&lt;p&gt;docs.microsoft.com is arguably one of the best product documentation sites on the web. Of course, that can differ from product to product but overall, it‚Äôs a very solid approach to documentation. When docs.microsoft.com was &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/teamblog/introducing-docs-microsoft-com#readability&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;introduced in 2016&lt;/a&gt; Microsoft even said that eye tracking studies have shown that content with a fixed width is easier to read. This really got my attention and made me believe that Microsoft has put some real effort into creating their product documentations.&lt;/p&gt;
&lt;p&gt;I am by no means a professional developer. I didn‚Äôt even really know what Markdown is at that time. After doing some research I quickly understood that all or most of their documentation content is based on Markdown files which are hosted on GitHub and rendered into a website.&lt;/p&gt;
&lt;p&gt;I started to pay attention and noticed that many other companies, like &lt;a class=&#34;link&#34; href=&#34;https://bitwarden.com/help/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Bitwarden&lt;/a&gt;, my favorite password manager, also use Markdown based documentation websites. This underlined my hunch that Markdown based docs are the real deal.&lt;/p&gt;
&lt;p&gt;No more confusing file versions, people creating and changing their own versions of documentations without telling anyone and so forth. With a Markdown based documentation solution, everything is stored in a central repository and every change is tracked with GIT. I need this too. But how do they do it?&lt;/p&gt;
&lt;p&gt;Another quick research session led me to &lt;a class=&#34;link&#34; href=&#34;https://dotnet.github.io/docfx/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DocFx&lt;/a&gt;, a static website generator for Markdown files maintained by the¬†.NET team. After some tweaks here and there, my documentation site was already up and running.&lt;/p&gt;
&lt;h4 id=&#34;lazy-is-the-newsmart&#34;&gt;Lazy is the new¬†smart
&lt;/h4&gt;&lt;p&gt;Nobody likes writing documentations. Including me. But what if I could start to write some PowerShell scripts which will automatically retrieve specific information about a Microsoft 365 tenant and save it to Markdown files? Basically, let the scripts do the work for me? What at first was a proof of concept quickly turned into a full-fledged documentation website containing all sorts of data.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/1MrTseh4yHR5hpsbg3RrQ.png&#34;
	width=&#34;1758&#34;
	height=&#34;1038&#34;
	srcset=&#34;https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/1MrTseh4yHR5hpsbg3RrQ_hu5146088764885305117.png 480w, https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/1MrTseh4yHR5hpsbg3RrQ_hu12138073483529045708.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;169&#34;
		data-flex-basis=&#34;406px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;one-tool-down-two-togo&#34;&gt;One tool down, two to¬†go
&lt;/h4&gt;&lt;p&gt;With DocFx I was able to automatically structure and render information into a user friendly and comprehensible website. Next up are diagrams. I hate fiddling around with diagram drawing tools. Creating links between nodes, rearranging, and resizing shapes etc. can be a really frustrating and time-consuming chore. Once again, I searched the web for a tool or a technology which can render diagrams from code. That‚Äôs when I discovered &lt;a class=&#34;link&#34; href=&#34;https://mermaid-js.github.io/mermaid/#/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Mermaid&lt;/a&gt;. Mermaid uses JavaScript to render diagrams and flow charts from code. The learning curve was quite big at first. I probably would have been faster if I had just drawn a call flow diagram in Visio. But since Mermaid also offers an excellent &lt;a class=&#34;link&#34; href=&#34;https://mermaid.live/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;live editor&lt;/a&gt;, I essentially got the hang of it. Now I can create diagrams a hundred times faster and without the hassle of manually drawing them.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/19wkpjx2ZmqSSBLXUfDmPNg.png&#34;
	width=&#34;1512&#34;
	height=&#34;1374&#34;
	srcset=&#34;https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/19wkpjx2ZmqSSBLXUfDmPNg_hu1984409754305355754.png 480w, https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/19wkpjx2ZmqSSBLXUfDmPNg_hu17983662868355833457.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;110&#34;
		data-flex-basis=&#34;264px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;the-finalpiece&#34;&gt;The final¬†piece
&lt;/h4&gt;&lt;p&gt;The final step of my vision was to connect all the dots. Use PowerShell to read call flows from Microsoft Teams, save them to markdown files and generate a website which will display said call flows. Of course, all of this should happen automatically and update the contents of the website on a schedule. I‚Äôve got everything I need to achieve this except the tool to generate the flow charts.&lt;/p&gt;
&lt;p&gt;For this one, I was sure that there‚Äôs no off the shelf solution. So I started writing some PowerShell code to get all the details needed in order to display a call flow. This was a mere proof of concept at first too. I soon discovered that this project would be much more complex than initially anticipated. But I just kept on coding, experimenting, and adding stuff to my script. After a few weeks of working on this project on weekends and evenings I published a first version of my script on GitHub.&lt;/p&gt;
&lt;h4 id=&#34;the-challenges-kept-oncoming&#34;&gt;The challenges kept on¬†coming
&lt;/h4&gt;&lt;p&gt;Even though you can only create two different types of voice apps in Teams, the number of possibilities how they might be connected to each other seem limitless. I quickly realized that I will never achieve my goal with the current version. So, I started working on an updated version.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/1BRQwWnFDQSNofwNK1yfxA.jpeg&#34;
	width=&#34;1904&#34;
	height=&#34;3627&#34;
	srcset=&#34;https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/1BRQwWnFDQSNofwNK1yfxA_hu8015764120219632506.jpeg 480w, https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/1BRQwWnFDQSNofwNK1yfxA_hu16126099714426274138.jpeg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;52&#34;
		data-flex-basis=&#34;125px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;learnings&#34;&gt;Learnings
&lt;/h4&gt;&lt;p&gt;I started learning PowerShell about three years ago. Since then, I‚Äôve created numerous smaller and larger scripts to automate things. But I‚Äôve never even attempted to write something as big and complex as this. Nor had I used functions a lot. Nevertheless, this feels like I was able to put almost everything I learned about PowerShell in the last years to good use. Once I realized that the script needs to be much more flexible and dynamic, I started to divide my first version of the script into separate functions. Even then, I hit several dead ends and had to rewrite a lot of the code.&lt;/p&gt;
&lt;p&gt;Even though it was a lot of work and I‚Äôm sure that it‚Äôs not the most efficient or clean code you will find on GitHub, I still learned a lot during the development of my tool. The most important part of this story is that you don‚Äôt necessarily have to be a pro dev to create something like this. We live in a world full of developers who create awesome tools, frameworks, or other technologies every day. Sometimes it‚Äôs just about vision, determination and being able to understand how different technologies can work together.&lt;/p&gt;
&lt;p&gt;I‚Äôm very proud of what I achieved and super happy with the result. Feel free to head over to &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt; and give the &lt;strong&gt;M365 Call Flow Visualizer&lt;/strong&gt; a spin. I hope that you like what I‚Äôve done and that you may find it useful. Please contact me on &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/mozzeph&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Twitter&lt;/a&gt; if you have any questions or feedback.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
