<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Azure Automation on HEUSSER.PRO</title>
        <link>https://heusser.pro/categories/azure-automation/</link>
        <description>Recent content in Azure Automation on HEUSSER.PRO</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 16 Nov 2023 10:30:16 +0000</lastBuildDate><atom:link href="https://heusser.pro/categories/azure-automation/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Teams Phone Number Management List Part 3</title>
        <link>https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/</link>
        <pubDate>Thu, 16 Nov 2023 10:30:16 +0000</pubDate>
        
        <guid>https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/</guid>
        <description>&lt;p&gt;I think it’s safe to say by now that this project has been a success. I’ve received lots of positive feedback about this from the community.&lt;/p&gt;
&lt;p&gt;That didn’t stop me from going even further and adding more features to this project though.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1VrXnQeg6wj3KJYetSCXQ.png&#34;
	width=&#34;1080&#34;
	height=&#34;1080&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1VrXnQeg6wj3KJYetSCXQ_huc0d9c5cf9dedbc609c0fbf71a4b58757_789207_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1VrXnQeg6wj3KJYetSCXQ_huc0d9c5cf9dedbc609c0fbf71a4b58757_789207_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;new-features-and-improvements&#34;&gt;New Features and Improvements&lt;/h3&gt;
&lt;h4 id=&#34;localized--formatted-phonenumbers&#34;&gt;Localized / Formatted Phone Numbers&lt;/h4&gt;
&lt;p&gt;As you may know by now, I consider myself a data driven guy. What I really dig about Teams phone is the fact that every number is a full E.164 number in every case. This kind of absoluteness provides great safety because each number is unique. Just as with user principal names or GUIDs, there’s no funny business going on.&lt;/p&gt;
&lt;p&gt;That safety comes at the cost of readability though. If you’ve seen &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/prettify-and-sync-teams-phone-numbers-to-azure-ad-e973755f83d5&#34; &gt;this&lt;/a&gt; article before, then you already know that I came up with a solution to format phone numbers in their local format using Python.&lt;/p&gt;
&lt;p&gt;The runbook logic powering the list can now also leverage Python to store the formatted phone number in an additional column. This way you always have both, the E.164 number and a prettified version of it readily available.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1eH5p9VVDZ9zlnSfb0G9A.png&#34;
	width=&#34;999&#34;
	height=&#34;488&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1eH5p9VVDZ9zlnSfb0G9A_hu42235a58e1dd034ca470785fda8c220c_47341_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1eH5p9VVDZ9zlnSfb0G9A_hu42235a58e1dd034ca470785fda8c220c_47341_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;204&#34;
		data-flex-basis=&#34;491px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;For US numbers or numbers from other countries such as Japan or Israel which typically use hyphens, you might have noticed that I’m removing the hyphens, even though they’re included after a number has been formatted using the phonenumbers library. I do this so that every number in the list contains only digits and a plus sign. Also, it’s how Teams Admin Center displays the numbers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1eq5k3nw1Nd6nFTUTjoxFQ.png&#34;
	width=&#34;1670&#34;
	height=&#34;123&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1eq5k3nw1Nd6nFTUTjoxFQ_hudbe32b784da69251888450272772f1e4_20012_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1eq5k3nw1Nd6nFTUTjoxFQ_hudbe32b784da69251888450272772f1e4_20012_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1357&#34;
		data-flex-basis=&#34;3258px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;write-back-teams-phone-number-to-entraid&#34;&gt;Write back Teams Phone Number to Entra ID&lt;/h4&gt;
&lt;p&gt;When you view a user’s profile card in Teams, Outlook or anywhere else in Microsoft 365, it doesn’t display the phone number which is actually configured as &lt;strong&gt;LineURI&lt;/strong&gt; in Teams. Instead, the information is taken from Entra ID. I’ve created a variable inside the runbook which controls if the &lt;strong&gt;BusinessPhones&lt;/strong&gt; property of Entra ID users should be set to the assigned &lt;strong&gt;LineUri&lt;/strong&gt; in Teams. I’ll explain how to turn this &lt;strong&gt;on&lt;/strong&gt; or &lt;strong&gt;off&lt;/strong&gt; later in this article.&lt;/p&gt;
&lt;p&gt;With the current permissions/scopes assigned to the Entra ID App registration, this only works for users which don’t have any administrator roles assigned in Entra ID. If a user has an admin role, you’ll get an error.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1raGaYRAkmtuYw6eis0Y9A.png&#34;
	width=&#34;1677&#34;
	height=&#34;150&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1raGaYRAkmtuYw6eis0Y9A_hu4ee283a7d27f68232dc11e2ea9f82521_30963_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1raGaYRAkmtuYw6eis0Y9A_hu4ee283a7d27f68232dc11e2ea9f82521_30963_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1118&#34;
		data-flex-basis=&#34;2683px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;previous-usercolumn&#34;&gt;Previous User Column&lt;/h4&gt;
&lt;p&gt;I’ve added a new column which shows the UPN of the previous user/owner of a number after it has been removed. This is achieved by an update I made to the Power Automate Flow. Note that the flow will now also retain the value of the &lt;strong&gt;Comment&lt;/strong&gt; column.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1BEWqNsDCKrY0BOBbMc9tkg.png&#34;
	width=&#34;1455&#34;
	height=&#34;255&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1BEWqNsDCKrY0BOBbMc9tkg_hu3cee777f6ca1e8c45bda74cfbf1d0c11_37168_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1BEWqNsDCKrY0BOBbMc9tkg_hu3cee777f6ca1e8c45bda74cfbf1d0c11_37168_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;570&#34;
		data-flex-basis=&#34;1369px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The reason for this column is that you have a better overview over who has previously used a number. I’m sure you don’t want to assign the previous CEO’s number to a new intern.&lt;/p&gt;
&lt;h4 id=&#34;unassigned-routingrules&#34;&gt;Unassigned Routing Rules&lt;/h4&gt;
&lt;p&gt;When people leave, we sometimes want to forward their unassigned number to another person in the company or to the main number. This is done by routing rules. But do we typically remember or even know that such rules have been created in the past…? Now we do!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1mazY1aTB8fOWSqHcKsnSrA.png&#34;
	width=&#34;2160&#34;
	height=&#34;518&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1mazY1aTB8fOWSqHcKsnSrA_huda9df33cef89150ed611d8a108404816_83332_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1mazY1aTB8fOWSqHcKsnSrA_huda9df33cef89150ed611d8a108404816_83332_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;416&#34;
		data-flex-basis=&#34;1000px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Every number is checked against all routing rules a tenant has configured and if there are any matches, they’re reflected on the list. The name of the matching rule gets stored in the &lt;strong&gt;User Name&lt;/strong&gt; column. (Because this column isn’t used for the flow trigger condition.)&lt;/p&gt;
&lt;p&gt;This even works if a number is reserved. In this case, the status will be changed to &lt;strong&gt;Reserved (Routing Rule)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1nLAAAS1BoTH5RfGGN788Q.png&#34;
	width=&#34;1767&#34;
	height=&#34;615&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1nLAAAS1BoTH5RfGGN788Q_hu8a120bfeef507982d22c89e85154a3c9_72236_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1nLAAAS1BoTH5RfGGN788Q_hu8a120bfeef507982d22c89e85154a3c9_72236_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;287&#34;
		data-flex-basis=&#34;689px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;improved-number-assignment-capabilities&#34;&gt;Improved Number Assignment Capabilities&lt;/h4&gt;
&lt;p&gt;I’ve also made some improvements to assigning numbers. If a number has a status of &lt;strong&gt;Reserved (Routing Rule)&lt;/strong&gt; or &lt;strong&gt;Assignment Error&lt;/strong&gt;, the script will try to assign the number as well. In the case of an assignment error, the script will try to assign the number again with each new job. This is helpful in scenarios where e.g. a license hasn’t been assigned yet.&lt;/p&gt;
&lt;p&gt;Furthermore, you can now also reserve a number and enter the user’s UPN in the &lt;strong&gt;User Principal Name&lt;/strong&gt; column. This is great if the account does not exist yet (so you can’t fill in the &lt;strong&gt;User Profile&lt;/strong&gt;) but you already know the UPN of a soon to be created user. All of these changes make it easier for you to plan ahead and have the runbook take care of everything automatically, once a user has been created and licensed.&lt;/p&gt;
&lt;h4 id=&#34;operator-column&#34;&gt;Operator Column&lt;/h4&gt;
&lt;p&gt;Last but not least, the list now also displays the name of the &lt;strong&gt;Operator&lt;/strong&gt;. This works for all types, including &lt;strong&gt;Direct Routing&lt;/strong&gt;. You will have to manually list the operator name for each Direct Routing number in your source CSV though.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1uGIXZRh99eE0prMLPkLnA.png&#34;
	width=&#34;1874&#34;
	height=&#34;612&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1uGIXZRh99eE0prMLPkLnA_hufdba4cf3cc40d28557415db24f88198a_76045_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1uGIXZRh99eE0prMLPkLnA_hufdba4cf3cc40d28557415db24f88198a_76045_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;306&#34;
		data-flex-basis=&#34;734px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;updating-all-the-components&#34;&gt;Updating All the Components&lt;/h3&gt;
&lt;p&gt;I will most likely update the deployment script at some point to deploy everything from scratch including all the updates. If I can find enough time, I may also create an update script to update an existing deployment.&lt;/p&gt;
&lt;p&gt;But today, I’ll show you how to implement all the changes manually in an existing deployment which consists of an Azure automation account, a list, a flow and your local source files.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To do these steps, you should have followed and deployed everything as described in&lt;/strong&gt; &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf&#34; &gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;article and implemented all the updates described in&lt;/strong&gt; &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a&#34; &gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;article.&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;add-newcolumns&#34;&gt;Add New Columns&lt;/h4&gt;
&lt;p&gt;Add the following columns to the SharePoint list. All columns must be of type &lt;strong&gt;text&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comment&lt;/li&gt;
&lt;li&gt;Previous User&lt;/li&gt;
&lt;li&gt;Operator&lt;/li&gt;
&lt;li&gt;Phone Number&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;add-the-phonenumbers-python-package-to-the-automation-account&#34;&gt;Add the phonenumbers Python Package to the Automation Account&lt;/h4&gt;
&lt;p&gt;Go to &lt;a class=&#34;link&#34; href=&#34;https://pypi.org/project/phonenumbers/#files&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; website and download the built distribution (*.whl) file to your PC. Then go to your automation account in Azure Portal and upload the file under &lt;strong&gt;Python packages&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1g7hFFDAp9c6HwdMFUIimw.png&#34;
	width=&#34;1298&#34;
	height=&#34;655&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1g7hFFDAp9c6HwdMFUIimw_hue06bb70463ddc4ae6f9c537aa9dbf888_86797_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1g7hFFDAp9c6HwdMFUIimw_hue06bb70463ddc4ae6f9c537aa9dbf888_86797_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;198&#34;
		data-flex-basis=&#34;475px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;add-automation-variables-to-automation-account&#34;&gt;Add Automation Variables to Automation Account&lt;/h4&gt;
&lt;p&gt;Add the following variables to your automation account. Since you’ll need to enter a value, just type a dot (“.”). Leave the integer value at 0.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TeamsPhoneNumberOverview_AllCsOnlineNumbers (String)&lt;/li&gt;
&lt;li&gt;TeamsPhoneNumberOverview_PrettyNumbers (String)&lt;/li&gt;
&lt;li&gt;TeamsPhoneNumberOverview_TotalNumberCount (Integer)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1A6uNqGeSwBjpEuMGTuhw.png&#34;
	width=&#34;1524&#34;
	height=&#34;842&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1A6uNqGeSwBjpEuMGTuhw_hu4106a26f303771a5ef3b611c7a49435b_168781_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1A6uNqGeSwBjpEuMGTuhw_hu4106a26f303771a5ef3b611c7a49435b_168781_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;180&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;add-operator-info-to-your-direct-routingnumbers&#34;&gt;Add Operator info to your Direct Routing Numbers&lt;/h4&gt;
&lt;p&gt;If you have direct routing numbers, you’ll need to update your source list. The old structure only had one column called &lt;strong&gt;PhoneNumber&lt;/strong&gt;. Now there’s &lt;strong&gt;PhoneNumber&lt;/strong&gt; and &lt;strong&gt;Operator&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;PhoneNumber;Operator&lt;br&gt;
4144520xxxx;Test Provider 1&lt;br&gt;
4144512xxxx;Test Provider 2&lt;br&gt;
4144512xxxx;Test Provider 3&lt;/p&gt;
&lt;p&gt;Place your updated CSV in &lt;code&gt;.\Resources\DirectRoutingNumbers-V2.csv&lt;/code&gt; and then run &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Setup/UpdateDirectRoutingNumbers-V2.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; script to update your automation variable in Azure.&lt;/p&gt;
&lt;p&gt;Alternatively, you can also run the below code and paste the content into your &lt;code&gt;TeamsPhoneNumberOverview_DirectRoutingNumbers&lt;/code&gt; automation variable.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;&amp;rsquo;&amp;rdquo; + (Import-Csv -Path .\Resources\DirectRoutingNumbers-V2.csv -Delimiter &amp;ldquo;;&amp;rdquo; | ConvertTo-Json | Out-String) + &amp;ldquo;&amp;rsquo;&amp;rdquo; | Set-Clipboard&lt;/p&gt;
&lt;h4 id=&#34;create-a-pythonrunbook&#34;&gt;Create a Python Runbook&lt;/h4&gt;
&lt;p&gt;Go to your runbooks in your automation account and click &lt;strong&gt;Create a runbook&lt;/strong&gt;. Name it &lt;code&gt;Format-TeamsPhoneNumbers&lt;/code&gt; and choose &lt;strong&gt;Python&lt;/strong&gt; as runbook type and &lt;strong&gt;3.10 (preview)&lt;/strong&gt; as runtime version.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1rgIq7gWJ29Wa9rBctif0A.png&#34;
	width=&#34;1226&#34;
	height=&#34;590&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1rgIq7gWJ29Wa9rBctif0A_hu559edfd9701f5dd23048a222db84ba32_55999_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1rgIq7gWJ29Wa9rBctif0A_hu559edfd9701f5dd23048a222db84ba32_55999_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;207&#34;
		data-flex-basis=&#34;498px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Grab &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Functions/Format-TeamsPhoneNumbers.py&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; code and paste it into the Azure portal. Save and publish the runbook.&lt;/p&gt;
&lt;h4 id=&#34;setup-a-managed-identity-and-permissions&#34;&gt;Setup a Managed Identity and Permissions&lt;/h4&gt;
&lt;p&gt;Every time the main runbook runs, it will check if the total number count is still the same by comparing the current count to the count of the previous job which is stored in the &lt;strong&gt;TeamsPhoneNumberOverview_TotalNumberCount&lt;/strong&gt; variable. If the count of numbers is different compared to the previous job, the main runbook will start the python runbook. The python runbook will use the phonenumbers library to format all your phone numbers to their localized format.&lt;/p&gt;
&lt;p&gt;However, we must first allow the runbook to start another runbook job using a managed identity. In the automation account, go to &lt;strong&gt;Identity&lt;/strong&gt; and flip the toggle switch for &lt;strong&gt;System assigned&lt;/strong&gt; (managed identity) to &lt;strong&gt;On&lt;/strong&gt;. Then click &lt;strong&gt;Save&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1EDBRytpBpi8HYFN2kwiLdA.png&#34;
	width=&#34;2113&#34;
	height=&#34;500&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1EDBRytpBpi8HYFN2kwiLdA_hu911f287525f8e88922b85b984ee90234_87394_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1EDBRytpBpi8HYFN2kwiLdA_hu911f287525f8e88922b85b984ee90234_87394_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;422&#34;
		data-flex-basis=&#34;1014px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Click &lt;strong&gt;Azure role assignments&lt;/strong&gt; and then &lt;strong&gt;Add role assignment (Preview)&lt;/strong&gt;. Set the scope to &lt;strong&gt;Resource group&lt;/strong&gt;, select your subscription and resource group and choose &lt;strong&gt;Automation Operator&lt;/strong&gt; as role.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1gnhE04XQSUDcagh8wASow.png&#34;
	width=&#34;1256&#34;
	height=&#34;504&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1gnhE04XQSUDcagh8wASow_huff8cd1c8e58c6033e0bf45d462c9d682_41793_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1gnhE04XQSUDcagh8wASow_huff8cd1c8e58c6033e0bf45d462c9d682_41793_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;249&#34;
		data-flex-basis=&#34;598px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Click &lt;strong&gt;Save&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id=&#34;update-the-mainrunbook&#34;&gt;Update the Main Runbook&lt;/h4&gt;
&lt;p&gt;Replace the code in the &lt;strong&gt;TeamsPhoneOverview&lt;/strong&gt; runbook with &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Scripts/TeamsPhoneNumberOverview%20-V2.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; code. &lt;strong&gt;Make sure to change the&lt;/strong&gt; &lt;code&gt;**$localTestMode**&lt;/code&gt; &lt;strong&gt;variable to&lt;/strong&gt; &lt;code&gt;**$false**&lt;/code&gt; &lt;strong&gt;before you save and publish the runbook. Also update the names of your automation account and resource group on lines 95–97.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1Szx2vDwh4929HXR4DPp4MA.png&#34;
	width=&#34;522&#34;
	height=&#34;79&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1Szx2vDwh4929HXR4DPp4MA_hu2087dd2e0039bfaeb8935e2917623dab_11132_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1Szx2vDwh4929HXR4DPp4MA_hu2087dd2e0039bfaeb8935e2917623dab_11132_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;660&#34;
		data-flex-basis=&#34;1585px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you don’t want to write back user’s &lt;strong&gt;LineURIs&lt;/strong&gt; to Entra ID &lt;strong&gt;BusinessPhones&lt;/strong&gt;, change &lt;code&gt;syncTeamsPhoneNumbersToEntraIdBusinessPhones&lt;/code&gt; to &lt;code&gt;$false&lt;/code&gt; on line 6.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1MFWbPjRVqUjXwHAw5HdDZg.png&#34;
	width=&#34;415&#34;
	height=&#34;20&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1MFWbPjRVqUjXwHAw5HdDZg_hu6b72af425dc2d9a6159f239c0fa33424_2603_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1MFWbPjRVqUjXwHAw5HdDZg_hu6b72af425dc2d9a6159f239c0fa33424_2603_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;2075&#34;
		data-flex-basis=&#34;4980px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;update-theflow&#34;&gt;Update the Flow&lt;/h4&gt;
&lt;p&gt;Finally, go to your flow and make the last small changes. In here, add the values for the new columns that we created. If you need a refresher, this is the part where the flow deletes numbers which were unassigned because there’s no way to remove the user profile. We then recreate the list entry with all the information &lt;strong&gt;except&lt;/strong&gt; the &lt;strong&gt;User Profile Claims&lt;/strong&gt;. Because the user profile stays, we can use the &lt;strong&gt;User Profile Email&lt;/strong&gt; and write it to the &lt;strong&gt;Previous User&lt;/strong&gt; column. Comments in the comment field will also be added again, once a deleted entry has been recreated.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1BvLOlUfRBHAr1IFNxm7tYg.png&#34;
	width=&#34;929&#34;
	height=&#34;1374&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1BvLOlUfRBHAr1IFNxm7tYg_hu34a1cfd36dc5b890619cdd3ab70fcc66_111511_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1BvLOlUfRBHAr1IFNxm7tYg_hu34a1cfd36dc5b890619cdd3ab70fcc66_111511_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;67&#34;
		data-flex-basis=&#34;162px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;update-the-flow-trigger-condition&#34;&gt;Update the Flow Trigger Condition&lt;/h4&gt;
&lt;p&gt;The current trigger condition checks if a user’s email address is equal to the user principal name. As much as I want this to always be the case, the reality is sometimes different. Some readers have reported that their Flow gets stuck in an infinite trigger loop because of that.&lt;/p&gt;
&lt;p&gt;I’ve slightly tweaked the trigger condition, so it doesn’t compare the email address to the UPN anymore. Instead, the UPN is extracted from the user profile using a split operation and then compared to the UPN from the list column. Here’s the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Resources/FlowTriggerConditionRobustUpn.txt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;updated trigger condition&lt;/a&gt;. Make sure to update it on your flow as well as it will be more robust than the old one.&lt;/p&gt;
&lt;p&gt;@or(&lt;br&gt;
and(&lt;br&gt;
not(equals(triggerOutputs()?[&amp;lsquo;body/User_x0020_Principal_x0020_Name&amp;rsquo;], &amp;lsquo;Unassigned&amp;rsquo;)),&lt;br&gt;
not(contains(triggerBody(), &amp;lsquo;UserProfile&amp;rsquo;))&lt;br&gt;
),&lt;br&gt;
not(equals(toLower(triggerOutputs()?[&amp;lsquo;body/User_x0020_Principal_x0020_Name&amp;rsquo;]), split(toLower(triggerOutputs()?[&amp;lsquo;body/UserProfile&amp;rsquo;][&amp;lsquo;Claims&amp;rsquo;]),&amp;rsquo;|&amp;rsquo;)[2])),&lt;br&gt;
and(&lt;br&gt;
contains(triggerBody(), &amp;lsquo;UserProfile&amp;rsquo;),&lt;br&gt;
not(equals(triggerOutputs()?[&amp;lsquo;body/User_x0020_Principal_x0020_Name&amp;rsquo;], &amp;lsquo;Unassigned&amp;rsquo;)),&lt;br&gt;
not(contains(triggerBody(), &amp;lsquo;TeamsAdminCenter&amp;rsquo;))&lt;br&gt;
)&lt;br&gt;
)&lt;/p&gt;
&lt;p&gt;That’s all. If you’ve followed all the steps, you should now be able to make use of all the new features I created. Like I said, I’ll try to find some time and create a new deployment script which deploys the version 2 from scratch. I hope you enjoy the list as much as I do.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Teams Phone Number Management List Part 2</title>
        <link>https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/</link>
        <pubDate>Sat, 08 Apr 2023 16:02:49 +0000</pubDate>
        
        <guid>https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/</guid>
        <description>&lt;p&gt;This article builds on the following article.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf&#34; &gt;Teams Phone Number Management on a Budget | by martin heusser | Mar, 2023 | Medium&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Please make sure you read that one first.&lt;/p&gt;
&lt;p&gt;After I built the list initially, I quickly realized that there’s still room for improvement. Especially a feature to assign and unassign phone numbers through the list would be incredibly handy. This would allow us to delegate this task to users without Teams Admin Center access.&lt;/p&gt;
&lt;p&gt;The &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;repository&lt;/a&gt; has been updated and already includes the code required for number assignment. If you’ve already deployed it, just delete the resource group in Azure and re-deploy. Of course, you can also replace the existing files with the new scripts and variables by hand if you know what you’re doing. But since there’s a deployment script available, I recommend deleting and re-deploying.&lt;/p&gt;
&lt;p&gt;Let’s check out the new features first and go over the manual changes required later.&lt;/p&gt;
&lt;h3 id=&#34;new-features&#34;&gt;New Features&lt;/h3&gt;
&lt;h4 id=&#34;country&#34;&gt;Country&lt;/h4&gt;
&lt;p&gt;All Calling Plan and Operator Connect phone numbers already include a country attribute. Therefore, I decided to use the property which is already known to Teams. The &lt;strong&gt;Country&lt;/strong&gt; column now includes the two-digit ISO code instead of the country’s full name.&lt;/p&gt;
&lt;p&gt;For consistency, the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Resources/CountryLookupTable.json&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CountryLookupTable.json&lt;/a&gt; has been updated to include the ISO codes as well. Please see the &lt;strong&gt;Changes in V2&lt;/strong&gt; section of this article if the Country does not always match your direct routing numbers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1fXx1TOgZFuZVhjx1eDjUQ.png&#34;
	width=&#34;2262&#34;
	height=&#34;504&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1fXx1TOgZFuZVhjx1eDjUQ_hu277fc53f1b5dc88c52a0a6e1475d8ef7_92277_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1fXx1TOgZFuZVhjx1eDjUQ_hu277fc53f1b5dc88c52a0a6e1475d8ef7_92277_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;448&#34;
		data-flex-basis=&#34;1077px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;city&#34;&gt;City&lt;/h4&gt;
&lt;p&gt;The purpose of this list is to make the management of phone numbers easier. The more information you have, the better you can filter. That’s why I added a &lt;strong&gt;City&lt;/strong&gt; column as well.&lt;/p&gt;
&lt;h4 id=&#34;number-reservation&#34;&gt;Number Reservation&lt;/h4&gt;
&lt;p&gt;The &lt;strong&gt;Status&lt;/strong&gt; column is now a drop-down list. Setting a number to &lt;strong&gt;Reserved&lt;/strong&gt; won’t do anything yet, except letting other people which use the list know that this number should not be assigned to any user or resource account.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1hCvnQlLcivK4l6aqVptQ.png&#34;
	width=&#34;1804&#34;
	height=&#34;266&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1hCvnQlLcivK4l6aqVptQ_hufe5219eb62cae58c8dc8e9b2dd916ce7_39769_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1hCvnQlLcivK4l6aqVptQ_hufe5219eb62cae58c8dc8e9b2dd916ce7_39769_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;678&#34;
		data-flex-basis=&#34;1627px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Because this is a SharePoint list, we can add a comment on that entry.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/19B3gsc94JUVpwVXhbEiLw.png&#34;
	width=&#34;1186&#34;
	height=&#34;498&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/19B3gsc94JUVpwVXhbEiLw_hu032438f3e0ac0887824dc5f4327a3d43_50249_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/19B3gsc94JUVpwVXhbEiLw_hu032438f3e0ac0887824dc5f4327a3d43_50249_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;238&#34;
		data-flex-basis=&#34;571px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The runbook will not make any changes or updates to that entry until the number is assigned or the Status is changed by hand again.&lt;/p&gt;
&lt;h4 id=&#34;assign-anumber&#34;&gt;Assign a Number&lt;/h4&gt;
&lt;p&gt;To assign a number, simply set a number to &lt;strong&gt;Reserved&lt;/strong&gt; and choose a &lt;strong&gt;User Profile&lt;/strong&gt; from the people picker.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1QNTzy43yr2pBe9Ow3xAWA.png&#34;
	width=&#34;1067&#34;
	height=&#34;246&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1QNTzy43yr2pBe9Ow3xAWA_hu1381dd2f30b47c40947708eb152131f1_39543_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1QNTzy43yr2pBe9Ow3xAWA_hu1381dd2f30b47c40947708eb152131f1_39543_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;433&#34;
		data-flex-basis=&#34;1040px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The list will then look like this. There’s a &lt;strong&gt;User Profile&lt;/strong&gt; linked but the &lt;strong&gt;User Principal Name&lt;/strong&gt; is still unassigned.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1xrSnRsutiS2xUJ6y4U6Lw.png&#34;
	width=&#34;1581&#34;
	height=&#34;266&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1xrSnRsutiS2xUJ6y4U6Lw_hu1f21b268681bc3ec8c3f832f372bd1b6_41712_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1xrSnRsutiS2xUJ6y4U6Lw_hu1f21b268681bc3ec8c3f832f372bd1b6_41712_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;594&#34;
		data-flex-basis=&#34;1426px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The next time the runbook runs, it will try to assign the number. If the assignment fails for any reason, the Staus will change to &lt;strong&gt;Assignment Error&lt;/strong&gt; but the linked User Profile will be retained.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1z8KikMnOal4Oa2WxTYQ73A.png&#34;
	width=&#34;1586&#34;
	height=&#34;260&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1z8KikMnOal4Oa2WxTYQ73A_hu079a0831e70224feac5baeeba09029bc_42319_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1z8KikMnOal4Oa2WxTYQ73A_hu079a0831e70224feac5baeeba09029bc_42319_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;610&#34;
		data-flex-basis=&#34;1464px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Currently, the list only reflects a generic error. The runbook output, however, does include more information.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/11OI1hJz1RuwkoEm43rU0Q.png&#34;
	width=&#34;809&#34;
	height=&#34;107&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/11OI1hJz1RuwkoEm43rU0Q_hu55c0b352f247e7e1d31f0958a1733fb3_17395_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/11OI1hJz1RuwkoEm43rU0Q_hu55c0b352f247e7e1d31f0958a1733fb3_17395_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;756&#34;
		data-flex-basis=&#34;1814px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The script will even assign a voice routing policy for direct routing numbers if you specify one in the CountryLookupTable.json file. I will show you how to do that at the end of this article.&lt;/p&gt;
&lt;p&gt;If you really want to be on top of your game, you can also create a rule to notify you of failed assignments.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/151zUCwelWtbrDgbnzkfNQ.png&#34;
	width=&#34;2300&#34;
	height=&#34;1259&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/151zUCwelWtbrDgbnzkfNQ_hu2175ea31da84d27882ad4cb34ce43864_69380_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/151zUCwelWtbrDgbnzkfNQ_hu2175ea31da84d27882ad4cb34ce43864_69380_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;438px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;unassign-anumber&#34;&gt;Unassign a Number&lt;/h4&gt;
&lt;p&gt;To unassign a number, simply change the Status to &lt;strong&gt;Remove Pending&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1o5Nh9gEBN07IBhByFt8Few.png&#34;
	width=&#34;1582&#34;
	height=&#34;267&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1o5Nh9gEBN07IBhByFt8Few_hu1de2cfe3c198e6c9ae5bc62257969485_42807_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1o5Nh9gEBN07IBhByFt8Few_hu1de2cfe3c198e6c9ae5bc62257969485_42807_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;592&#34;
		data-flex-basis=&#34;1422px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The number will then be removed from the user, the next time the runbook is running.&lt;/p&gt;
&lt;h4 id=&#34;performance-improvements&#34;&gt;Performance Improvements&lt;/h4&gt;
&lt;p&gt;I’ve also made some changes which will improve the performance of the script dramatically. I discovered a couple of redundant Graph requests which have now been reduced to the minimum required.&lt;/p&gt;
&lt;h3 id=&#34;changes-inv2&#34;&gt;Changes in V2&lt;/h3&gt;
&lt;h4 id=&#34;changes-to-thelist&#34;&gt;Changes to the List&lt;/h4&gt;
&lt;p&gt;Edit the &lt;strong&gt;Status&lt;/strong&gt; column of your list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1P2a8Jd5iHaAPfAvS6IglA.png&#34;
	width=&#34;1424&#34;
	height=&#34;518&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1P2a8Jd5iHaAPfAvS6IglA_hub94d4482e000b8f19e3bf5de88c90269_73033_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1P2a8Jd5iHaAPfAvS6IglA_hub94d4482e000b8f19e3bf5de88c90269_73033_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;274&#34;
		data-flex-basis=&#34;659px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Change the &lt;strong&gt;Type&lt;/strong&gt; from &lt;strong&gt;Single line of Text&lt;/strong&gt; to &lt;strong&gt;Choice&lt;/strong&gt; and add the following choices.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1scOs84KlwMBYFhiCNnG3Q.png&#34;
	width=&#34;484&#34;
	height=&#34;836&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1scOs84KlwMBYFhiCNnG3Q_hu44e56985460b03cf5023c5769c4e9572_42739_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1scOs84KlwMBYFhiCNnG3Q_hu44e56985460b03cf5023c5769c4e9572_42739_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;57&#34;
		data-flex-basis=&#34;138px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Save the changes to the &lt;strong&gt;Status&lt;/strong&gt; column.&lt;/p&gt;
&lt;p&gt;Now add a new &lt;strong&gt;Text&lt;/strong&gt; column.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1cjsXM6TTXhTYVAZGMag.png&#34;
	width=&#34;837&#34;
	height=&#34;636&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1cjsXM6TTXhTYVAZGMag_hu7ad1c3a37d1237d62b0bcf498ba1b9ad_46666_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1cjsXM6TTXhTYVAZGMag_hu7ad1c3a37d1237d62b0bcf498ba1b9ad_46666_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;131&#34;
		data-flex-basis=&#34;315px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Name it &lt;strong&gt;City&lt;/strong&gt; and choose Type &lt;strong&gt;Single line of text.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1QXZyFo02BJglprnd8cS4og.png&#34;
	width=&#34;479&#34;
	height=&#34;689&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1QXZyFo02BJglprnd8cS4og_hube7dfc18e4d4d2c2120da6d8ecf7b5b7_37936_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1QXZyFo02BJglprnd8cS4og_hube7dfc18e4d4d2c2120da6d8ecf7b5b7_37936_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;69&#34;
		data-flex-basis=&#34;166px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;changes-to-theflow&#34;&gt;Changes to the Flow&lt;/h3&gt;
&lt;h4 id=&#34;update-trigger-condition&#34;&gt;Update Trigger Condition&lt;/h4&gt;
&lt;p&gt;In your flow’s trigger condition, delete the existing condition and paste the following expression.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 08.08.2023&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thanks to a community member of my Teams Phone Admin &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/discord.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Discord Server&lt;/a&gt; I was made aware that the trigger condition can fail if the UPN and the email address case did not match. Below is the corrected trigger condition which includes a &lt;code&gt;toLower()&lt;/code&gt; expression as well.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;/Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;@or(&lt;br&gt;
and(&lt;br&gt;
not(equals(triggerOutputs()?[&amp;lsquo;body/User_x0020_Principal_x0020_Name&amp;rsquo;], &amp;lsquo;Unassigned&amp;rsquo;)),&lt;br&gt;
not(contains(triggerBody(), &amp;lsquo;UserProfile&amp;rsquo;))&lt;br&gt;
),&lt;br&gt;
not(equals(toLower(triggerOutputs()?[&amp;lsquo;body/User_x0020_Principal_x0020_Name&amp;rsquo;]), toLower(triggerOutputs()?[&amp;lsquo;body/UserProfile&amp;rsquo;][&amp;lsquo;Email&amp;rsquo;]))),&lt;br&gt;
and(&lt;br&gt;
contains(triggerBody(), &amp;lsquo;UserProfile&amp;rsquo;),&lt;br&gt;
not(equals(triggerOutputs()?[&amp;lsquo;body/User_x0020_Principal_x0020_Name&amp;rsquo;], &amp;lsquo;Unassigned&amp;rsquo;)),&lt;br&gt;
not(contains(triggerBody(), &amp;lsquo;TeamsAdminCenter&amp;rsquo;))&lt;br&gt;
)&lt;br&gt;
)&lt;/p&gt;
&lt;p&gt;The expression is now also included in the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Resources/FlowTriggerCondition.txt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;repository&lt;/a&gt; for better readability. The line breaks will be automatically removed once you paste it in Power Automate.&lt;/p&gt;
&lt;p&gt;This will also trigger the flow, when a &lt;strong&gt;User Profile&lt;/strong&gt; was added manually through the list (not by the flow) which is what happens when a list user wants to assign a number to a new Teams User.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/15XzTMBRpRFoAN8QWg0wg.png&#34;
	width=&#34;1658&#34;
	height=&#34;257&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/15XzTMBRpRFoAN8QWg0wg_hub891bb3e042297a5e9057dc43d80ea3a_41750_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/15XzTMBRpRFoAN8QWg0wg_hub891bb3e042297a5e9057dc43d80ea3a_41750_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;645&#34;
		data-flex-basis=&#34;1548px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;add-another-condition&#34;&gt;Add Another Condition&lt;/h4&gt;
&lt;p&gt;I don’t know why it didn’t occur to me initially but instead of using the runbook to recreate items which have been deleted by the flow, we can just use the flow to do that as well. The reason why we need to delete and re-create is because setting the User Profile to &lt;strong&gt;null&lt;/strong&gt; did not work in Power Automate.&lt;/p&gt;
&lt;p&gt;In the first &lt;strong&gt;If yes&lt;/strong&gt; action, we have to add another condition which checks if the &lt;strong&gt;Status Value&lt;/strong&gt; is equal to &lt;strong&gt;Unassigned.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/11borC4Preqwfg27E0VYQA.png&#34;
	width=&#34;926&#34;
	height=&#34;296&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/11borC4Preqwfg27E0VYQA_hua99723b5a064cf69169f923508c3c81f_15243_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/11borC4Preqwfg27E0VYQA_hua99723b5a064cf69169f923508c3c81f_15243_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;312&#34;
		data-flex-basis=&#34;750px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The existing &lt;strong&gt;Delete&lt;/strong&gt; &lt;strong&gt;item&lt;/strong&gt; action has to be copied to the clipboard, deleted, and then pasted inside the &lt;strong&gt;If yes&lt;/strong&gt; action of the second condition again.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1b0l089aKSKjnKzGhs2WLw.png&#34;
	width=&#34;1241&#34;
	height=&#34;125&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1b0l089aKSKjnKzGhs2WLw_hu5d262466986fc735e7426eea0a462aeb_18277_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1b0l089aKSKjnKzGhs2WLw_hu5d262466986fc735e7426eea0a462aeb_18277_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;992&#34;
		data-flex-basis=&#34;2382px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/151IVw0NFOPlwJIyS5Z6A.png&#34;
	width=&#34;918&#34;
	height=&#34;326&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/151IVw0NFOPlwJIyS5Z6A_hu3654e03b19811c43930e5ee8438f20ef_22848_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/151IVw0NFOPlwJIyS5Z6A_hu3654e03b19811c43930e5ee8438f20ef_22848_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;281&#34;
		data-flex-basis=&#34;675px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;add-create-itemaction&#34;&gt;Add Create Item Action&lt;/h4&gt;
&lt;p&gt;In the second &lt;strong&gt;If yes&lt;/strong&gt; action, add a &lt;strong&gt;Create item&lt;/strong&gt; action after &lt;strong&gt;Delete&lt;/strong&gt; item with the following dynamic values.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1KEG3uPMLbf8mXKkAHXCBw.png&#34;
	width=&#34;964&#34;
	height=&#34;1421&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1KEG3uPMLbf8mXKkAHXCBw_hu308457c30e9f80bd76d0e9b8303903a9_98037_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1KEG3uPMLbf8mXKkAHXCBw_hu308457c30e9f80bd76d0e9b8303903a9_98037_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;67&#34;
		data-flex-basis=&#34;162px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Here’s a new screenshot of the complete flow with collapsed boxes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1xF9V8IvU5ZFciYjH1fsqYg.png&#34;
	width=&#34;3158&#34;
	height=&#34;1242&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1xF9V8IvU5ZFciYjH1fsqYg_hu37ecd369f774b74588a3b93769f2bc0d_88298_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1xF9V8IvU5ZFciYjH1fsqYg_hu37ecd369f774b74588a3b93769f2bc0d_88298_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;254&#34;
		data-flex-basis=&#34;610px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;changes-to-the-countrylookuptablejson&#34;&gt;Changes to the CountryLookupTable.json&lt;/h3&gt;
&lt;h4 id=&#34;add-more-preciseprefixes&#34;&gt;Add More Precise Prefixes&lt;/h4&gt;
&lt;p&gt;There are some countries which use the same phone prefix. If multiple matches are found, the function always uses the last match which might be wrong in many cases. To solve this, just edit the Json file yourself.&lt;/p&gt;
&lt;p&gt;For example, if you have Australian &lt;strong&gt;+61&lt;/strong&gt; numbers, but don’t have any numbers from Christmas Island or Cocos Islands (which also start with +61), just delete these entries from the Json.&lt;/p&gt;
&lt;p&gt;In case you have e.g. numbers from Canada and USA, which both start with &lt;strong&gt;+1,&lt;/strong&gt; you can also extend the prefix to include all digits which are common in all your number ranges from left to right.&lt;/p&gt;
&lt;p&gt;Original Entry&lt;/p&gt;
&lt;p&gt;{&lt;br&gt;
&amp;ldquo;Prefix&amp;rdquo;: &amp;ldquo;+1&amp;rdquo;,&lt;br&gt;
&amp;ldquo;CountryName&amp;rdquo;: &amp;ldquo;United States&amp;rdquo;,&lt;br&gt;
&amp;ldquo;Country&amp;rdquo;: &amp;ldquo;US&amp;rdquo;&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;Possible Entry Change&lt;/p&gt;
&lt;p&gt;{&lt;br&gt;
&amp;ldquo;Prefix&amp;rdquo;: &amp;ldquo;+1206&amp;rdquo;,&lt;br&gt;
&amp;ldquo;CountryName&amp;rdquo;: &amp;ldquo;United States&amp;rdquo;,&lt;br&gt;
&amp;ldquo;Country&amp;rdquo;: &amp;ldquo;US&amp;rdquo;&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;This example assumes that you have Canadian direct routing numbers starting with &lt;strong&gt;+1&lt;/strong&gt; and have US direct routing numbers which all start with &lt;strong&gt;+1206&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you have more prefixes from the same country in your number ranges, just add more entries with different prefixes but with the same country.&lt;/p&gt;
&lt;p&gt;{&lt;br&gt;
&amp;ldquo;Prefix&amp;rdquo;: &amp;ldquo;+1206&amp;rdquo;,&lt;br&gt;
&amp;ldquo;CountryName&amp;rdquo;: &amp;ldquo;United States&amp;rdquo;,&lt;br&gt;
&amp;ldquo;Country&amp;rdquo;: &amp;ldquo;US&amp;rdquo;&lt;br&gt;
},&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;Prefix&amp;rdquo;: &amp;ldquo;+1323&amp;rdquo;,&lt;br&gt;
&amp;ldquo;CountryName&amp;rdquo;: &amp;ldquo;United States&amp;rdquo;,&lt;br&gt;
&amp;ldquo;Country&amp;rdquo;: &amp;ldquo;US&amp;rdquo;&lt;br&gt;
}&lt;/p&gt;
&lt;h4 id=&#34;add-voice-routing-policynames&#34;&gt;Add Voice Routing Policy Names&lt;/h4&gt;
&lt;p&gt;If you want to use the list for assignment of direct routing numbers, you’ll have to add the name of your voice routing policy for each country to the &lt;strong&gt;CountryLookupTable.json&lt;/strong&gt; file.&lt;/p&gt;
&lt;p&gt;{&lt;br&gt;
&amp;ldquo;Prefix&amp;rdquo;: &amp;ldquo;+41&amp;rdquo;,&lt;br&gt;
&amp;ldquo;CountryName&amp;rdquo;: &amp;ldquo;Switzerland&amp;rdquo;,&lt;br&gt;
&amp;ldquo;Country&amp;rdquo;: &amp;ldquo;CH&amp;rdquo;,&lt;br&gt;
&amp;ldquo;VoiceRoutingPolicy&amp;rdquo;: &amp;ldquo;Switzerland&amp;rdquo;&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;Currently, this solution only supports one voice routing policy per country entry in the CountryLookupTable.json file.&lt;/p&gt;
&lt;p&gt;If you have different voice routing policies for various locations within the same country, you’ll have to try to find a way to match them via their prefixes and add multiple entries in the Json.&lt;/p&gt;
&lt;p&gt;{&lt;br&gt;
&amp;ldquo;Prefix&amp;rdquo;: &amp;ldquo;+4144&amp;rdquo;,&lt;br&gt;
&amp;ldquo;CountryName&amp;rdquo;: &amp;ldquo;Switzerland&amp;rdquo;,&lt;br&gt;
&amp;ldquo;Country&amp;rdquo;: &amp;ldquo;CH&amp;rdquo;,&lt;br&gt;
&amp;ldquo;VoiceRoutingPolicy&amp;rdquo;: &amp;ldquo;Switzerland-Zurich&amp;rdquo;&lt;br&gt;
},&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;Prefix&amp;rdquo;: &amp;ldquo;+4131&amp;rdquo;,&lt;br&gt;
&amp;ldquo;CountryName&amp;rdquo;: &amp;ldquo;Switzerland&amp;rdquo;,&lt;br&gt;
&amp;ldquo;Country&amp;rdquo;: &amp;ldquo;CH&amp;rdquo;,&lt;br&gt;
&amp;ldquo;VoiceRoutingPolicy&amp;rdquo;: &amp;ldquo;Switzerland-Bern&amp;rdquo;&lt;br&gt;
}&lt;/p&gt;
&lt;h4 id=&#34;changes-to-teamsphonenumberoverviewps1&#34;&gt;Changes to TeamsPhoneNumberOverview.ps1&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Update 11.04.2023&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sorry, I totally forgot to mention that you’ll also need to specify the name of the SharePoint User Information List in your language.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;# Set your language or add it to the switch statement&lt;br&gt;
# To find the name of your user information list, go to:&lt;br&gt;
# https://&lt;your domain&gt;.sharepoint.com/sites/&lt;your site name&gt;/_catalogs/users/simple.aspx&lt;br&gt;
$spoLanguage = &amp;ldquo;German&amp;rdquo;&lt;/p&gt;
&lt;p&gt;switch ($spoLanguage) {&lt;br&gt;
German {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    $localizedUserInformationList = &amp;quot;Benutzerinformationsliste&amp;quot;  

}  
English {  

    $localizedUserInformationList = &amp;quot;User Information List&amp;quot;  

}  
Default {  

    $localizedUserInformationList = &amp;quot;User Information List&amp;quot;  

}  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;I hope that you like the &lt;strong&gt;V2&lt;/strong&gt; upgrade of my budget number management list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/0i9hHsRnLxMO42ePg.jpg&#34;
	width=&#34;1024&#34;
	height=&#34;1024&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/0i9hHsRnLxMO42ePg_huf10134041c0126d5fb940c52c6a6a43b_125034_480x0_resize_q75_box.jpg 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/0i9hHsRnLxMO42ePg_huf10134041c0126d5fb940c52c6a6a43b_125034_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Teams Phone Number Management on a Budget</title>
        <link>https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/</link>
        <pubDate>Thu, 23 Mar 2023 13:05:11 +0000</pubDate>
        
        <guid>https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/0TNGGsjES22NTIbT.jpg&#34;
	width=&#34;1024&#34;
	height=&#34;1024&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/0TNGGsjES22NTIbT_hua9e2dc7ee20e2e1771a9d9231d6c5020_107042_480x0_resize_q75_box.jpg 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/0TNGGsjES22NTIbT_hua9e2dc7ee20e2e1771a9d9231d6c5020_107042_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 08.04.2023&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’ve updated this solution to V2 which includes the capability to assign, unassign and reserve phone numbers along with other improvements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Please read &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a&#34; &gt;this article&lt;/a&gt; when you have finished reading this one.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;/Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Every Teams Voice Admin that has deployed Direct Routing knows the struggle. There’s no way to manage Direct Routing numbers in Teams Admin Center. This makes it hard for us to get a clear overview of which numbers are still unassigned/free or even to see all the numbers we have.&lt;/p&gt;
&lt;p&gt;Obviously, there’s a solution for anything. We can use PowerShell to export numbers and create our own lists in Excel or whatever. The challenge with that is to keep the list up to date, error free and make it centrally available for all people who need to work with it.&lt;/p&gt;
&lt;p&gt;There are also lots of vendors which offer Teams phone number management platforms. Here are some of them:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://callroute.com/features/number-management/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Number Management for Microsoft Teams (callroute.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.codesoftware.net/clobba-rm/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Clobba Range Manager — DID Number Management — Code Software&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.pure-ip.com/number-connect&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Number Connect (pure-ip.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://teamsboss.com/app/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TeamsBoss&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;They all have powerful features — which come with a price. But what if we don’t need a full-fledged management solution and just want a simple overview which is dynamically updated?&lt;/p&gt;
&lt;p&gt;That’s exactly what I’ve been building in my spare time over the last few weeks.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1bJzySshLFfuKEkIhfsSCQ.png&#34;
	width=&#34;2789&#34;
	height=&#34;1101&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1bJzySshLFfuKEkIhfsSCQ_hu6c1d86aeddff377f7bcbf523bed02252_238966_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1bJzySshLFfuKEkIhfsSCQ_hu6c1d86aeddff377f7bcbf523bed02252_238966_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;253&#34;
		data-flex-basis=&#34;607px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The final product is a SharePoint list which gets automatically updated by an Azure Automation Runbook every hour.&lt;/p&gt;
&lt;p&gt;This time around, I tried to automate everything I could. This means less work for you if you want to deploy it yourself. But before we get into the technical details of it, let’s look at the list.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you don’t care about the details and want to deploy straight away, you can grab the code from &lt;a class=&#34;link&#34; href=&#34;http://mozziemozz/TeamsPhoneAutomation:%20Automation%20Scripts%20for%20Microsoft%20Teams%20Phone%20%28github.com%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;the-list&#34;&gt;The List&lt;/h3&gt;
&lt;h4 id=&#34;the-columns&#34;&gt;The Columns&lt;/h4&gt;
&lt;p&gt;The list can be viewed in SharePoint Online, Microsoft Lists or directly in Teams through Lists. It consists of the following columns.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Title&lt;/strong&gt; = Phone Number&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Phone Extension&lt;/strong&gt; = Extension if there is one configured&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Status&lt;/strong&gt; = Assigned/Unassigned&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Number Type&lt;/strong&gt; = Direct Routing / Calling Plan / Operator Connect&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User Name&lt;/strong&gt; = Display Name of assigned account&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User Principal Name&lt;/strong&gt; = UPN of assigned account&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Account Type&lt;/strong&gt; = User Account / Resource Account / Conference Bridge&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Country&lt;/strong&gt; = The country a number belongs to&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UserId&lt;/strong&gt; = Object Id from Azure AD&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User Profile&lt;/strong&gt; = Profile Card&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Teams Admin Center&lt;/strong&gt; = Link to manage the user in TAC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This should cover most of the relevant information somebody might want to know about their phone numbers.&lt;/p&gt;
&lt;h4 id=&#34;filtering&#34;&gt;Filtering&lt;/h4&gt;
&lt;p&gt;Having all that information available allows us to easily filter numbers which meet certain criteria. In this example, I filtered the list for all unassigned numbers from the UK.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/14bBmRV7urUrZc22NiWUVDA.png&#34;
	width=&#34;2100&#34;
	height=&#34;272&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/14bBmRV7urUrZc22NiWUVDA_huf4872075daf114ac9a4cae11f1bc4684_48345_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/14bBmRV7urUrZc22NiWUVDA_huf4872075daf114ac9a4cae11f1bc4684_48345_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;772&#34;
		data-flex-basis=&#34;1852px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Because this number is unassigned and it could be assigned to a &lt;strong&gt;Resource Account&lt;/strong&gt; or a &lt;strong&gt;Conference Bridge&lt;/strong&gt;, both types are included in the list.&lt;/p&gt;
&lt;p&gt;If we compare that to an assigned service number, we can see that the &lt;strong&gt;Account Type&lt;/strong&gt; is shown as &lt;strong&gt;Resource Account&lt;/strong&gt; because the number is assigned to one.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1wZdcr9ASB2hnmRdFT5w.png&#34;
	width=&#34;2086&#34;
	height=&#34;269&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1wZdcr9ASB2hnmRdFT5w_hu6964069f04cc53a72d91757e4056feab_45380_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1wZdcr9ASB2hnmRdFT5w_hu6964069f04cc53a72d91757e4056feab_45380_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;775&#34;
		data-flex-basis=&#34;1861px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The most common thing which people probably want to see at glance is which &lt;strong&gt;direct routing&lt;/strong&gt; numbers are unassigned from a specific country. This can also be achieved very easily.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1IUJX8fpDC3xi4wpcd5kfg.png&#34;
	width=&#34;2280&#34;
	height=&#34;520&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1IUJX8fpDC3xi4wpcd5kfg_hu00f9cbd8dcd2c8a7f5ad5ebb3014850e_86872_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1IUJX8fpDC3xi4wpcd5kfg_hu00f9cbd8dcd2c8a7f5ad5ebb3014850e_86872_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;438&#34;
		data-flex-basis=&#34;1052px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I learned a lot during the development of this project, and I now want to share that with you. Let’s take a look at how the SharePoint list was built and how it automatically updates itself with the help of &lt;strong&gt;Azure Automation&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;deployment&#34;&gt;Deployment&lt;/h3&gt;
&lt;p&gt;There are very few manual tasks required to get this set up. I built a deployment script which will create all the required resources in Azure for you.&lt;/p&gt;
&lt;h4 id=&#34;clone-the-githubrepo&#34;&gt;Clone The GitHub Repo&lt;/h4&gt;
&lt;p&gt;Start by cloning or downloading the GitHub Repo.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;mozziemozz/TeamsPhoneAutomation: Automation Scripts for Microsoft Teams Phone (github.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you’ve never worked with GitHub before, I highly recommend trying it instead of just downloading the repository as a zip file. All you need to do is &lt;a class=&#34;link&#34; href=&#34;https://github.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;sign up&lt;/a&gt; for an account, install the &lt;a class=&#34;link&#34; href=&#34;https://desktop.github.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;desktop client&lt;/a&gt; and clone the repo.&lt;/p&gt;
&lt;p&gt;Once you have signed into GitHub Desktop, just head over to the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;repository URL&lt;/a&gt; and open it in GitHub Desktop.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1Id3QSS2WJGsTfGqGPJ55Q.png&#34;
	width=&#34;1390&#34;
	height=&#34;588&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1Id3QSS2WJGsTfGqGPJ55Q_hu03fc151a6611929b7143ada33a867127_95586_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1Id3QSS2WJGsTfGqGPJ55Q_hu03fc151a6611929b7143ada33a867127_95586_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;236&#34;
		data-flex-basis=&#34;567px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Then choose your local folder and click on clone. Make sure to select a folder which isn’t synchronized to any kind of cloud Storage like OneDrive. The constant syncing of files would impair your performance dramatically.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1tqEoryFHlOYEPKCBQaED6Q.png&#34;
	width=&#34;736&#34;
	height=&#34;446&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1tqEoryFHlOYEPKCBQaED6Q_hu2d2cacbc9d052a8419ae14ae3b8f1e9b_28895_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1tqEoryFHlOYEPKCBQaED6Q_hu2d2cacbc9d052a8419ae14ae3b8f1e9b_28895_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;165&#34;
		data-flex-basis=&#34;396px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The repo contains the following files and folders.&lt;/p&gt;
&lt;p&gt;C:\TEMP\GITHUB\TEAMSPHONEAUTOMATION&lt;br&gt;
│   .gitignore&lt;br&gt;
│   Deploy.ps1&lt;br&gt;
│   README.md&lt;br&gt;
│&lt;br&gt;
├───Functions&lt;br&gt;
│       Connect-MgGraphHTTP.ps1&lt;br&gt;
│       Connect-MsTeamsServicePrincipal.ps1&lt;br&gt;
│       Get-CountryFromPrefix.ps1&lt;br&gt;
│       Get-CsOnlineNumbers.ps1&lt;br&gt;
│&lt;br&gt;
├───Resources&lt;br&gt;
│       CountryLookupTable.json&lt;br&gt;
│       CreateList.json&lt;br&gt;
│       DirectRoutingNumbers.csv&lt;br&gt;
│       Environment.json&lt;br&gt;
│&lt;br&gt;
├───Scripts&lt;br&gt;
│       TeamsPhoneNumberOverview.ps1&lt;br&gt;
│&lt;br&gt;
└───Setup&lt;br&gt;
Setup.ps1&lt;br&gt;
UpdateDirectRoutingNumbers.ps1&lt;/p&gt;
&lt;h4 id=&#34;environmentjson&#34;&gt;Environment.json&lt;/h4&gt;
&lt;p&gt;Before we do anything, we need to define a few things and names. In &lt;code&gt;.\Resources&lt;/code&gt; open the &lt;code&gt;Environment.json&lt;/code&gt; file and fill in your own information.&lt;/p&gt;
&lt;p&gt;{&lt;br&gt;
&amp;ldquo;TenantId&amp;rdquo;: &amp;ldquo;4bffbf87-53a0-4fce-b58b-xxxxxxxxxxxx&amp;rdquo;,&lt;br&gt;
&amp;ldquo;GroupId&amp;rdquo;: &amp;ldquo;aff7d27f-878d-422c-83bd-xxxxxxxxxxxx&amp;rdquo;,&lt;br&gt;
&amp;ldquo;MSListName&amp;rdquo;: &amp;ldquo;Teams Phone Number Overview Demo&amp;rdquo;,&lt;br&gt;
&amp;ldquo;ResourceGroupName&amp;rdquo;: &amp;ldquo;mzz-rmg-001&amp;rdquo;,&lt;br&gt;
&amp;ldquo;AutomationAccountName&amp;rdquo;: &amp;ldquo;mzz-automation-account-001&amp;rdquo;,&lt;br&gt;
&amp;ldquo;AzLocation&amp;rdquo;: &amp;ldquo;West Europe&amp;rdquo;&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TenantId&lt;/strong&gt; is your Tenant Id.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GroupId&lt;/strong&gt; is the Object Id of the Microsoft Teams Team which hosts the SharePoint site where the list should be created.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MSListName&lt;/strong&gt; will be the name of your List in SharePoint.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ResourceGroupName&lt;/strong&gt; will be the name of the resource group which is created in Azure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AutomationAccountName&lt;/strong&gt; will be the name of the automation account which is created within the new resource group.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AzLocation&lt;/strong&gt; is the Azure region where you want to deploy the resources.&lt;/p&gt;
&lt;p&gt;You can find a list of all available regions and their names &lt;a class=&#34;link&#34; href=&#34;https://azure.microsoft.com/en-us/explore/global-infrastructure/geographies/#geographies&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Make sure you save the file once you’ve filled in all the information.&lt;/p&gt;
&lt;h4 id=&#34;directroutingnumberscsv&#34;&gt;DirectRoutingNumbers.csv&lt;/h4&gt;
&lt;p&gt;Next, we need a list which contains all your direct routing numbers. This file can only contain one column called &lt;strong&gt;PhoneNumber&lt;/strong&gt;. All the numbers must be in &lt;strong&gt;E.164&lt;/strong&gt; format but without the leading &lt;code&gt;+&lt;/code&gt; . The plus sign will be added by the script later. It just makes things easier in Excel if we don’t need to bother about the plus.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1nnwTg3pq3UCddPisob7HqA.png&#34;
	width=&#34;1461&#34;
	height=&#34;969&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1nnwTg3pq3UCddPisob7HqA_hu33cb0141878143d616a7fbe15bc917c4_340963_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1nnwTg3pq3UCddPisob7HqA_hu33cb0141878143d616a7fbe15bc917c4_340963_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;361px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;That’s it for the preparation.&lt;/p&gt;
&lt;h4 id=&#34;deployps1&#34;&gt;Deploy.ps1&lt;/h4&gt;
&lt;p&gt;Disclaimer: The script has been tested on a vanilla Windows 11 virtual machine where &lt;strong&gt;Windows Terminal&lt;/strong&gt; is configured as default console host and sessions start in the parent process directory. No PowerShell modules were installed before the script was first executed on this system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You will need an account with Global Administrator rights to successfully run this script. You also need local admin rights and need to make sure that running scripts is allowed on your machine.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In an elevated terminal, run the following code and close the terminal session once you have done so.&lt;/p&gt;
&lt;p&gt;Set-ExecutionPolicy Bypass&lt;/p&gt;
&lt;p&gt;To start the deployment, you need to run the &lt;code&gt;Deploy.ps1&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1WKugBxPGMHPFT71q8WUN1g.png&#34;
	width=&#34;618&#34;
	height=&#34;582&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1WKugBxPGMHPFT71q8WUN1g_hu85d54a622ff1137685cbec9b7afbbc6c_175763_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1WKugBxPGMHPFT71q8WUN1g_hu85d54a622ff1137685cbec9b7afbbc6c_175763_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;106&#34;
		data-flex-basis=&#34;254px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This will just call the &lt;code&gt;.\Setup\Setup.ps1&lt;/code&gt; script which is the real deal.&lt;/p&gt;
&lt;h4 id=&#34;setupps1&#34;&gt;Setup.ps1&lt;/h4&gt;
&lt;p&gt;After all the module and components checks have been completed or the missing components have been installed, you will be prompted to sign into the &lt;a class=&#34;link&#34; href=&#34;https://pnp.github.io/cli-microsoft365/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;M365 CLI&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ZuLzxPnboF940mSkOnUFqA.png&#34;
	width=&#34;2430&#34;
	height=&#34;1392&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ZuLzxPnboF940mSkOnUFqA_hu9d5f939f3752108568b064391ae85e0a_1624382_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ZuLzxPnboF940mSkOnUFqA_hu9d5f939f3752108568b064391ae85e0a_1624382_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;174&#34;
		data-flex-basis=&#34;418px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Let me explain what’s going on in the script. Our end goal is to have a SharePoint list. Since we need a script to automatically update the list anyway, we might as well just create the list through PowerShell and Microsoft Graph instead of creating it manually.&lt;/p&gt;
&lt;p&gt;To provision all this stuff, we need a couple of &lt;strong&gt;Az.*&lt;/strong&gt; PowerShell modules. We also need &lt;strong&gt;Node.JS&lt;/strong&gt; so we can install the &lt;strong&gt;CLI for Microsoft 365&lt;/strong&gt; through &lt;strong&gt;NPM&lt;/strong&gt; (Node Package Manager). If you miss any of the components on your machine, they will automatically be installed, if you can provide local admin rights.&lt;/p&gt;
&lt;h4 id=&#34;azure-ad-app-registration--service-principal&#34;&gt;Azure AD App Registration &amp;amp; Service Principal&lt;/h4&gt;
&lt;p&gt;The M365 CLI will create a new Azure AD App Registration and a Service Principal. It will also assign the Microsoft Graph permission scopes we need to create and modify SharePoint lists and manage Microsoft Teams to the Service Principal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1PKYwJDYOIAvgJi8us8uUMQ.png&#34;
	width=&#34;1928&#34;
	height=&#34;1395&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1PKYwJDYOIAvgJi8us8uUMQ_hu38f63293225db81d1a4929f24c0af3ed_335030_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1PKYwJDYOIAvgJi8us8uUMQ_hu38f63293225db81d1a4929f24c0af3ed_335030_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;138&#34;
		data-flex-basis=&#34;331px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1EvALgsWAXkRfjYM5WjZMGQ.png&#34;
	width=&#34;2616&#34;
	height=&#34;1297&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1EvALgsWAXkRfjYM5WjZMGQ_hucf99232732d6d3736d9a60bccbec1c37_308831_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1EvALgsWAXkRfjYM5WjZMGQ_hucf99232732d6d3736d9a60bccbec1c37_308831_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;201&#34;
		data-flex-basis=&#34;484px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Both the App Registration and the Service Principal will use the name of the Automation Account. This way it’s easy to know where the assigned permissions are used within Azure.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1BFgrZUU3EnaOZDB1SutpQ.png&#34;
	width=&#34;1303&#34;
	height=&#34;115&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1BFgrZUU3EnaOZDB1SutpQ_hu4b2091b5524233e8888fd86d95623a01_19066_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1BFgrZUU3EnaOZDB1SutpQ_hu4b2091b5524233e8888fd86d95623a01_19066_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1133&#34;
		data-flex-basis=&#34;2719px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The script also creates a new client secret for the App Registration.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1a2XyZpLjkpZ0HOfLCL32PA.png&#34;
	width=&#34;1950&#34;
	height=&#34;778&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1a2XyZpLjkpZ0HOfLCL32PA_huc24ae129d0035c25dc71a3638d86bf08_155245_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1a2XyZpLjkpZ0HOfLCL32PA_huc24ae129d0035c25dc71a3638d86bf08_155245_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;250&#34;
		data-flex-basis=&#34;601px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Remember, a client secret can only be viewed once, after it has been created in the portal. Because we used the CLI to create it, we can’t view it in the portal anymore. The secret is received by the script and saved in an encrypted state though. You’ll also be prompted if you want to view it in case you want to copy and store it in a safe place.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1zitK266ZKs6EST13zGeKCA.png&#34;
	width=&#34;2207&#34;
	height=&#34;120&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1zitK266ZKs6EST13zGeKCA_hu689d4b6b86b13e87d6d92e1a9175eb89_255664_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1zitK266ZKs6EST13zGeKCA_hu689d4b6b86b13e87d6d92e1a9175eb89_255664_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1839&#34;
		data-flex-basis=&#34;4414px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;You don’t have to do this if you don’t want to. You can always decrypt it again, as long as you&amp;rsquo;re using the same machine and user account which encrypted it. The secret is saved to &lt;code&gt;.\.local\AppSecret.txt&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1tWTZ8tk39JcYjIvwgY5xeA.png&#34;
	width=&#34;1891&#34;
	height=&#34;825&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1tWTZ8tk39JcYjIvwgY5xeA_hu73ec2c13345318505b85b61d7e67d88b_463064_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1tWTZ8tk39JcYjIvwgY5xeA_hu73ec2c13345318505b85b61d7e67d88b_463064_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;229&#34;
		data-flex-basis=&#34;550px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you want to manually decrypt it later, you can use the following code.&lt;/p&gt;
&lt;p&gt;$AppSecret = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR((Get-Content -Path .\.local\AppSecret.txt | ConvertTo-SecureString))) | Out-String&lt;/p&gt;
&lt;p&gt;Again, you don’t have to if you don’t want to. The script will be able to decrypt the secret and upload it to the Azure Automation Account once it’s needed.&lt;/p&gt;
&lt;p&gt;Once the permissions have been assigned to the Service Principal, the script uses the same Service Principal to connect to Microsoft Graph and assign the &lt;strong&gt;Skype for Business Administrator&lt;/strong&gt; role to itself.&lt;/p&gt;
&lt;p&gt;This is possible because the M365 CLI previously assigned the scope &lt;strong&gt;RoleManagement.ReadWrite.Directory&lt;/strong&gt; to the Service Principal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1dprD8JGRDPs2yAJnvlPlwQ.png&#34;
	width=&#34;1927&#34;
	height=&#34;594&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1dprD8JGRDPs2yAJnvlPlwQ_hu2f0b35b8ded8eb542d043071f1194954_112906_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1dprD8JGRDPs2yAJnvlPlwQ_hu2f0b35b8ded8eb542d043071f1194954_112906_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;324&#34;
		data-flex-basis=&#34;778px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The role is needed for the SP to be able to manage Microsoft Teams via PowerShell. I learned this from Christian Frohn’s excellent &lt;a class=&#34;link&#34; href=&#34;https://www.christianfrohn.dk/2022/11/13/connect-to-microsoft-teams-powershell-using-azure-app-reg-service-principal/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;blog article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In case you’re wondering why no &lt;strong&gt;Microsoft.Graph&lt;/strong&gt; modules are required; this is because I chose to work with PowerShell native &lt;code&gt;Invoke-RestMethod&lt;/code&gt; commands instead of the &lt;code&gt;*Mg*&lt;/code&gt; Cmdlets.&lt;/p&gt;
&lt;h4 id=&#34;provisioning-the-azure-resources&#34;&gt;Provisioning the Azure Resources&lt;/h4&gt;
&lt;p&gt;The previous steps complete rather fast. The next steps are going to take a bit longer. First you need to sign in with an Account which has the appropriate permissions to create Azure resources within your subscription.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1pOaJ1YELOvcHWdcLOuFeGQ.png&#34;
	width=&#34;855&#34;
	height=&#34;1173&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1pOaJ1YELOvcHWdcLOuFeGQ_hu522a1a111a141ac5a0e93866fa13e90e_155830_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1pOaJ1YELOvcHWdcLOuFeGQ_hu522a1a111a141ac5a0e93866fa13e90e_155830_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;72&#34;
		data-flex-basis=&#34;174px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I guess it would have been possible to also assign some RBAC roles to the Service Principal which would allow us to use it to sign into Azure as well. Since the script is run locally on demand, I see no problem with using a normal user account for this part. It actually gives us time to review the created App Registration and Service Principal before the script starts to deploy any resources to Azure. Furthermore, we don’t need to worry about being aware of yet another Service Principal which has permissions to deploy or remove Azure Resources.&lt;/p&gt;
&lt;p&gt;The script will create a Resource Group with the name and location defined in &lt;strong&gt;Environment.json.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ZZGYVP7g2uj2hi3O08RlzA.png&#34;
	width=&#34;1536&#34;
	height=&#34;469&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ZZGYVP7g2uj2hi3O08RlzA_hu9eab99cc020025baee44516293d8e261_60160_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ZZGYVP7g2uj2hi3O08RlzA_hu9eab99cc020025baee44516293d8e261_60160_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;327&#34;
		data-flex-basis=&#34;786px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It will also create a new Automation Account within the Resource Group, also in the same region.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1RvDl30FW8xOAHs3EUA3Q.png&#34;
	width=&#34;1508&#34;
	height=&#34;889&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1RvDl30FW8xOAHs3EUA3Q_hue6d32d64aeccb6f784035f3a3bc11a4f_154832_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1RvDl30FW8xOAHs3EUA3Q_hue6d32d64aeccb6f784035f3a3bc11a4f_154832_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;169&#34;
		data-flex-basis=&#34;407px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;automation-account&#34;&gt;Automation Account&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Modules&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;MicrosoftTeams&lt;/strong&gt; Module is not added to Automation Accounts by default. Thus, the script needs to add it. This usually takes a couple of Minutes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1RnQgpNQ3dOLfk0aDigurUQ.png&#34;
	width=&#34;1032&#34;
	height=&#34;427&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1RnQgpNQ3dOLfk0aDigurUQ_hucf39ce7e20fe6937172a74db410ebaad_447862_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1RnQgpNQ3dOLfk0aDigurUQ_hucf39ce7e20fe6937172a74db410ebaad_447862_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;241&#34;
		data-flex-basis=&#34;580px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Once the module has finished importing, the script will continue.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1msSR1JykOc4mieC9hExE2g.png&#34;
	width=&#34;1922&#34;
	height=&#34;409&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1msSR1JykOc4mieC9hExE2g_hu7e54b275a95c5bdc2b90a5bad14afb65_87338_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1msSR1JykOc4mieC9hExE2g_hu7e54b275a95c5bdc2b90a5bad14afb65_87338_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;469&#34;
		data-flex-basis=&#34;1127px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Variables&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The main script which will create/update our SharePoint List needs access to all the data we initially defined in &lt;strong&gt;Environment.josn&lt;/strong&gt;. This information is stored in &lt;strong&gt;Automation Variables&lt;/strong&gt; which can be accessed through Azure Runbooks.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1DBUuoXrqsTiu4XcayfA.png&#34;
	width=&#34;2456&#34;
	height=&#34;692&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1DBUuoXrqsTiu4XcayfA_hu11b218a60d70c6f5b40bbaed46bb2490_182530_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1DBUuoXrqsTiu4XcayfA_hu11b218a60d70c6f5b40bbaed46bb2490_182530_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;354&#34;
		data-flex-basis=&#34;851px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The client secret is stored as an encrypted variable and cannot be viewed or edited. Its content can only be accessed by using the internal Cmdlet &lt;code&gt;Get-AutomationVariable&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;We can also see that we have a variable called &lt;strong&gt;TeamsPhoneNumberOverview_DirectRoutingNumbers.&lt;/strong&gt; This variable stores all Direct Routing numbers in &lt;strong&gt;Json&lt;/strong&gt; format. Because I ran into some issues with storing the Json content as a string, I needed to get creative and enclose it in single quotes: &lt;code&gt;&#39;{&amp;quot;Json&amp;quot;: &amp;quot;Example&amp;quot;}&#39;&lt;/code&gt; . These get removed when the variable is imported through the Runbook so that the Json can be converted to a PowerShell object.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TeamsPhoneNumberOverview_CountryLookupTable&lt;/strong&gt; contains a list with all countries and prefixes to determine the country of Direct Routing Numbers. To be consistent, this is also applied to Calling Plan and Operator Connect numbers, even though this information would be available through &lt;code&gt;Get-CsPhoneNumberAssignment&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;If you would like to learn more about these internal Cmdlets for Automation Variables or Azure Runbooks in general, I recommend this &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242&#34; &gt;article&lt;/a&gt; of mine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Runbooks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We also have a couple of Runbooks which were deployed by the &lt;strong&gt;Setup.ps1&lt;/strong&gt; script. The main script logic sits in &lt;strong&gt;TeamsPhoneNumberOverview&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1cqbLWUjMSR1NhjCXqoCIg.png&#34;
	width=&#34;1901&#34;
	height=&#34;609&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1cqbLWUjMSR1NhjCXqoCIg_hu9feaae782674d8e5dcc829bbb9850729_127527_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1cqbLWUjMSR1NhjCXqoCIg_hu9feaae782674d8e5dcc829bbb9850729_127527_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;312&#34;
		data-flex-basis=&#34;749px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;To make the solution more modular some functions, like &lt;strong&gt;Connect-MgGraphHTTP&lt;/strong&gt; or &lt;strong&gt;Connect-MsTeamsServicePrincipal&lt;/strong&gt; are stored in separate Runbooks. This makes it easier to reuse them and means less work if we want to extend the Automation Account with other scripts.&lt;/p&gt;
&lt;p&gt;For example, if you have another Runbook in the same Automation Account which needs to connect to MicrosoftTeams PowerShell as well, you can just use the following code.&lt;/p&gt;
&lt;p&gt;. .\Connect-MsTeamsServicePrincipal.ps1&lt;/p&gt;
&lt;p&gt;$TenantId = Get-AutomationVariable -Name &amp;ldquo;TeamsPhoneNumberOverview_TenantId&amp;rdquo;&lt;br&gt;
$AppId = Get-AutomationVariable -Name &amp;ldquo;TeamsPhoneNumberOverview_AppId&amp;rdquo;&lt;br&gt;
$AppSecret = Get-AutomationVariable -Name &amp;ldquo;TeamsPhoneNumberOverview_AppSecret&amp;rdquo;&lt;/p&gt;
&lt;p&gt;. Connect-MsTeamsServicePrincipal -TenantId $TenantId -AppId $AppId -AppSecret $AppSecret&lt;/p&gt;
&lt;p&gt;And if you ever need to adjust something in the login function, you only need to change it in one script (Connect-MsTeamsServicePrincipal) and not in all your Runbooks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Script Logic&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The code for the main script logic can be found here.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Scripts/TeamsPhoneNumberOverview.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TeamsPhoneAutomation/TeamsPhoneNumberOverview.ps1 at main · mozziemozz/TeamsPhoneAutomation (github.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I asked ChatGPT to explain what the script does. The result is astonishing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This PowerShell script is designed to gather information about Microsoft Teams users who have phone numbers assigned to them, and store this information in a SharePoint list.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The script starts by importing four external functions, which are used later in the script. It then sets some variables by retrieving values from Azure Automation variables. These variables include the name of the SharePoint list where the data will be stored, as well as the credentials needed to connect to the Microsoft Teams and Graph APIs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Next, the script imports Direct Routing numbers and adds a leading plus sign to all of them. It also retrieves a list of existing SharePoint lists for a specific group ID, and checks if the desired SharePoint list already exists. If it does, the script retrieves its ID. If not, a new SharePoint list is created and its ID is retrieved.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The script then retrieves information about all Teams users who have a phone number assigned to them. For each user, the script determines if they are a user or resource account, and then extracts details about their phone number, such as the phone number itself, any extension, and the country associated with the number. The script also checks if the phone number is a Direct Routing number or a CsOnline number. Finally, it creates an object containing all of this information for each user, and adds this object to an array.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Once all of the user information has been gathered, the script writes it to the SharePoint list. Each object in the array is written to a new row in the list.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The only thing I would have added is to mention that the script only adds new entries to the list, only updates changed entries with the new values and removes entries from the list which no longer exist.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Schedules&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The setup script has also created a recurring schedule which runs every hour. The schedule is automatically linked to the &lt;strong&gt;TeamsPhoneNumberOverview&lt;/strong&gt; Runbook by the script. This will result in the SharePoint list being updated once an hour.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1Iemob3BqBPX6OWWHvggsQ.png&#34;
	width=&#34;2217&#34;
	height=&#34;1137&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1Iemob3BqBPX6OWWHvggsQ_hu3c746ca1b7d4e37973094d8ca1247270_137717_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1Iemob3BqBPX6OWWHvggsQ_hu3c746ca1b7d4e37973094d8ca1247270_137717_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;194&#34;
		data-flex-basis=&#34;467px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;That’s it. These are all the resources and components we need to create and update the SharePoint List.&lt;/p&gt;
&lt;h4 id=&#34;running-therunbook&#34;&gt;Running the Runbook&lt;/h4&gt;
&lt;p&gt;The Runbook schedule is configured in UTC. The first start time needs to be at least 5 minutes after the schedule’s creation time. To be sure, I set the schedule to run at the next full hour + 2 hours. In case this does not work for you in your local time zone, please let me know.&lt;/p&gt;
&lt;p&gt;This means that the SharePoint List won’t be created straight away. If you want to manually run the Runbook before the first scheduled start, just click on &lt;strong&gt;Start.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1qROsEUEs8dXdkq8CwSOaxQ.png&#34;
	width=&#34;1597&#34;
	height=&#34;193&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1qROsEUEs8dXdkq8CwSOaxQ_hu5b0861da822e92b7817b415d21d58970_46741_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1qROsEUEs8dXdkq8CwSOaxQ_hu5b0861da822e92b7817b415d21d58970_46741_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;827&#34;
		data-flex-basis=&#34;1985px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The job will just take a couple of minutes to complete.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1mp22izPK5jCc85FUtfZAkQ.png&#34;
	width=&#34;1120&#34;
	height=&#34;188&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1mp22izPK5jCc85FUtfZAkQ_hu34a6adaeaa5adf7d0540242e1f16da62_14800_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1mp22izPK5jCc85FUtfZAkQ_hu34a6adaeaa5adf7d0540242e1f16da62_14800_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;595&#34;
		data-flex-basis=&#34;1429px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;You should then see the newly created List in SharePoint or Microsoft Lists.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ER7l4q30cUIBaDndrjJfIQ.png&#34;
	width=&#34;2846&#34;
	height=&#34;1476&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ER7l4q30cUIBaDndrjJfIQ_huc2c54e7d35adbafa24ee768404ca6660_269588_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ER7l4q30cUIBaDndrjJfIQ_huc2c54e7d35adbafa24ee768404ca6660_269588_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;462px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;finishing-touches&#34;&gt;Finishing Touches&lt;/h3&gt;
&lt;p&gt;Unfortunately, the Graph API has some limitations in terms of what types of fields can be added or updated in a list. I wanted to perfect my solution by also having a User Profile column and a link to Teams Admin Center for all assigned user numbers. These types can only be added manually.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; For this and the next part, it’s extremely important to follow my instructions very carefully. If the column names don’t match up with the Flow it will not work.&lt;/p&gt;
&lt;h4 id=&#34;add-two-additional-columns&#34;&gt;Add Two Additional Columns&lt;/h4&gt;
&lt;p&gt;Click on &lt;strong&gt;+ Add column&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1KBxfdw50SMnsnhVzMCx5A.png&#34;
	width=&#34;831&#34;
	height=&#34;634&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1KBxfdw50SMnsnhVzMCx5A_hu67e4ae7cd1ab1fac4c8d3d0ead5acd1e_50130_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1KBxfdw50SMnsnhVzMCx5A_hu67e4ae7cd1ab1fac4c8d3d0ead5acd1e_50130_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;131&#34;
		data-flex-basis=&#34;314px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Name the column &lt;strong&gt;User Profile&lt;/strong&gt; and toggle &lt;strong&gt;Show profile photos&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1nYyOkp3UFJxGdomb1w4bDg.png&#34;
	width=&#34;477&#34;
	height=&#34;678&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1nYyOkp3UFJxGdomb1w4bDg_hu0630eb4997ed1eb51e644f7895acbb10_37285_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1nYyOkp3UFJxGdomb1w4bDg_hu0630eb4997ed1eb51e644f7895acbb10_37285_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;70&#34;
		data-flex-basis=&#34;168px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Repeat the steps and choose &lt;strong&gt;Hyperlink&lt;/strong&gt; this time.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1zQUl6GTYbNQymUbAQ9IU1g.png&#34;
	width=&#34;835&#34;
	height=&#34;634&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1zQUl6GTYbNQymUbAQ9IU1g_hu4d4cee3ad18f2fa3179c2e5206c74a88_44916_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1zQUl6GTYbNQymUbAQ9IU1g_hu4d4cee3ad18f2fa3179c2e5206c74a88_44916_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;131&#34;
		data-flex-basis=&#34;316px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Name this column &lt;strong&gt;Teams Admin Center.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now let’s create the final part of our Number Overview Solution: A Power Automate Flow.&lt;/p&gt;
&lt;h4 id=&#34;create-theflow&#34;&gt;&lt;strong&gt;Create The Flow&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Head over to &lt;a class=&#34;link&#34; href=&#34;https://make.powerautomate.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Microsoft Power Automate&lt;/a&gt; and create a new &lt;strong&gt;Automated Cloud Flow&lt;/strong&gt;. Name your flow and select &lt;strong&gt;When an item is created or modified&lt;/strong&gt; (SharePoint) as the trigger.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1eMzuzJ4sgXqtppTIWtTLbw.png&#34;
	width=&#34;1334&#34;
	height=&#34;841&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1eMzuzJ4sgXqtppTIWtTLbw_hu2f1b6f68c1941baa480173ad2d8d024b_143903_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1eMzuzJ4sgXqtppTIWtTLbw_hu2f1b6f68c1941baa480173ad2d8d024b_143903_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;158&#34;
		data-flex-basis=&#34;380px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Select the Site/Team where your list has been created from the drop-down menu in &lt;strong&gt;Site Address.&lt;/strong&gt; Then choose your list from the drop-down.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ruBvckSCFoyJbi3abfZbCQ.png&#34;
	width=&#34;929&#34;
	height=&#34;320&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ruBvckSCFoyJbi3abfZbCQ_hu71fb6af0c4fbc0a094a27927540066ce_23899_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ruBvckSCFoyJbi3abfZbCQ_hu71fb6af0c4fbc0a094a27927540066ce_23899_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;290&#34;
		data-flex-basis=&#34;696px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Next, click on the three dots and select &lt;strong&gt;Settings.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1Kq7ExjGCW7nsIjO5gPMw.png&#34;
	width=&#34;1347&#34;
	height=&#34;742&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1Kq7ExjGCW7nsIjO5gPMw_hufb5ccee705ac8597000de11bc6dbd95c_64596_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1Kq7ExjGCW7nsIjO5gPMw_hufb5ccee705ac8597000de11bc6dbd95c_64596_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;435px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Add a &lt;strong&gt;Trigger Condition&lt;/strong&gt; and add the following code exactly as it is.&lt;/p&gt;
&lt;p&gt;@or(and(not(equals(triggerOutputs()?[&amp;lsquo;body/User_x0020_Principal_x0020_Name&amp;rsquo;], &amp;lsquo;Unassigned&amp;rsquo;)),not(contains(triggerBody(), &amp;lsquo;UserProfile&amp;rsquo;))),not(equals(triggerOutputs()?[&amp;lsquo;body/User_x0020_Principal_x0020_Name&amp;rsquo;],triggerOutputs()?[&amp;lsquo;body/UserProfile&amp;rsquo;][&amp;lsquo;Email&amp;rsquo;])))&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1mC9t4BUoxiJfqTSIonWsA.png&#34;
	width=&#34;920&#34;
	height=&#34;1358&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1mC9t4BUoxiJfqTSIonWsA_hu0674f7b235175b088d2199700ff4c031_116544_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1mC9t4BUoxiJfqTSIonWsA_hu0674f7b235175b088d2199700ff4c031_116544_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;67&#34;
		data-flex-basis=&#34;162px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This is the most crucial step. Without a trigger condition, we would create an infinite trigger loop since we use &lt;strong&gt;When an item is created or modified&lt;/strong&gt; as trigger and our final action will be &lt;strong&gt;Update item&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Add a &lt;strong&gt;Condition&lt;/strong&gt; where it checks if the &lt;strong&gt;User Principal Name&lt;/strong&gt; is equal to &lt;strong&gt;Unassigned.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ynIuEDsOPU7mh4mGx7VQw.png&#34;
	width=&#34;945&#34;
	height=&#34;331&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ynIuEDsOPU7mh4mGx7VQw_hue4d6e1e38168e9516c64e288f32d3a20_12032_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ynIuEDsOPU7mh4mGx7VQw_hue4d6e1e38168e9516c64e288f32d3a20_12032_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;285&#34;
		data-flex-basis=&#34;685px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If the condition is &lt;strong&gt;True&lt;/strong&gt; or in other words, if the value of the &lt;strong&gt;User Principal Name&lt;/strong&gt; field is unassigned, we want to delete the list item.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1t4gRY6Gv6nOZqhgCQ9IF7w.png&#34;
	width=&#34;970&#34;
	height=&#34;609&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1t4gRY6Gv6nOZqhgCQ9IF7w_hud11b7e650618db348a01887f0da02fc7_34175_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1t4gRY6Gv6nOZqhgCQ9IF7w_hud11b7e650618db348a01887f0da02fc7_34175_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;382px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Keep in mind that the flow is only triggered if our trigger condition is met. It took me quite some time and a lot of binging to figure out a working trigger condition for this scenario. (Yes, I really found the answer on Bing without any googling!).&lt;/p&gt;
&lt;p&gt;The condition consists of an &lt;strong&gt;and&lt;/strong&gt; operator and an &lt;strong&gt;or&lt;/strong&gt; operator. In English, it checks for the following:&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;User Principal Name&lt;/strong&gt; is not &lt;strong&gt;Unassigned&lt;/strong&gt; and the &lt;strong&gt;User Profile&lt;/strong&gt; is empty.&lt;/p&gt;
&lt;p&gt;This means that the flow will trigger if the number is assigned to a user, but the &lt;strong&gt;User Profile&lt;/strong&gt; is not populated yet.&lt;/p&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;User Principal Name&lt;/strong&gt; is not the same as the &lt;strong&gt;User Profile.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The flow also triggers if the &lt;strong&gt;User Profile&lt;/strong&gt; is already populated but it doesn’t match the &lt;strong&gt;User Principal Name&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I didn’t find a way to delete the &lt;strong&gt;User Profile&lt;/strong&gt; if any given number changes from &lt;strong&gt;Assigned&lt;/strong&gt; to &lt;strong&gt;Unassigned.&lt;/strong&gt; Unfortunately, setting the filed to &lt;code&gt;null&lt;/code&gt; via the flow did not work. Because of that we just delete the list item using &lt;strong&gt;Delete item&lt;/strong&gt;. The number will be added back to the list with its up to date information as soon as the Runbook runs again.&lt;/p&gt;
&lt;p&gt;In the &lt;strong&gt;If no&lt;/strong&gt; action of the condition, we need to add another condition. This time, we want to check if the &lt;strong&gt;Account Type&lt;/strong&gt; is equal to &lt;strong&gt;User Account&lt;/strong&gt;. We only want to include a link to Teams Admin Center if it’s a user account.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1KSugJSu7Fc1kD6QiBAKPg.png&#34;
	width=&#34;1966&#34;
	height=&#34;413&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1KSugJSu7Fc1kD6QiBAKPg_hu87b11a76274850abb9ef49bd9cd5571d_20348_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1KSugJSu7Fc1kD6QiBAKPg_hu87b11a76274850abb9ef49bd9cd5571d_20348_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;476&#34;
		data-flex-basis=&#34;1142px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In this condition, we only configure actions if it’s &lt;strong&gt;True&lt;/strong&gt;. First, we update the list item. Select your &lt;strong&gt;Site Address&lt;/strong&gt; and &lt;strong&gt;List Name&lt;/strong&gt; again. Then fill in the &lt;strong&gt;ID&lt;/strong&gt; and &lt;strong&gt;Title&lt;/strong&gt; from dynamic content. And finally, in &lt;strong&gt;User Profile Claims&lt;/strong&gt; select &lt;strong&gt;Enter custom value&lt;/strong&gt; and choose &lt;strong&gt;User Principal Name&lt;/strong&gt; from dynamic content. Leave all the other fields blank.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1THXkqvbzDa3lKzVmDmqHww.png&#34;
	width=&#34;967&#34;
	height=&#34;1245&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1THXkqvbzDa3lKzVmDmqHww_hu10e17f5b8cd40cc25d34b2859cca2799_60706_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1THXkqvbzDa3lKzVmDmqHww_hu10e17f5b8cd40cc25d34b2859cca2799_60706_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;77&#34;
		data-flex-basis=&#34;186px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Add another action and choose &lt;strong&gt;Send an HTTP request to SharePoint&lt;/strong&gt;. The &lt;strong&gt;Update item&lt;/strong&gt; action only supports hyperlinks without a description so it would show the entire URL instead of a friendly name in the list. Although it’s more complicated, we can add a hyperlink with a friendly name using &lt;strong&gt;Send an HTTP request to SharePoint&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Fill in your &lt;strong&gt;Site Address&lt;/strong&gt; again and set the &lt;strong&gt;Method&lt;/strong&gt; to &lt;strong&gt;POST.&lt;/strong&gt; The &lt;strong&gt;Uri&lt;/strong&gt; must look like this:&lt;/p&gt;
&lt;p&gt;_api/web/lists/GetByTitle(&amp;lsquo;Teams Phone Number Overview Demo 10&amp;rsquo;)/items(@{triggerOutputs()?[&amp;lsquo;body/ID&amp;rsquo;]})&lt;/p&gt;
&lt;p&gt;Make sure to adjust the list name in case your list is named differently. Spaces inside the single quotes are supported in this field.&lt;/p&gt;
&lt;p&gt;Click the little icon next to the &lt;strong&gt;Headers&lt;/strong&gt; field to engage &lt;strong&gt;Switch Headers to text mode&lt;/strong&gt; and paste the following Json:&lt;/p&gt;
&lt;p&gt;{&lt;br&gt;
&amp;ldquo;Content-Type&amp;rdquo;: &amp;ldquo;application/json;odata=verbose&amp;rdquo;,&lt;br&gt;
&amp;ldquo;X-HTTP-Method&amp;rdquo;: &amp;ldquo;MERGE&amp;rdquo;,&lt;br&gt;
&amp;ldquo;IF-MATCH&amp;rdquo;: &amp;ldquo;*&amp;rdquo;&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;Then paste the following Json content in the &lt;strong&gt;Body&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;{&lt;br&gt;
&amp;ldquo;__metadata&amp;rdquo;: {&lt;br&gt;
&amp;ldquo;type&amp;rdquo;: &amp;ldquo;SP.Data.Teams_x0020_Phone_x0020_Number_x0020_Demo_x0020_10ListItem&amp;rdquo;&lt;br&gt;
},&lt;br&gt;
&amp;ldquo;TeamsAdminCenter&amp;rdquo;: {&lt;br&gt;
&amp;ldquo;Description&amp;rdquo;: &amp;ldquo;Teams Admin Center&amp;rdquo;,&lt;br&gt;
&amp;ldquo;Url&amp;rdquo;: &amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;https://admin.teams.microsoft.com/users/@%7btriggerOutputs%28%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://admin.teams.microsoft.com/users/@{triggerOutputs()&lt;/a&gt;?[&amp;lsquo;body/UserId&amp;rsquo;]}/account&amp;rdquo;&lt;br&gt;
}&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;Again, make sure to adjust the list name to your own. There is no space or any other character between the end of the list name and &lt;code&gt;ListItem&lt;/code&gt; . All spaces in the list name must be replaced by &lt;code&gt;_x0020_&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1cfiipG861HDIM3jYlRBIVA.png&#34;
	width=&#34;964&#34;
	height=&#34;1381&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1cfiipG861HDIM3jYlRBIVA_huee58fc0d2a636fd9419588ff587f7505_83283_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1cfiipG861HDIM3jYlRBIVA_huee58fc0d2a636fd9419588ff587f7505_83283_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;69&#34;
		data-flex-basis=&#34;167px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you look at the trigger condition again, you might have noticed that the field names like &lt;strong&gt;User Principal Name&lt;/strong&gt; are all written like this: &lt;strong&gt;User_x0020_Principal_x0020_Name.&lt;/strong&gt; I noticed that all columns which contain spaces and have been created via the Graph API are named this way. &lt;strong&gt;Teams Admin Center&lt;/strong&gt; on the other hand has been created manually via SharePoint Online. This column&amp;rsquo;s reference name is now &lt;strong&gt;TeamsAdminCenter&lt;/strong&gt; as you can see in the screenshot above.&lt;/p&gt;
&lt;p&gt;That’s it, we finished building our flow. For reference, here’s the complete layout of the flow without expanded actions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/131pEBoBjwrnmLnXAWpI1fw.png&#34;
	width=&#34;3004&#34;
	height=&#34;1558&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/131pEBoBjwrnmLnXAWpI1fw_hu7aeeac62750bb20375af98e0e111d835_106587_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/131pEBoBjwrnmLnXAWpI1fw_hu7aeeac62750bb20375af98e0e111d835_106587_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;462px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;force-sync-thelist&#34;&gt;Force Sync the List&lt;/h3&gt;
&lt;p&gt;The only problem now is that it won’t be triggered unless the &lt;strong&gt;User Principal Name&lt;/strong&gt; field changes on any of the list entries. The easiest way to get these fields populated is to just delete all list entries of assigned user numbers and re-run the Runbook.&lt;/p&gt;
&lt;p&gt;Filter the list by &lt;strong&gt;Assigned&lt;/strong&gt; numbers and Account Type: &lt;strong&gt;User Account&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1oy8uFABozWsg4AIlK3vuaA.png&#34;
	width=&#34;2748&#34;
	height=&#34;410&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1oy8uFABozWsg4AIlK3vuaA_hud1c1b60302d8b734a997054638b5a68a_79803_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1oy8uFABozWsg4AIlK3vuaA_hud1c1b60302d8b734a997054638b5a68a_79803_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;670&#34;
		data-flex-basis=&#34;1608px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Then delete all the entries and wait for the action to complete.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1MlCWdIO1Y8DSyWObydkRFw.png&#34;
	width=&#34;955&#34;
	height=&#34;530&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1MlCWdIO1Y8DSyWObydkRFw_hu641abeaa27804cb29b86fe014cbe6cf3_52230_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1MlCWdIO1Y8DSyWObydkRFw_hu641abeaa27804cb29b86fe014cbe6cf3_52230_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;180&#34;
		data-flex-basis=&#34;432px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now start the Runbook again or wait for the next scheduled job. Once the job has completed, wait another few minutes for the flow to be triggered.&lt;/p&gt;
&lt;p&gt;In the flow’s run history, you should then be able to see a couple of successful flow runs. One for each assigned user number which was previously deleted from the list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1f5SBjLNb00UmmWwtZCQ.png&#34;
	width=&#34;1604&#34;
	height=&#34;360&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1f5SBjLNb00UmmWwtZCQ_huecbb5e49e02e4589508e8f4ffbd43d68_34977_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1f5SBjLNb00UmmWwtZCQ_huecbb5e49e02e4589508e8f4ffbd43d68_34977_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;445&#34;
		data-flex-basis=&#34;1069px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In the details of the flow run, we can see that both the item was updated, and that the HTTP request was made to SharePoint.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1Gf3bQf6h3rT6dZtQNarGw.png&#34;
	width=&#34;2995&#34;
	height=&#34;1322&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1Gf3bQf6h3rT6dZtQNarGw_hu0d801e35b977adb82a7ffaa5f319f792_97976_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1Gf3bQf6h3rT6dZtQNarGw_hu0d801e35b977adb82a7ffaa5f319f792_97976_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;226&#34;
		data-flex-basis=&#34;543px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In our SharePoint List, we can now see that both the &lt;strong&gt;User Profile&lt;/strong&gt; and the link to &lt;strong&gt;Teams Admin Center&lt;/strong&gt; have been populated.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1cBT73cmZmnoEZNRofNOWaQ.png&#34;
	width=&#34;2750&#34;
	height=&#34;393&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1cBT73cmZmnoEZNRofNOWaQ_hu458daf52d3eafbd5170c374a9113cf06_103598_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1cBT73cmZmnoEZNRofNOWaQ_hu458daf52d3eafbd5170c374a9113cf06_103598_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;699&#34;
		data-flex-basis=&#34;1679px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;updating-the-direct-routing-numbers-inazure&#34;&gt;Updating the Direct Routing Numbers in Azure&lt;/h4&gt;
&lt;p&gt;Chances are that you’re going to have more/new Direct Routing numbers at some point. For that scenario, I created another script in &lt;code&gt;.\Setup\UpdateDirectRoutingNumbers.ps1&lt;/code&gt; . This script will compare the contents of the local &lt;strong&gt;DirectRoutingNumbers.csv&lt;/strong&gt; with what’s stored in the Azure Automation Variable. If the content is not the same, the script will &lt;strong&gt;overwrite&lt;/strong&gt; the content of the Automation Variable with your new local source list. This means that you will always need to include all your Direct Routing numbers in the local CSV file, not just new numbers. If you remove numbers from the local source, they will also be removed from the Automation Variable. Hopefully, you won’t have to do this too often.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Setup/UpdateDirectRoutingNumbers.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TeamsPhoneAutomation/UpdateDirectRoutingNumbers.ps1 at main · mozziemozz/TeamsPhoneAutomation (github.com)&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;While this may be a read-only solution and it doesn’t have any management capabilities such as assigning or unassigning phone numbers, I still believe that there’s tremendous value in this. I think that this could be an interesting approach for smaller companies or non-profit organizations which might not have the cash to purchase an expensive number management solution. The costs for running a Runbook job every now and then should be fairly low. According to &lt;a class=&#34;link&#34; href=&#34;https://azure.microsoft.com/en-us/pricing/details/automation/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this website&lt;/a&gt; 500 minutes of Job run time is free every month.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/109Skrvola5ZGSYdJONlA.png&#34;
	width=&#34;1952&#34;
	height=&#34;656&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/109Skrvola5ZGSYdJONlA_hud6241f152cc770c163679069d97c666e_88599_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/109Skrvola5ZGSYdJONlA_hud6241f152cc770c163679069d97c666e_88599_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;297&#34;
		data-flex-basis=&#34;714px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Of course, this depends on the amount of numbers you have. The more numbers you have, the longer it will take for a job to complete. If we assume that each job requires 5 minutes to run, that would be about $ 6.5 per month if the job runs every hour every day of a month.&lt;/p&gt;
&lt;p&gt;With this, we can finally have a complete, dynamically updated list of all our phone numbers and their state regarding their type. On top of that, we can make it accessible easily for all users or admins who need to work with this kind of information. For example, we could also add the list as a Tab in a Microsoft Teams Channel.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1pmmbdHeT9HfnoslqhEkrQ.png&#34;
	width=&#34;3454&#34;
	height=&#34;1117&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1pmmbdHeT9HfnoslqhEkrQ_hu4d03e0a432415dc17142e994a94873b9_384663_480x0_resize_box_3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1pmmbdHeT9HfnoslqhEkrQ_hu4d03e0a432415dc17142e994a94873b9_384663_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;309&#34;
		data-flex-basis=&#34;742px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;final-notes&#34;&gt;Final Notes&lt;/h4&gt;
&lt;p&gt;I invested a lot of time to perfect this project and I’m incredibly happy to be finally able to share it with the community and my readers on Medium. I tested both the deployment to Azure and the Runbook logic quite a few times so I’m fairly confident that this should work in other Tenants as well. Since I don’t have any Operator Connect numbers available, I couldn’t test that yet. If you are an Operator Connect customer and want to try this solution, feel free to let me know if it worked for you.&lt;/p&gt;
&lt;p&gt;I mainly tested populating and updating the list with about forty numbers of mixed types. I did make some quick tests (and adjustments) with a list of about 1000 Direct Routing numbers and that has worked well for me so far. If you manage a lot of phone numbers and want to try the solution yourself, I’m also happy if you can provide feedback on how it performs with even more numbers.&lt;/p&gt;
&lt;p&gt;As always, I hope you like what I’ve been up to!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Fix UTF-8 Encoding When Calling Azure Child Runbooks Inline</title>
        <link>https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/</link>
        <pubDate>Fri, 03 Mar 2023 10:03:56 +0000</pubDate>
        
        <guid>https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/</guid>
        <description>&lt;p&gt;I recently came across a very strange issue with Azure Runbooks and UTF-8 encoding. For most IT folks, it’s no issue if everything is in English but if you work with German speaking users, chances are that you’re going to run into encoding issues with &lt;strong&gt;Umlaute&lt;/strong&gt; or other special characters eventually. For those who have no idea what I’m talking about, Umlaute are special characters like “ä”, “ö” and “ü” which are used very frequently in German.&lt;/p&gt;
&lt;p&gt;The scenario is the following: I have a very simple Azure Runbook which sends a message card to a Teams channel.&lt;/p&gt;
&lt;p&gt;$uri = &amp;ldquo;YourWebhookUrl&amp;rdquo;&lt;/p&gt;
&lt;p&gt;$body = @&amp;rsquo;&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;@context&amp;rdquo;: &amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;https://schema.org/extensions%22&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://schema.org/extensions&#34;&lt;/a&gt;,&lt;br&gt;
&amp;ldquo;@type&amp;rdquo;: &amp;ldquo;MessageCard&amp;rdquo;,&lt;br&gt;
&amp;ldquo;themeColor&amp;rdquo;: &amp;ldquo;00A4EF&amp;rdquo;,&lt;br&gt;
&amp;ldquo;title&amp;rdquo;: &amp;ldquo;UTF8 Test&amp;rdquo;,&lt;br&gt;
&amp;ldquo;text&amp;rdquo;: &amp;ldquo;Hello Wörld!&amp;rdquo;&lt;br&gt;
}&lt;br&gt;
&amp;lsquo;@&lt;/p&gt;
&lt;p&gt;Invoke-RestMethod -uri $uri -Method Post -body $body -ContentType &amp;lsquo;application/json; charset=UTF-8&amp;rsquo;&lt;/p&gt;
&lt;p&gt;As you can see, I purposely wrote &lt;strong&gt;“Hello Wörld”&lt;/strong&gt; instead of &lt;strong&gt;“Hello World”&lt;/strong&gt; to demonstrate this. If the runbook is run directly (meaning, there’s no child runbook involved), there’s no issue at all and the card is sent to Teams using the correct encoding.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1Fjfq1GaXyavb7ynoRqqpg.png&#34;
	width=&#34;1209&#34;
	height=&#34;242&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1Fjfq1GaXyavb7ynoRqqpg_hu2389b36a857bb99be532f7e70b9eb792_19981_480x0_resize_box_3.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1Fjfq1GaXyavb7ynoRqqpg_hu2389b36a857bb99be532f7e70b9eb792_19981_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;499&#34;
		data-flex-basis=&#34;1199px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;working-with-childrunbooks&#34;&gt;Working With Child Runbooks&lt;/h4&gt;
&lt;p&gt;So far so good. In more complex scenarios, you might want to build modular runbooks. An example of that would be where you have some code and some parameters in one runbook (let’s call that &lt;strong&gt;main runbook&lt;/strong&gt; or &lt;strong&gt;child runbook&lt;/strong&gt;) and have a couple of other runbooks which call your main runbook inline. Let’s call these &lt;strong&gt;runner scripts&lt;/strong&gt; because they’re only used to run the main runbook.&lt;/p&gt;
&lt;p&gt;The advantage of such a setup is that you only need to change the code in one place if you need to update it. For example, if the URL of the webhook changes, we only need to edit the main runbook instead of all the other runbooks as well. You can also read more about that concept in this official Microsoft &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/azure/automation/automation-child-runbooks#call-a-child-runbook-by-using-inline-execution&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Learn article&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;wrong-encoding-in-childrunbooks&#34;&gt;Wrong Encoding in Child Runbooks&lt;/h4&gt;
&lt;p&gt;However, I have found that somehow the encoding gets messed up and special characters are sent to Teams in the wrong format if a child runbook is called inline from another runbook which runs in front of it.&lt;/p&gt;
&lt;p&gt;If you want to call another runbook from any runbook in the same automation account, you can just reference it by its name. All that’s needed is the following code which really just points to another script. Note that you do need to add &lt;code&gt;.ps1&lt;/code&gt; at the end of your runbook name.&lt;/p&gt;
&lt;p&gt;. .\SendMessageCardMain.ps1&lt;/p&gt;
&lt;p&gt;It doesn’t make any difference if &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/scripting/learn/ps101/10-script-modules?view=powershell-7.3&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;dot sourcing&lt;/a&gt; is used or not. The encoding will be wrong in either case.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1RIQJDWuX87n08U80GxZBlw.png&#34;
	width=&#34;1213&#34;
	height=&#34;241&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1RIQJDWuX87n08U80GxZBlw_hud6f048997161982e95b0c549bee3f3fc_19854_480x0_resize_box_3.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1RIQJDWuX87n08U80GxZBlw_hud6f048997161982e95b0c549bee3f3fc_19854_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;503&#34;
		data-flex-basis=&#34;1207px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This isn’t just about the message which is sent to Teams through a web request. The encoding is wrong in general and thus when using &lt;code&gt;Write-Output&lt;/code&gt; as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1RxMMGmOGbr82SmAmzuh3cg.png&#34;
	width=&#34;1414&#34;
	height=&#34;493&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1RxMMGmOGbr82SmAmzuh3cg_hu15d783e8232fb13d93ba5f80564cf0f1_52876_480x0_resize_box_3.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1RxMMGmOGbr82SmAmzuh3cg_hu15d783e8232fb13d93ba5f80564cf0f1_52876_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;286&#34;
		data-flex-basis=&#34;688px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;workaround&#34;&gt;Workaround&lt;/h4&gt;
&lt;p&gt;The trick is to store the special characters inside a variable which is already known to the runner script (the one which will be submitted to the worker), and then calls the child runbook.&lt;/p&gt;
&lt;p&gt;$externalText = &amp;ldquo;Wörld&amp;rdquo;&lt;/p&gt;
&lt;p&gt;. .\SendMessageCardMain.ps1&lt;/p&gt;
&lt;p&gt;The word which contains the special character is replaced by the variable in the main script (child runbook).&lt;/p&gt;
&lt;p&gt;$uri = &amp;ldquo;YourWebhookUrl&amp;rdquo;&lt;/p&gt;
&lt;p&gt;$body = @&amp;rdquo;&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;@context&amp;rdquo;: &amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;https://schema.org/extensions%22&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://schema.org/extensions&#34;&lt;/a&gt;,&lt;br&gt;
&amp;ldquo;@type&amp;rdquo;: &amp;ldquo;MessageCard&amp;rdquo;,&lt;br&gt;
&amp;ldquo;themeColor&amp;rdquo;: &amp;ldquo;00A4EF&amp;rdquo;,&lt;br&gt;
&amp;ldquo;title&amp;rdquo;: &amp;ldquo;UTF8 Test&amp;rdquo;,&lt;br&gt;
&amp;ldquo;text&amp;rdquo;: &amp;ldquo;Hello $externalText!&amp;rdquo;&lt;br&gt;
}&lt;br&gt;
&amp;ldquo;@&lt;/p&gt;
&lt;p&gt;Invoke-RestMethod -uri $uri -Method Post -body $body -ContentType &amp;lsquo;application/json; charset=UTF-8&amp;rsquo;&lt;/p&gt;
&lt;p&gt;This way, the first runbook already knows the correct encoding and it works, just like it did in the first example where we only had one runbook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1SrfMmL5MqVyJJMuygMjA.png&#34;
	width=&#34;1211&#34;
	height=&#34;240&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1SrfMmL5MqVyJJMuygMjA_hu45160f263fc81e753c1b7fe7beb662f6_19457_480x0_resize_box_3.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1SrfMmL5MqVyJJMuygMjA_hu45160f263fc81e753c1b7fe7beb662f6_19457_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;504&#34;
		data-flex-basis=&#34;1211px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Let’s assume that we have one main runbook which will just send Message Cards to Teams, but we also have many different runner scripts which will send different kind of messages to Teams.&lt;/p&gt;
&lt;p&gt;This would make the code quite hard to maintain. Imagine if we want to replace the word “Wörld” with “Zürich” for example. We’d have to do this for each runner script if the variable is stored inside each runner script.&lt;/p&gt;
&lt;h4 id=&#34;optimized-workaround-1-using-automation-variables&#34;&gt;Optimized Workaround 1 (Using Automation Variables)&lt;/h4&gt;
&lt;p&gt;Instead, we can just put the code into an Automation Variable as a string. Automation Variables are saved inside the Automation Account but outside of all the runbooks. This effectively gives us a location to store the code once but all runbooks inside that Automation Account will be able to access it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1MUKW9TSOMNz1gnnQcKeQyA.png&#34;
	width=&#34;1681&#34;
	height=&#34;597&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1MUKW9TSOMNz1gnnQcKeQyA_hu6c149f511d2e218ad9a2932b08658834_73454_480x0_resize_box_3.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1MUKW9TSOMNz1gnnQcKeQyA_hu6c149f511d2e218ad9a2932b08658834_73454_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;281&#34;
		data-flex-basis=&#34;675px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In the runner script, we import the Automation Variable using the &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/azure/automation/shared-resources/variables?tabs=azure-powershell#internal-cmdlets-to-access-variables&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;internal Cmdlet&lt;/a&gt;. This is only available in Azure Runbooks and does not require additional authentication.&lt;/p&gt;
&lt;p&gt;$AutomationVariableCode = Get-AutomationVariable -Name &amp;ldquo;AutomationVariableCode&amp;rdquo; | Out-String&lt;br&gt;
Invoke-Expression $AutomationVariableCode&lt;/p&gt;
&lt;p&gt;. .\SendMessageCardMain.ps1&lt;/p&gt;
&lt;p&gt;There’s no mention of &lt;code&gt;$externalText&lt;/code&gt; inside the runbook but it’s set by &lt;code&gt;Invoke-Expression&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;This allows us to change the value of the variable without touching any of our runner scripts which makes it a lot more scalable and easier to maintain while keeping the correct encoding.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1SRNRxJrIZunrddwFIRVKRg.png&#34;
	width=&#34;1214&#34;
	height=&#34;241&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1SRNRxJrIZunrddwFIRVKRg_hu8b3b51bfdb1e43759be90108b6052381_19163_480x0_resize_box_3.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1SRNRxJrIZunrddwFIRVKRg_hu8b3b51bfdb1e43759be90108b6052381_19163_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;503&#34;
		data-flex-basis=&#34;1208px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Of course, the Automation Variable could also contain more complex code like a switch statement to define different messages or contain the same message in different language. For demonstration purposes, I kept it simple by just using a single value variable.&lt;/p&gt;
&lt;p&gt;On the downside, this makes editing the code complicated and error prone, since it’s just a string stored inside a variable without any kind of syntax checking. To tackle that issue, one would need to copy it to a local IDE (e.g. VS Code) each time the code is updated and paste it back into the Automation Variable once it’s done.&lt;/p&gt;
&lt;h4 id=&#34;optimized-workaround-2-using-powershell-runbooks&#34;&gt;Optimized Workaround 2 (Using PowerShell Runbooks)&lt;/h4&gt;
&lt;p&gt;What about storing the code in yet another runbook? This would allow for easier editing and testing right in the browser. But is it possible&amp;hellip;? As it turns out, it is!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1KEZF0gbmFG0gzNvtYMRrg.png&#34;
	width=&#34;2017&#34;
	height=&#34;351&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1KEZF0gbmFG0gzNvtYMRrg_hu2a51af41989ae94ed83dbea73120f83b_54690_480x0_resize_box_3.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1KEZF0gbmFG0gzNvtYMRrg_hu2a51af41989ae94ed83dbea73120f83b_54690_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;574&#34;
		data-flex-basis=&#34;1379px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1wqc76iVn3V2GHxNTOx8w.png&#34;
	width=&#34;884&#34;
	height=&#34;322&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1wqc76iVn3V2GHxNTOx8w_hub09539a59abe0a04ef28a513330bb611_30076_480x0_resize_box_3.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1wqc76iVn3V2GHxNTOx8w_hub09539a59abe0a04ef28a513330bb611_30076_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;274&#34;
		data-flex-basis=&#34;658px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;To be able to get the contents/code of what I call the &lt;strong&gt;content runbook&lt;/strong&gt; we need to make sure that the modules &lt;strong&gt;Az.Accounts&lt;/strong&gt; and &lt;strong&gt;Az.Automation&lt;/strong&gt; are installed in our Automation Account.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1azPWChNsXyf25OJAqcoOgQ.png&#34;
	width=&#34;2792&#34;
	height=&#34;387&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1azPWChNsXyf25OJAqcoOgQ_hue02207f345e4bba16a99b3f5688f077c_94035_480x0_resize_box_3.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1azPWChNsXyf25OJAqcoOgQ_hue02207f345e4bba16a99b3f5688f077c_94035_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;721&#34;
		data-flex-basis=&#34;1731px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1sZzUKlvhywLqZQhTFgIQwg.png&#34;
	width=&#34;3195&#34;
	height=&#34;390&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1sZzUKlvhywLqZQhTFgIQwg_hua65cc6657ecb27813df0306c4d75337b_96080_480x0_resize_box_3.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1sZzUKlvhywLqZQhTFgIQwg_hua65cc6657ecb27813df0306c4d75337b_96080_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;819&#34;
		data-flex-basis=&#34;1966px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;We also need a &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Managed Identity&lt;/a&gt; to connect to Azure since we’ll be using regular&lt;code&gt;Az*&lt;/code&gt; Cmdlets and not internal ones this time around.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1mXMuUMBFEAyxBk9gH7Ad5A.png&#34;
	width=&#34;2304&#34;
	height=&#34;1296&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1mXMuUMBFEAyxBk9gH7Ad5A_hu7de99e6d55624db6c632667f69153bad_197090_480x0_resize_box_3.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1mXMuUMBFEAyxBk9gH7Ad5A_hu7de99e6d55624db6c632667f69153bad_197090_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Let’s add a little more code to our runner script. My Tenant Id is also stored inside an Automation Variable, thus it’s not visible in the code.&lt;/p&gt;
&lt;p&gt;$tenantId = Get-AutomationVariable -Name &amp;ldquo;tenantId&amp;rdquo;&lt;br&gt;
$azAccount = Connect-AzAccount -Identity -TenantId $tenantId&lt;/p&gt;
&lt;p&gt;$exportRb = Export-AzAutomationRunbook -AutomationAccountName &amp;ldquo;mzz-automation-account-001&amp;rdquo; -ResourceGroupName &amp;ldquo;mzz-rmg-001&amp;rdquo; -Name &amp;ldquo;SendMessageCardContent&amp;rdquo; -OutputFolder $env:temp&lt;/p&gt;
&lt;p&gt;Get-Content -Path $env:temp\$exportRb -Encoding UTF8 | Out-String | Invoke-Expression&lt;/p&gt;
&lt;p&gt;. .\SendMessageCardMain.ps1&lt;/p&gt;
&lt;p&gt;With a Managed Identity, we don’t need to provide any kind of additional authentication. Everything is handled by the Automation Account using the Managed Identity automatically. We only need to provide &lt;code&gt;Connect-AzAccount -Identity -TenantId $tenantId&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;We then export the runbook using &lt;code&gt;Export-AzAutomationRunbook&lt;/code&gt; to &lt;code&gt;$env:temp&lt;/code&gt;. Finally, we import the runbook’s content by using &lt;code&gt;Get-Content&lt;/code&gt; and execute its code by piping it through to &lt;code&gt;Invoke-Expression&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;In case I have lost you at this point, let’s recap very briefly.&lt;/p&gt;
&lt;p&gt;By using &lt;code&gt;Invoke-Expression&lt;/code&gt; instead of calling the runbook inline, we make sure that the externally stored code is running in the scope of the runner script and not the child runbook, which will keep the encoding intact.&lt;/p&gt;
&lt;p&gt;And we’re jumping through hoops here by storing the values of the variables in another runbook so that they can be updated without touching each of our runner scripts. If it helps, you can also think about a scenario where you’re hosting some kind of monitoring or reporting solution for different customers inside your own Tenant/Automation Account. Each customer has its own runner script with their own parameters but there’s only one main runbook which contains all the code.&lt;/p&gt;
&lt;p&gt;If we need to update the script logic, only the main runbook needs to be updated. If we need to make changes to the content of the messages, only the runbook storing these values needs to be updated.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1mg0Nja4e5HPo9HbQPgQnA.png&#34;
	width=&#34;1219&#34;
	height=&#34;244&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1mg0Nja4e5HPo9HbQPgQnA_hu71dafa5ebc1478b4d18648e55377df12_19662_480x0_resize_box_3.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1mg0Nja4e5HPo9HbQPgQnA_hu71dafa5ebc1478b4d18648e55377df12_19662_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;499&#34;
		data-flex-basis=&#34;1199px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now let’s change the word inside the runbook to something else. Instead of editing an Automation Variable, we can just edit the runbook, which is a lot more user friendly.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1NTgYp7gxGHjy3GN4wNJwMA.png&#34;
	width=&#34;2019&#34;
	height=&#34;345&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1NTgYp7gxGHjy3GN4wNJwMA_hu5cbe687375d076b63fe22f93d47eaec6_54546_480x0_resize_box_3.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1NTgYp7gxGHjy3GN4wNJwMA_hu5cbe687375d076b63fe22f93d47eaec6_54546_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;585&#34;
		data-flex-basis=&#34;1404px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Don’t forget to publish the runbook. Otherwise, the values won’t be updated. As expected, this works like a charm.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1jYFSVZTopjDmtqdrmufrQ.png&#34;
	width=&#34;1217&#34;
	height=&#34;240&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1jYFSVZTopjDmtqdrmufrQ_hu11dd0bea12e3be0cc4551ed15c9e7668_19356_480x0_resize_box_3.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1jYFSVZTopjDmtqdrmufrQ_hu11dd0bea12e3be0cc4551ed15c9e7668_19356_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;507&#34;
		data-flex-basis=&#34;1217px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If for some reason you don’t want to read your variables into memory in the runner script and do it in the child runbook instead, you can also use the &lt;code&gt;Invoke-Expression&lt;/code&gt; method from there. This works as well, even if the child runbook is called inline by another runbook and the runner script doesn’t have any reference to the special character variables at all.&lt;/p&gt;
&lt;p&gt;I have no idea why it doesn’t work if special characters are included explicitly in child runbooks though. And it took me quite some time to figure out a workaround for this. I hope that this article is useful to you, if you’ve been struggling with modular runbooks and encoding issues as well.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Automatically Notify Users to Update Teams Holidays for Next Year</title>
        <link>https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/</link>
        <pubDate>Wed, 07 Sep 2022 10:19:11 +0000</pubDate>
        
        <guid>https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/</guid>
        <description>&lt;p&gt;In my last few articles, I’ve talked about building Teams Phone self-service solutions for end users. The reason one might want to do this is quite obvious: We don’t want to give users access to Teams Admin Center but as engineers, we don’t want to take on tedious tasks like updating an Auto Attendant’s Holiday list either.&lt;/p&gt;
&lt;p&gt;Even though pretty much everything that can be configured in TAC, including managing Holidays can be scripted with PowerShell, Holidays still require a fixed date and time range and can’t be renewed automatically or fetched from an external source. This results in a considerable administrative overhead for both Teams admins and end users.&lt;/p&gt;
&lt;p&gt;When I need to configure Teams Holidays, I always ask users to provide a list where each holiday is noted &lt;strong&gt;with an explicit date&lt;/strong&gt;. I’m not going to do the work for them and go look up when exactly a Holiday takes place next year. (For Holidays which don’t have a fixed date at least.) I’ve seen some lazy users try to take a shortcut and tell me to just add “all lawful Bank Holidays” of Country/State/Canton XY. Unfortunately, that’s not how it works my dear users. I’d spend hours looking up this stuff and probably still end up with some wrong dates anyway. That’s why I set out and created a better solution. /rant&lt;/p&gt;
&lt;p&gt;In this article, I’m going to show you a solution where the whole process of &lt;strong&gt;maintaining&lt;/strong&gt; a Holiday List can be outsourced to end users. Admins only need to set up Holidays &lt;strong&gt;once&lt;/strong&gt; initially.&lt;/p&gt;
&lt;h4 id=&#34;recap&#34;&gt;Recap&lt;/h4&gt;
&lt;p&gt;Before we dive in, let’s recap what I’ve published in my last articles to give you some context on Teams self-service solutions using Azure Automation and Adaptive Cards.&lt;/p&gt;
&lt;p&gt;It all began with &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851?source=user_profile---------11----------------------------&#34; &gt;this article&lt;/a&gt; where I wrote about my take on a self-service solution which lets users manually open or close an Auto Attendant. This solution builds on the work of Microsoft MVPs which are linked in the original article.&lt;/p&gt;
&lt;p&gt;I then went on and published &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-self-service-call-queue-solution-part-2-ab8201157831&#34; &gt;this piece&lt;/a&gt; which uses the same principle but lets users enable or disable immediate forwarding to an external number or update the external forwarding target number on a Call Queue.&lt;/p&gt;
&lt;p&gt;We can use these examples and build on them to create something similar for Auto Attendant Holidays.&lt;/p&gt;
&lt;h4 id=&#34;how-does-itwork&#34;&gt;How Does it Work?&lt;/h4&gt;
&lt;p&gt;It’s important to understand that there needs to be an existing, initial configuration in your Tenant. This means that you as a Teams Phone admin need to sit down with the person in charge of the reception phone or whoever oversees Holidays at your company. You then need to configure either a single or multiple Holiday lists in TAC and link them to each Auto Attendant, where they’re required.&lt;/p&gt;
&lt;p&gt;My solution currently doesn’t have an option to allow users to add new Holidays to a list. When a new Holiday needs to be added, users must still request the change at IT. After it has been added to the list, there’s no additional work required for the new Holiday to also support user self-serviced updating.&lt;/p&gt;
&lt;p&gt;I created an Azure Runbook which runs on a schedule. I suppose running it weekly will suffice. If you wish, you can even run it daily. The script checks if the difference between the &lt;strong&gt;run time of the Job&lt;/strong&gt; and the &lt;strong&gt;end date&lt;/strong&gt; of a Holiday is bigger than 24 hours. This is because Holiday dates/lists itself don’t have a time zone property. But Auto Attendants do have a time zone setting, thus, we need to make sure that a Holiday is not updated/deleted before the Holiday would end in an Attendant specific time zone. A buffer of 24 hours should work well considering that the largest UTC offset is +14 hours.&lt;/p&gt;
&lt;p&gt;When the script runs, it will send a Teams Message Card to a Channel for each Holiday which now lies in the past. (Even though they are technically &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/outlook/actionable-messages/message-card-reference&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Legacy Actionable Message Cards&lt;/a&gt; I will just refer to them as &lt;a class=&#34;link&#34; href=&#34;https://adaptivecards.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Adaptive Cards&lt;/a&gt; from now on.)&lt;/p&gt;
&lt;p&gt;Members of the channel will be able to see the dates, the name of the Holiday schedule as well as all linked Auto Attendants on the Adaptive Card. Furthermore, the script will add one year to the current dates and pre-fill the dates of next year as a suggested value in the date picker.&lt;/p&gt;
&lt;p&gt;Because we’re using Adaptive Cards, the date format will automatically adjust to the Teams Clients display language. In this example, the Teams Client was set to German (Switzerland).&lt;/p&gt;
&lt;p&gt;Members can then review and accept the new dates or change them in case a Holiday falls on a different day next year.&lt;/p&gt;
&lt;p&gt;If needed, they can also configure a start or end time, if for example, a Holiday only starts at noon.&lt;/p&gt;
&lt;p&gt;Finally, they will need to select their local time zone. This is due to the fact that the Adaptive Card will submit the date and time based on the time zone which is configured on the local PC where Teams is running.&lt;/p&gt;
&lt;p&gt;In early testing stages of this solution, “00:00” was always passed to the Azure Function as “23:00” because I live in UTC-1. Without this information the Function wouldn’t be able to do its magic and convert it back to the correct date.&lt;/p&gt;
&lt;p&gt;I’ve included all time zones which are supported on Windows Systems.&lt;/p&gt;
&lt;p&gt;Now all a user needs to do is to click “Submit New Dates”. This will pass all the information to an Azure Function, Update the card, and fire up the Runbook.&lt;/p&gt;
&lt;p&gt;In other words, users won’t need to bother you to update their Holidays anymore. After each time a Holiday has passed, they will get a card which allows them to update it for next year by themselves.&lt;/p&gt;
&lt;h4 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h4&gt;
&lt;p&gt;Just as with my previous articles you need to have the following things ready in Azure.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An Azure Function App so that we can create a new Function&lt;/li&gt;
&lt;li&gt;An Azure Automation Account so we can create 2x new Runbooks&lt;/li&gt;
&lt;li&gt;Azure Automation Credentials with Teams Administrator Permissions&lt;/li&gt;
&lt;li&gt;An Incoming Teams Webhook&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you struggle to set up any of these, I recommend reading my &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851?source=user_profile---------11----------------------------&#34; &gt;first article&lt;/a&gt; about this topic. I also suggest creating a dedicated Teams Channel where the webhook will be added. More on that later.&lt;/p&gt;
&lt;h4 id=&#34;azure-runbook-checkholidayschedules&#34;&gt;Azure Runbook: CheckHolidaySchedules&lt;/h4&gt;
&lt;p&gt;Let’s create the first Runbook. This will be the one which logs into Teams PowerShell and checks if there are any Holidays which already lie in the past compared to the time of the Runbook Job.&lt;/p&gt;
&lt;p&gt;Enter your &lt;code&gt;$teamsWebhookUrl&lt;/code&gt; on line 2. If you like, you can change the &lt;code&gt;$defaultLocalTimeZone&lt;/code&gt; on line 3 to the time zone where most of your users are located. Make sure you also adjust the name of your Credential if yours has a different name.&lt;/p&gt;
&lt;p&gt;Leave the &lt;code&gt;$functionUrl&lt;/code&gt; empty for now since we don’t have that one yet.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/76a5f782a129ff06c6093158f1b81004.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Save and publish the Runbook. Don’t forget to add a schedule to the Runbook. If you need a reminder on how to do that, please see &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/automatically-enable-overflow-action-on-call-queues-if-no-agents-are-opted-in-f1c9bea7cb87&#34; &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;azure-runbook-updateholidayschedules&#34;&gt;Azure Runbook: UpdateHolidaySchedules&lt;/h4&gt;
&lt;p&gt;This Runbook will receive all the information a user has entered on the Adaptive Card. Because we also want to update the card, but Runbooks don’t support that, we will pass all the information from the card to the Function first. This includes the old date time range (so the script knows which one needs to be replaced), the newly entered dates and the time zone of the user.&lt;/p&gt;
&lt;p&gt;The Function will then pass the data to the Runbook. Because the script now has both the old and new dates, it will be able to remove the old values and add the new ones to the Holiday schedule.&lt;/p&gt;
&lt;p&gt;Paste your Teams Webhook URL on line 7 before you save.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/d871770b0f9c477d765f5ff2f391c03e.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;To be able to call this Runbook from the Function, we’ll need to add a Webhook trigger to it as it’s described &lt;a class=&#34;link&#34; href=&#34;https://www.bing.com/search?q=azure&amp;#43;runbook&amp;#43;webhook&amp;#43;docs&amp;amp;form=ANNTH1&amp;amp;refig=f6e9976ff1de4f9baa308faa7c1bbdd2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. Before you click Create, copy its URL.&lt;/p&gt;
&lt;h4 id=&#34;azure-function-updatecardandtriggerrunbook&#34;&gt;Azure Function: UpdateCardAndTriggerRunbook&lt;/h4&gt;
&lt;p&gt;Now we can create the Function. Set &lt;code&gt;$runBookUrl&lt;/code&gt; to the Runbook’s webhook URL on line 6 and save the Function.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/01ab601212a7bb42dc5b8257f91b8f30.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;For the last step, we need to copy the URL of the Function and go back to our first Runbook “CheckHolidaySchedules”.&lt;/p&gt;
&lt;h4 id=&#34;runbook-checkholidayschedules-again&#34;&gt;Runbook CheckHolidaySchedules (Again)&lt;/h4&gt;
&lt;p&gt;Edit the Runbook and set the &lt;code&gt;$functionUrl&lt;/code&gt; variable to the copied Function URL on line 1. Save and Publish the Runbook again.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1GR5EyFfJfYB6i4K3scmjeg.png&#34;
	width=&#34;1055&#34;
	height=&#34;42&#34;
	srcset=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1GR5EyFfJfYB6i4K3scmjeg_hua1b9b88479cb1e8fbcfaceadd9d189b9_2290_480x0_resize_box_3.png 480w, https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1GR5EyFfJfYB6i4K3scmjeg_hua1b9b88479cb1e8fbcfaceadd9d189b9_2290_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;2511&#34;
		data-flex-basis=&#34;6028px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;test-drive&#34;&gt;Test Drive&lt;/h4&gt;
&lt;p&gt;During normal operation, we would need to wait for a Holiday to be over before anything happens. In our case, we can test by manually starting the Runbook.&lt;/p&gt;
&lt;p&gt;After a few seconds, we should start seeing some new Adaptive Cards in our channel. Keep in mind that triggering the Runbook for the first time will post a card for each Holiday which has already passed. We can also see which Auto Attendants are affected on the card.&lt;/p&gt;
&lt;p&gt;After new dates have been submitted by a user, the Function will update the card.&lt;/p&gt;
&lt;p&gt;As soon as the Runbook has finished, it will post another card to the channel to confirm that the Holiday has been renewed for next year. For review purposes both the old and new dates are included. If anybody made a mistake, they could still contact IT to manually fix the dates.&lt;/p&gt;
&lt;p&gt;If we switch to the Holiday list in TAC, we can see that the Runbook added the new Holiday and removed the old one.&lt;/p&gt;
&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;Out of all the Teams self-service automations I already did, I think that this is actually the coolest one. Not only does it provide a great user experience because everything can be done from within Teams, but it also makes sure nobody forgets to update the company’s Holiday list. No more last-minute support tickets just before you were about to leave for the Christmas break.&lt;/p&gt;
&lt;p&gt;And the best part is that we don’t need to grant any kind of admin permission. The only thing we need to make sure is that only the people who are allowed to update the Holidays have access to the Teams Channel.&lt;/p&gt;
&lt;p&gt;The whole point of using a script to automatically notify us when a Holiday has passed instead of using the &lt;strong&gt;request a change on-demand approach&lt;/strong&gt; like with the other two self-service examples is that nobody forgets about updating the Holidays. To make sure that users don’t miss the Adaptive Cards in Teams, I suggest using a dedicated channel and having them turn on notifications for all activity on said channel.&lt;/p&gt;
&lt;p&gt;By using a dedicated channel for Holiday self-service, we don’t need to force users to turn on all notifications for channels which might have much more activity/trigger too many notifications.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Automatically Enable Overflow Action on Call Queues if No Agents are Opted In</title>
        <link>https://heusser.pro/p/automatically-enable-overflow-action-on-call-queues-if-no-agents-are-opted-in-f1c9bea7cb87/</link>
        <pubDate>Sun, 04 Sep 2022 16:07:25 +0000</pubDate>
        
        <guid>https://heusser.pro/p/automatically-enable-overflow-action-on-call-queues-if-no-agents-are-opted-in-f1c9bea7cb87/</guid>
        <description>&lt;p&gt;One of the biggest pain points of Microsoft Teams Call Queues is that a configured time out is always honored, even if no agents are available to answer the calls. It doesn’t matter if they have opted out, are offline or even if the queue has no agents configured at all. The call will only be forwarded after the timeout has been reached.&lt;/p&gt;
&lt;p&gt;To conquer this issue, I’ve created a small PowerShell script which can be implemented and executed on a schedule as an Azure Runbook.&lt;/p&gt;
&lt;p&gt;The idea is quite simple. The script loops through all Call Queues and checks if there’s at least one agent opted in. If all agents are opted out, the script will set the Queue’s overflow threshold to zero.&lt;/p&gt;
&lt;p&gt;If there’s at least one agent who’s opted in, it will check if the overflow threshold is still zero. If that’s the case, the script will update the overflow threshold to any value you set in the script.&lt;/p&gt;
&lt;p&gt;This means that every time the script detects a Queue where no agents are opted in, the configured overflow action will be active immediately. As soon as the script sees that agents are available again, the immediate overflow action is disabled again.&lt;/p&gt;
&lt;p&gt;I’ve also added a simple alerting mechanism using Teams incoming webhooks. Messages will only be sent when something was changed.&lt;/p&gt;
&lt;h4 id=&#34;azure-runbook-codeexample&#34;&gt;Azure Runbook Code Example&lt;/h4&gt;
&lt;p&gt;Here’s the example code. Please keep in mind that this is in fact only an example. All the Message Cards go into the same Teams Channel because there’s no link between a Queue and a Channel which it might be associated with (e.g., a Voice Enabled Channel). I’m also using the same &lt;code&gt;$defaultOverFlowThreshold&lt;/code&gt; for all Call Queues.&lt;/p&gt;
&lt;p&gt;If you’re not familiar with Azure Runbooks, Automation Credentials and Teams Webhooks, please refer to &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851&#34; &gt;this article&lt;/a&gt;. The steps to create these things are the same.&lt;/p&gt;
&lt;p&gt;Insert your webhook URL on line 3 and make sure that the name of the Automation Credentials matches yours on line 5.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/a5f7245d99e0752410f8d67cc9a63344.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Unless the examples of my previous articles, were the Runbooks were triggered by a webhook, we’ll need to create a schedule for this one. I recommend a schedule which runs every 15 minutes. This should be good enough to cover most scenarios.&lt;/p&gt;
&lt;p&gt;In the Azure Portal, switch to Schedules and click + Add a schedule.&lt;/p&gt;
&lt;p&gt;Next, click Link a schedule to your runbook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-enable-overflow-action-on-call-queues-if-no-agents-are-opted-in-f1c9bea7cb87/1FPVs3DbJVXhXhMR1mS5Tw.png&#34;
	width=&#34;1422&#34;
	height=&#34;285&#34;
	srcset=&#34;https://heusser.pro/p/automatically-enable-overflow-action-on-call-queues-if-no-agents-are-opted-in-f1c9bea7cb87/1FPVs3DbJVXhXhMR1mS5Tw_hud506e0bc9094da07d629b8c005e7d39e_29120_480x0_resize_box_3.png 480w, https://heusser.pro/p/automatically-enable-overflow-action-on-call-queues-if-no-agents-are-opted-in-f1c9bea7cb87/1FPVs3DbJVXhXhMR1mS5Tw_hud506e0bc9094da07d629b8c005e7d39e_29120_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;498&#34;
		data-flex-basis=&#34;1197px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Click on + Add a schedule.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-enable-overflow-action-on-call-queues-if-no-agents-are-opted-in-f1c9bea7cb87/1j3DMLkjJkMSam186QP6pWQ.png&#34;
	width=&#34;1496&#34;
	height=&#34;147&#34;
	srcset=&#34;https://heusser.pro/p/automatically-enable-overflow-action-on-call-queues-if-no-agents-are-opted-in-f1c9bea7cb87/1j3DMLkjJkMSam186QP6pWQ_hu13c5e8790efbd3db8c3514a11940143a_15499_480x0_resize_box_3.png 480w, https://heusser.pro/p/automatically-enable-overflow-action-on-call-queues-if-no-agents-are-opted-in-f1c9bea7cb87/1j3DMLkjJkMSam186QP6pWQ_hu13c5e8790efbd3db8c3514a11940143a_15499_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1017&#34;
		data-flex-basis=&#34;2442px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Give it a name and use the settings below. The smallest increment Azure Runbooks support is hourly. If we want to run it every 15 minutes, we’ll need to create four schedules where each schedule starts at a different time. Let’s start with the one which will run at every full hour.&lt;/p&gt;
&lt;p&gt;Repeat the same step three more times using the following start times (based on this example): 15:15, 15:30, 15:45.&lt;/p&gt;
&lt;p&gt;Once you’re done, it should look like this.&lt;/p&gt;
&lt;p&gt;The Runbook will now run every 15 minutes and automatically enable or disable the immediate overflow action based on agent availability (opt in status).&lt;/p&gt;
&lt;p&gt;Let me know if you would be interested in a more sophisticated solution of this Runbook. I’m thinking of a way where we can store and link information about individual Call Queues such as different webhook URLs, different overflow thresholds etc. or even the minimum number of agents which should be available before a Queue is being enabled again. I already have an idea in store how this could be achieved…&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Microsoft Teams Self-Service Call Queue Solution (Part 2)</title>
        <link>https://heusser.pro/p/microsoft-teams-self-service-call-queue-solution-part-2-ab8201157831/</link>
        <pubDate>Sat, 03 Sep 2022 13:21:48 +0000</pubDate>
        
        <guid>https://heusser.pro/p/microsoft-teams-self-service-call-queue-solution-part-2-ab8201157831/</guid>
        <description>&lt;p&gt;There was an issue with my code in this article. The solution described in this article assumes that your call queue overflow and timeout actions already forward to an external PSTN number. If it was set to any other option like voicemail or disconnect, the runbook failed. I’ve updated the &lt;strong&gt;Runbook&lt;/strong&gt; code sample on GitHub accordingly.&lt;/p&gt;
&lt;h4 id=&#34;original-article&#34;&gt;Original Article&lt;/h4&gt;
&lt;p&gt;A while ago I published &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851&#34; &gt;this&lt;/a&gt; article which explains how we can build a self-service solution for changing the configurations of Auto Attendants and Call Queues using Azure Automation Tools. The main reason behind this is so that we don’t have to grant admin privileges to users which would like to manage Queues and Attendants.&lt;/p&gt;
&lt;p&gt;In my last post, I provided an example how an Auto Attendant can be manually closed or opened. Today I’m going to show you an example of how we can let users change some settings on Call Queues.&lt;/p&gt;
&lt;p&gt;I’ve written the code for the following changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Immediately forward a Call Queue to an external number&lt;/li&gt;
&lt;li&gt;Disable the immediate forwarding again&lt;/li&gt;
&lt;li&gt;Change the external number for forwarding on Timeout&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Immediate forwarding is configured through an overflow Threshold of 0 and not a Timeout of 0. This is because, typically, Overflow Threshold is less used than timeout. I always recommend using Overflow Threshold 0 when you want to do an immediate forwarding. Unlike Timeout 0, the call is forwarded directly, without the Queue answering the call first when using Overflow. You can read more about that &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6&#34; &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If the immediate forwarding is disabled again, the value of the Overflow Threshold will be set to 50 again. This is the default value which is configured for new Call Queues. Of course, you change that in the Runbook code.&lt;/p&gt;
&lt;p&gt;This is what the Message Card looks like when it’s sent by the Azure Function.&lt;/p&gt;
&lt;h3 id=&#34;lets-buildit&#34;&gt;Let’s Build It&lt;/h3&gt;
&lt;p&gt;To build this on your own, please refer to my first article since the configuration steps are the same. You just need to replace the code of the Azure Functions and Runbooks from the Gists below.&lt;/p&gt;
&lt;h4 id=&#34;runbook-code&#34;&gt;Runbook Code&lt;/h4&gt;
&lt;p&gt;Insert the Webhook URL of your Teams Channel on line 7 and make sure that you’ve created the Automation Credentials as described in the article linked at the beginning of this post.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/30c4ff283d8736f3b1b47acd81d40b95.js&#34;&gt;&lt;/script&gt;

&lt;h4 id=&#34;refresh-card-functioncode&#34;&gt;Refresh Card Function Code&lt;/h4&gt;
&lt;p&gt;Insert the URL of your Azure Runbook Webhook trigger on line 11.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/7928bf7f6dabcbf0c5283566511488e5.js&#34;&gt;&lt;/script&gt;

&lt;h4 id=&#34;request-card-functioncode&#34;&gt;Request Card Function Code&lt;/h4&gt;
&lt;p&gt;To get a drop-down list with all your queues, we need to create one first.&lt;/p&gt;
&lt;p&gt;You can use the following code to create a list, which we’ll insert in our Function code later.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/767ebef524b966842b67436cc2ba9a0a.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This will create part of the JSON code and put it in your clipboard. You’ll need it later. If you’re already using Windows Clipboard, you will be able to pull it up by pressing Windows + V.&lt;/p&gt;
&lt;p&gt;Here’s the code for the Azure Function which will send the Update Call Queue Config stuff. Insert your URLs on line 6 and 7 and make sure to paste your list of Call Queue choices on line 27.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/315f3d455144ea86bc2c94c0a8a92a45.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;After you’ve inserted your list, it should look like this. Yours will show real Ids of course.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-call-queue-solution-part-2-ab8201157831/1DHb1Es27FcAN3yemT5wQ.png&#34;
	width=&#34;1124&#34;
	height=&#34;292&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-call-queue-solution-part-2-ab8201157831/1DHb1Es27FcAN3yemT5wQ_hud1a8715ca2528dda6973d061dd8cd353_75748_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-call-queue-solution-part-2-ab8201157831/1DHb1Es27FcAN3yemT5wQ_hud1a8715ca2528dda6973d061dd8cd353_75748_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;384&#34;
		data-flex-basis=&#34;923px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;That’s all. Now your users will be able to request a config change card. Let’s go through the process again.&lt;/p&gt;
&lt;p&gt;First, the outgoing webhook is mentioned in a channel. The Function will then confirm that the request has been received.&lt;/p&gt;
&lt;p&gt;The Function will also send the config change card.&lt;/p&gt;
&lt;p&gt;Once the user has entered all the information, they will be able to submit the config. This will also update the card and confirm the settings.&lt;/p&gt;
&lt;p&gt;It takes a while until the Runbook has finished. But one it has done its job, it will send us another card, confirming the settings.&lt;/p&gt;
&lt;p&gt;Note: Setting a new number as the Queue’s Timeout Action will also reset the configured Overflow Threshold to 50. (If the Overflow Threshold would still be 0, the Timeout settings would have no effect at all.)&lt;/p&gt;
&lt;p&gt;I hope that these code examples help you to build your own self-service solution for your users.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Microsoft Teams Self-Service Auto Attendants (Without Premium Connectors)</title>
        <link>https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/</link>
        <pubDate>Tue, 17 May 2022 20:39:01 +0000</pubDate>
        
        <guid>https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/</guid>
        <description>&lt;p&gt;Hi everybody.&lt;/p&gt;
&lt;p&gt;Every week more customers are moving to a Microsoft Teams based telephone solution. With that, customers also want more flexibility in managing their auto attendants and call queues. Many of my customers also want their team managers or members to be able to change certain settings of their auto attendants and call queues by themselves. The problem is that all these changes currently require an administrator role for Microsoft Teams. Even though most of the things can be configured in an easy-to-understand GUI in TAC (Teams Admin Center), a user could still potentially break stuff if they’re not 100% aware of what they’re doing. Furthermore, some changes are not as straight forward as they could be. As an example: There’s no switch to manually “open” or “close” an auto attendant since the default and after hours call flows are linked to a weekly recurrent schedule.&lt;/p&gt;
&lt;p&gt;While Teams is certainly lacking in this area, there’s no denying that the advantages of a Teams Phone solution far outweigh the disadvantages. Microsoft also offers numerous awesome tools to cope with this very issue by allowing us to automate nearly everything. And that ladies and gentlemen, is one of the most awesome and fascinating things to me!&lt;/p&gt;
&lt;p&gt;Let’s dive in.&lt;/p&gt;
&lt;h4 id=&#34;credits-and-inspiration&#34;&gt;Credits and Inspiration&lt;/h4&gt;
&lt;p&gt;This article is inspired by the work of two other fantastic community members and bloggers: MVPs &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/Luca_Vitali&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Luca Vitali&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/AlexHolmeset&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Alexander Holmeset&lt;/a&gt;. Both have written articles on self-service &lt;a class=&#34;link&#34; href=&#34;https://alexholmeset.blog/2021/11/05/self-service-microsoft-teams-auto-attendant-administration/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;auto attendant&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://lucavitali.wordpress.com/2020/11/23/how-to-use-lightweight-bot-and-azure-automation-to-interact-with-teams-call-queue/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;call queue&lt;/a&gt; management using Microsoft automation tools.&lt;/p&gt;
&lt;p&gt;I don’t think that I would have been able to come up with a solution of my own without their exceptional blog posts. At least not this fast.&lt;/p&gt;
&lt;p&gt;To fully understand this blog post, please make sure you read their publications first.&lt;/p&gt;
&lt;h4 id=&#34;the-ever-present-licensing-dilemma&#34;&gt;The Ever-Present Licensing Dilemma&lt;/h4&gt;
&lt;p&gt;Alex’s solution uses a combination of Microsoft Forms, Power Automate and an Azure Runbook. However, to use an HTTP request either as a trigger or an action in a Flow, you need a premium license for Power Automate. I can understand that requirement from Microsofts business perspective, but such a basic feature shouldn’t require a premium license. Since I don’t have any premium licenses at the moment anyway, I looked for other ways.&lt;/p&gt;
&lt;p&gt;Luca’s method uses an outgoing webhook in Teams. It’s a great way to invoke a Bot or script directly from Teams. There’s no need to install any apps and you don’t even need to open a website or an App to change some settings on an auto attendant or a call queue.&lt;/p&gt;
&lt;p&gt;The problem is that Teams can’t really handle the response sent back by the Runbook. This means that a user will always get an error message, even if the Runbook was triggered successfully. This might be very confusing for end users and just doesn’t look nice.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1l4zCsrW8BZdzKBuSOSUEww.png&#34;
	width=&#34;1769&#34;
	height=&#34;320&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1l4zCsrW8BZdzKBuSOSUEww_hu372828d406032e44c5b1bd3b6a8b9ef0_44644_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1l4zCsrW8BZdzKBuSOSUEww_hu372828d406032e44c5b1bd3b6a8b9ef0_44644_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;552&#34;
		data-flex-basis=&#34;1326px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;azure-functions&#34;&gt;Azure Functions&lt;/h4&gt;
&lt;p&gt;Instead of calling the Azure Runbook directly from the outgoing Teams webhook, I tried to call an Azure Function first. &lt;a class=&#34;link&#34; href=&#34;https://azure.microsoft.com/en-us/services/functions/?ef_id=EAIaIQobChMIrP2Yzfqu9wIVDtxRCh1qvABSEAAYASAAEgK5RfD_BwE%3AG%3As&amp;amp;OCID=AID2200264_SEM_EAIaIQobChMIrP2Yzfqu9wIVDtxRCh1qvABSEAAYASAAEgK5RfD_BwE%3AG%3As&amp;amp;gclid=EAIaIQobChMIrP2Yzfqu9wIVDtxRCh1qvABSEAAYASAAEgK5RfD_BwE&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Azure Functions&lt;/a&gt; are serverless web services which can execute code once they’re called by a trigger. Much like the Runbook in Luca’s blog, my Function is also triggered by a web request by the outgoing webhook.&lt;/p&gt;
&lt;p&gt;From what I could find &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/45743782/custom-bot-always-replies-with-an-error&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;on the internet&lt;/a&gt;, the webhook expects a reply in JSON format containing &lt;code&gt;&amp;quot;type&amp;quot;: &amp;quot;message&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;text&amp;quot;: &amp;quot;some message&amp;quot;&lt;/code&gt;. I didn’t find a way to customize the response of the Runbook but it’s easy with an Azure Function. I will show you how later in this post.&lt;/p&gt;
&lt;h3 id=&#34;override-auto-attendant-businesshours&#34;&gt;Override Auto Attendant Business Hours&lt;/h3&gt;
&lt;p&gt;Let’s start with the example from the introduction of this article. Let’s assume that we have a small company where the users who answer the phone need to be able to manually open or close an auto attendant.&lt;/p&gt;
&lt;p&gt;Note: This part assumes that you already have the following components set up. If you don’t have them already, please refer to the external websites linked in this post in order to set them up.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Microsoft Teams Auto Attendant&lt;/li&gt;
&lt;li&gt;A Microsoft Teams Team&lt;/li&gt;
&lt;li&gt;An Azure Automation Account&lt;/li&gt;
&lt;li&gt;An Azure Function App&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, it might be a little confusing at first, because we’re creating each component from the opposite direction in which they are chained together. This way, we only have to touch each component once though.&lt;/p&gt;
&lt;h4 id=&#34;prepare-the-auto-attendant&#34;&gt;Prepare the Auto Attendant&lt;/h4&gt;
&lt;p&gt;The easiest way I could think of is to create a special holiday for this scenario. I called it “Manual Override”. The reason I did it in this way is that the actual business hours don’t get changed. If there were multiple hours per day or different hours each day, it would be quite an effort to revert all the changes once the manual override should no longer be active.&lt;/p&gt;
&lt;p&gt;To start configuring it, head over to TAC and switch to Voice\Holidays. Now create a new holiday and set the dates to anywhere in the past.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/13cZh7wnoXylrJra7g552Xw.png&#34;
	width=&#34;1307&#34;
	height=&#34;468&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/13cZh7wnoXylrJra7g552Xw_hua90cd498409d8abcea1be37f4422dbb9_30314_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/13cZh7wnoXylrJra7g552Xw_hua90cd498409d8abcea1be37f4422dbb9_30314_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;279&#34;
		data-flex-basis=&#34;670px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now go to your auto attendant and link the holiday schedule.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1HmJH2bcY32mdNcD7AbdG8Q.png&#34;
	width=&#34;1171&#34;
	height=&#34;527&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1HmJH2bcY32mdNcD7AbdG8Q_hu4367f84d857e8a2fa404e9ed010aac7f_76867_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1HmJH2bcY32mdNcD7AbdG8Q_hu4367f84d857e8a2fa404e9ed010aac7f_76867_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;222&#34;
		data-flex-basis=&#34;533px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Make sure you click “Submit” after you have saved the holiday. Otherwise, the auto attendant won’t be updated.&lt;/p&gt;
&lt;p&gt;That’s all you need to do in order to prepare your auto attendant for this self-service solution.&lt;/p&gt;
&lt;p&gt;Later in this post, I will provide an example script which will log into Teams PowerShell and change the dates of the “Manual Override” Holiday. When an auto attendant should be open, the holiday schedule will be set to past dates. Past dates won’t have any effect on the auto attendants routing decisions and therefore the auto attendant&amp;rsquo;s business hours schedule will be active.&lt;/p&gt;
&lt;p&gt;When the auto attendant should be manually closed before the configured business hours end, the holiday schedule will be updated to start at today’s date and end at the start of tomorrow’s date.&lt;/p&gt;
&lt;p&gt;This means that it’s possible to close the attendant if the office closes before the regular business hours on that day. If it’s not manually opened again, it will resume to normal business hours as soon as the next day starts.&lt;/p&gt;
&lt;p&gt;While it’s possible to close or open the attendant during business hours (e.g., extended lunch break), it’s not possible to extend the configured business hours using the method used by the provided example script.&lt;/p&gt;
&lt;h4 id=&#34;prepare-your-teamschannel&#34;&gt;Prepare your Teams Channel&lt;/h4&gt;
&lt;p&gt;First, we will need an incoming webhook in a channel to receive messages in Teams. We will use this webhook to receive message cards sent by an Azure Function or by a Runbook.&lt;/p&gt;
&lt;p&gt;Go to your desired channel and click on “Connectors”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/13qApQbilVuvLrzFbROq0Kw.png&#34;
	width=&#34;777&#34;
	height=&#34;484&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/13qApQbilVuvLrzFbROq0Kw_huec63b6a12b005b0a5bb5c5705ce389c9_35449_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/13qApQbilVuvLrzFbROq0Kw_huec63b6a12b005b0a5bb5c5705ce389c9_35449_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;160&#34;
		data-flex-basis=&#34;385px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now add an Incoming Webhook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1luJXKnNDSQWz8WTUCT09A.png&#34;
	width=&#34;1171&#34;
	height=&#34;361&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1luJXKnNDSQWz8WTUCT09A_hu419c7001865abce90cad03799c8b3362_58546_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1luJXKnNDSQWz8WTUCT09A_hu419c7001865abce90cad03799c8b3362_58546_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;324&#34;
		data-flex-basis=&#34;778px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1C6IrFUEq9VLWDZazRGAeRw.png&#34;
	width=&#34;1315&#34;
	height=&#34;411&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1C6IrFUEq9VLWDZazRGAeRw_hu374ac68d63ee912cfe47582fd996d400_55993_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1C6IrFUEq9VLWDZazRGAeRw_hu374ac68d63ee912cfe47582fd996d400_55993_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;319&#34;
		data-flex-basis=&#34;767px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;After clicking “Add” the second time, the window will close. Open “Connectors” again and click “Configure”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1HSglWMuPkJYl3sNQUEYA.png&#34;
	width=&#34;1149&#34;
	height=&#34;319&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1HSglWMuPkJYl3sNQUEYA_hu4549a2fe11ae53d5ec6335cd6ac04f3b_58142_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1HSglWMuPkJYl3sNQUEYA_hu4549a2fe11ae53d5ec6335cd6ac04f3b_58142_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;360&#34;
		data-flex-basis=&#34;864px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Give your Connector a name and upload an Icon (if you want to) and then click “Create”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1qSI9VpKxilxNLqu0ofyMQQ.png&#34;
	width=&#34;1156&#34;
	height=&#34;994&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1qSI9VpKxilxNLqu0ofyMQQ_hubb5fe09fd82caaca11594e1008ba6352_105810_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1qSI9VpKxilxNLqu0ofyMQQ_hubb5fe09fd82caaca11594e1008ba6352_105810_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;116&#34;
		data-flex-basis=&#34;279px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;After you have created the webhook, its URL for your connector will be shown. Copy the URL and save it for later.&lt;/p&gt;
&lt;h4 id=&#34;create-an-azurerunbook&#34;&gt;Create an Azure Runbook&lt;/h4&gt;
&lt;p&gt;Let’s create the Runbook which will change the settings on our auto attendant. This script will log into Teams PowerShell and manipulate the holiday schedule called “Manual Override”. Because only the schedule is changed, there’s not even a need to specify an auto attendant explicitly. You could even add the “Manual Override” holiday schedule to all your auto attendants (which are in the same time zone) and open or close them all at once.&lt;/p&gt;
&lt;p&gt;If you don’t have an Azure Automation Account already, you can read how to create one &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/azure/automation/automation-create-standalone-account?tabs=azureportal&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt; or in Luca Vitali’s article under chapter 1.&lt;/p&gt;
&lt;p&gt;From within your Automation Account, click “Create a runbook”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1F9IIVDVkgw4TxgdynhcfA.png&#34;
	width=&#34;1297&#34;
	height=&#34;142&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1F9IIVDVkgw4TxgdynhcfA_hu55b3bbcd5b90660b7d023ae924055896_30077_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1F9IIVDVkgw4TxgdynhcfA_hu55b3bbcd5b90660b7d023ae924055896_30077_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;913&#34;
		data-flex-basis=&#34;2192px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Name your Runbook and choose the following settings.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1aiFCtj7JQdEF0FQTqSrxqg.png&#34;
	width=&#34;1080&#34;
	height=&#34;525&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1aiFCtj7JQdEF0FQTqSrxqg_hu7cc5eb5dc945874842c33560e3d4841e_37140_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1aiFCtj7JQdEF0FQTqSrxqg_hu7cc5eb5dc945874842c33560e3d4841e_37140_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;205&#34;
		data-flex-basis=&#34;493px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Paste the following code in the editing pane. Make sure to also insert your webhook URL on line 7 between the double quotes.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/22e54e29fda1304914fecc1b4f73541e.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;For this to work, we obviously need credentials which have the Teams Administrator Role. These are imported on line 17. If you need guidance on how to add them to your automation account, please refer to Luca Vitali’s article under chapter 3.&lt;/p&gt;
&lt;p&gt;Once you have pasted the script and inserted your webhook URL, save and publish the Runbook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1DhNPlwQ3grUUNEmrdUfEg.png&#34;
	width=&#34;752&#34;
	height=&#34;141&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1DhNPlwQ3grUUNEmrdUfEg_hue1d516e9ceb39efcc1ef789e882fe7a2_21844_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1DhNPlwQ3grUUNEmrdUfEg_hue1d516e9ceb39efcc1ef789e882fe7a2_21844_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;533&#34;
		data-flex-basis=&#34;1280px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Next, we will add a webhook to the Runbook as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1vyUi1t0LaYYugFHyU2NXA.png&#34;
	width=&#34;1624&#34;
	height=&#34;203&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1vyUi1t0LaYYugFHyU2NXA_huc8de5951da01576467d82b7d0479181d_45795_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1vyUi1t0LaYYugFHyU2NXA_huc8de5951da01576467d82b7d0479181d_45795_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;800&#34;
		data-flex-basis=&#34;1920px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;You can also read in detail how to configure the webhook on Luca’s blog.&lt;/p&gt;
&lt;p&gt;Copy the webhook URL of the Runbook and save it for later.&lt;/p&gt;
&lt;h4 id=&#34;create-the-refresh-cardfunction&#34;&gt;Create the Refresh Card Function&lt;/h4&gt;
&lt;p&gt;Next, we will create a new Azure Function. This Function will be called when a user clicks on the “Submit Config” button on a card which was sent by the first Function (which will be created later). Besides triggering the Runbook, it will also update the card which was sent by the first Function.&lt;/p&gt;
&lt;p&gt;For this, go to portal.azure.com and select Function App. If you don’t have an Azure Function App already, you need to &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-function-app-portal#create-a-function-app&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;create one&lt;/a&gt; first.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1CumuF2zcRMU0JMZWi9LjdA.png&#34;
	width=&#34;1084&#34;
	height=&#34;1324&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1CumuF2zcRMU0JMZWi9LjdA_hu2382b6deb8dad946428ea4d39a16ddb7_155624_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1CumuF2zcRMU0JMZWi9LjdA_hu2382b6deb8dad946428ea4d39a16ddb7_155624_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;81&#34;
		data-flex-basis=&#34;196px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Once the Function App has been deployed you can create the function.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1dBu57rsM9ztmOXanEQsBA.png&#34;
	width=&#34;821&#34;
	height=&#34;193&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1dBu57rsM9ztmOXanEQsBA_hu5746fc9f02d4ac9791f5d53188550f27_31151_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1dBu57rsM9ztmOXanEQsBA_hu5746fc9f02d4ac9791f5d53188550f27_31151_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;425&#34;
		data-flex-basis=&#34;1020px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Choose “HTTP trigger” as the template, name your function and leave the Authorization level at “Function”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1AOtHCDdzmktCrFloLFxCA.png&#34;
	width=&#34;1244&#34;
	height=&#34;1228&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1AOtHCDdzmktCrFloLFxCA_hu5ffbe0731727d4e8eb73283dc3d2ca5a_125844_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1AOtHCDdzmktCrFloLFxCA_hu5ffbe0731727d4e8eb73283dc3d2ca5a_125844_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;101&#34;
		data-flex-basis=&#34;243px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In the editing pane, paste the following code. Insert the URL from the Runbook webhook on line 8 in between the double quotes.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/a908360198d56dd82798164f9e2c4ce0.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Save the Function and copy the Function URL by clicking “Get function URL”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1GCEmPpCLTPQk4T100aesg.png&#34;
	width=&#34;867&#34;
	height=&#34;85&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1GCEmPpCLTPQk4T100aesg_hu6ac419ccc94a4ac1823aea3d5dd05d7d_12094_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1GCEmPpCLTPQk4T100aesg_hu6ac419ccc94a4ac1823aea3d5dd05d7d_12094_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1020&#34;
		data-flex-basis=&#34;2448px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Note: the URL will include a key at the end. Because we’ve chosen “Function” as the Authorization level when we created the function, it will only be possible to call the function by including the key in the URL.&lt;/p&gt;
&lt;h4 id=&#34;create-the-request-cardfunction&#34;&gt;Create the Request Card Function&lt;/h4&gt;
&lt;p&gt;Now we create the second Function. This is the Function which will be called from the outgoing webhook in Teams and sends the “Config Change” Card to the channel. It’s actually the Function which will be called first.&lt;/p&gt;
&lt;p&gt;Paste the following code in the Azure Portal. Again, make sure to populate the variables on line 6 and 7. $uri represents the URL of your Teams incoming webhook and $refreshURI represents the URL of your “RefreshCard” Azure Function.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/0c3b259ab033bd39880a3665f48cd760.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Don’t forget to save the Function.&lt;/p&gt;
&lt;h4 id=&#34;create-an-outgoing-webhook-inteams&#34;&gt;Create an Outgoing Webhook in Teams&lt;/h4&gt;
&lt;p&gt;Finally, we need to create an outgoing webhook in Teams. Users will be able to mention the webhook in the channel. Once the “Bot” is mentioned, a web request will be made to the “RequestCard” Function.&lt;/p&gt;
&lt;p&gt;To set it up, go to your Team’s settings and switch to the Apps tab. From there, click on “Create an outgoing webhook” on the bottom right.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/11rS272NPQrXX9EE9LbUnQ.png&#34;
	width=&#34;1896&#34;
	height=&#34;1041&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/11rS272NPQrXX9EE9LbUnQ_huae7854211a61ee6c10d7ebe891e47eea_175069_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/11rS272NPQrXX9EE9LbUnQ_huae7854211a61ee6c10d7ebe891e47eea_175069_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;437px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Name your outgoing webhook and paste the Function URL of the “RequestCard” Function in the “Callback URL” field before you click “Create”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1N4NssEokqJxnX8LCCGuU2A.png&#34;
	width=&#34;871&#34;
	height=&#34;792&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1N4NssEokqJxnX8LCCGuU2A_hud76c59a699eb9e8fd744cb092a6cc7ad_100853_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1N4NssEokqJxnX8LCCGuU2A_hud76c59a699eb9e8fd744cb092a6cc7ad_100853_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;109&#34;
		data-flex-basis=&#34;263px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;You can ignore the security token which will be shown after the webhook has been created. If you like you can still save it somewhere safe.&lt;/p&gt;
&lt;h3 id=&#34;see-it-inaction&#34;&gt;See it in Action&lt;/h3&gt;
&lt;p&gt;Now that we have everything set up, any member of the channel can request a card to manually open or close an auto attendant.&lt;/p&gt;
&lt;p&gt;Here’s the “Manual Override” Holiday Schedule before the config change has been submitted. Today, as of writing this article it’s the 17th of May 2022. The holiday schedule is set to 15.05.2022–16.052022 so it’s non-effective.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/11ZO1uAxt2OUWo0RWzvaXA.png&#34;
	width=&#34;1156&#34;
	height=&#34;266&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/11ZO1uAxt2OUWo0RWzvaXA_hu24e738772aa5f336100b6463b020cd10_20698_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/11ZO1uAxt2OUWo0RWzvaXA_hu24e738772aa5f336100b6463b020cd10_20698_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;434&#34;
		data-flex-basis=&#34;1043px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;And here’s the chronological process:&lt;/p&gt;
&lt;p&gt;A user requests a card by mentioning the outgoing webhook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/12pjsanYyHOkHRzO08yZGg.png&#34;
	width=&#34;1141&#34;
	height=&#34;134&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/12pjsanYyHOkHRzO08yZGg_hue9af2bc13a1b21b9582b95cefd648d5a_10254_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/12pjsanYyHOkHRzO08yZGg_hue9af2bc13a1b21b9582b95cefd648d5a_10254_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;851&#34;
		data-flex-basis=&#34;2043px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This will call our first “RequestCard” Azure Function. The Function will then reply with a message that the config change request has been received.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1myTE8zK18Jduhiy9S4k5ng.png&#34;
	width=&#34;1224&#34;
	height=&#34;241&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1myTE8zK18Jduhiy9S4k5ng_hu1b4b9a7bbe7b8e8b17a4ef2283138069_33893_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1myTE8zK18Jduhiy9S4k5ng_hu1b4b9a7bbe7b8e8b17a4ef2283138069_33893_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;507&#34;
		data-flex-basis=&#34;1218px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;At the same time, the Function will also send a new card to the channel which contains the options to open or close the auto attendant and a “Submit Config” button.&lt;/p&gt;
&lt;p&gt;Note: Unfortunately, it’s not possible to send the card as an answer to the invocation of the webhook. This answer can only support text.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1PkeQQeNPtIuNbd3j65f0w.png&#34;
	width=&#34;1223&#34;
	height=&#34;435&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1PkeQQeNPtIuNbd3j65f0w_huca52d10e7fdafe57b57d019d438f38bd_44000_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1PkeQQeNPtIuNbd3j65f0w_huca52d10e7fdafe57b57d019d438f38bd_44000_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;281&#34;
		data-flex-basis=&#34;674px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Once a user has chosen an option and submitted the config change, the “RefreshCard” Function will be called.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1HgOp80zmMgDaDdcL0N510Q.png&#34;
	width=&#34;1226&#34;
	height=&#34;434&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1HgOp80zmMgDaDdcL0N510Q_huc64eb73fec64e4a684dc003490a4b2f8_40195_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1HgOp80zmMgDaDdcL0N510Q_huc64eb73fec64e4a684dc003490a4b2f8_40195_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;282&#34;
		data-flex-basis=&#34;677px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This Function will update the “Config Change Request” card, trigger the Runbook, and lets the user know that their config change request has been received.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1YJROpRLPOQxKxe6VI86wAw.png&#34;
	width=&#34;1225&#34;
	height=&#34;247&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1YJROpRLPOQxKxe6VI86wAw_hue8a1e662d446de1d8351412d2e6ef7b4_35216_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1YJROpRLPOQxKxe6VI86wAw_hue8a1e662d446de1d8351412d2e6ef7b4_35216_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;495&#34;
		data-flex-basis=&#34;1190px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Once the Runbook has finished, it will also post a new card to the channel, informing the user that the auto attendant has been opened or closed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1ui2yuTIb1O1yC1qTJgxkdA.png&#34;
	width=&#34;1222&#34;
	height=&#34;239&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1ui2yuTIb1O1yC1qTJgxkdA_hu94349a4aa09e2b7a7acac3ce67d7df01_26800_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1ui2yuTIb1O1yC1qTJgxkdA_hu94349a4aa09e2b7a7acac3ce67d7df01_26800_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;511&#34;
		data-flex-basis=&#34;1227px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If we check the holiday schedule again, we can see that it has been updated and set from 17.05.2022 to 18.05.2022. This means that any calls which are received by the auto attendant today, go into the holiday call handling and not into the default call flow. Thus, this auto attendant is now closed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1Uh6LLtUaj5nDUQwOiIDNJQ.png&#34;
	width=&#34;1144&#34;
	height=&#34;262&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1Uh6LLtUaj5nDUQwOiIDNJQ_hub6852f717f63b21c0b0322c53ec0956c_20692_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1Uh6LLtUaj5nDUQwOiIDNJQ_hub6852f717f63b21c0b0322c53ec0956c_20692_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;436&#34;
		data-flex-basis=&#34;1047px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;This is a great proof of concept on how to build a self-service auto attendant or call queue solution which doesn’t require any Premium Licenses for Power Automate or Power Apps. Of course, Azure Functions and Runbooks are not free either but I’m almost certain that it will still be much cheaper at scale.&lt;/p&gt;
&lt;p&gt;From my point of view this is a great showcase of what one can achieve with Azure Automation. I also like that everything stays in Teams from an end user perspective. There’s no need to open any other website or App and even Teams mobile App experiences are supported.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1f9rH3SVsdeBaCT4jm29dA.png&#34;
	width=&#34;1050&#34;
	height=&#34;892&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1f9rH3SVsdeBaCT4jm29dA_hu0d2eeddf9dcacbb318cbf03027fe51b5_331703_480x0_resize_box_3.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1f9rH3SVsdeBaCT4jm29dA_hu0d2eeddf9dcacbb318cbf03027fe51b5_331703_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;117&#34;
		data-flex-basis=&#34;282px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This article only scatched the surface by covering only one example of endless possible scenarios. For example, it’s also possible to write an Azure Function in a way in which it can receive parameters from the outgoing webhook. Instead of just mentioning the webhook by “@RequestCard” we could also mention it like this: “@RequestCard CQ ” or “@RequestCard AA” and then respond with a different config change card, one for each type of voice app or even different change scenarios. Or we could even do stuff like check the username from which the outgoing webhook was invoked and do a security filtering on it by only allowing certain users to submit changes to auto attendants or call queues. The sky really is the limit.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
