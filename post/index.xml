<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on HEUSSER.PRO</title>
        <link>https://heusser.pro/post/</link>
        <description>Recent content in Posts on HEUSSER.PRO</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 23 Feb 2025 12:34:32 +0000</lastBuildDate><atom:link href="https://heusser.pro/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Update: Teams Shared Voicemail for Basic Call Flows (Fix Call Back Links)</title>
        <link>https://heusser.pro/p/update-teams-shared-voicemail-for-basic-call-flows-fix-call-back-links-l4gwdggabxl8/</link>
        <pubDate>Sun, 23 Feb 2025 12:34:32 +0000</pubDate>
        
        <guid>https://heusser.pro/p/update-teams-shared-voicemail-for-basic-call-flows-fix-call-back-links-l4gwdggabxl8/</guid>
        <description>&lt;img src="https://heusser.pro/p/update-teams-shared-voicemail-for-basic-call-flows-fix-call-back-links-l4gwdggabxl8/cover.png" alt="Featured image of post Update: Teams Shared Voicemail for Basic Call Flows (Fix Call Back Links)" /&gt;&lt;p&gt;This is an update to my previous blog post &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/teams-shared-voicemail-for-basic-call-flows-1qru2qqlx0ju&#34; &gt;Teams Shared Voicemail for Basic Call Flows&lt;/a&gt; initially published on January 17, 2024. Microsoft recently made some changes to the way in which Teams voicemails are sent to inboxes. This change was announced in &lt;a class=&#34;link&#34; href=&#34;https://mc.merill.net/message/MC987329&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MC987329&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Previously, voicemails from unknown numbers were sent with the phone number as the sender. Now they&amp;rsquo;re sent from &lt;code&gt;noreply@skype.voicemail.microsoft.com&lt;/code&gt; which broke the deep links on call back buttons on the adaptive cards sent to Teams.&lt;/p&gt;
&lt;h2 id=&#34;flow-updates&#34;&gt;Flow Updates
&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;ve updated my flow to address this change and include working deep links on the adaptive cards again. Prior to this change, all the information (From address and From name) could be accessed directly in the trigger outputs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/update-teams-shared-voicemail-for-basic-call-flows-fix-call-back-links-l4gwdggabxl8/image.png&#34;
	width=&#34;2154&#34;
	height=&#34;865&#34;
	srcset=&#34;https://heusser.pro/p/update-teams-shared-voicemail-for-basic-call-flows-fix-call-back-links-l4gwdggabxl8/image_hu_40be5c0a35a32a0d.png 480w, https://heusser.pro/p/update-teams-shared-voicemail-for-basic-call-flows-fix-call-back-links-l4gwdggabxl8/image_hu_3125301d95bbe1dc.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Composing From Address or Number and Name in old Flow&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;249&#34;
		data-flex-basis=&#34;597px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Since the from address is now &lt;code&gt;noreply@skype.voicemail.microsoft.com&lt;/code&gt; the phone number needs to be extracted from the email body. To make this work, I&amp;rsquo;m initializing two more variables at the beginning of the flow and then check if the from address matches &lt;code&gt;noreply&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/update-teams-shared-voicemail-for-basic-call-flows-fix-call-back-links-l4gwdggabxl8/image-1.png&#34;
	width=&#34;2149&#34;
	height=&#34;648&#34;
	srcset=&#34;https://heusser.pro/p/update-teams-shared-voicemail-for-basic-call-flows-fix-call-back-links-l4gwdggabxl8/image-1_hu_7470b4526b3e7513.png 480w, https://heusser.pro/p/update-teams-shared-voicemail-for-basic-call-flows-fix-call-back-links-l4gwdggabxl8/image-1_hu_cfc3e62d5fa3d66d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;New variables&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;331&#34;
		data-flex-basis=&#34;795px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/update-teams-shared-voicemail-for-basic-call-flows-fix-call-back-links-l4gwdggabxl8/image-2.png&#34;
	width=&#34;2149&#34;
	height=&#34;880&#34;
	srcset=&#34;https://heusser.pro/p/update-teams-shared-voicemail-for-basic-call-flows-fix-call-back-links-l4gwdggabxl8/image-2_hu_579b979fc14aa731.png 480w, https://heusser.pro/p/update-teams-shared-voicemail-for-basic-call-flows-fix-call-back-links-l4gwdggabxl8/image-2_hu_f5d2e6eae8a5633d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;If email match noreply&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;244&#34;
		data-flex-basis=&#34;586px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If that&amp;rsquo;s the case, the phone number and the name will be extracted from the email body and stored in the new variables. If not (in case the voicemail was left by an internal user or a known contact), the values of the trigger outputs will be written to the new variables.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/update-teams-shared-voicemail-for-basic-call-flows-fix-call-back-links-l4gwdggabxl8/image-3.png&#34;
	width=&#34;2155&#34;
	height=&#34;1146&#34;
	srcset=&#34;https://heusser.pro/p/update-teams-shared-voicemail-for-basic-call-flows-fix-call-back-links-l4gwdggabxl8/image-3_hu_8b60a1fbda16788b.png 480w, https://heusser.pro/p/update-teams-shared-voicemail-for-basic-call-flows-fix-call-back-links-l4gwdggabxl8/image-3_hu_da3f428b3a7f9048.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Extract phone number and name from email body in new flow version&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;188&#34;
		data-flex-basis=&#34;451px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Finally, I had to replace the &lt;code&gt;Outputs&lt;/code&gt; of the original compose actions with the variables in all places (i.e. in the adaptive cards) where they were referenced.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/update-teams-shared-voicemail-for-basic-call-flows-fix-call-back-links-l4gwdggabxl8/image-4.png&#34;
	width=&#34;912&#34;
	height=&#34;947&#34;
	srcset=&#34;https://heusser.pro/p/update-teams-shared-voicemail-for-basic-call-flows-fix-call-back-links-l4gwdggabxl8/image-4_hu_86d91ab0f760984c.png 480w, https://heusser.pro/p/update-teams-shared-voicemail-for-basic-call-flows-fix-call-back-links-l4gwdggabxl8/image-4_hu_fa61671e46915f28.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Old flow&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;96&#34;
		data-flex-basis=&#34;231px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/update-teams-shared-voicemail-for-basic-call-flows-fix-call-back-links-l4gwdggabxl8/image-5.png&#34;
	width=&#34;913&#34;
	height=&#34;861&#34;
	srcset=&#34;https://heusser.pro/p/update-teams-shared-voicemail-for-basic-call-flows-fix-call-back-links-l4gwdggabxl8/image-5_hu_cab78c09f153cee3.png 480w, https://heusser.pro/p/update-teams-shared-voicemail-for-basic-call-flows-fix-call-back-links-l4gwdggabxl8/image-5_hu_5fb00462ecb0ea16.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;New flow&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;106&#34;
		data-flex-basis=&#34;254px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;download-updated-flow&#34;&gt;Download Updated Flow
&lt;/h2&gt;&lt;p&gt;You can download the updated version of the flow &lt;a class=&#34;link&#34; href=&#34;https://raw.githubusercontent.com/mozziemozz/TeamsPhoneAutomation/main/Scripts/PowerAutomate/Flows/TeamsSharedVoicemailBasicV3%28M365GroupInbox%29_GitHub.zip&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>M365 Call Flow Visualizer Update: Support Nested Voice Apps without Resource Accounts</title>
        <link>https://heusser.pro/p/m365-call-flow-visualizer-update-support-nested-voice-apps-without-resource-accounts-hjm1e1w9m0h8/</link>
        <pubDate>Wed, 22 Jan 2025 16:47:23 +0000</pubDate>
        
        <guid>https://heusser.pro/p/m365-call-flow-visualizer-update-support-nested-voice-apps-without-resource-accounts-hjm1e1w9m0h8/</guid>
        <description>&lt;p&gt;In December 2024 Microsoft made a change to their auto attendant and call queue service allowing admins to build call flows without associating a resource account to every nested voice app (call queues and auto attendants). Top-level auto attendants or call queues which are directly called by a phone number still need a resource account associated with them though.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/m365-call-flow-visualizer-update-support-nested-voice-apps-without-resource-accounts-hjm1e1w9m0h8/image.png&#34;
	width=&#34;1314&#34;
	height=&#34;592&#34;
	srcset=&#34;https://heusser.pro/p/m365-call-flow-visualizer-update-support-nested-voice-apps-without-resource-accounts-hjm1e1w9m0h8/image_hu_3112e916ffaa576f.png 480w, https://heusser.pro/p/m365-call-flow-visualizer-update-support-nested-voice-apps-without-resource-accounts-hjm1e1w9m0h8/image_hu_9475509f8e8a0103.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Microsoft Learn Article&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;221&#34;
		data-flex-basis=&#34;532px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When I wanted to create some diagrams of newly configured call flows using my &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;M365 Call Flow Visualizer&lt;/a&gt; tool, I noticed that I got Mermaid syntax errors and that the diagrams weren&amp;rsquo;t displaying anymore. This was because the newly built call flows were already referencing the voice apps directly and not the resource accounts anymore.&lt;/p&gt;
&lt;h2 id=&#34;how-does-it-look-in-powershell&#34;&gt;How does it look in PowerShell?
&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s look at some examples. This is an auto attendant which I haven&amp;rsquo;t touched in years. It&amp;rsquo;s a simple demo attendant which has a voice menu where different keys will transfer to two different auto attendants.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/m365-call-flow-visualizer-update-support-nested-voice-apps-without-resource-accounts-hjm1e1w9m0h8/Demo_AA_CallFlow.png&#34;
	width=&#34;7090&#34;
	height=&#34;8280&#34;
	srcset=&#34;https://heusser.pro/p/m365-call-flow-visualizer-update-support-nested-voice-apps-without-resource-accounts-hjm1e1w9m0h8/Demo_AA_CallFlow_hu_73a29f6dc5061a58.png 480w, https://heusser.pro/p/m365-call-flow-visualizer-update-support-nested-voice-apps-without-resource-accounts-hjm1e1w9m0h8/Demo_AA_CallFlow_hu_773e2a9b6e909935.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Demo Auto Attendant&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;85&#34;
		data-flex-basis=&#34;205px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When I check this attendant in PowerShell, I can see that the &lt;strong&gt;CallTarget&lt;/strong&gt;  type is &lt;strong&gt;ApplicationEndpoint&lt;/strong&gt; which means it points to a resource account (Online Application Instance).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;PS &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;E:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;heusser-pro&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-v2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$aa&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-CsAutoAttendant&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Identity&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;9516a748&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;95e5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;4024&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-aae1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;5f11fad27a52&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;PS &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;E:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;heusser-pro&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-v2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$aa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;DefaultCallFlow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Menu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;MenuOptions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Action&lt;/span&gt;         &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TransferCallToTarget&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;DtmfResponse&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Tone1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;VoiceResponses&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;CallTarget&lt;/span&gt;     &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Type &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ApplicationEndpoint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;n&#34;&gt;Id&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0ae17201&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;09fb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;4434&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-ac7b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;66681fb34345&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Prompt&lt;/span&gt;         &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Action&lt;/span&gt;         &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TransferCallToTarget&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;DtmfResponse&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Tone2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;VoiceResponses&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;CallTarget&lt;/span&gt;     &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Type &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ApplicationEndpoint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;n&#34;&gt;Id&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1ba43d85&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;20c8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;41bf-a474&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;9b771877b4be&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Prompt&lt;/span&gt;         &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Action&lt;/span&gt;         &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TransferCallToTarget&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;DtmfResponse&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Tone3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;VoiceResponses&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;CallTarget&lt;/span&gt;     &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Type &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ExternalPstn&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;n&#34;&gt;Id&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tel&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;496971041xxxx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Prompt&lt;/span&gt;         &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;In TAC, we now have a new option called &lt;strong&gt;Resource Account&lt;/strong&gt; next to the existing &lt;strong&gt;Voice App&lt;/strong&gt; option. This way, we can choose if we want to forward calls to a resource account associated with a voice app or to a voice app directly.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/m365-call-flow-visualizer-update-support-nested-voice-apps-without-resource-accounts-hjm1e1w9m0h8/image-1.png&#34;
	width=&#34;1501&#34;
	height=&#34;902&#34;
	srcset=&#34;https://heusser.pro/p/m365-call-flow-visualizer-update-support-nested-voice-apps-without-resource-accounts-hjm1e1w9m0h8/image-1_hu_2e793513d52c7d71.png 480w, https://heusser.pro/p/m365-call-flow-visualizer-update-support-nested-voice-apps-without-resource-accounts-hjm1e1w9m0h8/image-1_hu_fc5113ba50aa2f4d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;New Options in TAC&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;166&#34;
		data-flex-basis=&#34;399px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This is actually a bit confusing to me. As I recall, the option to transfer to another attendant or queue was always called &lt;strong&gt;Voice app&lt;/strong&gt; before but it was actually referencing resource accounts. I checked one of my previous blog &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq&#34; &gt;posts&lt;/a&gt; and found this screenshot where it&amp;rsquo;s clearly visible that the &lt;strong&gt;Voice app&lt;/strong&gt; is in fact referencing a the UPN of a resource account.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/m365-call-flow-visualizer-update-support-nested-voice-apps-without-resource-accounts-hjm1e1w9m0h8/image-3.png&#34;
	width=&#34;1024&#34;
	height=&#34;634&#34;
	srcset=&#34;https://heusser.pro/p/m365-call-flow-visualizer-update-support-nested-voice-apps-without-resource-accounts-hjm1e1w9m0h8/image-3_hu_9f6782efd3bc99f6.png 480w, https://heusser.pro/p/m365-call-flow-visualizer-update-support-nested-voice-apps-without-resource-accounts-hjm1e1w9m0h8/image-3_hu_4d758a3f9ac98340.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Old screenshot&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;161&#34;
		data-flex-basis=&#34;387px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When we look at the voice menu in TAC again after the change, we can see that the existing options which previously said &lt;strong&gt;Voice app&lt;/strong&gt; are now called &lt;strong&gt;Resource account&lt;/strong&gt;. I&amp;rsquo;ve replaced the third menu option with a &lt;strong&gt;Voice App&lt;/strong&gt; now.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/m365-call-flow-visualizer-update-support-nested-voice-apps-without-resource-accounts-hjm1e1w9m0h8/image-4.png&#34;
	width=&#34;1482&#34;
	height=&#34;500&#34;
	srcset=&#34;https://heusser.pro/p/m365-call-flow-visualizer-update-support-nested-voice-apps-without-resource-accounts-hjm1e1w9m0h8/image-4_hu_a0d5bb30b1b51d44.png 480w, https://heusser.pro/p/m365-call-flow-visualizer-update-support-nested-voice-apps-without-resource-accounts-hjm1e1w9m0h8/image-4_hu_782b1148aab2835c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;New labels&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;296&#34;
		data-flex-basis=&#34;711px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;So, existing configs referencing resource accounts that were previously labeled &lt;strong&gt;Voice app&lt;/strong&gt; are now called &lt;strong&gt;Resource accounts&lt;/strong&gt; and if you want to reference a voice app, you&amp;rsquo;ll need to select &lt;strong&gt;Voice app&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at the PowerShell output again. Notice how the third option now says &lt;strong&gt;ConfigurationEndpoint&lt;/strong&gt; and not &lt;strong&gt;ApplicationEndpoint&lt;/strong&gt; anymore. Both options are valid configurations and can be mixed and matched as you need but it&amp;rsquo;s important to understand the difference.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;PS &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;E:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;heusser-pro&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-v2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$aa&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-CsAutoAttendant&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Identity&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;9516a748&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;95e5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;4024&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-aae1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;5f11fad27a52&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;PS &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;E:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;heusser-pro&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-v2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$aa&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;DefaultCallFlow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Menu&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;MenuOptions&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Action&lt;/span&gt;         &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TransferCallToTarget&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;DtmfResponse&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Tone1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;VoiceResponses&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;CallTarget&lt;/span&gt;     &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Type &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ApplicationEndpoint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;n&#34;&gt;Id&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0ae17201&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;09fb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;4434&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-ac7b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;66681fb34345&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Prompt&lt;/span&gt;         &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Action&lt;/span&gt;         &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TransferCallToTarget&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;DtmfResponse&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Tone2&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;VoiceResponses&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;CallTarget&lt;/span&gt;     &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Type &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ApplicationEndpoint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;n&#34;&gt;Id&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;1ba43d85&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;20c8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;41bf-a474&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;9b771877b4be&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Prompt&lt;/span&gt;         &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Action&lt;/span&gt;         &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TransferCallToTarget&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;DtmfResponse&lt;/span&gt;   &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Tone3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;VoiceResponses&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;CallTarget&lt;/span&gt;     &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Type &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ConfigurationEndpoint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                 &lt;span class=&#34;n&#34;&gt;Id&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;82c392e9-ec73&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;4890&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-bc5e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;99d385f935b9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Prompt&lt;/span&gt;         &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;updated-m365-call-flow-visualizer&#34;&gt;Updated M365 Call Flow Visualizer
&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;ve updated the M365 Call Flow Visualizer to support nested voice apps which don&amp;rsquo;t have associated resource accounts anymore.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/m365-call-flow-visualizer-update-support-nested-voice-apps-without-resource-accounts-hjm1e1w9m0h8/Demo_AA_CallFlow-1.png&#34;
	width=&#34;6790&#34;
	height=&#34;6910&#34;
	srcset=&#34;https://heusser.pro/p/m365-call-flow-visualizer-update-support-nested-voice-apps-without-resource-accounts-hjm1e1w9m0h8/Demo_AA_CallFlow-1_hu_4a17f151c7f1e367.png 480w, https://heusser.pro/p/m365-call-flow-visualizer-update-support-nested-voice-apps-without-resource-accounts-hjm1e1w9m0h8/Demo_AA_CallFlow-1_hu_a16b3ebab893ced2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Successfully generated diagram&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;98&#34;
		data-flex-basis=&#34;235px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The visualizer has always only shown an auto attendant or a call queue as a node element, regardless of which resource account was linked, it&amp;rsquo;s still the same in the current version. As you can see in the diagram above, both the keys 2 and 3 point to the same auto attendant even though one menu option is referencing the resource account and the other one is referencing the auto attendant directly (voice app).&lt;/p&gt;
&lt;h2 id=&#34;additional-notes&#34;&gt;Additional Notes
&lt;/h2&gt;&lt;p&gt;Even though the functionality to link voice apps without resource accounts have been added to TAC already, it will still display a warning that all voice apps must have an associated resource account.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/m365-call-flow-visualizer-update-support-nested-voice-apps-without-resource-accounts-hjm1e1w9m0h8/image-2.png&#34;
	width=&#34;2405&#34;
	height=&#34;674&#34;
	srcset=&#34;https://heusser.pro/p/m365-call-flow-visualizer-update-support-nested-voice-apps-without-resource-accounts-hjm1e1w9m0h8/image-2_hu_a3f352a250881fc6.png 480w, https://heusser.pro/p/m365-call-flow-visualizer-update-support-nested-voice-apps-without-resource-accounts-hjm1e1w9m0h8/image-2_hu_6179c22762fb7f10.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;TAC Warning&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;356&#34;
		data-flex-basis=&#34;856px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Call flows which don&amp;rsquo;t have any resource accounts associated with them, are not supported in historical reports yet. Availability for this is expected in early 2025 according to &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/posts/miguelcorteguera_set-up-a-microsoft-teams-auto-attendant-activity-7260296970555027456-MPow?utm_source=share&amp;amp;utm_medium=member_desktop&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; LinkedIn post.&lt;/p&gt;
&lt;p&gt;From what I can see, auto attendants or call queues will not show up in Teams search either because there is no user account object to search for.&lt;/p&gt;
&lt;h2 id=&#34;version-notes&#34;&gt;Version Notes
&lt;/h2&gt;&lt;p&gt;If you&amp;rsquo;re already making use of this new capability, make sure to pull the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;repo&lt;/a&gt; or download the latest version to be able to generate diagrams for these new call flows. You&amp;rsquo;ll need version &lt;strong&gt;3.1.9&lt;/strong&gt;. This version also fixes and issue where an inbound number was shown multiple times in case a nested voice app looped back to the initial top-level voice app. A full change log can be found &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer/blob/main/Changelog.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When I wrote this blog, I didn&amp;rsquo;t think about writing additional code to reflect in the diagram if a &lt;strong&gt;TransferCallToTarget&lt;/strong&gt; or &lt;strong&gt;TransferCallToOperator&lt;/strong&gt; action is transferring to a voice app or a resource account. However, the longer I thought about it, the more sense it made. I&amp;rsquo;ve already got a new version (3.2.0) ready for your to try in my dev branch on &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer/tree/dev&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a wild example. As you can see, each &lt;strong&gt;TransferCallToTarget&lt;/strong&gt; node which goes to either an auto attendant or a call queue now shows if it&amp;rsquo;s transferring to a resource account or the voice app itself.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/m365-call-flow-visualizer-update-support-nested-voice-apps-without-resource-accounts-hjm1e1w9m0h8/Demo_AA_CallFlow-2.png&#34;
	width=&#34;7840&#34;
	height=&#34;29870&#34;
	srcset=&#34;https://heusser.pro/p/m365-call-flow-visualizer-update-support-nested-voice-apps-without-resource-accounts-hjm1e1w9m0h8/Demo_AA_CallFlow-2_hu_4762f5895fa462c.png 480w, https://heusser.pro/p/m365-call-flow-visualizer-update-support-nested-voice-apps-without-resource-accounts-hjm1e1w9m0h8/Demo_AA_CallFlow-2_hu_811e5b004058fa2d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Version 3.2.0 including voice app/resource account information for transfers&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;26&#34;
		data-flex-basis=&#34;62px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;As you can imagine, maintaining the code and keeping up with Microsoft&amp;rsquo;s changes takes up a lot of my spare time. If you want to support me, you can do that &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/support-me&#34; &gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>iOS Deep Link to Open Specific Email in Outlook App</title>
        <link>https://heusser.pro/p/ios-deep-link-to-open-specific-email-in-outlook-app-firi7irtgqzn/</link>
        <pubDate>Tue, 10 Dec 2024 09:36:29 +0000</pubDate>
        
        <guid>https://heusser.pro/p/ios-deep-link-to-open-specific-email-in-outlook-app-firi7irtgqzn/</guid>
        <description>&lt;img src="https://heusser.pro/p/ios-deep-link-to-open-specific-email-in-outlook-app-firi7irtgqzn/cover.png" alt="Featured image of post iOS Deep Link to Open Specific Email in Outlook App" /&gt;&lt;p&gt;I cannot believe that the day on which I&amp;rsquo;m finally able to write &lt;em&gt;this&lt;/em&gt; blog post has finally come. I&amp;rsquo;m not exaggerating. I have been trying to solve this and find a way to open specific emails (using the message id) in Outlook for more than &lt;strong&gt;five&lt;/strong&gt; years.&lt;/p&gt;
&lt;p&gt;This may seem like a very small thing to most but to me, this is really big. And based on various forum posts online, I know that other people were looking for a way to do this as well. Of course, one of these &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/60339181/open-link-to-specific-email-message-directly-in-outlook-for-ios-uri-scheme-de&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;forum posts&lt;/a&gt; is from myself, from 4 years and 9 months ago.&lt;/p&gt;
&lt;p&gt;When ChatGPT was released, I tried to search for a solution again but all that happened was that I was let down by an over confident AI generated answer that turned out to do exactly nothing for me.&lt;/p&gt;
&lt;p&gt;So, today, I felt like it&amp;rsquo;s time to try my luck again. I guess if I had a middle name, it would be &lt;em&gt;Determination&lt;/em&gt;. I found this other Stack Overflow &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/64214137/open-received-email-via-ms-outlook-emails-uri-scheme&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;post&lt;/a&gt;, on which I apparently also commented coincidentally exactly (on the day) 1 year ago!&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;Can you please try to decompile the Microsoft To Do APK? If an email is flagged and there&amp;rsquo;s a task for it in To Do Flagged Emails, there&amp;rsquo;s a button to open the email in Outlook. I think To Do holds the answer how you can open an Email by id in Outlook&amp;hellip;&lt;/p&gt;&lt;span class=&#34;cite&#34;&gt;&lt;span&gt;― &lt;/span&gt;&lt;span&gt;Myself&lt;/span&gt;&lt;cite&gt;&lt;/cite&gt;&lt;/span&gt;&lt;/blockquote&gt;
&lt;p&gt;The next thing I know was that I downloaded the To Do APK, decompiled it using an online tool and when I searched for &lt;code&gt;ms-outlook://&lt;/code&gt; I found this line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(Uri.parse(&amp;#34;ms-outlook://emails/message/open?restID=&amp;#34; + str + &amp;#34;&amp;amp;immutableID=&amp;#34; + str2 + &amp;#34;&amp;amp;account=&amp;#34; + str3))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;There you have it Ladies and Gentlemen, this is how you link to a specific email using the message id in Outlook on iOS.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ms-outlook://emails/message/open?restID=&amp;lt;messageId&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Now I can finally link to an email and open it directly in Outlook on iOS from wherever I want. I mostly use this for notifications sent through Power Automate but it works from any app which supports links.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/ios-deep-link-to-open-specific-email-in-outlook-app-firi7irtgqzn/image.png&#34;
	width=&#34;1902&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/ios-deep-link-to-open-specific-email-in-outlook-app-firi7irtgqzn/image_hu_b36dc70247d05532.png 480w, https://heusser.pro/p/ios-deep-link-to-open-specific-email-in-outlook-app-firi7irtgqzn/image_hu_a2a742cca7a62104.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;iOS Deep Link for Specific Email in Power Automate&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;383px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/ios-deep-link-to-open-specific-email-in-outlook-app-firi7irtgqzn/20241210_103309094_iOS.gif&#34;
	width=&#34;443&#34;
	height=&#34;960&#34;
	srcset=&#34;https://heusser.pro/p/ios-deep-link-to-open-specific-email-in-outlook-app-firi7irtgqzn/20241210_103309094_iOS_hu_6cc83b832ec95609.gif 480w, https://heusser.pro/p/ios-deep-link-to-open-specific-email-in-outlook-app-firi7irtgqzn/20241210_103309094_iOS_hu_a8ed15a43407c7d0.gif 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Open Specific Email Demo&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;For what it&amp;rsquo;s worth, this is much easier with the iOS stock &lt;strong&gt;Mail&lt;/strong&gt; app. There you just have to create a link with &lt;code&gt;message:&amp;lt;messageId&amp;gt;&lt;/code&gt;. But of course it&amp;rsquo;s much nicer to directly open the email in Outlook as many companies don&amp;rsquo;t allow anything else than Outlook.&lt;/p&gt;
&lt;p&gt;I haven&amp;rsquo;t tested this on Android but given that I got the link from the APK, I&amp;rsquo;m quite sure that this will work on Android as well.&lt;/p&gt;
&lt;p&gt;I hope this made your day as well!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Understanding Microsoft Entra ID App Registrations, Enterprise Apps and Service Principals</title>
        <link>https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/</link>
        <pubDate>Thu, 05 Dec 2024 15:17:25 +0000</pubDate>
        
        <guid>https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/</guid>
        <description>&lt;h2 id=&#34;intro&#34;&gt;Intro
&lt;/h2&gt;&lt;p&gt;I once read a joke on X which I just vaguely remembered. Somebody was looking for a job in IT and the person hiring was like:&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;&lt;em&gt;If you can tell me the difference between an Entra app registration and an enterprise app, I&amp;rsquo;ll hire you.&lt;/em&gt;&lt;/p&gt;&lt;span class=&#34;cite&#34;&gt;&lt;span&gt;― &lt;/span&gt;&lt;span&gt;Some guy on X&lt;/span&gt;&lt;cite&gt;&lt;/cite&gt;&lt;/span&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/cover.png&#34;
	width=&#34;726&#34;
	height=&#34;669&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/cover_hu_79cae35b24a4d528.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/cover_hu_b8a8b0395ae5c27c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;108&#34;
		data-flex-basis=&#34;260px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re a seasoned developer, you might already know all of this but if you&amp;rsquo;re a systems administrator coming from a more traditional world, like I am, much of the stuff I&amp;rsquo;m covering today might be new, confusing, overwhelming or all the above to you. But rest assured, I didn&amp;rsquo;t fully understand it either until today.&lt;/p&gt;
&lt;p&gt;I want to highlight that identity isn&amp;rsquo;t my primary focus, but it was still very important to me to understand all aspects of Entra applications. Most of the blog posts that already exist about Entra applications are written by professional developers and just assume that you&amp;rsquo;re already familiar with certain things. That&amp;rsquo;s what I&amp;rsquo;m trying to do differently with this article.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll give you an example. Let&amp;rsquo;s say you need to change the usage location of an Entra ID user, and you want to do it with PowerShell. A couple of years ago, you could just install the AzureAD PowerShell module, log in with your account and get it done by running &lt;code&gt;Set-AzureADUser -ObjectId user@domain.com -UsageLocation CH&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In today&amp;rsquo;s world you need to connect to Microsoft Graph using the Microsoft Graph PowerShell SDK (Microsoft.Graph.* PowerShell modules) and you need to make sure that the appropriate permissions have been granted to the enterprise app before you can do that, even if the account you&amp;rsquo;re using to sign in already has the permissions to do the same action in the Entra Admin Center.&lt;/p&gt;
&lt;p&gt;In this particular example, I&amp;rsquo;m talking about what&amp;rsquo;s referred to as an enterprise app or an enterprise application. The name of the official enterprise app that&amp;rsquo;s used to access your tenant when using the Graph PowerShell modules is &lt;strong&gt;Microsoft Graph Command Line Tools&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image_hu_96263d9e9aee30a.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image_hu_b23b3e1ed1942567.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Microsoft Graph Command Line Tools Enterprise Application&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;You can see that it says &lt;strong&gt;Enterprise Application&lt;/strong&gt; below the name in the screenshot above. However, when you search for its Application ID, it lists the name under &lt;strong&gt;Enterprise Applications&lt;/strong&gt;, but it also says &lt;strong&gt;Service Principal&lt;/strong&gt; next to it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-1.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-1_hu_a7d43b28fd91fa6.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-1_hu_eda6b27c5396877a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Application ID search results&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Because this app is owned and published by Microsoft, there&amp;rsquo;s no app registration for it in your tenant. You can only see the enterprise app. Only Microsoft can see the app registration in the tenant in which they registered the app (created the app registration).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s recap this quickly. Microsoft created an app registration for the Microsoft Graph Command Line Tools and published it. Any Entra ID admin can now add this app to their tenant as an enterprise app and use it to connect to Microsoft Graph via PowerShell.&lt;/p&gt;
&lt;p&gt;So, when I use &lt;code&gt;Connect-MgGraph&lt;/code&gt; and don&amp;rsquo;t specify my own Client Id, I&amp;rsquo;m automatically signing in to Microsoft&amp;rsquo;s enterprise app.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-3.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-3_hu_ba3d95f260795a3c.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-3_hu_7cfa598ab939230e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Partial output of Get-MgContext&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;whats-the-difference-between-an-enterprise-app-and-a-service-principal&#34;&gt;What&amp;rsquo;s the difference between an enterprise app and a service principal?
&lt;/h2&gt;&lt;p&gt;They are the same thing. Enterprise apps are just what they are called in the Entra Admin Center but they&amp;rsquo;re essentially service principals. The naming and UI elements here are very confusing. We already saw that searching for the app id in Entra Admin Center will say Service Principal next to the app but throughout this article, I&amp;rsquo;m going to show you more proof why every enterprise app is a service principal.&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s a service principal then?&lt;/p&gt;
&lt;p&gt;A service principal is always linked to an application (registration) either in your tenant or in another tenant. They inherit and share some of their properties, like the app id from their linked application. In essence, a service principal is an instance, or a child object, if you will, of a global application registered in Entra ID but it&amp;rsquo;s unique to your tenant. Even if another tenant owns the app, service principals will allow you to manage how and by which users the app will be used.&lt;/p&gt;
&lt;p&gt;If you search for &lt;code&gt;Service Principal&lt;/code&gt; in the global Entra Admin Center search box it will list &lt;strong&gt;Enterprise applications&lt;/strong&gt; as the top result.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-4.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-4_hu_c5e5a15bfee28006.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-4_hu_8fb91e57aab5e3f4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Entra Admin Center search results&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;whats-the-difference-between-the-application-id-and-the-object-id-of-an-enterprise-app&#34;&gt;What&amp;rsquo;s the difference between the application ID and the Object ID of an Enterprise App?
&lt;/h3&gt;&lt;p&gt;These are the descriptions when you click on the little (i) icons on an enterprise app in Entra Admin Center:&lt;/p&gt;
&lt;h4 id=&#34;application-id&#34;&gt;Application ID
&lt;/h4&gt;&lt;blockquote&gt;
    &lt;p&gt;This is the unique application ID of this application in your directory. You can use this application ID if you ever need help from Microsoft Support, or if you want to perform operations against this specific instance of the application using Microsoft Graph or PowerShell APIs.&lt;/p&gt;&lt;span class=&#34;cite&#34;&gt;&lt;span&gt;― &lt;/span&gt;&lt;span&gt;Entra Admin Center&lt;/span&gt;&lt;cite&gt;&lt;/cite&gt;&lt;/span&gt;&lt;/blockquote&gt;
&lt;p&gt;The application id is the same in all tenants where the enterprise app has been added to.&lt;/p&gt;
&lt;h4 id=&#34;object-id&#34;&gt;Object ID
&lt;/h4&gt;&lt;blockquote&gt;
    &lt;p&gt;This is the unique ID of the service principal object associated with this application. This ID can be useful when performing management operations against this application using PowerShell or other programmatic interfaces.&lt;/p&gt;&lt;span class=&#34;cite&#34;&gt;&lt;span&gt;― &lt;/span&gt;&lt;span&gt;Entra Admin Center&lt;/span&gt;&lt;cite&gt;&lt;/cite&gt;&lt;/span&gt;&lt;/blockquote&gt;
&lt;p&gt;The object id is unique in every tenant to which the enterprise app has been added to. If an enterprise app is deleted and later added again, the object id will also change. The application id on the other hand is the same in every tenant because it&amp;rsquo;s derived of the application id of the registered app for which the service principal was created.&lt;/p&gt;
&lt;h3 id=&#34;adding-an-enterprise-app-to-your-tenant&#34;&gt;Adding an Enterprise App to Your Tenant
&lt;/h3&gt;&lt;p&gt;Providers/publishers of enterprise apps will typically give you a link which you have to open in order to grant admin consent on behalf of your organization. Granting admin consent will add the enterprise app to your tenant and requires global administrator rights.&lt;/p&gt;
&lt;p&gt;In the case of the Microsoft Graph Command Line Tools, the enterprise app can be added simply by running &lt;code&gt;Connect-MgGraph&lt;/code&gt;. This will open the browser and ask you for your consent.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-6.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-6_hu_cb95241fa5bb298a.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-6_hu_d06298f67c7aa572.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Grant admin consent to add the enterprise app&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve just added the Microsoft Graph Command Line Tools enterprise app to a tenant where it didn&amp;rsquo;t exist before. If I check the audit log of the enterprise app, I can clearly see that there&amp;rsquo;s been an action for &lt;strong&gt;Add service principal&lt;/strong&gt; even though the portal is calling it an enterprise application.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-7.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-7_hu_1c541fef0100fa4f.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-7_hu_632cb95c0d77d8c0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Enterprise application audit log&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-8.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-8_hu_3352a86bb5b65a88.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-8_hu_a4093eb35702e4bb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Add service principal audit log details&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Since it&amp;rsquo;s obvious that the same thing is sometimes called an enterprise app but sometimes it&amp;rsquo;s also called a service principal, I&amp;rsquo;ll try my best to stick to whatever the screenshots or code examples are calling it at the time. So, if the screenshot/code example is saying enterprise app, I&amp;rsquo;ll call it an enterprise app. If it&amp;rsquo;s saying service principal, I&amp;rsquo;m referring to it as a service principal as well.&lt;/p&gt;
&lt;h2 id=&#34;im-a-sys-admin-why-should-i-care-about-all-of-this&#34;&gt;I&amp;rsquo;m a Sys Admin, why should I care about all of this?
&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s quickly go back to the example I used in the intro of this post. Let&amp;rsquo;s assume that all you want to do is to use PowerShell to change the usage location of a user. Why should you care about all of this? Why do you need an app for this? And what even is an app in this context? Is it an enterprise app or an app registration?&lt;/p&gt;
&lt;p&gt;If you use the official Microsoft Graph Command Line Tools enterprise app, which you are when you run &lt;code&gt;Connect-MgGraph&lt;/code&gt; without specifying your own &lt;code&gt;-ClientId&lt;/code&gt; then you don&amp;rsquo;t need to worry about all this too much. All you need to do is to ask somebody with global admin permissions to add the enterprise app to your tenant and consent to the &lt;code&gt;User.Write.All&lt;/code&gt; permission. That is, if you don&amp;rsquo;t have global admin rights yourself.&lt;/p&gt;
&lt;p&gt;I purposely chose the Microsoft Graph Command Line Tools enterprise app for this example because a lot of Sys Admins will need that to do their job. The thing with PowerShell scripts is that there won&amp;rsquo;t always be something that&amp;rsquo;s graspable, something that can be referred to as an app. A script is not really an app, but it still needs an Entra application to sign into Microsoft Graph to do whatever it needs to do.&lt;/p&gt;
&lt;p&gt;This is different from when we look at a &lt;em&gt;real&lt;/em&gt;, graspable app like Zoom for example. In that case, we have the Zoom app (the Zoom client installed on a device). But we&amp;rsquo;ll also need to grant permissions the Zoom enterprise app to read/write the signed in user&amp;rsquo;s calendar information if users want to link their Exchange calendar to Zoom.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-10.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-10_hu_569c1f1df82738c5.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-10_hu_a42209a2fc4066e7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Example: Zoom enterprise app&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The Zoom app and the Zoom enterprise app are definitely not the same thing even though both are called an app. Assigning the enterprise app to users won&amp;rsquo;t install Zoom on their devices. That&amp;rsquo;s what Intune is for.&lt;/p&gt;
&lt;p&gt;So, as a Sys Admin, you might not be developing the next Zoom app that will be used by millions of people in thousands of Entra ID tenants, but you simply want to create a PowerShell script that changes the usage location of an Entra ID user.&lt;/p&gt;
&lt;p&gt;The Microsoft Graph Command Line Tools enterprise app can only exist once in each tenant so if the entire IT staff of a company is using the same app to manage Entra ID, consented permissions can accumulate and spiral out of control rather quickly. There is a good article about that from Tony Redmond over at &lt;a class=&#34;link&#34; href=&#34;https://practical365.com/connect-microsoft-graph-powershell-sdk/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Practical 365&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to avoid that, then you&amp;rsquo;ll need to create your own app to connect to Graph. This is where you&amp;rsquo;ll have to deal with app registrations.&lt;/p&gt;
&lt;h2 id=&#34;what-are-app-registrations&#34;&gt;What Are App Registrations?
&lt;/h2&gt;&lt;p&gt;Adding an enterprise app is only possible when an app registration already exists either in your own tenant or in an external one.&lt;/p&gt;
&lt;p&gt;When I go to enterprise apps in Entra Admin Center and click on &lt;strong&gt;Create your own application&lt;/strong&gt; and then select &lt;strong&gt;Register an application to integrate with Microsoft Entra ID (App you&amp;rsquo;re developing)&lt;/strong&gt; and click &lt;strong&gt;Create&lt;/strong&gt; nothing happens just yet. Instead, I&amp;rsquo;m redirected to the &lt;strong&gt;App registrations&lt;/strong&gt; page.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-11.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-11_hu_c9861e2986b0040e.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-11_hu_3530a8176326e3d9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Trying to create a new enterprise app…&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-9.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-9_hu_6f8fe73ad55f4294.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-9_hu_f9ed2205ba4ca686.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;…will take you to App registrations&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This means that there is no such thing as an enterprise app without an existing app registration. Not even in PowerShell. I&amp;rsquo;ll talk more about this later.&lt;/p&gt;
&lt;p&gt;The Entra Admin Center specifically says &lt;strong&gt;App you&amp;rsquo;re developing&lt;/strong&gt; but it could also be &lt;em&gt;just&lt;/em&gt; a script that you&amp;rsquo;re developing.&lt;/p&gt;
&lt;h3 id=&#34;create-an-app-registration&#34;&gt;Create an App Registration
&lt;/h3&gt;&lt;h4 id=&#34;in-entra-admin-center&#34;&gt;In Entra Admin Center
&lt;/h4&gt;&lt;p&gt;App registrations can be found in the Entra Portal under &lt;code&gt;Identity\Applications\App registrations&lt;/code&gt;. Enterprise applications are also found in the same menu, which is another reason why it&amp;rsquo;s so hard to differentiate between the two. As you can see in the screenshot below, there is no app registration for &lt;strong&gt;Microsoft Graph Command Line Tools&lt;/strong&gt; in my tenant even though I&amp;rsquo;ve added the enterprise app before.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-12.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-12_hu_215a71c17754e958.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-12_hu_9717079fced8f001.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;App registrations in Microsoft Entra Admin Center&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;An app registration is essentially exactly what the name says. It simply registers an app in Entra ID. When you create a new app registration, you&amp;rsquo;re basically just telling Entra ID that this app now exists but you can&amp;rsquo;t really do anything with the app registration alone.&lt;/p&gt;
&lt;p&gt;An Entra app can be registered to be added to either a single tenant (the tenant in which you register it), Multitenant (any Entra ID tenant) or Multitenant + personal Microsoft Accounts which are used for sign-ins with Microsoft 365 Family/Outlook.com/Skype/Xbox etc.&lt;/p&gt;
&lt;p&gt;If you want to use this app to connect to Graph PowerShell in a script and you only need to manage your own tenant, making it available in your tenant only is the choice to go with. If you were in fact developing the next Zoom, you should choose to make it multi-tenant.&lt;/p&gt;
&lt;p&gt;Here I&amp;rsquo;m creating a new single-tenant app registration called &lt;strong&gt;Graph PowerShell Demo (Created in Portal)&lt;/strong&gt;. If you want to sign into your app in Graph PowerShell, you also need to set the &lt;strong&gt;Redirect URI&lt;/strong&gt; to &lt;strong&gt;Public client/native (mobile &amp;amp; desktop)&lt;/strong&gt; and configure &lt;code&gt;http://localhost&lt;/code&gt; as the redirect URI.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-13.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-13_hu_c11a9b2d342776d3.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-13_hu_de77d22d1a62c0ad.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Register a new application&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This is what you&amp;rsquo;ll see after the app registration has been created.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-16.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-16_hu_7af48fd2ed59da16.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-16_hu_5f8e08a3a6017951.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;App registration after it’s been created in the portal&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;A very important part which is not often mentioned is that when you register a new app in the portal, an enterprise app (service principal) is automatically created for it as well.&lt;/p&gt;
&lt;p&gt;When I search for the &lt;strong&gt;application (client) ID&lt;/strong&gt; of the newly created app in Entra ID, two objects are returned. An app registration (application) and an enterprise application (service principal).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-14.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-14_hu_db88a2ac764698c2.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-14_hu_543d45edae755870.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;App registration and enterprise application in search results&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;We can also see this very clearly in the audit log. First the application (app registration) is added and immediately after that, the service principal (enterprise app) is added as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-15.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-15_hu_fa3b13b0b2763fc8.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-15_hu_642beffd97ca7fd3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Audit log after creating a new app registration in the portal&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In the details for the &lt;strong&gt;Add application&lt;/strong&gt; activity the modified properties include a property named &lt;strong&gt;ServicePrincipalLockConfiguration&lt;/strong&gt; which is a Json object and includes &lt;code&gt;&amp;quot;IsEnabled&amp;quot;: &amp;quot;true&amp;quot;&lt;/code&gt;. I &lt;em&gt;think&lt;/em&gt; that this is the part where the Entra Admin Center tells the provisioning backend to create a service principal for the app registration as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-18.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-18_hu_bbf1282aac997bde.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-18_hu_2ac4f322832ae06.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Add application log details&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;For the &lt;strong&gt;Add service principal&lt;/strong&gt; activity we can see that the modified properties include the &lt;strong&gt;Application (client) ID&lt;/strong&gt; as value for the &lt;strong&gt;ServicePrincipalName&lt;/strong&gt; and &lt;strong&gt;TargetId.ServicePrincipalNames&lt;/strong&gt; properties.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-17.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-17_hu_24aa6a2fade84e52.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-17_hu_28f1008dec6d6558.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Add service principal log details&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;in-powershell&#34;&gt;In PowerShell
&lt;/h4&gt;&lt;p&gt;To register a new app in PowerShell you have two options. You can either use the recently &lt;a class=&#34;link&#34; href=&#34;https://techcommunity.microsoft.com/t5/microsoft-entra-blog/introducing-the-microsoft-entra-powershell-module/ba-p/4173546/page/2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;announced&lt;/a&gt; &lt;strong&gt;Microsoft.Graph.Entra&lt;/strong&gt; module which is still in preview at the time of writing, or you can use the Cmdlet which is part of the &lt;strong&gt;Microsoft.Graph.Applications&lt;/strong&gt; module.&lt;/p&gt;
&lt;h5 id=&#34;with-entra-powershell-module&#34;&gt;With Entra PowerShell Module
&lt;/h5&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/microsoft.graph.entra/new-entraapplication?view=entra-powershell&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docs&lt;/a&gt; for &lt;code&gt;New-EntraApplication&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-PowerShell&#34; data-lang=&#34;PowerShell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Connect-Entra&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Scopes&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Application.ReadWrite.All&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$appName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Graph PowerShell Demo (Created with Entra PS)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$newApp&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;New-EntraApplication&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-DisplayName&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$appName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h5 id=&#34;with-microsoft-graph-powershell&#34;&gt;With Microsoft Graph PowerShell
&lt;/h5&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/microsoft.graph.applications/new-mgapplication?view=graph-powershell-1.0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Docs&lt;/a&gt; for &lt;code&gt;New-MgApplication&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-PowerShell&#34; data-lang=&#34;PowerShell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Connect-MgGraph&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Scopes&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Application.ReadWrite.All&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$appName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Graph PowerShell Demo (Created with Graph PS)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$newApp&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;New-MgApplication&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-DisplayName&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$appName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Both Cmdlets are called &lt;code&gt;New-*Application&lt;/code&gt; but in the portal this action is called &lt;strong&gt;Register an application&lt;/strong&gt;. The menu which lists applications in the portal is called &lt;strong&gt;App registrations&lt;/strong&gt; but in PowerShell we use &lt;code&gt;Get-EntraApplication&lt;/code&gt; or &lt;code&gt;Get-MgApplication&lt;/code&gt; to retrieve registered apps.&lt;/p&gt;
&lt;p&gt;As if this wasn&amp;rsquo;t confusing enough already, we now have to understand that what is presented to us as an &lt;strong&gt;app registration&lt;/strong&gt; in the portal is sometimes also called &lt;em&gt;just&lt;/em&gt; an &lt;strong&gt;application&lt;/strong&gt;. When you create a new app registration, you&amp;rsquo;re creating a new application by registering it. The portal takes the verb &lt;strong&gt;registering&lt;/strong&gt; and converts it into a noun by calling it an &lt;strong&gt;app registration&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The outcome of both the above examples is exactly the same. For the sake of simplicity, I&amp;rsquo;m only going to focus on &lt;strong&gt;Graph PowerShell Demo (Created with Entra PS)&lt;/strong&gt; in this section.&lt;/p&gt;
&lt;p&gt;As you can see below, when the app is created through PowerShell, no enterprise app is created automatically. Only the application is created (registered).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-19.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-19_hu_d3baf158c8ac2a9c.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-19_hu_896013b4b3edeef8.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;The enterprise app/service principal is missing&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;We have the audit log to back this up. It&amp;rsquo;s only showing an &lt;strong&gt;Add application&lt;/strong&gt; action.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-20.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-20_hu_906f42a891559c3c.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-20_hu_ea3130e717c2acea.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Audit log is only showing add application&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;h6 id=&#34;add-a-service-principal-with-powershell&#34;&gt;Add a Service Principal with PowerShell
&lt;/h6&gt;&lt;p&gt;When you view the &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/entra-powershell/manage-apps?view=entra-powershell&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;documentation&lt;/a&gt; for managing applications using the Entra PowerShell module, it becomes clear that registering an application and adding a service principal are two separate actions requiring different Cmdelts. There is absolutely no reference at all about enterprise apps on that Microsoft Learn page. They only talk about service principals.&lt;/p&gt;
&lt;p&gt;To add a service principal for an app you registered using &lt;code&gt;New-EntraApplication&lt;/code&gt; you&amp;rsquo;ll need to run this code to add a service principal for it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;New-EntraServicePrincipal&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-AppId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$newApp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;AppId&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;After this, you&amp;rsquo;ll see an app registration and an enterprise app when you search for the app id in the Entra Admin Center.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-21.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-21_hu_c3d1b401cf387193.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-21_hu_c30cbf154c3f2931.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Enterprise app created with PowerShell&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I told you earlier that you cannot create an enterprise app/service principal if no app has been registered for it before.&lt;/p&gt;
&lt;p&gt;I tried to create a new service principal without specifying an app id anyway and I was immediately prompted for an AppId.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-23.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-23_hu_1828a45eddccfe0.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-23_hu_2f985137096462cc.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Prompt for required parameter -AppId&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;As expected, the &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/microsoft.graph.entra/new-entraserviceprincipal?view=entra-powershell#-appid&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;documentation&lt;/a&gt; for &lt;code&gt;NewEntraServicePrincipal&lt;/code&gt; lists the &lt;code&gt;-AppId&lt;/code&gt; parameter as required. Funny enough, the &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/microsoft.graph.applications/new-mgserviceprincipal?view=graph-powershell-1.0#-appid&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;docs&lt;/a&gt; for &lt;code&gt;New-MgServicePrincipal&lt;/code&gt; say it&amp;rsquo;s not required but that&amp;rsquo;s definitely not the case.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-24.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-24_hu_31de6e487d1e4b3.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-24_hu_1d1f9deb719a739.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Error details of New-MgServicePrincipal without -AppId&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;connect-to-graph-powershell-using-your-own-app&#34;&gt;Connect to Graph PowerShell Using Your Own App
&lt;/h2&gt;&lt;p&gt;Now that I have an app registration and a service principal, I can use the application id to sign into Graph PowerShell.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-PowerShell&#34; data-lang=&#34;PowerShell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$tenantId&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;4bffbf87-53a0-4fce-b58b-4179cb3a3b7d&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$appId&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;90b85c34-0c3f-4d69-9668-ea74f20e5d62&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Connect-MgGraph&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-NoWelcome&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-TenantId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$tenantId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ClientId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$appId&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;If I&amp;rsquo;m doing this for the first time, I&amp;rsquo;m prompted for admin consent. Note that you&amp;rsquo;ll need to specify the redirect URI either when creating the app registration through PowerShell or you&amp;rsquo;ll have to do it manually in the portal afterwards. Otherwise, this won&amp;rsquo;t work.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-26.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-26_hu_b4ac1020c17096f1.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-26_hu_5e0075b5da97ff3b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Admin consent request&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now you can see that I&amp;rsquo;m signed in using my own app and I&amp;rsquo;m not using the &lt;strong&gt;Microsoft Graph Command Line Tools&lt;/strong&gt; app anymore.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-98.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-98_hu_fa8a8a9961191ac3.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-98_hu_c28c6f1e8c1b446b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Partial output of Get-MgContext&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When I finally try to update a user&amp;rsquo;s usage location with an account that has global admin rights, I still get an error message because of insufficient privileges. This is because the &lt;strong&gt;User.ReadWrite.All&lt;/strong&gt; permission is not part of the &lt;strong&gt;Scopes&lt;/strong&gt; yet. I&amp;rsquo;ll show you how to add that later on.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-27.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-27_hu_7d658d3680f5fd30.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-27_hu_e37d8416fb4eab8c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Insufficient privileges&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;what-if-there-is-no-enterprise-appservice-principal-yet&#34;&gt;What if there is no Enterprise App/Service Principal Yet?
&lt;/h3&gt;&lt;p&gt;When you&amp;rsquo;re automating the registering of an app through a script, there&amp;rsquo;s no reason why you wouldn&amp;rsquo;t also create the service principal through the same PowerShell script but since this is a deep dive, I&amp;rsquo;m going to show you an alternative way anyway.&lt;/p&gt;
&lt;p&gt;If an app registration is only telling Entra ID that an app exists, and no service principal exists for the app registration, will I still be able to sing in and use it?&lt;/p&gt;
&lt;p&gt;The answer to this question is yes and no. Technically, you cannot use only an app registration to sign into the app. However, when you connect to Microsoft Graph and specify the &lt;code&gt;-ClientId&lt;/code&gt; of an app registration that does not have a service principal yet, one is automatically created after you&amp;rsquo;ve granted admin consent.&lt;/p&gt;
&lt;p&gt;Since I&amp;rsquo;ve already added a service principal for &lt;strong&gt;Graph PowerShell Demo (Created with Entra PS)&lt;/strong&gt; with PowerShell, I&amp;rsquo;m going to demo this using the app called &lt;strong&gt;Graph PowerShell Demo (Created with Graph PS)&lt;/strong&gt; which I&amp;rsquo;ve created with &lt;code&gt;New-MgApplication&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This app currently only has an app registration but no enterprise app/service principal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-25.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-25_hu_ca50d1bd6c25ee20.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-25_hu_cb683a4629c8efbe.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Graph PowerShell Demo (Created with Graph PS)&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I did however add &lt;code&gt;http://localhost&lt;/code&gt; as a redirect URI in the app registration through the portal after I&amp;rsquo;ve created the app with PowerShell.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-28.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-28_hu_68d327a8bf66cb0c.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-28_hu_def9a61d9e1119ce.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Authentication page of the app registration&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now watch what happens when I sign into the app through &lt;code&gt;Connect-MgGraph&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;First of all, I need to grant consent for this app as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-30.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-30_hu_ecd8c5a1b1f2a855.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-30_hu_fb959ef2b554cb81.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Admin consent request&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;After granting the consent I&amp;rsquo;m in.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-29.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-29_hu_82dc275bc51301b6.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-29_hu_40de374f4ef6863b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Partial output of Get-MgContext&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;But how is that possible when there&amp;rsquo;s no service principal for this app registration yet? Well, this also triggered the creation of a new service principal, just like signing into Graph PowerShell using the Microsoft Graph Command Line Tools did.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-31.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-31_hu_a2d7a65f77fa279b.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-31_hu_9c211b345a72ba1b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;The enterprise app/service principal was created after consent was granted.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;And of course, this can also be seen in the audit log.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-35.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-35_hu_efe324c066177228.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-35_hu_859424e52c9cb847.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Audit log actions after signing into the app for the first time&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;quickly-switch-between-an-app-registration-and-its-service-principal&#34;&gt;Quickly Switch Between an App Registration and It&amp;rsquo;s Service Principal
&lt;/h3&gt;&lt;p&gt;When you&amp;rsquo;re managing apps and frequently need to switch between configuring the app registration and it&amp;rsquo;s enterprise app, the quickest way to do so is to open the &lt;strong&gt;API permissions&lt;/strong&gt; menu on the app registration or the &lt;strong&gt;Permissions&lt;/strong&gt; menu on the enterprise app.&lt;/p&gt;
&lt;p&gt;When you&amp;rsquo;re viewing an app registration, there&amp;rsquo;s a link called &lt;strong&gt;Enterprise applications&lt;/strong&gt; at the bottom of the browser window which will take you directly to the enterprise app of this app registration.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-32.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-32_hu_261a2eaf1a1e39a2.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-32_hu_73164bc3fbe3935e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;API permissions in an app registration&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;To get from an enterprise to its app registration (if it was registered in your tenant) you can click on the &lt;strong&gt;Application registration&lt;/strong&gt; link in the middle of the browser window.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-33.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-33_hu_b15133ba8a7b1cf5.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-33_hu_3620e6a76e2ba28d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Permissions in enterprise app&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Obviously, this part is missing from an enterprise app for which no app registration exists in your tenant.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-34.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-34_hu_a2c39101c81fa360.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-34_hu_9f19262d3c0773d4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Example: Microsoft Graph Command Line Tools&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;quick-recap&#34;&gt;Quick Recap
&lt;/h2&gt;&lt;p&gt;If you&amp;rsquo;re still with me, I&amp;rsquo;d like to recap and elaborate on a couple of things. App registrations register an app in the Microsoft Entra Eco System. An application (client) ID of an app registration is unique across all Entra ID tenants. That&amp;rsquo;s documented &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/entra-powershell/manage-apps?view=entra-powershell#register-an-application&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. Therefore, an app registration can only exist in &lt;strong&gt;one&lt;/strong&gt; tenant.&lt;/p&gt;
&lt;p&gt;An enterprise app is the same thing as a service principal. The Entra Admin center and other UI elements typically use the term enterprise application but Graph PowerShell and audit logs typically use the term service principal for them.&lt;/p&gt;
&lt;p&gt;Enterprise apps can be added and exist in any tenant. If you register a new app in the Entra Admin Center, you&amp;rsquo;ll see both an app registration and an enterprise app for it in your tenant. Because they&amp;rsquo;re directly linked to each other, they always share the same display name and application id.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re adding an enterprise app from a vendor, you won&amp;rsquo;t see an app registration in your tenant because the app was registered as a multi-tenant app in a different tenant.&lt;/p&gt;
&lt;p&gt;When you create an app registration in the portal, a service principal is automatically added as well. When you create a new app registration through PowerShell you have to manually create a service principal for it.&lt;/p&gt;
&lt;p&gt;App registrations are also called &lt;em&gt;just&lt;/em&gt; applications and until a service principal is created for them, they don&amp;rsquo;t really do anything except telling Entra ID that the app exists and specifying what permissions should be requested when an enterprise app for the app registration is added. When signing into your app, the service principal is used.&lt;/p&gt;
&lt;h2 id=&#34;renaming-apps&#34;&gt;Renaming Apps
&lt;/h2&gt;&lt;p&gt;Entra Admin Center will allow you to rename app registrations and enterprise apps. When you rename either one of them, the other one is automatically updated as well.&lt;/p&gt;
&lt;p&gt;I first changed the name of the enterprise app by adding &lt;code&gt; - Enterprise App&lt;/code&gt; to it, hoping this would result in different names to better distinguish between the app registration and the enterprise app. But this is not the case. In the audit log I can now see that both the service principal and the app registration were updated.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-36.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-36_hu_889865e684c75d92.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-36_hu_d0a28be6fd7a5051.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Service principal rename audit log&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-37.png&#34;
	width=&#34;2324&#34;
	height=&#34;1550&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-37_hu_6f097f80794cf86c.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-37_hu_ea167b8db9da76b0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;App registration rename audit log&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s the same case the other way around. When you change the name of an app registration, the enterprise app is renamed as well.&lt;/p&gt;
&lt;p&gt;What about renaming a multi-tenant enterprise app? If I&amp;rsquo;m not the owner of the app/if the app hasn&amp;rsquo;t been registered in my tenant, it&amp;rsquo;s not possible to rename an enterprise app. Here&amp;rsquo;s the example of the Microsoft Graph Command Line Tools enterprise app again to demonstrate this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-38.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-38_hu_24f935ac95f9d9af.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-38_hu_63935db3bda7a281.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;The name is greyed out&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;​Some of the displayed properties that are not editable are managed on the application registration in the application&amp;rsquo;s home tenant.&lt;/p&gt;&lt;span class=&#34;cite&#34;&gt;&lt;span&gt;― &lt;/span&gt;&lt;span&gt;Entra Admin Center&lt;/span&gt;&lt;cite&gt;&lt;/cite&gt;&lt;/span&gt;&lt;/blockquote&gt;
&lt;p&gt;To show you what happens to enterprise apps in other tenants, when you&amp;rsquo;re the owner of a multi-tenant app and you&amp;rsquo;re renaming the app registration, I must first create one.&lt;/p&gt;
&lt;h2 id=&#34;creating-a-multi-tenant-app&#34;&gt;Creating a Multi-Tenant App
&lt;/h2&gt;&lt;p&gt;As I&amp;rsquo;ve briefly explained before, the reason why you&amp;rsquo;d want to register a multi-tenant app is if you&amp;rsquo;re developing an app which will need to access data from customer tenants through Microsoft Graph. This could also be something much simpler though. For example, it could be a reporting solution which will access and process Teams call records from customer tenants.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s good practice to register multi-tenant apps in dedicated tenants. If you&amp;rsquo;re planning to develop an app which needs a registered Entra application, don&amp;rsquo;t create it in your main tenant you need for your internal day to day operations. Instead, create a dedicated service tenant which is only used to administer the resources needed for the app/service you&amp;rsquo;re developing/providing.&lt;/p&gt;
&lt;p&gt;For this article, I&amp;rsquo;ll call the tenant in which I register the multi-tenant app the &lt;strong&gt;Service Tenant&lt;/strong&gt;. After all, the call records I want to access are in my lab tenant and I want to show you how data in my lab tenant can be accessed from another tenant. So, if I registered the multi-tenant app in my lab tenant, I&amp;rsquo;d need another lab tenant with actual data in it. For this part, I&amp;rsquo;m going to call my lab tenant the &lt;strong&gt;Customer Tenant&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Note: Although the icons are very small, you can see which tenant I&amp;rsquo;m currently in by looking at the Edge profile icon (top left) or the user account icon (top right) in the screenshots.&lt;/p&gt;
&lt;p&gt;This time, I&amp;rsquo;m creating a new app registration for a multi-tenant app and I&amp;rsquo;m doing this in the service tenant.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-40.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-40_hu_2a90c588eaf15222.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-40_hu_b9f3055fca9ecb93.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Register a new multi-tenant application&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Because I used the portal to do this, this creates an app registration and an enterprise app in the service tenant.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve added a couple of delegated permissions to this app now, but I didn&amp;rsquo;t grant admin consent in the service tenant.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-39.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-39_hu_9c966924aa0c7a09.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-39_hu_2a808d44aa3b42e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Delegated permissions of multi-tenant app registration&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;adding-multi-tenant-app-to-another-tenant&#34;&gt;Adding Multi-Tenant App to Another Tenant
&lt;/h3&gt;&lt;p&gt;To add the multi-tenant app to my customer tenant, I&amp;rsquo;m simply connecting to Microsoft Graph PowerShell using it&amp;rsquo;s app id and the tenant id of the customer tenant.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-41.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-41_hu_52a552f9ee79b34c.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-41_hu_c9c7df7107e2e36a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Connect-MgGraph to add multi-tenant app&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Of course, I&amp;rsquo;ll have to grant consent for this as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-42.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-42_hu_c07f4cfd494fe628.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-42_hu_8a2aad0a2ed0b785.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Consent request dialog&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;After granting admin consent, the enterprise app has been added to my customer tenant, even though the app registration was created in the service tenant.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-43.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-43_hu_824f7396f79a2656.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-43_hu_d8f1652ed6156fe3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Enterprise app of multi-tenant app registration&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;Permissions&lt;/strong&gt; I can see that the enterprise app has the same permissions that were configured on the app registration in the service tenant.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-44.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-44_hu_3f0dca0048b1883b.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-44_hu_9404b5a8e9aa69a0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Multi-tenant enterprise app permissions&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;renaming-a-multi-tenant-app&#34;&gt;Renaming a Multi-Tenant App
&lt;/h3&gt;&lt;p&gt;Now that I have a multi-tenant app, let&amp;rsquo;s revisit what happens when it&amp;rsquo;s renamed.&lt;/p&gt;
&lt;p&gt;In the service tenant, I&amp;rsquo;ve now renamed the app from &lt;strong&gt;Graph PowerShell (Multi-Tenant)&lt;/strong&gt; to &lt;strong&gt;Graph PowerShell (Multi-Tenant) V2&lt;/strong&gt;. In my customer tenant, the name of the enterprise app/service principal was not updated, however, the name of the app was updated under properties.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-45.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-45_hu_29cb25b9bb5004c4.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-45_hu_fce38b4071d43049.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Updated name in properties&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When I check the Microsoft Graph context after signing in, I can also see the new app name. The tenant id is the one from my customer tenant.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-46.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-46_hu_792005a3f4ce36e8.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-46_hu_cfc76d8c856a4973.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Partial output of Get-MgContext&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This is a great example to show that the app name and the app id of the enterprise app are in fact linked to the app registration of the service tenant but since the enterprise app is a unique instance with its own object id only present in the customer tenant, the enterprise app&amp;rsquo;s display name was not updated.&lt;/p&gt;
&lt;h2 id=&#34;am-i-using-the-service-principal-or-the-app-registration-to-sign-in&#34;&gt;Am I using the Service Principal or the App registration to Sign In?
&lt;/h2&gt;&lt;p&gt;Wait, didn&amp;rsquo;t I say before that the service principal and not the app registration is used to sign into an app? So why does it show the new name of the app and not the unchanged name of the service principal in Microsoft Graph context?&lt;/p&gt;
&lt;p&gt;This is very confusing indeed. But looking at this from a multi-tenant perspective should help clear things up. In the customer tenant, there is no app registration, only a service principal. How would I be able to sign into the customer tenant using the app registration, if it doesn&amp;rsquo;t exist in the customer tenant? It&amp;rsquo;s just not possible.&lt;/p&gt;
&lt;p&gt;But let&amp;rsquo;s compare the app registration and the enterprise app in the service tenant again. By the way, here you can see that both the app registration and the enterprise app were renamed, just like when I renamed the single tenant app in my customer tenant.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-47.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-47_hu_593ae52e9782ac69.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-47_hu_fde595bccf18bbbe.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;App registration&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-48.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-48_hu_5669ba721e059c69.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-48_hu_301e530ac8e7dde0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Enterprise app&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Notice how there is no &lt;strong&gt;Activity&lt;/strong&gt; section on the left navigation pane for the app registration. &lt;strong&gt;Sign-in logs&lt;/strong&gt; are only available for the enterprise app. This is another fact which proves that the service principal is used for signing in.&lt;/p&gt;
&lt;p&gt;Since I&amp;rsquo;ve never signed in to the app in the service tenant, the sign-in logs are empty there.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-49.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-49_hu_8c63fe561363e94b.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-49_hu_dea45fded1d7468f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Empty sign-in logs in service tenant&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In the customer tenant, the sign-in logs show two sign ins because I signed in again, after I changed the name of the app registration in the service tenant. The name of the enterprise app now says &lt;strong&gt;Graph PowerShell (Multi-Tenant) V2&lt;/strong&gt; because I&amp;rsquo;ve deleted the enterprise app and added it again, to test if it would be added with the new name. Since the log filter is set to &lt;strong&gt;application&lt;/strong&gt; it will show sign in logs from both the old and the new service principal but in this particular example, the name of the application changed to &lt;strong&gt;V2&lt;/strong&gt; without deleting and adding the app again.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-51.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-51_hu_1e9bccadd22969e5.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-51_hu_770f9af13ed7db15.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Sign-in logs in the customer tenant&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;As I&amp;rsquo;ve said before, the service principal object is created in the customer tenant, when the multi-tenant app is added. Therefore, the name of the service principal does not update when the app registration is renamed in the service (home) tenant but the name of the app that&amp;rsquo;s linked to this service principal does update in all tenants.&lt;/p&gt;
&lt;p&gt;If the enterprise app is deleted from the customer tenant and added again, the enterprise app/service principal will be created with the new name of the app registration.&lt;/p&gt;
&lt;p&gt;If you pay attention to the sign in logs of the enterprise app/service principal, you can see that that it filters for &lt;strong&gt;Application contains&lt;/strong&gt; and it&amp;rsquo;s using the app id and not the object id of the service principal as value. I couldn&amp;rsquo;t find any reference of the service principal&amp;rsquo;s object id in the sign-in logs. The key is that the service principal is linked to the app registration by its application id. I &lt;em&gt;think&lt;/em&gt; this is how Entra knows which service principal needs to be used.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s turn to Microsoft Graph to see if I can find more information. To get the properties of the service principal, I need to specify the object id of the service principal because the app registration does not exist in the customer tenant.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$mgServicePrincipal&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-MgServicePrincipal&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ServicePrincipalId&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;e66c003a-c7e0-46c0-906a-4e30e0d85ab4&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$mgServicePrincipal&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Format-List&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;princ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;audience&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-50.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-50_hu_f24c758f762b1827.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-50_hu_6d2a3d9fca9598c1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Partial output of Get-MgServicePrincipal&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;There are a couple of things to unwrap here. First of all, the &lt;strong&gt;AppOwnerOrganizationId&lt;/strong&gt; includes the tenant id of the service tenant (tenant in which the application was registered). The &lt;strong&gt;Id&lt;/strong&gt; of the service principal is what&amp;rsquo;s listed in Entra Admin Center as &lt;strong&gt;Object Id&lt;/strong&gt;. I should probably mention again that I deleted the enterprise app and added it again, that&amp;rsquo;s why both names are the same now.&lt;/p&gt;
&lt;p&gt;Both the &lt;strong&gt;AppId&lt;/strong&gt; and the &lt;strong&gt;ServicePrincipalNames&lt;/strong&gt; are set to the app id of the app registration in the service tenant. The portal doesn&amp;rsquo;t show you this, but I &lt;em&gt;think&lt;/em&gt; that&amp;rsquo;s why you only see the app id but never the object id of the service principal.&lt;/p&gt;
&lt;p&gt;I wouldn&amp;rsquo;t be me if I didn&amp;rsquo;t rename the app registration in the service tenant to &lt;strong&gt;Graph PowerShell (Multi-Tenant) V3&lt;/strong&gt; again after discovering this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-52.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-52_hu_28f4809ec777a0ee.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-52_hu_d47ce6b5ca690.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;AppDisplayName and DisplayName are now different&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This tells us that the &lt;strong&gt;AppDisplayName&lt;/strong&gt; is the display name of the app registration which comes from the service (home) tenant. The &lt;strong&gt;DisplayName&lt;/strong&gt; is the name of the enterprise app/service principal display name specific to the customer tenant.&lt;/p&gt;
&lt;p&gt;In conclusion, you&amp;rsquo;re using the application to sign in, but you&amp;rsquo;ll need a service principal for the app to do so.&lt;/p&gt;
&lt;h2 id=&#34;control-who-can-sign-into-your-app&#34;&gt;Control Who Can Sign Into Your App
&lt;/h2&gt;&lt;p&gt;Further proof that enterprise apps/service principals are used when signing in is that you define who can use/access your app on the enterprise app configuration page and not on the app registration. If you want to limit who can sign into your app, you need to enable &lt;strong&gt;Assignment required?&lt;/strong&gt; and set this to &lt;strong&gt;Yes&lt;/strong&gt; on the enterprise app&amp;rsquo;s &lt;strong&gt;Properties&lt;/strong&gt;. In the screenshot below, I&amp;rsquo;m modifying the properties of the multi-tenant enterprise app which I&amp;rsquo;ve previously added to my customer tenant.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-54.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-54_hu_a8f562b04dfa30cc.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-54_hu_85e7fc7395ada832.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Set assignment required to yes&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Under &lt;strong&gt;Users and groups&lt;/strong&gt; I can now define which users and/or groups are allowed to sign into the app.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-53.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-53_hu_f6b395e4790d5acc.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-53_hu_893a4327184b59d1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Users and groups configuration of enterprise app&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When I try to sign in with a user which isn&amp;rsquo;t allowed under &lt;strong&gt;Users and groups&lt;/strong&gt; I get an error message.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-55.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-55_hu_fb852084957fbeb3.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-55_hu_4d85cc8e465eb6c0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Error message when user doesn’t have the enterprise app assigned&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If assignment required? is enabled, not even global admins can sign in, if they&amp;rsquo;re not explicitly allowed.&lt;/p&gt;
&lt;h2 id=&#34;permissions-on-applications&#34;&gt;Permissions on Applications
&lt;/h2&gt;&lt;p&gt;As you may have noticed, there are permissions in both app registrations and enterprise apps. But what do they do?&lt;/p&gt;
&lt;h3 id=&#34;delegated-vs-application-permissions&#34;&gt;Delegated vs Application Permissions
&lt;/h3&gt;&lt;p&gt;First, you need to understand the difference between delegated and application permissions. Delegated permissions require a signed in user and requests are made as the signed in user but the app which is used to connect to Graph has to have the appropriate delegated permissions.&lt;/p&gt;
&lt;p&gt;For example, if you want to change the usage location of an Entra ID user via Graph PowerShell, your account needs to have the &lt;strong&gt;User Administrator&lt;/strong&gt; role assigned and the app which you are using to connect to Graph needs to have the delegated permission &lt;strong&gt;User.Write.All&lt;/strong&gt; configured and consented.&lt;/p&gt;
&lt;p&gt;Just because your account can perform an action in the Entra Admin Center, it doesn&amp;rsquo;t mean that you&amp;rsquo;ll also be able to perform the same action in Graph PowerShell unless the delegated permission has been specifically configured on the app that you&amp;rsquo;re using to connect to Graph. Configuring something in the portal doesn&amp;rsquo;t require explicit permissions in addition to having an Entra Admin role assigned. But doing the same action through the Graph API requires an explicit permission on the app you want to use.&lt;/p&gt;
&lt;p&gt;You should always follow the &lt;strong&gt;least&lt;/strong&gt; &lt;strong&gt;privilege&lt;/strong&gt; principle and only configure the permission that are actually needed. This &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/graph/permissions-reference&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;link&lt;/a&gt; is a good reference to learn what each permission does. I also highly recommend checking all your existing applications which can access Graph via PowerShell and make sure that only admin users are allowed to sign into the apps.&lt;/p&gt;
&lt;p&gt;Application permissions mean that an app will be able to perform actions without a signed in user. In this case, the action is performed as the app itself. You&amp;rsquo;ll need either a client secret or a certificate for that.&lt;/p&gt;
&lt;h2 id=&#34;add-permissions-to-applications&#34;&gt;Add Permissions to Applications
&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s look at different examples/scenarios.&lt;/p&gt;
&lt;h3 id=&#34;you-own-the-app-registration&#34;&gt;You own the App Registration
&lt;/h3&gt;&lt;p&gt;In this example, I&amp;rsquo;m using the &lt;strong&gt;Graph PowerShell Demo (Created in Portal)&lt;/strong&gt; app which was created in the customer tenant again. When the app registration is created through the portal, the delegated permission &lt;strong&gt;User.Read&lt;/strong&gt; is added as a &lt;strong&gt;configured&lt;/strong&gt; permission by default. Admin consent has not been granted yet and I&amp;rsquo;ve never signed into this app before. Thus, the permissions of the enterprise app are empty.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-56.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-56_hu_a43f4a693c647559.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-56_hu_3439b3849a9b8f81.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Configured permissions of app registration&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-57.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-57_hu_740d4126d8a1b982.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-57_hu_178e51d088955217.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Permissions of enterprise app&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When I click &lt;strong&gt;Grant admin consent&lt;/strong&gt; on the enterprise app, a new browser window opens and asks me to consent to the permissions which are configured in the app registration. Signing into this app through Graph PowerShell for the first time would have the same effect.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-58.png&#34;
	width=&#34;2322&#34;
	height=&#34;1459&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-58_hu_7ee771578e0b00e5.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-58_hu_11d0ea7a7b7333ad.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Admin consent request&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Let me add a new configured permission on the app registration.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-59.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-59_hu_b0fd00e22ffb5d2b.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-59_hu_d7ec25a1d79496a3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;User.Read.All added to configured permissions of app registration&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I have not yet consented &lt;strong&gt;User.Read.All&lt;/strong&gt;, that&amp;rsquo;s why it&amp;rsquo;s showing as &lt;strong&gt;Not granted&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;When I sign into Graph PowerShell using the app id of this app, the scope is not added to the session.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-60.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-60_hu_5a5267369e8e7ec2.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-60_hu_1d94417ae47e224.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;User.Read.All scope is missing&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I can grant admin consent for the added permission on the app registration from the portal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-61.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-61_hu_5c8ffa19a1b31018.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-61_hu_c9a7b4d0f4571f1a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Grant admin consent on app registration&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When I connect to Graph again and check the context again, I can now see the &lt;strong&gt;User.Read.All&lt;/strong&gt; scope.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-62.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-62_hu_b4c8cc061dd0341b.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-62_hu_f20d5b718cb96c9a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Available scopes/permissions&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The configured permissions of an app registration tell the enterprise app what permissions should be requested during the consent process.&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;Applications are authorized to call APIs when they are granted permissions by users/admins as part of the consent process. The list of configured permissions should include all the permissions the application needs.&lt;/p&gt;&lt;span class=&#34;cite&#34;&gt;&lt;span&gt;― &lt;/span&gt;&lt;span&gt;Entra Admin Center&lt;/span&gt;&lt;cite&gt;&lt;/cite&gt;&lt;/span&gt;&lt;/blockquote&gt;
&lt;p&gt;When I check the permissions of the enterprise app, I can see that the &lt;strong&gt;User.Read.All&lt;/strong&gt; permission was also added to the enterprise app.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-63.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-63_hu_5f808091225125d5.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-63_hu_62b54b3ed17240ed.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Added permission on enterprise app&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;add-a-permission-without-adding-it-configured-permissions-first&#34;&gt;Add a permission without adding it configured permissions first
&lt;/h4&gt;&lt;p&gt;Although this isn&amp;rsquo;t following best practice, it&amp;rsquo;s also possible to add new permissions to the enterprise app without adding them to the app registration&amp;rsquo;s configured permissions first. To do so, I&amp;rsquo;m simply adding the scopes I want when I&amp;rsquo;m connecting to Graph PowerShell.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Connect-MgGraph&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-NoWelcome&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-TenantId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$tenantId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ClientId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$appId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Scopes&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Group.Read.All&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Guess what happens now? Yep, I&amp;rsquo;m prompted to consent again.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-64.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-64_hu_5cc9a2f57533d25b.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-64_hu_f319f20f87fb86a3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;New consent request dialog&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When I check the permissions of the enterprise app, I can see that the &lt;strong&gt;Group.Read.All&lt;/strong&gt; permission was added to it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-65.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-65_hu_cc90cb38e541b92b.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-65_hu_35d308fe4889a75a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Enterprise app permissions&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;However, when I go back to the app registration, the freshly consented permission shows up under &lt;strong&gt;Other permissions granted&lt;/strong&gt; and not under &lt;strong&gt;Configured permissions&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-66.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-66_hu_ff95f616ff886e2e.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-66_hu_d4eb8854c3d51f10.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;App registration permissions&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Entra Admin Center says the following about this:&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;These permissions have been granted for NoCapTech but aren&amp;rsquo;t in the configured permissions list. If your application requires these permissions, you should consider adding them to the configured permissions list.&lt;/p&gt;&lt;span class=&#34;cite&#34;&gt;&lt;span&gt;― &lt;/span&gt;&lt;span&gt;Entra Admin Center&lt;/span&gt;&lt;cite&gt;&lt;/cite&gt;&lt;/span&gt;&lt;/blockquote&gt;
&lt;p&gt;If a permission is required for your app, you can use the three dots to add other permissions to the app&amp;rsquo;s configured permissions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-99.png&#34;
	width=&#34;2322&#34;
	height=&#34;1459&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-99_hu_650dd29f15fa4f68.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-99_hu_42814f299ecb514a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Add other permissions to configured permissions of app registration&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;remove-permissions&#34;&gt;Remove Permissions
&lt;/h3&gt;&lt;p&gt;Let&amp;rsquo;s not forget that we&amp;rsquo;re still on a mission to change a user&amp;rsquo;s usage location using PowerShell. The &lt;strong&gt;Users.Read.All&lt;/strong&gt; permission won&amp;rsquo;t help us here because it doesn&amp;rsquo;t include &lt;strong&gt;write&lt;/strong&gt; permission. Let&amp;rsquo;s remove that one and add &lt;strong&gt;Users.Write.All&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I can either remove a permission or only revoke its admin consent. In this case I want to remove it entirely, so I must first remove it and then revoke the admin consent.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-100.png&#34;
	width=&#34;2322&#34;
	height=&#34;1459&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-100_hu_fd1c44287fb94cf2.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-100_hu_eaac84311b700301.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Remove permission from app registration&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-101.png&#34;
	width=&#34;2322&#34;
	height=&#34;1459&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-101_hu_90173876dfe440ad.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-101_hu_652de3aada54597b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Revoke admin consent for permission&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now I&amp;rsquo;m going to add the &lt;strong&gt;Users.ReadWrite.All&lt;/strong&gt; permission and grant admin consent for it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-102.png&#34;
	width=&#34;2322&#34;
	height=&#34;1459&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-102_hu_def984ec1abd2f3d.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-102_hu_55b7bc7c7602f6ac.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Add permission&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-103.png&#34;
	width=&#34;2322&#34;
	height=&#34;1459&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-103_hu_251cb4c768598e95.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-103_hu_78546bb6a60a02f5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Grant admin consent&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Because I&amp;rsquo;ve added this permission to the configured permissions, the next time I&amp;rsquo;m signing into Graph PowerShell using this app id, the permission will be available by default.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-104.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-104_hu_12ca02eb2c4a365e.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-104_hu_848fe65ccd2e7fb6.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Partial output of Get-MgContext&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This means that I&amp;rsquo;m now finally able to update a user&amp;rsquo;s usage location using PowerShell.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-105.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-105_hu_6833fdbb91afcb83.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-105_hu_f4f0e8537ddf677a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;No more error messages!&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In case you were wondering, this doesn&amp;rsquo;t work if the signed in user doesn&amp;rsquo;t have the &lt;strong&gt;User Administrator&lt;/strong&gt; (or higher permissions) assigned to them. Just because a delegated permission like &lt;strong&gt;User.Write.All&lt;/strong&gt; has been configured and consented on an Entra application, it doesn&amp;rsquo;t mean that any user which is allowed to sign into Graph PowerShell will be able to perform write actions on users.&lt;/p&gt;
&lt;p&gt;Because I didn&amp;rsquo;t set &lt;strong&gt;Assignment required?&lt;/strong&gt; to &lt;strong&gt;Yes&lt;/strong&gt;, any user (including non-admin users) in the customer tenant can now sign into Graph PowerShell but they can&amp;rsquo;t use all the consented scopes/permissions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-124.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-124_hu_8f8930fa591021c5.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-124_hu_745bfb4800b1fafa.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Error message when the signed in user doesn’t have admin permissions&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;you-do-not-own-the-app-registration&#34;&gt;You do not own the App registration
&lt;/h3&gt;&lt;p&gt;In this example, I&amp;rsquo;m using the &lt;strong&gt;Graph PowerShell (Multi-Tenant)&lt;/strong&gt; from the service tenant. Note: I&amp;rsquo;ve re-created this app in the service tenant and named it &lt;strong&gt;V4&lt;/strong&gt; so Ids in screenshots are now different.&lt;/p&gt;
&lt;p&gt;Here are the configured permissions of the service tenant&amp;rsquo;s app registration and the customer tenant&amp;rsquo;s enterprise app in comparison. I&amp;rsquo;m not sure why &lt;strong&gt;email&lt;/strong&gt; hasn&amp;rsquo;t been added to enterprise app. It might be because it&amp;rsquo;s already part of one of the other permissions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-67.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-67_hu_b01f1dea9ad0bcb3.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-67_hu_76b3fcdbe5094853.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;App registration permissions in service tenant&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-68.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-68_hu_4a45b084a71cbf9f.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-68_hu_77475a7028e2fe85.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Enterprise app permissions in customer tenant&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Interestingly enough, &lt;strong&gt;email&lt;/strong&gt; appears in the Graph context.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-69.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-69_hu_5de02b571f68fd5.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-69_hu_136115ed6adc8dd.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Output of Graph context&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Because the app registration in the service tenant has configured permissions, they&amp;rsquo;re automatically requested during the consent process when the app is added as an enterprise app to the customer tenant.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start playing around by adding a new delegated permission to the enterprise app in the customer tenant. For this, I&amp;rsquo;m signing into Graph again by specifying the customer tenant id and the app id of the multi-tenant app that is registered in the service tenant and I&amp;rsquo;m adding &lt;code&gt;-Scopes &amp;quot;User.Read.All&amp;quot;&lt;/code&gt; to &lt;code&gt;Connect-MgGraph&lt;/code&gt;. Because this is a new permission, I have to grant consent for it.&lt;/p&gt;
&lt;p&gt;As expected, the &lt;strong&gt;User.Read.All&lt;/strong&gt; permission is now listed on the enterprise app in the customer tenant.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-70.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-70_hu_6700d66ae453c256.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-70_hu_724cd26fd372a28.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Enterprise app permissions&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This permission has not been added to &lt;strong&gt;Other permissions granted&lt;/strong&gt; in the app registration of the service tenant like it was the case when both the app registration and the enterprise app were available in the same tenant.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-71.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-71_hu_42959b0f1324e5ba.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-71_hu_2098b25c50f99762.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Permissions on app registration in service tenant remain unchanged&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This actually makes a lot of sense. Imagine how many permissions would be here if this was the Microsoft Graph Command Line Tools in Microsoft&amp;rsquo;s service tenant.&lt;/p&gt;
&lt;h3 id=&#34;quick-recap-1&#34;&gt;Quick Recap
&lt;/h3&gt;&lt;p&gt;This means that the owner/publisher of the app registration defines what permissions are needed for their app by adding the required permissions as configured permissions. Whatever permissions are configured on the app registration will be the permissions for which the enterprise app will request consent for. Basically, the configured permissions are the minimal permissions required but if you want, you can still add more permissions to your enterprise app because that is specific to your tenant.&lt;/p&gt;
&lt;p&gt;Another interesting discovery is that the service tenant doesn&amp;rsquo;t actually need to have admin consent granted for the permissions on the app registration or on the enterprise app. When the enterprise app is added to the customer tenant, the consent is granted for this tenant only.&lt;/p&gt;
&lt;p&gt;Admin consent in the service tenant would only be required if the publisher of the app needed to access information in their own service tenant through their own app.&lt;/p&gt;
&lt;p&gt;When I was researching this topic, I briefly panicked and thought that all permissions which are added to the enterprise app/service principal would automatically allow the owner of the app to use these permissions. That would be especially problematic for application permissions. But as I&amp;rsquo;ve just proven, that&amp;rsquo;s not the case. The owner of the app can only use what they&amp;rsquo;ve added under &lt;strong&gt;configured permissions&lt;/strong&gt;. They won&amp;rsquo;t even see what other delegated permissions you&amp;rsquo;ve added to your own enterprise app.&lt;/p&gt;
&lt;h4 id=&#34;delegated-permissions&#34;&gt;Delegated Permissions
&lt;/h4&gt;&lt;p&gt;With delegated permissions, a signed-in user is required. Now what does that mean exactly? When we&amp;rsquo;re talking about using Microsoft Graph PowerShell, this is pretty clear. When you run &lt;code&gt;Connect-MgGraph&lt;/code&gt; you&amp;rsquo;re prompted to sign using your username, password and hopefully MFA.&lt;/p&gt;
&lt;p&gt;After signing in, the PowerShell session will have an access token which includes information about your user account and the app id that you used to sign in.&lt;/p&gt;
&lt;p&gt;This is great for managing Entra ID users and Microsoft 365 services with PowerShell on the fly, like changing the usage location of a user. What delegated permissions are not great for is trying to use them in PowerShell scripts which should run autonomously. If a script is running on some server or in an Azure automation account, there&amp;rsquo;s no way that you&amp;rsquo;ll securely get a token for another user. In that case, you&amp;rsquo;ll want to use application permissions.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s examine another example of delegated permissions using Zoom as a &lt;em&gt;real&lt;/em&gt; app example again. The difference between Zoom and a PowerShell script is that you&amp;rsquo;re signed into Zoom using Entra SSO, so Zoom knows your Entra identity, and it also knows that the signed in user is allowed to read/write the calendar. Unlike a PowerShell script, the Zoom app is something that is continuously running on a user&amp;rsquo;s machine, and there&amp;rsquo;s a server piece to it.&lt;/p&gt;
&lt;p&gt;When you&amp;rsquo;re launching the app, you&amp;rsquo;re authenticating yourself to Zoom and that&amp;rsquo;s when Zoom acquires the token which allows it to read/write your calendar. Therefore, Zoom can&amp;rsquo;t access your calendar when the app is not running or when you&amp;rsquo;re not signed in.&lt;/p&gt;
&lt;h5 id=&#34;microsoft-authentication-library-msal&#34;&gt;Microsoft Authentication Library (MSAL)
&lt;/h5&gt;&lt;p&gt;Then there&amp;rsquo;s the &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/entra/identity-platform/msal-overview&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MSAL&lt;/a&gt; which is available as a PowerShell module (MSAL.PS). In theory, it could be used in a script but if you&amp;rsquo;re not a developer (like I&amp;rsquo;m not) then this will be a whole new rabbit hole to go down. Anyway, even if you were using the MSAL authentication library in a PowerShell script, it would still require the user&amp;rsquo;s credentials which must be passed in an interactive log in flow in order to acquire a token which could then be used inside the script.&lt;/p&gt;
&lt;p&gt;In other words, delegated permissions which typically end in &lt;code&gt;*Read|Write.All&lt;/code&gt; are most commonly used by IT admins when they sign into Microsoft Graph PowerShell interactively by providing their admin credentials. Delegated permissions which do not end in &lt;code&gt;*.All&lt;/code&gt; usually allow an app to only read/write information of the signed in user. They&amp;rsquo;re commonly used by apps like Zoom to access relevant data like a user&amp;rsquo;s calendar.&lt;/p&gt;
&lt;h4 id=&#34;application-permissions&#34;&gt;Application Permissions
&lt;/h4&gt;&lt;p&gt;Application permissions are used if an app or a script needs access to Entra ID resources without a signed in user. Let&amp;rsquo;s just say you have a script which runs daily and checks if all the usage location is matching the country property for all Entra ID users. If that script were to use delegated permissions, somebody would need to manually run it every day because the script would prompt for admin credentials in a browser pop-up every time. Such a script will need to utilize application permissions to run in a truly automated way.&lt;/p&gt;
&lt;p&gt;To be able to use application permissions, you need a client secret or a certificate and these can only be created on the app registration. That means that if a multi-tenant app were to require application permissions, they would need to be part of the app registration&amp;rsquo;s configured permissions and you would be prompted to grant consent when you&amp;rsquo;re adding the enterprise app.&lt;/p&gt;
&lt;p&gt;If you own the app registration yourself, you can add new application permissions to the app registration yourself, but you can&amp;rsquo;t add them directly to the enterprise app, like you can with delegated permissions.&lt;/p&gt;
&lt;h2 id=&#34;application-permissions--app-only-authentication&#34;&gt;Application Permissions / App Only Authentication
&lt;/h2&gt;&lt;h3 id=&#34;accessing-graph-as-application-from-the-service-tenant&#34;&gt;Accessing Graph as application from the Service Tenant
&lt;/h3&gt;&lt;p&gt;I&amp;rsquo;m still using &lt;strong&gt;Graph PowerShell (Multi-Tenant) V4&lt;/strong&gt; as an example. This time, I&amp;rsquo;m going to add a new application permission to the app registration in the service tenant. For this example, I&amp;rsquo;m going to add &lt;strong&gt;CallRecords.Read.All&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-72.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-72_hu_26b44d6c7718dd24.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-72_hu_726b7c5872ea3d63.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Add application permissions&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CallRecords.Read.All&lt;/strong&gt; is now added as &lt;strong&gt;application&lt;/strong&gt; permission in &lt;strong&gt;configured permissions&lt;/strong&gt;. Note that admin consent hasn&amp;rsquo;t been granted for the service tenant.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-73.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-73_hu_8f8a3b7a68a2d6c.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-73_hu_3bc2c09749d3e10f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Configured permissions of app registration in service tenant&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Because this is an application permission, I can&amp;rsquo;t simply run &lt;code&gt;Connect-MgGraph&lt;/code&gt; and add &lt;code&gt;-Scopes &amp;quot;CallRecords.Read.All&lt;/code&gt;. &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/graph/permissions-reference#callrecordsreadall&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;This permission&lt;/a&gt; doesn&amp;rsquo;t even exist as a delegated permission.&lt;/p&gt;
&lt;p&gt;Additionally, adding &lt;code&gt;-Scopes&lt;/code&gt; is not supported when &lt;code&gt;-ClientSecretCredential&lt;/code&gt; is also specified.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-107.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-107_hu_ef6460e5a0eba62.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-107_hu_213b3147102182ec.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Invalid parameter combination error&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;To add the application permission, I need to get a hold of the admin consent link. Normally, when you add an enterprise app, you don&amp;rsquo;t need to manually copy and paste a link. This process is usually neatly integrated into the UI of apps that request permission to access your data through Microsoft Graph.&lt;/p&gt;
&lt;p&gt;As an example, this is the web page that lets me connect Zoom to my Microsoft 365 calendar. As you can see, there is a nice little &lt;strong&gt;Authorize&lt;/strong&gt; button directly embedded in the Zoom admin portal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-74.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-74_hu_e03aeaf58d87205f.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-74_hu_efa921ae79e60549.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Zoom authorization UI/UX example&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When I click &lt;strong&gt;Authorize&lt;/strong&gt; the admin consent dialog is opened in the browser.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-75.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-75_hu_8ff1e7786020d778.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-75_hu_58b3652e24fed9cf.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Zoom admin consent example&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Granting the consent will add the enterprise app. While I&amp;rsquo;m at it, let&amp;rsquo;s check out the permissions which were added for Zoom.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-76.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-76_hu_5792c9ff59d02eaa.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-76_hu_68f5713a45bb1856.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Zoom enterprise app permissions&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Since these are all delegated permissions, it means that the Zoom app can only access my calendar and contacts when I&amp;rsquo;m signed into the Zoom app. But the consent flow is the same for both application and delegated permissions.&lt;/p&gt;
&lt;h4 id=&#34;get-admin-consent-url&#34;&gt;Get Admin Consent URL
&lt;/h4&gt;&lt;p&gt;With the above example, I just wanted to show you what adding an enterprise app usually looks like. I&amp;rsquo;m not sure if there&amp;rsquo;s a better way to obtain the consent link to implement it in your own app but for now, what I&amp;rsquo;m showing you will have to do.&lt;/p&gt;
&lt;p&gt;From the enterprise app in the service tenant, I can click &lt;strong&gt;Grant admin consent&lt;/strong&gt; which will open a new browser window. This only works from the enterprise app. If you clicked grant admin consent on the app registration, the grant consent button will open on the same page, and you won&amp;rsquo;t be able to copy the URL.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-77.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-77_hu_9c09585a62def349.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-77_hu_7f529ea8663c01e9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Grant admin consent button&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-108.png&#34;
	width=&#34;2322&#34;
	height=&#34;1459&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-108_hu_38e9b0775f2eee19.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-108_hu_4a02a988d453217e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;New browser window with admin consent URL&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The new browser window will allow me to copy the URL which will look something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;https://login.microsoftonline.com/536f948a-babb-4048-836d-717833aa0da5/adminConsent?client_id=c199b3df-a49b-4739-b314-c2ee50e6c0bc&amp;amp;redirect_uri=https://entra.microsoft.com/TokenAuthorize
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The first GUID after &lt;strong&gt;login.microsoftonline.com&lt;/strong&gt; is the tenant id of the service tenant. Now I can either replace it with a specific tenant id or just replace it with &lt;code&gt;common&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;https://login.microsoftonline.com/common/adminConsent?client_id=c199b3df-a49b-4739-b314-c2ee50e6c0bc&amp;amp;redirect_uri=https://entra.microsoft.com/TokenAuthorize
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;When I open this link and sign in with the global admin of the customer tenant, I can see the name of the app and that it&amp;rsquo;s requesting the &lt;strong&gt;Read all call records&lt;/strong&gt; permission.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-109.png&#34;
	width=&#34;2322&#34;
	height=&#34;1459&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-109_hu_9d3d319f2a8bad9.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-109_hu_a6dcb2c51caf540a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Admin consent request for Read all call records&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, application permissions are not labeled explicitly as such which makes it hard to understand what permissions are really requested unless the vendor of the enterprise app includes this info in their documentation. An easy way to figure it out is to search for the permission title or the description in the &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/graph/permissions-reference#callrecordsreadall&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;permission reference&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Back in Entra Admin Center, I can now see that the &lt;strong&gt;CallRecords.Read.All&lt;/strong&gt; permission has been added to my enterprise app.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-78.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-78_hu_4191d42244df55a6.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-78_hu_853f07bc488bea75.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Enterprise app permissions before granting consent&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-79.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-79_hu_fb0ed3dedb631de4.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-79_hu_bf7bb37654771b1c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Enterprise app permissions after granting permissions&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Just to emphasize on this again, I did not grant admin consent to the configured permissions on the app registration in the service tenant. Remember that consent is always tenant specific.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-80.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-80_hu_46c77f31596e5a2c.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-80_hu_fb1eeb4bfcb475f3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;App registration permissions in service tenant&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;create-a-secret&#34;&gt;Create a Secret
&lt;/h3&gt;&lt;p&gt;An application can access Graph without a signed in user either through a certificate or a client secret. I&amp;rsquo;m only going to focus on client secrets today.&lt;/p&gt;
&lt;p&gt;On the app registration in the service tenant, I&amp;rsquo;m creating a new client secret.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-81.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-81_hu_80e1778cb6d50704.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-81_hu_8a991ed9c0f7392c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Add a client secret&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Important: the secret is only shown once. As soon as you navigate away from this page, you won&amp;rsquo;t be able to access it again. When you do this, you&amp;rsquo;ll see your client secret. It&amp;rsquo;s only showing a bunch of asterisks for me because I&amp;rsquo;m using the &lt;a class=&#34;link&#34; href=&#34;https://github.com/microsoft/cloudcloak&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Cloud Cloak&lt;/a&gt; extension for Microsoft Edge.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-83.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-83_hu_34076d0105e6dda5.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-83_hu_818454b745a80e8b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Added client secret&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Using the code below, I (or rather the service tenant) can now sign into the customer tenant using the enterprise app/service principal of the customer tenant and the client secret from the service tenant.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s important to understand that I now gave another tenant permission to read all call records in my (customer) tenant without a signed in user of my (customer) tenant.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$tenantId&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;4bffbf87-53a0-4fce-b58b-4179cb3a3b7d&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$appId&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;c199b3df-a49b-4739-b314-c2ee50e6c0bc&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$appSecret&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Read-Host&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-AsSecureString&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;****************************************&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$clientSecretCredential&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;New-Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Management&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Automation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;PSCredential&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$appId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$appSecret&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Connect-MgGraph&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ClientSecretCredential&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$clientSecretCredential&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-TenantId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$tenantId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-NoWelcome&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-82.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-82_hu_34670cc3595451de.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-82_hu_b82f8279b60d9dd2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Connecting to Graph PowerShell with app only authentication&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s check the Graph context.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-84.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-84_hu_bacbabb7ee1a0d5d.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-84_hu_7ba4db2b2ab44ec4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Output of Mg-Context&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The only scope that&amp;rsquo;s currently available is &lt;strong&gt;CallRecords.Read.All&lt;/strong&gt; because that&amp;rsquo;s the only application permission. All the other ones are delegated permissions so they&amp;rsquo;re not available in this session. AuthType is now &lt;strong&gt;AppOnly&lt;/strong&gt; and we&amp;rsquo;re still using the &lt;strong&gt;Graph PowerShell (Multi-Tenant) V4&lt;/strong&gt; app with the client secret from the service tenant.&lt;/p&gt;
&lt;p&gt;Finally, let&amp;rsquo;s see if I can use the app to retrieve a call record from the customer tenant with app only authentication as the service tenant.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-85.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-85_hu_cf2f40e9f4f339ac.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-85_hu_c025040d7c178572.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Getting a call record with app only permission as the service tenant&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Yep, it&amp;rsquo;s working. It took quite a while for the sign-in logs to appear, but I can now see a logged sign in for the service principal in the customer tenant. In the details, I can see the name of the application and the service principal. I can also see the &lt;strong&gt;Application ID&lt;/strong&gt; which is the app id of the app registration in the service tenant and of course, also the app id of the enterprise app/service principal in the customer tenant. The &lt;strong&gt;Client credential type&lt;/strong&gt; is now &lt;strong&gt;Client secret&lt;/strong&gt;. And finally, the &lt;strong&gt;Service principal ID&lt;/strong&gt; is the &lt;strong&gt;Object Id&lt;/strong&gt; of the enterprise app/service principal in the customer tenant.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-86.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-86_hu_143d4ee9e573057a.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-86_hu_cfb61eef857605b6.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Service principal sign in logs in customer tenant&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-87.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-87_hu_56b048d64874e1de.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-87_hu_4c5d7c7466767480.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Sign in details&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Out of curiosity, I checked the sign in logs in the service tenant as well. I want to point out that the enterprise app in the service tenant is still untouched and does not have any consented permissions. Nevertheless, the sign-in logs of the service tenant still log the sign-in activity, even when the sign in happened in the customer tenant. It also lists the &lt;strong&gt;Service principal ID&lt;/strong&gt; of the customer tenant even though that object id doesn&amp;rsquo;t exist in the service tenant. There is no reference of the customer tenant id, though.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-88.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-88_hu_cd2fda8d4c6a0827.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-88_hu_358babf75a7d3fe4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Enterprise app permissions in service tenant&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-89.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-89_hu_3937f686c2cf9ab5.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-89_hu_9839f0a2816271f1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Sign-in log details from service tenant&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When application permissions are used in multi-tenant apps, only the owner/publisher of the app registration will be able to use the application permissions, because you don&amp;rsquo;t have access to the secret and you can&amp;rsquo;t create one for yourself either because you don&amp;rsquo;t have access to the app registration.&lt;/p&gt;
&lt;h3 id=&#34;accessing-graph-as-app-from-your-own-tenant&#34;&gt;Accessing Graph as App from your Own Tenant
&lt;/h3&gt;&lt;p&gt;If you want to use Graph PowerShell with application permission (without a signed in user) in your own tenant, the process is exactly the same as I&amp;rsquo;ve just shown you for a multi-tenant scenario.&lt;/p&gt;
&lt;p&gt;You just need to create your own app registration, assign the required permissions and create a client secret or a certificate for the app. In that case, you&amp;rsquo;ll obviously have to grant admin consent because you want to access Graph as an app in your own tenant.&lt;/p&gt;
&lt;h3 id=&#34;accessing-graph-as-app-using-your-own-app-registration-from-a-3rd-party-app&#34;&gt;Accessing Graph as App using your own App Registration from a 3rd Party App
&lt;/h3&gt;&lt;p&gt;What I described in &lt;a class=&#34;link&#34; href=&#34;#accessing-graph-as-application-from-the-service-tenant&#34; &gt;Accessing Graph as application from the Service Tenant&lt;/a&gt; would allow the service tenant to read call records of all tenants that have consented to their app. Another scenario you might encounter is that a vendor of a software/service asks you to create your own app registration but share/configure your secret in their service.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll use Bitwarden, which is my favorite password manager, as an example for this. Bitwarden allows an organization to sync their Entra ID users to Bitwarden so that you can then specify which of your Entra users will be able to use Bitwarden from their admin portal.&lt;/p&gt;
&lt;p&gt;This is a perfect example of why an app would need &lt;strong&gt;Users.Read.All&lt;/strong&gt; and &lt;strong&gt;Groups.Read.All&lt;/strong&gt; application permissions.&lt;/p&gt;
&lt;p&gt;Bitwarden doesn&amp;rsquo;t actually provide their own enterprise app which can be added to your tenant. Instead, their documentation states that you as the customer have to create your own app registration and which delegated and application permissions you need to add to it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-106.png&#34;
	width=&#34;2322&#34;
	height=&#34;1459&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-106_hu_998d5b39fd55356d.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-106_hu_c0041cfe3618c18b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Required delegated and app permissions for Bitwarden Directory Connector&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Further down the line, their documentation explains that you need to create a client secret. Once you have everything, namely the tenant id, the app id and the client secret, you need to add them to their &lt;strong&gt;Directory Connector&lt;/strong&gt; app.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-110.png&#34;
	width=&#34;2322&#34;
	height=&#34;1459&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-110_hu_2deb8254c23266dc.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-110_hu_af249a0cf305b053.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Bitwarden documentation on how to connect Directory Connector to your Entra app&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t know all the details about this Bitwarden Directory Connector but to put it simply, adding your tenant id, app id and client secret to it, will allow the Directory Connector to read all your Entra users and sync them to the Bitwarden admin portal.&lt;/p&gt;
&lt;p&gt;By doing it like this, Bitwarden delegates the management of the app registration to the customer and they&amp;rsquo;re also making sure that the data in your tenant can only be accessed by your app secret/your own instance of Directory Connector.&lt;/p&gt;
&lt;h2 id=&#34;deleting-apps&#34;&gt;Deleting Apps
&lt;/h2&gt;&lt;p&gt;Lastly, after all this testing, it&amp;rsquo;s time to clean up my lab. Let&amp;rsquo;s see what happens when enterprise apps and app registrations are deleted.&lt;/p&gt;
&lt;h3 id=&#34;deleting-an-enterprise-app&#34;&gt;Deleting an Enterprise App
&lt;/h3&gt;&lt;h4 id=&#34;you-do-not-own-the-app-registration-1&#34;&gt;You Do Not Own the App Registration
&lt;/h4&gt;&lt;p&gt;Since enterprise apps are always tenant specific, deleting an enterprise app will only delete it from your tenant. This has no impact on other tenants. Enterprise applications can be deleted from the &lt;strong&gt;Properties&lt;/strong&gt; menu.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-90.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-90_hu_a681cf6335edfd3c.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-90_hu_3c18b1f8aa6539fb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Properties of multi-tenant enterprise app in customer tenant&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you delete an enterprise app by accident, you can easily add it again by granting consent again. Depending on the app and the required permissions, you can do this by signing into Graph PowerShell or by using the admin consent link again. Because enterprise apps can&amp;rsquo;t be restored, adding one again will generate a new object id for the enterprise app/service principal.&lt;/p&gt;
&lt;h4 id=&#34;your-own-enterprise-applications&#34;&gt;Your Own Enterprise Applications
&lt;/h4&gt;&lt;p&gt;If you delete an enterprise application for which you own the app registration and both are in the same tenant, deleting the enterprise app won&amp;rsquo;t delete the app registration as well. However, deleting the enterprise app will remove previously consented permissions on the app registration too.&lt;/p&gt;
&lt;p&gt;Here, I&amp;rsquo;m deleting the enterprise app called &lt;strong&gt;Graph PowerShell Demo (Created in Portal)&lt;/strong&gt;. Deleting an enterprise app will result in revoking all admin consents, including configured permissions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-91.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-91_hu_e421691dcfa8b48f.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-91_hu_4fda3211bd0da3c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;App registration permissions before the enterprise app was deleted&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-92.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-92_hu_c6e0580ad1c8f922.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-92_hu_a2225e9186288c92.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;App registration permissions after the enterprise app was deleted&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you delete the enterprise app by accident, you can create a new one by granting admin consent on the app registration again. Keep in mind that the new enterprise app will have a different &lt;strong&gt;Object ID&lt;/strong&gt;. The &lt;strong&gt;Application ID&lt;/strong&gt; stays the same, as it&amp;rsquo;s the one of the app registration anyway.&lt;/p&gt;
&lt;h3 id=&#34;deleting-an-app-registration&#34;&gt;Deleting an App Registration
&lt;/h3&gt;&lt;p&gt;When you&amp;rsquo;re deleting app registrations you need to be much more careful.&lt;/p&gt;
&lt;h3 id=&#34;your-own-single-tenant-app-registrations&#34;&gt;Your Own Single-Tenant App Registrations
&lt;/h3&gt;&lt;p&gt;If you delete an app registration for which an enterprise app exists in the same tenant as well, both objects will be deleted.&lt;/p&gt;
&lt;p&gt;App registrations can be deleted from the &lt;strong&gt;Overview&lt;/strong&gt; page.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-93.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-93_hu_7d189012460e6345.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-93_hu_e619223ae10605f8.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Delete app registration&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;a-multi-tenant-app-registration-which-you-own&#34;&gt;A Multi-Tenant App registration which you own
&lt;/h3&gt;&lt;p&gt;If you&amp;rsquo;re the publisher/owner of a multi-tenant app registration and you delete the app registration from your service tenant, both the app registration and the enterprise app/service principal will be deleted from the service tenant. &lt;strong&gt;The enterprise app won&amp;rsquo;t be deleted from customer tenants but customers will no longer be able to sing in and use the app!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let me share a great real life example with you. Until September 9th 2024, the PnP.PowerShell team has provided a multi-tenant app which could be used to sign into the PnP Management Shell. They &lt;a class=&#34;link&#34; href=&#34;https://pnp.github.io/blog/post/changes-pnp-management-shell-registration/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;announced&lt;/a&gt; that the app will be deleted on that day. As a result, any tenant that had added this app as an enterprise app to their tenant can no longer use it. Instead, admins need to &lt;a class=&#34;link&#34; href=&#34;https://pnp.github.io/powershell/articles/registerapplication&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;create their own app&lt;/a&gt; to access the PnP Management Shell.&lt;/p&gt;
&lt;p&gt;If the app registration is deleted in its home tenant by the app publisher/owner, it&amp;rsquo;s best to remove the enterprise app from your own tenant as well.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get back to my lab. I&amp;rsquo;ve now deleted the app registration for &lt;strong&gt;Graph PowerShell (Multi-Tenant) V4&lt;/strong&gt; from the service tenant.&lt;/p&gt;
&lt;p&gt;As expected, after deleting the app registration from the service tenant, it&amp;rsquo;s not possible to sign into the enterprise app in the customer tenant anymore, even though the enterprise app still exists and the permissions of the enterprise app remain unchanged.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-97.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-97_hu_dc56bb54438ff4a5.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-97_hu_75ea54c7f0106496.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Error message when app registration was deleted in service (home) tenant&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-95.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-95_hu_54a299d9f641936b.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-95_hu_8f82bb347cd131a7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Permissions of enterprise app in customer tenant&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;restoring-app-registrations&#34;&gt;Restoring App Registrations
&lt;/h2&gt;&lt;p&gt;Unlike enterprise apps/service principals, app registrations can be restored for up to 30 days. If an app registration was deleted by accident, you can restore it from &lt;strong&gt;Deleted applications&lt;/strong&gt; in the &lt;strong&gt;App registrations&lt;/strong&gt; menu.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-96.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-96_hu_bcd2af6a91f63a2f.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-96_hu_6dc5c190e47fa686.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Restoring deleted app registration in service tenant&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This will restore the enterprise app in the home tenant as well. In my case, both the consented permissions for the enterprise app and the app registration were restored as well. I did restore it right after deleting it though. The results might be different, if more time passes between deletion and restore.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get to the million dollar question. Is there any action to be taken in the customer tenant after an app registration was deleted and restored from the service tenant?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-94.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-94_hu_76037a741d2d7135.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-94_hu_e7e5c53760327774.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Successful sign in after the app registration was restored in the service tenant&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In my case, signing in to Graph PowerShell worked again just a few seconds after the app registration was restored in the service tenant. Again, this might differ if the time difference between deletion and restore is bigger.&lt;/p&gt;
&lt;h2 id=&#34;other-types-of-service-principals&#34;&gt;Other Types of Service Principals
&lt;/h2&gt;&lt;p&gt;So far, we&amp;rsquo;ve learned that every enterprise application is also a service principal. But is every service principal also an enterprise application? Not quite. If you navigate to the &lt;strong&gt;Enterprise applications&lt;/strong&gt; page in Entra Admin Center, you&amp;rsquo;ll notice that the filter is automatically set to &lt;code&gt;Application type == Enterprise Application&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-111.png&#34;
	width=&#34;2322&#34;
	height=&#34;1459&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-111_hu_f01b25551ad3a315.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-111_hu_bc5cbffa2b8f1590.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Enterprise applications view&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;That means that the portal will only show enterprise apps which have explicitly been added by an admin (or a user if not blocked) to your tenant.&lt;/p&gt;
&lt;p&gt;To block users from adding enterprise apps to your tenant, go to &lt;strong&gt;Enterprise applications&lt;/strong&gt; in Entra Admin Center and then click on &lt;strong&gt;Consent and permissions&lt;/strong&gt; on the left navigation pane.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-127.png&#34;
	width=&#34;2322&#34;
	height=&#34;1459&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-127_hu_1940e9f95f974fe4.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-127_hu_ef0581bf83859541.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Consent and permissions&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-125.png&#34;
	width=&#34;2322&#34;
	height=&#34;1459&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-125_hu_a580fa4e39248152.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-125_hu_fdeb6c264ed4203.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Do not allow user consent&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;However, there are also different types of service principals which are also part of the enterprise applications menu, but not included with the default filter.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-112.png&#34;
	width=&#34;2322&#34;
	height=&#34;1459&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-112_hu_145da1f6f0ff5fe3.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-112_hu_687bf9a9e5e31c9a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Service principal types&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;microsoft-applications&#34;&gt;Microsoft Applications
&lt;/h3&gt;&lt;p&gt;Microsoft applications are apps owned by Microsoft and they mostly include apps which allow Entra ID users to access various systems and services within Azure and Microsoft 365. My lab tenant currently lists 585 Microsoft apps. That is way too much to go into detail for all of them but let&amp;rsquo;s look at the example of the &lt;strong&gt;Microsoft Graph&lt;/strong&gt;. This is the actual Graph API and not the Microsoft Graph Command Line Tools enterprise app.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s also an Application and an Object ID for &lt;strong&gt;Microsoft Graph&lt;/strong&gt;. Unlike Enterprise apps, Microsoft apps can&amp;rsquo;t be deleted and various properties such as &lt;strong&gt;Assignment required?&lt;/strong&gt; are not available. Searching for the app id will list it as enterprise application/service principal as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-113.png&#34;
	width=&#34;2322&#34;
	height=&#34;1459&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-113_hu_a9c2a50737576bc1.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-113_hu_68227a671e37993c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Microsoft Graph (Microsoft application)&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-114.png&#34;
	width=&#34;2322&#34;
	height=&#34;1459&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-114_hu_960b61b75b114531.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-114_hu_14f22a4dcfd8bc63.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Entra Admin Center search result&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;A list of the most commonly used app ids for Microsoft applications can be found &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/troubleshoot/azure/entra/entra-id/governance/verify-first-party-apps-sign-in#application-ids-of-commonly-used-microsoft-applications&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The actual Graph application doesn&amp;rsquo;t have or needs any permissions consented.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-115.png&#34;
	width=&#34;2322&#34;
	height=&#34;1459&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-115_hu_91f8cd0633aa1414.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-115_hu_ab48430fb025f226.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Microsoft Graph (Microsoft application) permissions&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If I go back and look at the sign-in logs of when I signed into Graph PowerShell using my &lt;strong&gt;Graph PowerShell Demo (Created in Portal)&lt;/strong&gt; app, I can see that the &lt;strong&gt;Resource ID&lt;/strong&gt; lists the app id of the Microsoft Graph Microsoft app (&lt;code&gt;00000003-0000-0000-c000-000000000000&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-116.png&#34;
	width=&#34;2322&#34;
	height=&#34;1459&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-116_hu_305ba3679e782be2.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-116_hu_f1da9fbfd2d4c738.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Sign in logs of Graph PowerShell&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I think it&amp;rsquo;s worth pointing out that the service principal is called &lt;strong&gt;GraphAggregatorService&lt;/strong&gt; but the app itself is called &lt;strong&gt;Microsoft Graph&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;managed-identities&#34;&gt;Managed Identities
&lt;/h3&gt;&lt;p&gt;Managed identities are service principals which are tied to specific Azure resources like an automation account or a function app etc.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-117.png&#34;
	width=&#34;2322&#34;
	height=&#34;1459&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-117_hu_b98cb78c80c4fb89.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-117_hu_da37e42659eb4c43.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Managed identity service principals&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This is an Azure resource of an automation account, for which I&amp;rsquo;ve configured a system assigned managed identity. If you look closely, you can see that the &lt;strong&gt;Object (principal) ID&lt;/strong&gt; is the same as the &lt;strong&gt;Object ID&lt;/strong&gt; of the service principal in the screenshot above.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-122.png&#34;
	width=&#34;2322&#34;
	height=&#34;1459&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-122_hu_5b905972a5d51c63.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-122_hu_4294595f68e093fa.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Managed identity on Azure resource&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;Once the system assigned managed identity is enabled, this resource will be registered with Microsoft Entra ID. After being registered, you can control its access to other services like storage accounts.&lt;/p&gt;&lt;span class=&#34;cite&#34;&gt;&lt;span&gt;― &lt;/span&gt;&lt;span&gt;Azure Portal&lt;/span&gt;&lt;cite&gt;&lt;/cite&gt;&lt;/span&gt;&lt;/blockquote&gt;
&lt;p&gt;Managed identities do not have an app registration exposed to your tenant but when you enable one for an Azure resource, an app will be registered somewhere in Entra ID (where only Microsoft can see it) and a service principal will be created in your tenant.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-119.png&#34;
	width=&#34;2322&#34;
	height=&#34;1459&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-119_hu_de05de1e02e3abbe.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-119_hu_7219e77f78f4552a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Entra Admin Center search results for managed identity object id&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Managed identities are primarily used to grant access to Azure resources, therefore the permissions of the enterprise app are usually empty.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-120.png&#34;
	width=&#34;2322&#34;
	height=&#34;1459&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-120_hu_5054b92080796a3f.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-120_hu_f03ff98a6299069d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Permissions of managed identity service principal&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;However, it is possible to assign administrative roles to service principals of managed identities or grant them access to Azure resources other than the one for which the managed identity was created for.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-121.png&#34;
	width=&#34;2322&#34;
	height=&#34;1459&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-121_hu_79587a7db2ceb9f5.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-121_hu_bc6ac56ae471c790.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Admin role assignment for service principal (managed identity)&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;A managed identity can only be used by the Azure resource for which it was created for. So, if you create a managed identity for an Azure automation account, only the automation account, or resources within said automation account, for example a runbook will be able to sign in using that managed identity. The managed identity cannot be used in any other way. It&amp;rsquo;s also not possible to create a client secret or a certificate for a managed identity because as the name suggests, Microsoft is doing everything in the background for you.&lt;/p&gt;
&lt;p&gt;To connect to Azure using a managed identity in an Azure runbook, all you need is this code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Connect to Azure environment&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Connect-AzAccount&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Identity&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-TenantId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$tenantId&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Service principals of managed identities cannot be deleted from enterprise applications.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-118.png&#34;
	width=&#34;2322&#34;
	height=&#34;1459&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-118_hu_a3c6082f218d9dda.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-118_hu_c01b6d7e0dbac6aa.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Managed identity service principal properties&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Instead, the managed identity must be disabled on the page of the Azure resource for which it was created.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-123.png&#34;
	width=&#34;2322&#34;
	height=&#34;1459&#34;
	srcset=&#34;https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-123_hu_ca29fd7676cddaa4.png 480w, https://heusser.pro/p/whats-the-difference-between-an-entra-id-app-registration-and-an-enterprise-app-4yyib4g1sk5a/image-123_hu_c275f3f873f5d540.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Disable managed identity from Azure resource configuration&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary
&lt;/h2&gt;&lt;p&gt;This is without a doubt the longest blog post I&amp;rsquo;ve ever written. But sometimes, when I&amp;rsquo;m writing about complex topics there is just no other way to do this. I&amp;rsquo;m aware that I&amp;rsquo;ve repeated myself a couple of times in this blog post, but I wanted to make sure that it&amp;rsquo;s clear at all times if I&amp;rsquo;m speaking about an app registration or an enterprise app and in which tenant the afore mentioned object lives.&lt;/p&gt;
&lt;p&gt;I also want to clarify that I&amp;rsquo;ve never developed or worked on an enterprise grade application or anything like that. That&amp;rsquo;s also why this blog post doesn&amp;rsquo;t go into the details like token configuration, exposing APIs etc.&lt;/p&gt;
&lt;p&gt;As a Sys Admin, you&amp;rsquo;re going to have to deal with Entra applications sooner or later. Whether you like it or not. It sure does complicate a lot of things that were easier a couple of years ago, like using the AzureAD PowerShell module and not having to deal with Graph permissions for example. But I believe that it&amp;rsquo;s a necessity for every IT Pro to learn how things work in the new world. It&amp;rsquo;s important to understand what an app registration and what an enterprise app is and what each of them does.&lt;/p&gt;
&lt;p&gt;I actually wrote about a third of this blog twice. The first time I started it was a hot mess and there was no clear common thread to follow. In my first attempt, I tried to sort everything into sections, like creating an app registration and then I had subsections for each possibility like single- and multi-tenant but it just didn&amp;rsquo;t make much sense to talk about registering multi-tenant apps, when I hadn&amp;rsquo;t even explained what a multi-tenant app is or in which scenarios they&amp;rsquo;re used.&lt;/p&gt;
&lt;p&gt;Then I started from scratch again and I tried really hard two write a story that unfolds naturally. I started with things you might already know and introduced new stuff that builds on previously mentioned details in each topic.&lt;/p&gt;
&lt;p&gt;Let us reminisce one last time what Entra applications are and what the key differences between app registrations and enterprise apps are.&lt;/p&gt;
&lt;p&gt;An Entra application in general is referring to what&amp;rsquo;s used when certain resources like the Graph API are accessed in Entra ID. Access to resources can either use delegated permissions, where a signed in user is required or they can use application permissions, where either a client secret or a certificate instead of a signed in user is required. An application can have any combination of delegated and application permissions.&lt;/p&gt;
&lt;p&gt;An Entra application is not like a traditional application. When we hear the word application or app, most people will think about an app that can be installed on a device or accessed through a web browser. The purpose of an Entra application is to allow &lt;em&gt;actual&lt;/em&gt; apps, like for example the Zoom client to access resources like your calendar in Entra ID/Graph. Any Entra application must be registered in an Entra ID tenant before it can be used in applications or scripts that are built by developers.&lt;/p&gt;
&lt;p&gt;An app registration is essentially the same thing as an application. The process of creating a new application is called registering an app and that&amp;rsquo;s why the Entra Admin Center typically calls them app registrations. In PowerShell or Entra ID logs, app registrations are always called applications.&lt;/p&gt;
&lt;p&gt;In theory, an app registration can exist without an enterprise app, but an enterprise app can&amp;rsquo;t exist without an app registration. The registered application for an enterprise app can either be in the same tenant or it can be homed in a different tenant.&lt;/p&gt;
&lt;p&gt;When you&amp;rsquo;re building an internal application, the app registration is usually homed in your own tenant. When you&amp;rsquo;re purchasing, using or building a SaaS app, the app registration usually lives in a service tenant.&lt;/p&gt;
&lt;p&gt;When an app is registered, a globally unique (across all Entra ID tenants) application id is assigned by Entra ID, and an app can be registered as a single- or a multi-tenant app. Single-tenant apps can only be used by your organization. Multi-tenant apps can be added to and used by any tenant, if admin consent for the app is granted.&lt;/p&gt;
&lt;p&gt;Enterprise apps are the same thing as service principals but not all service principal types are also called enterprise apps. Microsoft applications and managed identities are the exception to this. The Entra Admin Center refers to service principals as enterprise applications in most UI elements but logs in Entra ID or PowerShell Cmdlets and object properties typically refer to them as service principals.&lt;/p&gt;
&lt;p&gt;Service principals allow you or a publisher of a multi-tenant app to access resources in your tenant. The permission model is very granular and almost any action requires an explicitly granted admin consent before an app is allowed to perform any actions. This also applies when using delegated permissions and means that you won&amp;rsquo;t be able to perform an action against the Microsoft Graph API before admin consent has been granted, even if your account has the required admin roles assigned and you&amp;rsquo;re able to perform the same action in the portal.&lt;/p&gt;
&lt;p&gt;To use app only authentication a client secret or a certificate is needed, and they must be configured on the app registration, even though the service principal is used for the actual sign in process.&lt;/p&gt;
&lt;p&gt;In conclusion, an Entra application is a combination of both an app registration and an enterprise app. You can&amp;rsquo;t have an enterprise app without a registered app, and you can&amp;rsquo;t use an application to sign into a resource, such as Microsoft Graph without also having an enterprise app/service principal for it.&lt;/p&gt;
&lt;p&gt;I hope that this explanation makes sense to you. I certainly learned a lot in the days I dedicated my time to writing this blog post. If you too understand the difference between app registrations and enterprise apps now, feel free to buy me a &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/support-me&#34; &gt;coffee&lt;/a&gt;. 😊&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Get Missed Call Notifications for Teams Call Queues (Free Community Solution)</title>
        <link>https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/</link>
        <pubDate>Fri, 15 Nov 2024 17:31:43 +0000</pubDate>
        
        <guid>https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/</guid>
        <description>&lt;img src="https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/cover.png" alt="Featured image of post Get Missed Call Notifications for Teams Call Queues (Free Community Solution)" /&gt;&lt;h2 id=&#34;intro&#34;&gt;Intro
&lt;/h2&gt;&lt;p&gt;If you&amp;rsquo;re reading this, it will likely mean that you&amp;rsquo;ve noticed that Teams doesn&amp;rsquo;t show missed calls on call queues and that you&amp;rsquo;re desperately looking for a solution which doesn&amp;rsquo;t cost a fortune or requires that you give a 3rd party access to your Teams call records. If that&amp;rsquo;s the case, stay with me because I&amp;rsquo;m going to show you how you can build your own notification mechanism inside your Microsoft 365 tenant.&lt;/p&gt;
&lt;p&gt;But first I&amp;rsquo;d like to point out a couple of things about the history of this issue.&lt;/p&gt;
&lt;h2 id=&#34;where-can-i-see-missed-calls-on-call-queues&#34;&gt;Where Can I See Missed Calls on Call Queues?
&lt;/h2&gt;&lt;p&gt;The only place where you can actually see if a call was missed on a call queue is in the iOS call history of an iPhone where a call queue agent is signed in on the Teams app on iOS. An iPhone will only show missed calls if the call was offered to the signed in agent. So, this only works with attendant routing (all agents are offered the call at the same time) and presence based routing &lt;strong&gt;off&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;limitations-disclaimer&#34;&gt;Limitations Disclaimer
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Read this very carefully&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;This solution is based on the assumption that there&amp;rsquo;s &lt;strong&gt;always&lt;/strong&gt; an agent (M365 User) opted into a call queue which &lt;strong&gt;doesn&amp;rsquo;t use presence based routing&lt;/strong&gt; and uses &lt;strong&gt;attendant&lt;/strong&gt; routing. &lt;strong&gt;Any other routing method won&amp;rsquo;t work&lt;/strong&gt; since we can&amp;rsquo;t be sure that the &lt;em&gt;monitoring&lt;/em&gt; user got offered the call as well.&lt;/p&gt;
&lt;p&gt;This solution is primarily intended for small businesses that have simple, non-presence based attendant routing queues and don&amp;rsquo;t want to purchase a 3rd party solution to get missed call notifications on call queues. If this isn&amp;rsquo;t feasible for your scenario, you&amp;rsquo;re welcome to continue reading (my discoveries might still be very interesting to you nonetheless) but I&amp;rsquo;m sorry to tell you that this solution won&amp;rsquo;t work for you.&lt;/p&gt;
&lt;h3 id=&#34;tl-dr&#34;&gt;TL; DR
&lt;/h3&gt;&lt;p&gt;If you don&amp;rsquo;t care about all the details and just want to deploy this straight away, feel free to jump directly to &lt;a class=&#34;link&#34; href=&#34;#clone-repository&#34; &gt;Clone Repo&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;#video-tutorial&#34; &gt;Video Tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;missed-call-queue-calls-on-ios&#34;&gt;Missed Call Queue Calls on iOS
&lt;/h3&gt;&lt;p&gt;I actually mentioned using iOS as the closest workaround to seeing missed calls on call queues in one of the many &lt;a class=&#34;link&#34; href=&#34;https://techcommunity.microsoft.com/t5/microsoft-teams/missed-calls-are-not-shown-on-history-that-came-through-call/m-p/1484151/highlight/true#M63193&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Tech Community threads&lt;/a&gt; back in 2020. This gives us a good idea of just how long this issue has been persisting. Sadly, a moderator of this thread just confirmed this as the best response and marked the questions as solved. (LOL?)&lt;/p&gt;
&lt;p&gt;I always like to say that not being able to see missed calls on call queues is the Achilles&amp;rsquo; heel of Teams Phone and I just don&amp;rsquo;t understand why Microsoft hasn&amp;rsquo;t provided a solution yet. It&amp;rsquo;s such a basic feature after all.&lt;/p&gt;
&lt;p&gt;Anyway, let&amp;rsquo;s look at some examples on how missed calls on call queues are shown on an iPhone. This won&amp;rsquo;t work on an iPad or an iPod (if that&amp;rsquo;s still a thing?) since these devices don&amp;rsquo;t have a &lt;em&gt;phone&lt;/em&gt; app. It only works on an iPhone and &lt;strong&gt;Show Teams calls in call log&lt;/strong&gt; must be enabled in the Teams app&amp;rsquo;s settings.&lt;/p&gt;
&lt;p&gt;Unlike normal missed calls, missed calls from call queues won&amp;rsquo;t display a badge counter on the iPhone&amp;rsquo;s phone app and they aren&amp;rsquo;t shown in the notification center or the lock screen either. The badge counter is only shown &lt;em&gt;within&lt;/em&gt; the phone app on the call history icon. This is the first reason why this solution is basically useless. You&amp;rsquo;ll see why I mention it anyway later on.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_184922000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;335&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_184922000_iOS_hu_fbeeb652e4080180.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_184922000_iOS_hu_35245e230677048d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;No Badge Counter on Phone App&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;335&#34;
		data-flex-basis=&#34;805px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;That means that someone who&amp;rsquo;s an agent in the queue that should be monitored would constantly need to go into the phone app and check if there were any missed calls. There&amp;rsquo;s also no efficient way of extracting call logs from iOS and send them somewhere. Believe me, I have tried everything from getting the data through Siri Shortcuts to getting it from an iCloud or a local backup.&lt;/p&gt;
&lt;p&gt;Once you go into the call history, it&amp;rsquo;s at least possible to filter for missed calls or search for &lt;code&gt;Teams&lt;/code&gt; or even the call queue name, despite that being truncated and not visible at all.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_184914000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_184914000_iOS_hu_69b3f687f525e35c.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_184914000_iOS_hu_5177105cb47798cd.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Missed Call Queue Call&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185013000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185013000_iOS_hu_81b338805b9aedd4.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185013000_iOS_hu_5e76621c271b057c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Missed Call Queue Call Details&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I do no need to apologize for the German screenshots. This is my main device and I didn&amp;rsquo;t want to change the language. In case it&amp;rsquo;s not clear: &lt;em&gt;Verpasster Anruf&lt;/em&gt; means &lt;em&gt;Missed Call&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look at the next example. In this case the call was answered by another agent or by the same agent on another device. In that case, the call history item won&amp;rsquo;t be &lt;em&gt;red&lt;/em&gt; and the details of the entry say &lt;em&gt;Answered on another device&lt;/em&gt; &lt;em&gt;(Auf anderem Gerät angenommen)&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185055000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185055000_iOS_hu_71a161c32be2ddb0.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185055000_iOS_hu_6acaaba2f8369802.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Answered Call Queue Call&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185100000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185100000_iOS_hu_ecbbcca45c21b694.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185100000_iOS_hu_e87210defe564ab4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Answered Call Queue Call Details (Answered on Another Device)&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;For a very small company this &lt;em&gt;might&lt;/em&gt; be acceptable, at best. But this becomes problematic as soon as you have at least one nested (overflow) queue. In that case, the call on the first queue will be shown as missed, even when it was answered in the overflow queue. This is the second reason why this isn&amp;rsquo;t a practical solution.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185217000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185217000_iOS_hu_856ece06f58ffc3e.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185217000_iOS_hu_ff03692214ef04df.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1st Call: Answered in Overflow | 2nd Call: Missed in Top-Level Queue (Top to bottom)&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185221000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185221000_iOS_hu_84a967aaa95b5f84.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185221000_iOS_hu_e3c6615dc9953dc6.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;2nd Call in History (Top to Bottom)&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185226000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185226000_iOS_hu_ba6b9e5a03c5838c.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/20241021_185226000_iOS_hu_74c3953f6e6dffc3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;1st Call in History (Top to Bottom)&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;A real solution needs to be able to recognize if a call was answered in an overflow queue and not report calls as missed, if nobody was able to answer in a top-level queue.&lt;/p&gt;
&lt;h2 id=&#34;will-microsoft-ever-add-this-feature&#34;&gt;Will Microsoft Ever Add This Feature?
&lt;/h2&gt;&lt;p&gt;I&amp;rsquo;ve got good news and bad news for you. The good part is: Yes. The bad part is, believe it or not, that this will be part of Teams Premium. This has been confirmed to me by &lt;em&gt;Ilya Bukshteyn - VP, Microsoft Teams Calling and Devices&lt;/em&gt; on LinkedIn.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/LinkedInComment.jpg&#34;
	width=&#34;946&#34;
	height=&#34;458&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/LinkedInComment_hu_2633e5fa3d7c83b2.jpg 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/LinkedInComment_hu_a9e1f65600278e66.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;LinkedIn Comment&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;206&#34;
		data-flex-basis=&#34;495px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve said before that I totally understand that Microsoft is charging for Teams Premium features like Intelligent Recap since that requires actual processing power and costs Microsoft Money to operate. But I&amp;rsquo;m keeping my stance here, something basic as missed call notification should not cost money, regardless of how this is going to be implemented. I really hope that Microsoft realizes this and will re-think that decision, especially since I&amp;rsquo;ve just proven that iOS already logs missed calls.&lt;/p&gt;
&lt;h3 id=&#34;the-queues-app&#34;&gt;The Queues App
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://support.microsoft.com/en-us/office/use-the-queues-app-for-microsoft-teams-370ad83e-c2c1-4a9f-8a59-16c98be102e9&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;This&lt;/a&gt; is the official support article for the new Queues app in Teams. There&amp;rsquo;s a section about &lt;strong&gt;View call history&lt;/strong&gt; which as of the time of writing this article states the following:&lt;/p&gt;
&lt;blockquote&gt;
    &lt;p&gt;&lt;p&gt;To view past calls, including calls or voicemails you may have missed, select Calls under Manage queue.&lt;/p&gt;
&lt;p&gt;You can select any call in your history to see more detailed information and call that number back using the number associated with your call queue.&lt;/p&gt;
&lt;p&gt;Currently, call history includes the past calls that you have picked up or calls that you have missed that have a voicemail.&lt;/p&gt;
&lt;/p&gt;&lt;span class=&#34;cite&#34;&gt;&lt;span&gt;― &lt;/span&gt;&lt;span&gt;Microsoft Support&lt;/span&gt;&lt;cite&gt;&lt;/cite&gt;&lt;/span&gt;&lt;/blockquote&gt;
&lt;p&gt;In other words, there is no shared call history yet, not even for Teams Premium customers.&lt;/p&gt;
&lt;h2 id=&#34;what-about-teams-on-windows&#34;&gt;What About Teams on Windows?
&lt;/h2&gt;&lt;p&gt;Even without the Queues app, it&amp;rsquo;s exactly as the support article says. Agents only see the calls they answered. They don&amp;rsquo;t see any missed calls or calls answered by other agents, not even if they&amp;rsquo;re a delegate of the user who answered a call queue call. The call from &lt;code&gt;21:43&lt;/code&gt; is not visible on the right because it was answered by the user on the left.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image_hu_8e4e9b03d3be23fb.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image_hu_d4f36104c8f962ac.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Call History for Answered Call Queue Calls for a Specific Agent&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-1.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-1_hu_a4362acfbd67ae5a.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-1_hu_19810e59527e45cc.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Call Queue Call History for Another Agent&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The fact that the call history does show answered calls &lt;strong&gt;and&lt;/strong&gt; that the iOS call history includes missed calls and calls that were answered by another agent/on another device got me thinking. This data &lt;em&gt;must&lt;/em&gt; be available somewhere&amp;hellip;&lt;/p&gt;
&lt;h2 id=&#34;where-does-teams-fetch-the-call-history-from&#34;&gt;Where Does Teams Fetch the Call History From?
&lt;/h2&gt;&lt;p&gt;I opened up Teams in the browser and used the Edge Dev Tools to see what&amp;rsquo;s going on under the hood when I open a user&amp;rsquo;s call history in Teams. I was hoping that this would be a standard Graph request but of course this had to be an internal, unofficial, undocumented API. Sigh.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-rest&#34; data-lang=&#34;rest&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;GET&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;&lt;/span&gt;https://teams.microsoft.com/api/csa/emea/api/v1/chats/48%3Acalllogs/messages?messagePageSize=200&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-2.png&#34;
	width=&#34;1041&#34;
	height=&#34;758&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-2_hu_d92044b5846fad97.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-2_hu_50528a6bdb6dc96b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;JSON Response&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;137&#34;
		data-flex-basis=&#34;329px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Using unofficial APIs isn&amp;rsquo;t really suited for production but I&amp;rsquo;m going to show it to you anyway. The browser tools have this neat little feature that lets you copy a request for various CLIs. Of course I&amp;rsquo;m choosing PowerShell.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-3.png&#34;
	width=&#34;1048&#34;
	height=&#34;1073&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-3_hu_784aed2262cf9dd.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-3_hu_992c8e5e8bbbfb67.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Copy Request as PowerShell&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;97&#34;
		data-flex-basis=&#34;234px&#34;
	
&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$session&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;New-Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Microsoft&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;PowerShell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Commands&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;WebRequestSession&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$session&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;UserAgent&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36 Edg/130.0.0.0&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-WebRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-UseBasicParsing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://teams.microsoft.com/api/csa/emea/api/v1/chats/48%3Acalllogs/messages?messagePageSize=200&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;-WebSession&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$session&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-user-type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;real-user&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;authorization&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Bearer (Token Removed)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;cache-control&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;no-store, no-cache&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-client-type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cdlworker&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-session-id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;22f0ef6c-d8b7-46a8-aea2-58451d1fd722&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;Referer&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;https://teams.microsoft.com/v2/worker/precompiled-web-worker-b686ae686e2a6f80.js&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-migration&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;True&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-client-version&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;1415/24090101423&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-request-id&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;072d879b-e316-4fd6-8c54-b02d82e8f9f6&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-client-caller&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-partition&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;emea01&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ms-region&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;emea&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s2&#34;&gt;&amp;#34;x-ringoverride&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;general&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;All I need to do is store the outputs of line 3 in a variable to access the raw data after the request has been made in PowerShell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$callLogs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Invoke-WebRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-UseBasicParsing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://teams.microsoft.com/api/csa/emea/api/v1/chats/48%3Acalllogs/messages?messagePageSize=200&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Then I needed to convert the JSON response into a PowerShell object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$callLogs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$callLogs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Content&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ConvertFrom-Json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;messages&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This of course, includes all call logs. To filter for call queues only, I wrote this code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$callLogProperties&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$callLogs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;properties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;call-log&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ConvertFrom-Json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Where-Object&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;callType&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-eq&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;multiParty&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;By inspecting the call log items, I discovered that it even lists the id of the call queue on which the call was received. Yes, the id of the call queue, not the one of the resource account associated with the call queue.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-4.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-4_hu_9df4d24602bdd8f7.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-4_hu_d91c87ec138e9d78.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Example of a Single Call Queue Call Log Entry&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;To get a table of all call queue calls for this user, I came up with this code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Note: This is only displaying the first 6 items&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$callLogProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;.5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Select-Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;startTime&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;callDirection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;callState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;callId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;callerNumber&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Expression&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;participants&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;4:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)}}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Format-Table&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-5.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-5_hu_688ea42252713593.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-5_hu_c5683e0d15c2fb1a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Filtered PowerShell Output of Call Queue Call History for a Specific User&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Sadly, this endpoint does not return missed calls. It does however, include calls that were answered by this user, by another user or declined by this user.&lt;/p&gt;
&lt;p&gt;So, the call history in iOS remains the only place where missed call queue calls are actually visible in a UI. However, if you search the Teams logs in the cache directory (&lt;code&gt;%APPDATA%\Local\Packages\MSTeams_8wekyb3d8bbwe\LocalCache\Microsoft\MSTeams&lt;/code&gt;) long enough, you&amp;rsquo;ll find some client logs of missed call queue calls eventually but this is purely educational.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-6.png&#34;
	width=&#34;1614&#34;
	height=&#34;33&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-6_hu_7161e4ea87b472b0.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-6_hu_aa843c86149e6ff.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Missed Call Reference in Teams Client Logs&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;4890&#34;
		data-flex-basis=&#34;11738px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s interesting here is that it says &lt;code&gt;callingEnableMissedCallNotification=false&lt;/code&gt;. &lt;em&gt;Dear Teams, why won&amp;rsquo;t you tell us about missed call queue calls!?&lt;/em&gt; (This is a rhetorical question.)&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s get back to PowerShell. When you copy that request from the browser dev tools, it copies a JWT (JSON Web Token) with it. Obviously this token won&amp;rsquo;t live forever and will need to be renewed at some point. The token expires after roughly 24 hours which seems quite long to me. But still, nobody wants to manually refresh the token every day.&lt;/p&gt;
&lt;p&gt;Just to prove the concept, I hacked together a small PowerShell script which uses bits of the &lt;a class=&#34;link&#34; href=&#34;https://aadinternals.com/aadinternals/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;AADInternals&lt;/a&gt; PowerShell module to get a token for the &lt;code&gt;https://chatsvcagg.teams.microsoft.com&lt;/code&gt; audience. I was able to get a token using a call queue agent&amp;rsquo;s username and password but I couldn&amp;rsquo;t get it to work when MFA is enforced. Since we won&amp;rsquo;t need this for this solution anyway, I&amp;rsquo;m not going to publish this script here.&lt;/p&gt;
&lt;p&gt;At this point I realized that I need to work with what I had. If I can get a list of all calls that were answered &lt;em&gt;somewhere&lt;/em&gt; by &lt;em&gt;someone&lt;/em&gt; I can still use that to determine if a call queue call was missed. All I need to do is get a hold of the call id and check if it&amp;rsquo;s in the call log of a user that&amp;rsquo;s an agent of the queue I want to monitor for missed calls.&lt;/p&gt;
&lt;p&gt;But then there was the problem that all this data was retrieved through an internal API. When you look at the JSON response again, you&amp;rsquo;ll notice that there&amp;rsquo;s a property called &lt;strong&gt;containerId&lt;/strong&gt; and it&amp;rsquo;s value is &lt;code&gt;48:calllogs&lt;/code&gt;. That sounds interesting, doesn&amp;rsquo;t it?&lt;/p&gt;
&lt;h2 id=&#34;fetching-a-users-call-history-through-graph-api&#34;&gt;Fetching a Users Call History Through Graph API
&lt;/h2&gt;&lt;p&gt;My next step was to see if I can get this information &lt;em&gt;officially&lt;/em&gt; from Graph by signing into Graph PowerShell with the credentials of a call queue agent.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$user&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-MgUser&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-UserId&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;evelyn@nocaptech.ch&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$userCallHistory&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-MgUserChatMessage&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-UserId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Id&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ChatId&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;48:calllogs&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Bingo. It works.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-7.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-7_hu_25fdf2d007e0878f.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-7_hu_f6d921bf4fc0ac57.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Get Teams User Call History via Graph PowerShell&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;But the Graph API returns much less data than the &lt;em&gt;Chat Service Aggregator&lt;/em&gt;. For example, I can&amp;rsquo;t see if the call was accepted, accepted elsewhere or declined by the user.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-8.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-8_hu_5cd9c3ae3a3d03a8.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-8_hu_d4285149a534df8a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Example of Single Call Record&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;But when I access the &lt;code&gt;body&lt;/code&gt; property of an object inside the array, I can see the call id.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-9.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-9_hu_ef403532ae4f0a10.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-9_hu_ea73dfbf125ab723.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Body\Content Contains Call Id&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;So, now I&amp;rsquo;m able to retrieve a list of all calls that were either answered or declined by this user, or that this user was offered by the call queue but was answered by another agent. This brings us to a very important part about the limitations of this solution.&lt;/p&gt;
&lt;h2 id=&#34;limitations-of-this-solution&#34;&gt;Limitations of This Solution
&lt;/h2&gt;&lt;p&gt;You will either need to define a &lt;em&gt;real&lt;/em&gt; agent user which will always be opted-in to the queue and you must ensure that this agent will never decline a call. (If an agent declines a call, the call id will show up in their call log but when the call log is retrieved via Graph, the results don&amp;rsquo;t include the callState like &lt;code&gt;accepted&lt;/code&gt; or &lt;code&gt;declined&lt;/code&gt;.) Because you can&amp;rsquo;t really control that, I highly recommend to set up a service account and add it to the queue as an agent instead, even if that adds a small monthly license cost to it.&lt;/p&gt;
&lt;p&gt;Your queue must not use presence based routing and the service account must always be signed in on a Teams device/app. I recommend signing the user in on a spare iPhone if you have one. If you don&amp;rsquo;t have one, you can also use Teams desktop, a Teams desk phone or an iPad or whatever you can spare. It just needs to be a device which is running and connected to the internet 24/7 and where the service account is signed into the Teams app persistently.&lt;/p&gt;
&lt;p&gt;I made lots of test calls while my service account was signed in on the Teams app on my iPad and this worked flawlessly. The important thing is that the service user always gets offered the calls but never declines them. Since it&amp;rsquo;s not a problem if the service account answers calls, this could also be a non-personal account for a CAP (Common Area Phone) you might already have in place. If you decide to use dedicated service account for monitoring your call queues, you can also add the same service account to multiple queues, even if the different queues don&amp;rsquo;t share the same agents. Just keep in mind that there&amp;rsquo;s a limit of how many chat messages of the call logs chat Power Automate can fetch through the Graph API. This limit is &lt;strong&gt;50&lt;/strong&gt;. So, if you expect more than 50 calls in a window of 30 minutes, you&amp;rsquo;ll likely need a dedicated service account per queue. Again, this solution is intended for small companies which just want to see when they missed a call on their main number.&lt;/p&gt;
&lt;p&gt;The service account must be licensed with a license that includes Teams, Teams Phone Standard and SharePoint/OneDrive.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve only tested this with call queues which have Conference Mode &lt;strong&gt;enabled&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;securing-the-credentials-to-access-the-graph-api&#34;&gt;Securing The Credentials to Access The Graph API
&lt;/h2&gt;&lt;p&gt;What I did before, to interactively sign into Graph PowerShell using the user&amp;rsquo;s credentials isn&amp;rsquo;t an ideal solution. Even if I was using a service account already. I always try to use MFA, even for service accounts. Let&amp;rsquo;s see if I can get the same result using app only authentication.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-10.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-10_hu_ef99b5a2e50f3ec9.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-10_hu_8ebe1deec63baa14.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;App Only Authentication Doesn’t Work&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, it&amp;rsquo;s not possible to query the &lt;code&gt;48:calllogs&lt;/code&gt; chat id using application permissions, even when the app has the appropriate permission &lt;code&gt;Chat.Read.All&lt;/code&gt;. That meant that I had to find another way to securely get the messages in the Call Log Chat. At some point I&amp;rsquo;ll be building a Power Automate Flow to send the Adaptive Cards for the missed call notifications anyway. So why not try to get the chat messages through a Graph Request from Power Automate as well? That would certainly solve the authentication/token issue.&lt;/p&gt;
&lt;h2 id=&#34;high-level-solution-architecture&#34;&gt;High-Level Solution Architecture
&lt;/h2&gt;&lt;p&gt;Alright, it&amp;rsquo;s time to start architecting this whole thing. It might look a little overkill at first but that&amp;rsquo;s because I&amp;rsquo;m a perfectionist.&lt;/p&gt;
&lt;p&gt;The whole process is kicked off approximately 15-30 minutes after a Teams call has ended. That&amp;rsquo;s how long it usually takes for Microsoft to make the call record available in your tenant. By using a &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/graph/api/subscription-post-subscriptions?view=graph-rest-1.0&amp;amp;tabs=http&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Graph Subscription&lt;/a&gt; I can have Graph send me a notification every time a new record is created or when an existing one is updated. Notifications can be delivered to an endpoint of your choice. I&amp;rsquo;m using an &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/azure/azure-functions/functions-overview?pivots=programming-language-powershell&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Azure Function&lt;/a&gt; for this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Q%20Works%20Lite%20Diagram%20V2.png&#34;
	width=&#34;1280&#34;
	height=&#34;720&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Q%20Works%20Lite%20Diagram%20V2_hu_a3451f55fb2e7b58.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Q%20Works%20Lite%20Diagram%20V2_hu_1126d08bae4e732.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;High-level Diagram&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This will kick off a chain of events to determine if a call to a call queue was answered or missed and notify the Team members if it was missed.&lt;/p&gt;
&lt;h2 id=&#34;how-to-build-this-solution&#34;&gt;How To Build This Solution
&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s dive into how you can build this solution in your own environment. I&amp;rsquo;ve invested quite a few additional hours to make this as easy as possible for you by writing some deployment scripts. What I didn&amp;rsquo;t script is the creation of the service account, it&amp;rsquo;s licensing or updating the group description. You&amp;rsquo;ll need to follow the instructions below to prepare everything.&lt;/p&gt;
&lt;h3 id=&#34;service-account&#34;&gt;Service Account
&lt;/h3&gt;&lt;p&gt;Create a new account in Entra ID and assign any combination of licenses that include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Microsoft Teams&lt;/li&gt;
&lt;li&gt;Skype for Business Online Plan 2&lt;/li&gt;
&lt;li&gt;Exchange Online (Plan 1 or 2)&lt;/li&gt;
&lt;li&gt;SharePoint Online&lt;/li&gt;
&lt;li&gt;Power Automate Free&lt;/li&gt;
&lt;li&gt;Microsoft Teams Phone Standard&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The account doesn&amp;rsquo;t necessarily need a phone number. If you don&amp;rsquo;t assign one, the user must be enabled for &lt;strong&gt;Enterprise Voice&lt;/strong&gt; through PowerShell. This is needed so that the account can be added to call queues.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Set-CsPhoneNumberAssignment&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Identity&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$userId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-EnterpriseVoiceEnabled&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;$true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;example-scenario&#34;&gt;Example Scenario
&lt;/h3&gt;&lt;p&gt;Here we have an example call flow. The number is mapped to an auto attendant which then forwards to a call queue which has a nested call queue, in case nobody is able to answer the call in the first queue. Not all agents are opted into the &lt;em&gt;Level 1&lt;/em&gt; call queue because only &lt;em&gt;Evelyn Carter&lt;/em&gt; is primarily answering calls. If she fails to answer calls in the &lt;em&gt;Level 1&lt;/em&gt; queue, the calls overflows into the &lt;em&gt;Level 2&lt;/em&gt; queue, where all the agents are opted in. On the left you can see that the service user &lt;em&gt;Q Works&lt;/em&gt; hasn&amp;rsquo;t been added as an agent to the queue yet. On the right, the &lt;em&gt;Q Works&lt;/em&gt; user is also an agent, so that I can use the Graph API via Power Automate to check if calls were answered by other agents of the queue.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Main_Number_US_AA_CallFlow.png&#34;
	width=&#34;3920&#34;
	height=&#34;16765&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Main_Number_US_AA_CallFlow_hu_e690e45d57c26a2a.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Main_Number_US_AA_CallFlow_hu_d732487b3aa93cf9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Call Queue without Service Account Agent&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;23&#34;
		data-flex-basis=&#34;56px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Main_Number_US_AA_CallFlow-QWorksEnabled.png&#34;
	width=&#34;3920&#34;
	height=&#34;17605&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Main_Number_US_AA_CallFlow-QWorksEnabled_hu_cfb0c39b78b57d4.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/Main_Number_US_AA_CallFlow-QWorksEnabled_hu_17855f875a547ace.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Call Queue with Service Account Agent&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;22&#34;
		data-flex-basis=&#34;53px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;So far, I have only tested the solution with an auto attendant and a maximum of 2 nested queues or an auto attendant with an IVR which has 2 queues as menu options. In theory, this solution should work with any amount of nested queues or IVR options.&lt;/p&gt;
&lt;h3 id=&#34;teams&#34;&gt;Teams
&lt;/h3&gt;&lt;p&gt;To receive alerts about missed calls on call queues, you need to map your inbound numbers of top-level call queues or queues which are nested behind a top-level auto attendant to the Teams in which you want to receive the notifications. To map a number to a Team, simply adjust the Team&amp;rsquo;s description by adding &lt;code&gt;Q.Works Phone Number:&amp;lt;Your Phone Number&amp;gt;&lt;/code&gt; at the very beginning of the description. Do not add any other characters after the phone number.&lt;/p&gt;
&lt;p&gt;Make sure to paste the phone number exactly as it appears in Teams Admin Center on your resource account, including all the spaces. Do not add any other characters such as hyphens or dots.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-11.png&#34;
	width=&#34;1426&#34;
	height=&#34;767&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-11_hu_343832e626fd8bf0.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-11_hu_2a9dc06f142976d6.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Description in Entra ID Admin Center&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;185&#34;
		data-flex-basis=&#34;446px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Q Works Lite expects only one Team to receive notifications per phone number. If you&amp;rsquo;re an owner of the Team, you can edit the description directly in the Teams App. But you can also edit the group&amp;rsquo;s description in the M365 Admin or the Entra Admin Center.&lt;/p&gt;
&lt;p&gt;When the Azure function runs, it will fetch the phone number that was called and then look for the Team by searching for the matching description, so that it knows in which Team the notifications need to be posted.&lt;/p&gt;
&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites
&lt;/h3&gt;&lt;p&gt;First of all, make sure that you&amp;rsquo;ve got all these tools and PowerShell modules installed on your machine.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PowerShell 7&lt;/li&gt;
&lt;li&gt;Azure Function Core Tools&lt;/li&gt;
&lt;li&gt;Azure CLI&lt;/li&gt;
&lt;li&gt;Python 3.11.9&lt;/li&gt;
&lt;li&gt;Node.JS
&lt;ul&gt;
&lt;li&gt;M365 CLI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PowerShell Modules:
&lt;ul&gt;
&lt;li&gt;Microsoft.Graph.Applications&lt;/li&gt;
&lt;li&gt;Microsoft.Graph.Users&lt;/li&gt;
&lt;li&gt;Az.Accounts&lt;/li&gt;
&lt;li&gt;Az.Functions&lt;/li&gt;
&lt;li&gt;Az.KeyVault&lt;/li&gt;
&lt;li&gt;Az.Storage&lt;/li&gt;
&lt;li&gt;Az.Resources&lt;/li&gt;
&lt;li&gt;Az.Websites&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;clone-repository&#34;&gt;Clone Repository
&lt;/h3&gt;&lt;p&gt;Before anything is installed/deployed you&amp;rsquo;ll need to clone my git repository or download a &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/Q-Works-Lite-Public&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;zip file&lt;/a&gt; of the code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clone&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;github&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;com&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mozziemozz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Q-Works&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-Lite-Public&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;git&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;You can use the below scripts to install everything. Make sure that you run both scripts as administrator. After installing the tools, close PowerShell and make sure to run the second script in PowerShell 7.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Run &lt;code&gt;Install-Prerequisites-Tools.ps1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;Install-Prerequisites-Modules.ps1&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;customize-for-your-environment&#34;&gt;Customize For Your Environment
&lt;/h3&gt;&lt;p&gt;Open the Json file located at &lt;code&gt;.\Deployment\environment.json&lt;/code&gt; to customize the deployment for your environment. You can specify a name for the solution, your company shortname and the Azure region.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;SolutionName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Q Works Lite V3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;CompanyShortName&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;NCT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;RedirectURI&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://localhost&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;AzureRegion&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Switzerland North&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;run-setupps1&#34;&gt;Run Setup.ps1
&lt;/h3&gt;&lt;p&gt;Once all the required tools and modules are installed, run the &lt;code&gt;Setup.ps1&lt;/code&gt; script located in the &lt;code&gt;.\Deployment&lt;/code&gt; folder of the repo. This will deploy all the resources in Azure. Your account will need global administrator permission and it needs permission to be able to create new Azure resources, including resource groups.&lt;/p&gt;
&lt;h3 id=&#34;enable-solution&#34;&gt;Enable Solution
&lt;/h3&gt;&lt;p&gt;To enable Q Works Lite, you will need to import the Power Automate Flow to the service user&amp;rsquo;s Power Automate environment so that you can then copy the trigger URL and paste it into the deployment script. (You&amp;rsquo;ll be prompted to paste at some point). Don&amp;rsquo;t just import the Zip file that&amp;rsquo;s located in &lt;code&gt;.\PowerAutomate&lt;/code&gt;. The deployment script will extract this archive, make some changes specific to your environment and repackage a new zip file which then needs to be uploaded. Finally, run the &lt;code&gt;Renew-GraphSubscription&lt;/code&gt; PowerShell function once from the portal or wait for it to be &lt;code&gt;12:15&lt;/code&gt; UTC either on this day or the next day. This function will create a new subscription the first time it runs.&lt;/p&gt;
&lt;p&gt;Everything is explained in much more detail in the tutorial video. I highly recommend to watch it either while you&amp;rsquo;re deploying this yourself or before you&amp;rsquo;re getting started.&lt;/p&gt;
&lt;h3 id=&#34;video-tutorial&#34;&gt;Video Tutorial
&lt;/h3&gt;&lt;p&gt;Because I felt like this is too much to type, I&amp;rsquo;m trying something different this time around and I recorded a YouTube video where I run the setup myself and explain everything in detail instead.&lt;/p&gt;
&lt;div class=&#34;video-wrapper&#34;&gt;
    &lt;iframe loading=&#34;lazy&#34; 
            src=&#34;https://www.youtube.com/embed/C0Y5yiOghwo&#34; 
            allowfullscreen 
            title=&#34;YouTube Video&#34;
    &gt;
    &lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;what-do-the-functions-and-the-flow-do&#34;&gt;What do the Functions and the Flow do?
&lt;/h2&gt;&lt;p&gt;There are four functions in total. Three of them are PowerShell functions and one of them is a Python function but all of them use the same Linux App Service Plan. One of these functions is solely used to manage and renew the Graph subscription so it doesn&amp;rsquo;t expire. The Python function uses a Python library called &lt;strong&gt;phonenumbers&lt;/strong&gt; to format the raw E.164 numbers into an international format which is easier to read for humans. It basically inserts spaces at the correct positions for any given phone number in the world. I&amp;rsquo;ve used and written about &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/prettify-and-sync-teams-phone-numbers-to-azure-ad-e973755f83d5/&#34; &gt;this&lt;/a&gt; in an Azure Runbook before. Now I&amp;rsquo;ve created my own Azure Python Function so this can be used by the &lt;strong&gt;Analyze-CallRecord&lt;/strong&gt; PowerShell function. And finally, the &lt;strong&gt;Receive-GraphNotifications&lt;/strong&gt; function is receiving the notifications from Graph. Graph &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/graph/change-notifications-delivery-webhooks?tabs=http#http-codes-and-retry-logic&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;expects a response within 10 seconds&lt;/a&gt; so this function is really minimalistic. All it does is save the call Id to a storage queue in the storage account that was created for the PowerShell Function App. A new message in the storage queue will then trigger the &lt;strong&gt;Analyze-CallRecord&lt;/strong&gt; function which does the actual leg-work.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-12.png&#34;
	width=&#34;1703&#34;
	height=&#34;1199&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-12_hu_2823b5268ebfa17.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-12_hu_6828aaa41f01492d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Azure Resources&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;340px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The authentication to Graph is done through an Entra Application which uses application permissions/app only authentication with a client secret. The client secret is stored securely in an Azure Key Vault and the permissions on the Key Vault secrets are assigned to the managed identity of the PowerShell Function App.&lt;/p&gt;
&lt;p&gt;The main function (Analyze-CallRecord) then checks if it was a &lt;code&gt;groupCall&lt;/code&gt; (call queue call) and if it was a PSTN or an internal call. The function only processes external calls to call queues, everything else is disregarded. Unfortunately, it&amp;rsquo;s not possible to create a Graph subscription only for certain types of call records so the function will be called for any new call records. That includes internal calls and Teams meetings as well. However, the free plan includes 1 million executions per month which should be plenty enough for small businesses.&lt;/p&gt;
&lt;p&gt;Once the function has gathered all the details about the call, and if it was indeed a PSTN call to a call queue, the function will then trigger the Power Automate Flow.&lt;/p&gt;
&lt;p&gt;The flow will fetch the &lt;a class=&#34;link&#34; href=&#34;#fetching-a-users-call-history-through-graph-api&#34; &gt;call logs chat history&lt;/a&gt; of the service account (which is also a member of the call queues) and checks if the current call id is present in the call logs or not. If the call id is found in the call logs chat history, it means that the call was answered by another agent. If the call id is not present, it means that the call was missed by all agents and it went unanswered.&lt;/p&gt;
&lt;p&gt;If the call was missed, the flow will post a new adaptive card to the Teams channel and wait for a response (until a call queue agent has clicked the &lt;em&gt;Call Back Completed&lt;/em&gt; button).&lt;/p&gt;
&lt;h2 id=&#34;end-user-experience&#34;&gt;End User Experience
&lt;/h2&gt;&lt;p&gt;This is how it looks like in Teams. Once the &lt;strong&gt;Call Completed&lt;/strong&gt; button was clicked, the card will update for all users so everybody will be able to see, who called the customer/caller back. (Completed By: {User Name})&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-14.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-14_hu_1010be22b83e4bff.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-14_hu_5f9f074d4e807a08.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;New Notification&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-13.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-13_hu_da135e2f98306d6b.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-13_hu_514ed3ada36a2845.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Call Back Button&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-16.png&#34;
	width=&#34;2322&#34;
	height=&#34;1548&#34;
	srcset=&#34;https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-16_hu_c577187481050811.png 480w, https://heusser.pro/p/get-missed-call-notifications-for-teams-call-queues-free-community-solution-cozo3bhojb7t/image-16_hu_fdff43b4fd47d5ac.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Updated Card&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary
&lt;/h2&gt;&lt;p&gt;My goal was to deliver a missed call notification as quickly as possible &lt;strong&gt;but&lt;/strong&gt; do it with close to 100% accuracy with V1 of the call records. (I purposely said &lt;em&gt;close to 100%&lt;/em&gt; because there could still be occasional outages with the Graph notification service etc.) That&amp;rsquo;s why I chose to go the route of having an always opted in &lt;em&gt;monitoring&lt;/em&gt; agent in the queue. The problem is, especially with complex call flows that have a lot of nested queues, IVRs etc. that it can take multiple hours for the call records to have enough information to determine whether a call was answered or missed. If you analyze the data too soon, you&amp;rsquo;ll get false positives and if you wait until the data is complete, it will take much longer until the agents receive the notification.&lt;/p&gt;
&lt;p&gt;I may extend this solution in the future by also processing &lt;em&gt;updated&lt;/em&gt; call records to create a shared call history for call queues in a SharePoint list. But for now, or at least until Microsoft delivers shared call history as a feature of Teams Premium / the Queues app, I believe this is as close as we can get to quick and reliable missed call notifications for call queues today.&lt;/p&gt;
&lt;p&gt;The fact that this solution needs a service account, or at least a normal agent who&amp;rsquo;s opted into the queue all the time and that it can only be used on non-presence based attendant routing queues sure is a bummer but I just can&amp;rsquo;t see any other way to deliver accurate notifications as fast as they are with this solution.&lt;/p&gt;
&lt;p&gt;Even with it&amp;rsquo;s limitations, I&amp;rsquo;m very proud of my work and I&amp;rsquo;m very excited to share it with the community today. I&amp;rsquo;ve literally spent hundreds of hours developing this solution and I&amp;rsquo;ve experienced many set-backs and had to iterate through a lot of different approaches to achieve what I&amp;rsquo;ve published today. The good thing is that in the end, I got much more joy than frustration out of it.&lt;/p&gt;
&lt;p&gt;Since I&amp;rsquo;ve only been using this in my lab so far, I don&amp;rsquo;t have any insights of what the Azure resources are going to cost per month but since the Function Apps are using a consumption plan (Y1) and nothing is really stored in these storage accounts, the monthly cost should be next to nothing. Of course this is also depending on your call volume since this will impact how many times your function is invoked.&lt;/p&gt;
&lt;p&gt;If what I said about costs turns out to be true and you like what I&amp;rsquo;ve done for the community and Teams Phone customers, I would very much appreciate it, if you consider supporting this project with a small donation on either &lt;a class=&#34;link&#34; href=&#34;https://buymeacoffee.com/martin.heusser&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Buy me a Coffee&lt;/a&gt; or &lt;a class=&#34;link&#34; href=&#34;https://github.com/sponsors/mozziemozz?frequency=one-time&amp;amp;sponsor=mozziemozz&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub Sponsors&lt;/a&gt;. Thank you!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Get Microsoft Teams Meeting Attendance Report Through Graph API</title>
        <link>https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/</link>
        <pubDate>Sat, 05 Oct 2024 09:38:20 +0000</pubDate>
        
        <guid>https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/</guid>
        <description>&lt;p&gt;Over a year ago I was asked if it&amp;rsquo;s possible to retrieve a Teams meeting attendance report if the organizer of the meeting isn&amp;rsquo;t available to get the report themselves. At the time, I created a quick and dirty script to get what was urgently needed but today I put it all in a nice and ready to use example.&lt;/p&gt;
&lt;p&gt;Of course an organizer being out of office isn&amp;rsquo;t the only scenario why you&amp;rsquo;d need this. Another popular use case I can think of is to create an automation to automatically archive attendance reports for recurrent meetings.&lt;/p&gt;
&lt;p&gt;First, let&amp;rsquo;s look at how an end user would access and view an attendance report.&lt;/p&gt;
&lt;h2 id=&#34;tl-dr---i-know-what-i&#34;&gt;TL; DR - &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Scripts/MicrosoftGraph/Teams/GetTeamsAttendanceReportAsApp.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;I know what I&amp;rsquo;m doing, just give me the script already!&lt;/a&gt;
&lt;/h2&gt;&lt;h2 id=&#34;view-meeting-attendance-report-as-organizer&#34;&gt;View Meeting Attendance Report as Organizer
&lt;/h2&gt;&lt;p&gt;Only meeting organizers have access to meeting attendance reports. To view an attendance report, organizers can simply open the meeting chat. Teams will automatically post the attendance report after a meeting has ended.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image.png&#34;
	width=&#34;1997&#34;
	height=&#34;1139&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image_hu_271adcff48ed05ec.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image_hu_5ae42d202a83ad1f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Organizer View&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;175&#34;
		data-flex-basis=&#34;420px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-1.png&#34;
	width=&#34;1997&#34;
	height=&#34;1139&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-1_hu_45e6f4459e7745ae.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-1_hu_8d31ba231583d771.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Attendee View&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;175&#34;
		data-flex-basis=&#34;420px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Note that the attendance report is only shown in chat for the meeting organizers. Attendees can&amp;rsquo;t view see it. That&amp;rsquo;s also why we&amp;rsquo;re looking into how to get it through the Graph API today. Organizers also see a tab called &lt;strong&gt;Attendance&lt;/strong&gt;. This is where they can view the report directly in Teams.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-2.png&#34;
	width=&#34;1997&#34;
	height=&#34;1139&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-2_hu_18dce0e8476a2734.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-2_hu_173b64a943d642e1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Attendance Tab&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;175&#34;
		data-flex-basis=&#34;420px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s also possible to download a CSV but it&amp;rsquo;s not very well structured which makes it kind of hard to further process the data.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-3.png&#34;
	width=&#34;1420&#34;
	height=&#34;556&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-3_hu_ac6be064cdee4342.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-3_hu_48108397841c4145.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;CSV Export&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;255&#34;
		data-flex-basis=&#34;612px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s switch gears and make some graph requests.&lt;/p&gt;
&lt;h2 id=&#34;get-meeting-attendance-report-through-graph-powershell&#34;&gt;Get Meeting Attendance Report Through Graph PowerShell
&lt;/h2&gt;&lt;p&gt;Since we&amp;rsquo;re accessing data without a signed in user, we need an Entra ID application with appropriate application permissions.&lt;/p&gt;
&lt;h3 id=&#34;create-a-new-entra-id-app-registration&#34;&gt;Create a new Entra ID App Registration.
&lt;/h3&gt;&lt;p&gt;Note: You&amp;rsquo;ll need Global Admin access to grant the consent for your organization.&lt;/p&gt;
&lt;p&gt;Go to the &lt;a class=&#34;link&#34; href=&#34;https://entra.microsoft.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Entra ID Portal&lt;/a&gt; and click on &lt;strong&gt;App registrations&lt;/strong&gt; under &lt;strong&gt;Applications&lt;/strong&gt; in the left navigation menu.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-4.png&#34;
	width=&#34;395&#34;
	height=&#34;849&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-4_hu_f7c678a81f864485.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-4_hu_82870e905752f3c4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;App registrations&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;111px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Then click &lt;strong&gt;+ New registration&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-5.png&#34;
	width=&#34;1224&#34;
	height=&#34;190&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-5_hu_6f09cb212bf0ce9c.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-5_hu_912e3369ded9e293.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;New registration&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;644&#34;
		data-flex-basis=&#34;1546px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Give your app registration a name and keep &lt;strong&gt;Accounts in this organizational directory only (&amp;ldquo;Org Name&amp;rdquo; only - Single tenant)&lt;/strong&gt;. Under &lt;strong&gt;Redirect URI (optional)&lt;/strong&gt; select &lt;strong&gt;Public client/native (mobile &amp;amp; desktop)&lt;/strong&gt; and enter &lt;code&gt;http://localhost&lt;/code&gt; as redirect URI.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-6.png&#34;
	width=&#34;1316&#34;
	height=&#34;1142&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-6_hu_3b05f31844cdf5bc.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-6_hu_15008250056aeea0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;App registration properties&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;115&#34;
		data-flex-basis=&#34;276px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Click &lt;strong&gt;Register&lt;/strong&gt; to create the app registration.&lt;/p&gt;
&lt;p&gt;Copy the &lt;strong&gt;Application (client) ID&lt;/strong&gt; and the &lt;strong&gt;Directory (tenant ID)&lt;/strong&gt;. You&amp;rsquo;ll need this later.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-7.png&#34;
	width=&#34;2028&#34;
	height=&#34;1054&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-7_hu_d670b9a49e2db514.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-7_hu_890e443c7100b65c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Copy Ids&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;461px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;add-permissions&#34;&gt;Add Permissions
&lt;/h4&gt;&lt;p&gt;Navigate to &lt;strong&gt;API permissions&lt;/strong&gt; in the left navigation pane and click &lt;strong&gt;+ Add a permission&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-8.png&#34;
	width=&#34;2083&#34;
	height=&#34;1042&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-8_hu_1951ec11a18246e2.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-8_hu_bf492146b46b8424.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;API permissions&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;199&#34;
		data-flex-basis=&#34;479px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-9.png&#34;
	width=&#34;2016&#34;
	height=&#34;1151&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-9_hu_85afc12fddadbb42.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-9_hu_c321fa1dca61ae8a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Select Microsoft Graph&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;175&#34;
		data-flex-basis=&#34;420px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-10.png&#34;
	width=&#34;2107&#34;
	height=&#34;1146&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-10_hu_4f94c0de2c050a5e.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-10_hu_779da25d3e33d76.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Select Application permissions&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;183&#34;
		data-flex-basis=&#34;441px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Search for &lt;code&gt;OnlineMeeting&lt;/code&gt; and expand the menus to select &lt;strong&gt;OnlineMeetingArtifact.Read.All&lt;/strong&gt; and &lt;strong&gt;OnlineMeetings.Read.All&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-11.png&#34;
	width=&#34;2079&#34;
	height=&#34;1217&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-11_hu_87a5456a02cd8dde.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-11_hu_bc0ec287ff690637.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Select permissions&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;170&#34;
		data-flex-basis=&#34;409px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Click &lt;strong&gt;Add permissions&lt;/strong&gt; and then click &lt;strong&gt;Grant admin consent for &amp;ldquo;Org Name&amp;rdquo;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-12.png&#34;
	width=&#34;2090&#34;
	height=&#34;1090&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-12_hu_e0f49cab37bc744f.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-12_hu_4a18468696884f62.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Grant Consent&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;191&#34;
		data-flex-basis=&#34;460px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-13.png&#34;
	width=&#34;1139&#34;
	height=&#34;199&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-13_hu_4e0c8773674f767f.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-13_hu_1ac3703e8d4317ff.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Click Yes&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;572&#34;
		data-flex-basis=&#34;1373px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;add-a-client-secret&#34;&gt;Add a Client Secret
&lt;/h4&gt;&lt;p&gt;Navigate to &lt;strong&gt;Certificates &amp;amp; secrets&lt;/strong&gt; in the left navigation pane. Under &lt;strong&gt;Client secrets (0)&lt;/strong&gt; click &lt;strong&gt;+ New client secret&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-14.png&#34;
	width=&#34;1928&#34;
	height=&#34;1032&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-14_hu_11c35b94de2f6b81.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-14_hu_619b26fce3e8250b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Client secrets&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;186&#34;
		data-flex-basis=&#34;448px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Give your secret a name and select after how many months it will expire.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-15.png&#34;
	width=&#34;2102&#34;
	height=&#34;1207&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-15_hu_4318ac18bf039a3a.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-15_hu_3592c696619e0f52.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Add a client secret&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;174&#34;
		data-flex-basis=&#34;417px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Copy the secret from the portal. It will only be shown once and you&amp;rsquo;ll need it later.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-16.png&#34;
	width=&#34;1928&#34;
	height=&#34;1037&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-16_hu_2eadeed15bbbab62.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-16_hu_4c0de86ce6593cc8.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Copy secret&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;185&#34;
		data-flex-basis=&#34;446px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The configuration of the app registration is now complete.&lt;/p&gt;
&lt;h3 id=&#34;run-the-script-to-get-an-attendance-report&#34;&gt;Run the Script to get an Attendance Report
&lt;/h3&gt;&lt;p&gt;The script can be found in my &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Scripts/MicrosoftGraph/Teams/GetTeamsAttendanceReportAsApp.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Teams Phone Automation Repo&lt;/a&gt; on GitHub. If you want to make use of the secret encryption feature, you&amp;rsquo;ll need to clone the entire repo because of the dependencies of other files in the repo.&lt;/p&gt;
&lt;p&gt;To be able to retrieve an attendance report from Microsoft Graph, we need a meeting id. Unfortunately, this is not your typical GUID you could easily find in TAC. But we can, however find it easy enough by passing a &lt;strong&gt;Join meeting ID&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-25.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-25_hu_280817be74e3cb60.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-25_hu_6a7d35596415abd3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Meeting Id example&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Luckily, anyone that was invited to the meeting in question can view the Meeting ID and send it to you. Alternatively, the meeting invite could also be forwarded to you. The meeting Id is located below the join link.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-17.png&#34;
	width=&#34;1997&#34;
	height=&#34;1139&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-17_hu_314ba5c68f1d6fe4.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-17_hu_c6833f7fcbdbf8fe.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Meeting ID in meeting invite body&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;175&#34;
		data-flex-basis=&#34;420px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Once you have this ID, you&amp;rsquo;re ready to get the attendance report through PowerShell.&lt;/p&gt;
&lt;h4 id=&#34;teams-application-access-policy&#34;&gt;Teams Application Access Policy
&lt;/h4&gt;&lt;p&gt;The Graph permissions alone are not enough to access the attendance report. We also need to create a new Teams Application Access Policy which includes the app id of the newly created Entra ID app and grant it to the meeting organizer. This is how you can do it in PowerShell.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Create a new Teams Application Access Policy&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;New-CsApplicationAccessPolicy&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Identity&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$applicationAccessPolicyName&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-AppIds&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$AppId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Description&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Access Meeting Data as Entra ID app on behalf of user&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/teams/new-csapplicationaccesspolicy?view=teams-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;New-CsApplicationAccessPolicy&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Assign a Teams Application Access Policy to a user&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Grant-CsApplicationAccessPolicy&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Identity&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$UserId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-PolicyName&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$applicationAccessPolicyName&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/teams/grant-csapplicationaccesspolicy?view=teams-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Grant-CsApplicationAccessPolicy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But the script does all of this automatically for you.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-19.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-19_hu_5fe5de252458dabb.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-19_hu_e60b407b7bc958f3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Script output&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-20.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-20_hu_231f4f7b264ebba1.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-20_hu_f74ee03b4eaa6df.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;PowerShell output&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;h5 id=&#34;unassign-teams-application-access-policy&#34;&gt;Unassign Teams Application Access Policy
&lt;/h5&gt;&lt;p&gt;If you only want to get an attendance report once and need to remove the application access to another user&amp;rsquo;s meeting details, you can unassign the policy again by using this code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Grant-CsApplicationAccessPolicy&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Identity&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$UserId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-PolicyName&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;script-prompts&#34;&gt;Script Prompts
&lt;/h4&gt;&lt;p&gt;When the script runs for the first time it will ask you for your app secret. Paste it into the terminal. This will save your secret in an encrypted format. Only the signed in user (in Windows) can decrypt it and it can only be decrypted on the same machine on which it was encrypted. You&amp;rsquo;ll also be asked to sign into Teams PowerShell as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-18.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-18_hu_648f2e15bc7c6926.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-18_hu_318739f8f1280807.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Paste secret&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-21.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-21_hu_5ecf07241cfa27a8.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-21_hu_bc58c0d9b2244958.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Sign into Teams&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;results&#34;&gt;Results
&lt;/h4&gt;&lt;p&gt;Once the Application Access Policy already exists and was already granted to the organizer, the console output looks much less cluttered. The report will be saved to the current directory and it&amp;rsquo;s filename will include the subject of the meeting.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-22.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-22_hu_ba3d7e25b0727d6.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-22_hu_8e77eff048ea4470.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Script output&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If there are multiple attendance reports for a meeting, like when a meeting already ended and someone joined again after that or when it&amp;rsquo;s a recurring meeting, all reports will be combined into a single CSV. The CSV does include the report id in the last column.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s compare the CSV that was downloaded from the Teams client versus the one from my script.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-3.png&#34;
	width=&#34;1420&#34;
	height=&#34;556&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-3_hu_ac6be064cdee4342.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-3_hu_48108397841c4145.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;CSV Export from Teams&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;255&#34;
		data-flex-basis=&#34;612px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-23.png&#34;
	width=&#34;1424&#34;
	height=&#34;150&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-23_hu_42fdbddc3149b7a9.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-23_hu_9b93a4b3c0c86b14.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;CSV Export from Script&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;949&#34;
		data-flex-basis=&#34;2278px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the output from my script gives you a nicely structured CSV which lists 1 participant per row so you can easily import it into other systems without manually changing the structure of the file. Because of that, I decided to create separate files for meeting/attendance summaries.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-24.png&#34;
	width=&#34;1513&#34;
	height=&#34;60&#34;
	srcset=&#34;https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-24_hu_b2ea8d33d59aae7f.png 480w, https://heusser.pro/p/get-microsoft-teams-meeting-attendance-report-through-graph-api-lhpctbnzht7z/image-24_hu_b6250c7afd66da9f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Meeting Summary from Script&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;2521&#34;
		data-flex-basis=&#34;6052px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary
&lt;/h2&gt;&lt;p&gt;I personally believe that it&amp;rsquo;s very easy for organizers to access the reports themselves in Teams but having the possibility to get them as an admin via PowerShell as well is certainly a welcome addition to my script toolbox. This will be especially useful in case you&amp;rsquo;re asked to export attendance reports on a regular basis. While the fact that you need to know the unique meeting id before you can get an attendance report makes it a bit harder to truly automate this or you may have to chase other attendees for it, if you weren&amp;rsquo;t invited to the meeting yourself but overall, the join meeting Id should be easy enough to retrieve.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Migrate Teams Incoming Webhooks to Workflows (Power Automate)</title>
        <link>https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/</link>
        <pubDate>Tue, 01 Oct 2024 19:08:52 +0000</pubDate>
        
        <guid>https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/</guid>
        <description>&lt;p&gt;At the beginning of July 2024 Microsoft announced that they will retire Office 365 Connectors in Teams. This was published in the Message Center with post ID &lt;strong&gt;MC808160&lt;/strong&gt;. Initially, Microsoft communicated a rather short deadline but then decided to extend it by quite some time. Users will still be able to add new connectors until December 31st 2024 before they will be retired in December 2025. Microsoft also published this information &lt;a class=&#34;link&#34; href=&#34;https://devblogs.microsoft.com/microsoft365dev/retirement-of-office-365-connectors-within-microsoft-teams/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;how-to-find-out-who-set-up-connectors-in-my-organization&#34;&gt;How To Find Out Who Set Up Connectors In My Organization?
&lt;/h2&gt;&lt;p&gt;The biggest challenge will be finding out which Teams in your organization are currently using Office 365 Connectors in Teams. Luckily, Tony Redmond has created a much appreciated &lt;a class=&#34;link&#34; href=&#34;https://office365itpros.com/2024/07/10/teams-office-connectors/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;script&lt;/a&gt; to scan your tenant for any Teams that are using connectors. I quickly tested this script and can confirm that it lists all the incoming webhooks configured in my lab tenant.&lt;/p&gt;
&lt;p&gt;Now that we know which Teams are utilizing incoming webhooks, the natural next step is to contact the owners of the affected Teams and help them transitioning their apps to sending data to Power Automate instead. But first we need to make sure that we know how to set up notifications via Power Automate.&lt;/p&gt;
&lt;h2 id=&#34;pros-and-cons-about-this-change&#34;&gt;Pros And Cons About This Change
&lt;/h2&gt;&lt;p&gt;The only connector I ever used was the incoming webhook. I mainly used them to send &lt;a class=&#34;link&#34; href=&#34;https://adaptivecards.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Adaptive Cards&lt;/a&gt; to Teams channels and I blogged about different use cases &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/&#34; &gt;here&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-self-service-call-queue-solution-part-2-ab8201157831/&#34; &gt;here&lt;/a&gt;. That&amp;rsquo;s why this blog post will also be focusing on sending Adaptive Cards through Power Automate and not Office 365 Connectors in general.&lt;/p&gt;
&lt;p&gt;These examples mostly used the schema for &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/outlook/actionable-messages/message-card-reference&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Legacy Actionable Message Cards&lt;/a&gt; and not true Adaptive Cards. While I was able to introduce some Adaptive Card features into the Message Card payloads, it was never really clear to me which features are supported and which aren&amp;rsquo;t. This required a lot of trial and error. Now that we&amp;rsquo;re transitioning to Power Automate, we can fully utilize all the Adaptive Card features which are supported in Teams. More importantly, we can finally relay on the information that&amp;rsquo;s published on the &lt;a class=&#34;link&#34; href=&#34;https://adaptivecards.io/explorer/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Adaptive Card Schema Explorer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The downside is that you might have to spend more money on additional licenses for Power Automate service accounts. If you&amp;rsquo;re not using service accounts to send Adaptive Cards to Teams, you&amp;rsquo;ll face the risk that some notifications will stop working when the person who set up a Flow leaves the company. On the plus side, using Power Automate will also give you more flexibility and also more security. (More on that later.)&lt;/p&gt;
&lt;h2 id=&#34;set-up-a-power-automate-workflows-connector&#34;&gt;Set Up a Power Automate (Workflows) Connector
&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s take a look at how you can set up a Power Automate Flow to replicate the functionality of an incoming webhook directly in Teams.&lt;/p&gt;
&lt;p&gt;Select the channel where you want to receive the notification and click on the &lt;strong&gt;3 dots&lt;/strong&gt;. Then click on &lt;strong&gt;Workflows&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image.png&#34;
	width=&#34;2153&#34;
	height=&#34;1388&#34;
	srcset=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image_hu_d83f58a4f4a0f843.png 480w, https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image_hu_516515cfd05a15c5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Open the Workflows app&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;372px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Next, search for &lt;strong&gt;Post to a channel&lt;/strong&gt; to find the action shown in the screenshot below and click it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-1.png&#34;
	width=&#34;2153&#34;
	height=&#34;1388&#34;
	srcset=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-1_hu_ed0b5b5bd34d6527.png 480w, https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-1_hu_da25da3c5770313d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Select the template: Post to a channel when a webhook request is received &#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;372px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Click &lt;strong&gt;Next&lt;/strong&gt; and then &lt;strong&gt;Add workflow&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-2.png&#34;
	width=&#34;2153&#34;
	height=&#34;1388&#34;
	srcset=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-2_hu_696ef90060e5dbc9.png 480w, https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-2_hu_77669f2cfc08e37b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Set up connections&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;372px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-3.png&#34;
	width=&#34;2153&#34;
	height=&#34;1388&#34;
	srcset=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-3_hu_9b3a5c3d42a598c3.png 480w, https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-3_hu_7f3cab872a0d430b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Confirm the Team and the channel&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;372px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Finally, copy the URL. You&amp;rsquo;ll need this to send Adaptive Cards to your channel.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-4.png&#34;
	width=&#34;2153&#34;
	height=&#34;1388&#34;
	srcset=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-4_hu_8f3510629a320198.png 480w, https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-4_hu_dabfbd2ceef78c27.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Copy the trigger URL&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;372px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it. The Flow is now set up and can be triggered by sending a &lt;strong&gt;POST&lt;/strong&gt; request to the trigger URL.&lt;/p&gt;
&lt;p&gt;Of course I expected this to work straight away and tested it by sending a very basic Adaptive Card:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$flowTriggerUri&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;Your trigger URI&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$adaptiveCard&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sh&#34;&gt;@&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;    &amp;#34;type&amp;#34;: &amp;#34;AdaptiveCard&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;    &amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$schema&lt;/span&gt;&lt;span class=&#34;sh&#34;&gt;&amp;#34;: &amp;#34;http://adaptivecards.io/schemas/adaptive-card.json&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;    &amp;#34;version&amp;#34;: &amp;#34;1.3&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;    &amp;#34;body&amp;#34;: [
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;            &amp;#34;type&amp;#34;: &amp;#34;TextBlock&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;            &amp;#34;text&amp;#34;: &amp;#34;Hello World!&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;            &amp;#34;wrap&amp;#34;: true,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;            &amp;#34;color&amp;#34;: &amp;#34;Accent&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;            &amp;#34;size&amp;#34;: &amp;#34;ExtraLarge&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;    ]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;&amp;#34;@&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-RestMethod&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$flowTriggerUri&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Post&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Body&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$adaptiveCard&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;To my surprise, this failed. This is how I have typically been sending data to incoming webhooks.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-5.png&#34;
	width=&#34;2153&#34;
	height=&#34;1388&#34;
	srcset=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-5_hu_20b25ad7b44cc067.png 480w, https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-5_hu_a8efb83019129245.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Flow failure info&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;372px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-6.png&#34;
	width=&#34;2153&#34;
	height=&#34;1388&#34;
	srcset=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-6_hu_6662fd880199fd98.png 480w, https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-6_hu_9f0f678123d6a83a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Error details&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;372px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The Workflows app in Teams doesn&amp;rsquo;t show all the details but on on &lt;a class=&#34;link&#34; href=&#34;https://make.powerautomate.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;make.powerautomate.com&lt;/a&gt; I was able to see that the Adaptive Card Payload was indeed received.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-7.png&#34;
	width=&#34;926&#34;
	height=&#34;1074&#34;
	srcset=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-7_hu_681b4f8c75f73e7.png 480w, https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-7_hu_fc149307f5188e94.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Trigger output&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;86&#34;
		data-flex-basis=&#34;206px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;For the record, this is how the Flow that was created from the template looks like.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-19.png&#34;
	width=&#34;2153&#34;
	height=&#34;1388&#34;
	srcset=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-19_hu_37ef271f7b971f01.png 480w, https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-19_hu_eea382feb74e4fc4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Flow created by Teams&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;372px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I then did some more research and stumbled upon another &lt;a class=&#34;link&#34; href=&#34;https://office365itpros.com/2024/06/17/teams-post-to-channel-workflow/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;blog post&lt;/a&gt; from Tony Redmond. This blog post also includes a link to his script on &lt;a class=&#34;link&#34; href=&#34;https://github.com/12Knocksinna/Office365itpros/blob/master/Post-ItemsToHTTPWorkFlow.PS1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;From this, I learned that the Flow is expecting the actual Adaptive Card JSON to be inside &lt;code&gt;content&lt;/code&gt; which itself is an item in the &lt;code&gt;attachments&lt;/code&gt; array. Also the JSON needs to include &lt;code&gt;&amp;quot;type&amp;quot;: &amp;quot;message&amp;quot;&lt;/code&gt; and &lt;code&gt;attachments&lt;/code&gt; needs to other properties before &lt;code&gt;content&lt;/code&gt; too.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;attachments&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;contentType&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/vnd.microsoft.card.adaptive&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;contentUrl&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nt&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;AdaptiveCard&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://adaptivecards.io/schemas/adaptive-card.json&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;1.3&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nt&#34;&gt;&amp;#34;body&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;TextBlock&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;wrap&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;color&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Accent&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;size&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;ExtraLarge&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-17.png&#34;
	width=&#34;2153&#34;
	height=&#34;1388&#34;
	srcset=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-17_hu_6db47afd349c099a.png 480w, https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-17_hu_fb7c2965207191bd.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;It works!&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;372px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;For comparison, here&amp;rsquo;s the trigger outputs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-18.png&#34;
	width=&#34;915&#34;
	height=&#34;1315&#34;
	srcset=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-18_hu_85830dad7caf398a.png 480w, https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-18_hu_bf1b4530b00eb5aa.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Trigger Outputs when the Adaptive Card is inside the attachments/content&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;69&#34;
		data-flex-basis=&#34;166px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Before I found this information, I long tinkered with the Flow itself and made it accept a payload which only includes an Adaptive Card. I basically made this just a few days after the change was announced but I only had time to write about it and figured out how to successfully use the default Flow (Thanks to Tony&amp;rsquo;s post) today.&lt;/p&gt;
&lt;p&gt;Since I&amp;rsquo;ve been using my Flow for months now and it&amp;rsquo;s working great, I see no harm in showing you an alternative way which will accept a payload which &lt;strong&gt;only&lt;/strong&gt; includes an Adaptive Card, just like incoming webhooks did.&lt;/p&gt;
&lt;h2 id=&#34;set-up-a-flow-from-scratch&#34;&gt;Set Up a Flow From Scratch
&lt;/h2&gt;&lt;p&gt;My goal is to minimize the changes I have to do to my scripts and only swap the old webhook Uri for the new Power Automate trigger Uri and update the payload to use the official Adaptive Card schema. By using this method, I don&amp;rsquo;t need to bother about changing the structure of the JSON payload as well.&lt;/p&gt;
&lt;p&gt;When the Flow is set up through Teams, it&amp;rsquo;s set up in the environment of the user which created it. This is not what I wanted anyway. I want this to run under a service account. So let&amp;rsquo;s take a look on how to build a working Flow from scratch.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 1:&lt;/strong&gt; Start by creating a new Flow and search for &lt;strong&gt;Microsoft Teams Webhook&lt;/strong&gt; for the trigger. Select the only option which is called &lt;strong&gt;When a Teams webhook request is received&lt;/strong&gt;. Make sure that the option &lt;strong&gt;Who can trigger the flow?&lt;/strong&gt; is set to &lt;strong&gt;Anyone&lt;/strong&gt;. (Why this trigger still used the old Teams logo is beyond me&amp;hellip;)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2:&lt;/strong&gt; Then add a &lt;strong&gt;Compose&lt;/strong&gt; action and add the &lt;strong&gt;Body&lt;/strong&gt; as Inputs from the dynamic content selection. (Note: Select the one with a capital &lt;strong&gt;B&lt;/strong&gt;.)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3:&lt;/strong&gt; Add a &lt;strong&gt;Post card in a chat or channel&lt;/strong&gt; action and select your Team and Channel and then select the &lt;strong&gt;Outputs&lt;/strong&gt; of the Compose action in the Adaptive Card field.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-8.png&#34;
	width=&#34;931&#34;
	height=&#34;945&#34;
	srcset=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-8_hu_43c5f38158afffc1.png 480w, https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-8_hu_907a904f76b860dc.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;That’s the entire flow.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;98&#34;
		data-flex-basis=&#34;236px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Note that my custom Flow doesn&amp;rsquo;t include an &lt;strong&gt;Apply to each&lt;/strong&gt; action and thus, it&amp;rsquo;s not possible to send multiple Adaptive Cards at once. While this would be possible when you&amp;rsquo;re using the default Flow, I don&amp;rsquo;t really see why I&amp;rsquo;d need that.&lt;/p&gt;
&lt;p&gt;When I use the same code example from above, which only includes the Adaptive Card JSON to send the POST request, the Flow doesn&amp;rsquo;t fail anymore and the card is posted in Teams.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-9.png&#34;
	width=&#34;2153&#34;
	height=&#34;1388&#34;
	srcset=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-9_hu_eff84cb70332a0c5.png 480w, https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-9_hu_b320c317a90ebd12.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Hello World!&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;372px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-10.png&#34;
	width=&#34;1174&#34;
	height=&#34;524&#34;
	srcset=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-10_hu_be944ba59dde5338.png 480w, https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-10_hu_b84c645e09aeb02f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Success!&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;224&#34;
		data-flex-basis=&#34;537px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;advanced-scenarios&#34;&gt;Advanced Scenarios
&lt;/h2&gt;&lt;p&gt;Now that we have a working Flow, let&amp;rsquo;s look at some other cool stuff we can do now&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;password-protect-the-flow&#34;&gt;Password Protect The Flow
&lt;/h3&gt;&lt;p&gt;Office 365 Webhooks in Teams didn&amp;rsquo;t support any kind of authentication. The only security measure we had was keeping the webhook URI a secret. With Power Automate Flows, you can select between different options for &lt;strong&gt;Who can trigger the flow?&lt;/strong&gt;. Valid choices are &lt;strong&gt;Any user in my tenant&lt;/strong&gt;, &lt;strong&gt;Specific users in my tenant&lt;/strong&gt; or &lt;strong&gt;Anyone&lt;/strong&gt;. At this point, I haven&amp;rsquo;t actually figured out how user authentication would work.&lt;/p&gt;
&lt;p&gt;Anyway, I already mentioned that my goal for this migration is to make as little changes as possible to my scripts. Therefore I&amp;rsquo;m sticking with anyone can trigger the Flow. By the way, this is also what&amp;rsquo;s used as the default value when you add a new Flow through the Workflows app in Teams as shown in &lt;a class=&#34;link&#34; href=&#34;#set-up-a-power-automate-workflows-connector&#34; &gt;chapter 3&lt;/a&gt; of this article. However, that doesn&amp;rsquo;t mean that I can&amp;rsquo;t add at least some security to this.&lt;/p&gt;
&lt;p&gt;By using a trigger condition, we can limit who can trigger the Flow as well. To do this, click on the three dots on the trigger and then select &lt;strong&gt;Settings&lt;/strong&gt;. Then scroll to the bottom, enable trigger conditions and past the following code:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@equals(triggerOutputs()?[&#39;headers&#39;][&#39;TriggerSecret&#39;], &#39;OnlyICanTriggerThisFlow&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then click &lt;strong&gt;Done&lt;/strong&gt;. The value I set for the trigger secret now essentially becomes the password required to trigger this Flow now. Of course, you can change it to whatever you like.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-11.png&#34;
	width=&#34;1365&#34;
	height=&#34;522&#34;
	srcset=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-11_hu_6432e50d669856c4.png 480w, https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-11_hu_845a37889f18ed1d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Trigger Settings&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;261&#34;
		data-flex-basis=&#34;627px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-12.png&#34;
	width=&#34;924&#34;
	height=&#34;1393&#34;
	srcset=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-12_hu_3a3bf698cbbd75a3.png 480w, https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-12_hu_6e6f75056efa8df7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Trigger Condition&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;66&#34;
		data-flex-basis=&#34;159px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In the request to trigger the Flow, the password must be added to the headers and they must be included into the request:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$flowTriggerUri&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Your trigger URI&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$flowHeaders&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;TriggerSecret&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;OnlyICanTriggerThisFlow&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$adaptiveCard&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sh&#34;&gt;@&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;    &amp;#34;type&amp;#34;: &amp;#34;AdaptiveCard&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;    &amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$schema&lt;/span&gt;&lt;span class=&#34;sh&#34;&gt;&amp;#34;: &amp;#34;http://adaptivecards.io/schemas/adaptive-card.json&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;    &amp;#34;version&amp;#34;: &amp;#34;1.3&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;    &amp;#34;body&amp;#34;: [
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;            &amp;#34;type&amp;#34;: &amp;#34;TextBlock&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;            &amp;#34;text&amp;#34;: &amp;#34;Hello World!&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;            &amp;#34;wrap&amp;#34;: true,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;            &amp;#34;color&amp;#34;: &amp;#34;Accent&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;            &amp;#34;size&amp;#34;: &amp;#34;ExtraLarge&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;    ]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sh&#34;&gt;&amp;#34;@&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-RestMethod&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$flowTriggerUri&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Post&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$flowHeaders&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Body&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$adaptiveCard&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;If the &lt;strong&gt;TriggerSecret&lt;/strong&gt; is missing from the header or if it&amp;rsquo;s value is wrong, the Flow won&amp;rsquo;t trigger at all. This means that you won&amp;rsquo;t even see a failed Flow action if the trigger URI is called with a wrong password.&lt;/p&gt;
&lt;h3 id=&#34;use-the-same-flow-for-multiple-channels&#34;&gt;Use The Same Flow For Multiple Channels
&lt;/h3&gt;&lt;p&gt;Another cool thing about the move to Power Automate is that we can use the same Flow and the same trigger URI to send notifications to different channels. You don&amp;rsquo;t necessarily need to create a Flow for each channel like it was the case with incoming webhooks.&lt;/p&gt;
&lt;p&gt;The principle here is the same as with the trigger secret, we just add information about the target channel to the request headers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$flowHeaders&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;TriggerSecret&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;OnlyICanTriggerThisFlow&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s2&#34;&gt;&amp;#34;Channel&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;M365&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;To access this data in Power Automate, we need to add another &lt;strong&gt;Compose&lt;/strong&gt; action with the following expression:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;triggerOutputs()?[&#39;headers&#39;][&#39;Channel&#39;]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-13.png&#34;
	width=&#34;952&#34;
	height=&#34;192&#34;
	srcset=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-13_hu_5ae3b3010c3bf6f0.png 480w, https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-13_hu_770c15bbc35eafd2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Expression to extract headers from trigger outputs&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;495&#34;
		data-flex-basis=&#34;1190px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Next, we&amp;rsquo;ll just create a switch statement in which we&amp;rsquo;ll add a &lt;strong&gt;Post card in a chat or channel&lt;/strong&gt; action for each case we want to cover. This could be different channels inside the same Team or even channels from other Teams the service account is a member of.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-14.png&#34;
	width=&#34;1939&#34;
	height=&#34;1377&#34;
	srcset=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-14_hu_3bda3311190a649e.png 480w, https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-14_hu_950a27a5dccded46.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Switch statement to target different channels based on header value&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;140&#34;
		data-flex-basis=&#34;337px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;result&#34;&gt;Result
&lt;/h3&gt;&lt;p&gt;Even though, I was using the same Flow, with the same trigger URI, this message was now received in the &lt;strong&gt;Notifications - M365&lt;/strong&gt; channel and not in &lt;strong&gt;Notifications - Azure&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-15.png&#34;
	width=&#34;2153&#34;
	height=&#34;1388&#34;
	srcset=&#34;https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-15_hu_7d89d834d11b2646.png 480w, https://heusser.pro/p/migrate-teams-office-365-connectors-to-workflows-8p40yq7jfebm/image-15_hu_9c0be465ac427894.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Adaptive Card in different channel&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;372px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Pretty cool, right?&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary
&lt;/h2&gt;&lt;p&gt;Over all, I really like this change. The biggest advantage to me is that we&amp;rsquo;ll finally be able to fully utilize the huge potential of Adaptive Cards and there&amp;rsquo;s no trial and error involved anymore to find out which card elements are supported and which are not.&lt;/p&gt;
&lt;p&gt;Finding out which Teams are using Office 365 Connectors/incoming webhooks should be easy enough using Tony&amp;rsquo;s script. Approaching all the users and letting them know that their integration will break unless they take action will be the painful part of this migration. But in my opinion this also presents itself as an opportunity to get a hold on which of your end users are making use of sending data to Teams channels and offer them to set up service accounts for them.&lt;/p&gt;
&lt;p&gt;However, this doesn&amp;rsquo;t mean that there won&amp;rsquo;t be users which will set up or keep setting up their own Workflows in Teams. With incoming webhooks, Admins had the possibility to block the use of the app through Teams app permission policies. If you want to block users from using the Workflows app, that&amp;rsquo;s still possible through the same policy but that would also mean that you&amp;rsquo;re blocking them from using the Workflows app entirely, which might be suboptimal in many scenarios.&lt;/p&gt;
&lt;p&gt;To end this post on a positive note, I&amp;rsquo;d like to mention that I believe that this change will make a lot of sense in the future. Power Automate is a very well established platform and has seen some great improvements and adoption over the last years. This gives us a much better supported and a very promising foundation to build awesome notification and user input processes powered by Power Automate and Adaptive Cards.&lt;/p&gt;
&lt;p&gt;Oh, and I also really like the fact that unlike the &lt;strong&gt;HTTP&lt;/strong&gt; trigger, the Teams webhook trigger doesn&amp;rsquo;t require a Power Automate Premium license.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Microsoft Graph: How To Filter Users by Phone Number</title>
        <link>https://heusser.pro/p/microsoft-graph-how-to-filter-users-by-phone-number-b659lvqwir32/</link>
        <pubDate>Thu, 04 Jul 2024 20:20:00 +0000</pubDate>
        
        <guid>https://heusser.pro/p/microsoft-graph-how-to-filter-users-by-phone-number-b659lvqwir32/</guid>
        <description>&lt;p&gt;Sometimes, something simple as writing a filter query to search for Entra ID users which have a specific phone number can take way longer than we would like. Instead of making you search through numerous Stack Overflow posts or ask ChatGPT on how to do it, I decided to write this short blog post which will give you everything you need to quickly find Entra ID users which have a specific phone number.&lt;/p&gt;
&lt;h2 id=&#34;number-types&#34;&gt;Number Types
&lt;/h2&gt;&lt;p&gt;The most common numbers in Entra ID are &lt;strong&gt;Mobile phone&lt;/strong&gt; and &lt;strong&gt;Business Phone&lt;/strong&gt;. While the Entra ID admin portal displays &lt;code&gt;Business phone&lt;/code&gt; in singular, the property is actually called &lt;code&gt;businessPhones&lt;/code&gt; and is a string collection.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-graph-how-to-filter-users-by-phone-number-b659lvqwir32/image.png&#34;
	width=&#34;1793&#34;
	height=&#34;693&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-graph-how-to-filter-users-by-phone-number-b659lvqwir32/image_hu_49c2b27357730239.png 480w, https://heusser.pro/p/microsoft-graph-how-to-filter-users-by-phone-number-b659lvqwir32/image_hu_361eb514353b3b4f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Phone numbers in Entra ID&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;258&#34;
		data-flex-basis=&#34;620px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;filter-queries&#34;&gt;Filter Queries
&lt;/h2&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/graph/api/resources/user?view=graph-rest-1.0#properties&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;This&lt;/a&gt; page tells us which conditions are supported for which user properties. I wasn&amp;rsquo;t able to get this to work using &lt;code&gt;Get-MgUser -Filter &amp;quot;Filter Query&amp;quot;&lt;/code&gt; since an API request using an advanced filter query will require a special header. Not long ago, I wrote about the &lt;code&gt;Invoke-MgGraphRequest&lt;/code&gt; &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-graph-get-an-access-token-from-an-established-powershell-session-zv37e1xmxr86&#34; &gt;Cmdlet&lt;/a&gt; and how that can be used to call the Graph REST API directly using the session token from &lt;code&gt;Connect-MgGraph&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To make it work, you&amp;rsquo;ll need to create a header with &lt;strong&gt;ConsistencyLevel&lt;/strong&gt;: &lt;code&gt;eventual&lt;/code&gt; which is then added to the Graph Request.&lt;/p&gt;
&lt;p&gt;Since this is a web request, you&amp;rsquo;ll also need to url encode the &lt;code&gt;+&lt;/code&gt; character. A simple &lt;strong&gt;replace&lt;/strong&gt; with &lt;code&gt;%2B&lt;/code&gt; will do the trick here. It&amp;rsquo;s important to note that this will only work if the phone number is stored on the Entra user exactly the same as what&amp;rsquo;s in the filter query. For example, it won&amp;rsquo;t work if the phone number is stored without spaces in Entra but you&amp;rsquo;re querying it with spaces. If your phone numbers in Entra are a mess, I recommend to take a look at &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/prettify-and-sync-teams-phone-numbers-to-azure-ad-e973755f83d5&#34; &gt;this&lt;/a&gt; blog post. This will show you how you can format all phone numbers in the same, and most importantly in the correct way.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how to create the header.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$header&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;ConsistencyLevel&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;eventual&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;powershell-example&#34;&gt;PowerShell Example
&lt;/h3&gt;&lt;p&gt;Here is an example script which contains all possible filter conditions for both mobile and business phone numbers. The important thing here is that the custom header is included and that the &lt;strong&gt;Uri&lt;/strong&gt; includes the &lt;strong&gt;Count&lt;/strong&gt; variable. Note that the &lt;code&gt;businessPhones&lt;/code&gt; property does not support the &lt;code&gt;in&lt;/code&gt; condition.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Connect-MgGraph&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$mobileNumber&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;+41 79 456 78 90&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$businessNumber&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;+41 43 123 45 67&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$mobileNumberUrlSafe&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$mobileNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;%2B&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$businessNumberUrlSafe&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$businessNumber&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;%2B&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$header&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;ConsistencyLevel&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;eventual&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Filter users by mobile phone number exact match (equals)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$mgUserMatchesMobilePhone&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-MgGraphRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://graph.microsoft.com/v1.0/users?&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;filter=mobilePhone eq &amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$mobileNumberUrlSafe&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&amp;amp;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;count=true&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Filter users by business phone number exact match (equals)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$mgUserMatchesBusinessPhone&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-MgGraphRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://graph.microsoft.com/v1.0/users?&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;filter=businessPhones/any(p:p eq &amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$businessNumberUrlSafe&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;)&amp;amp;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;count=true&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Filter users by mobile phone number not equals&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$mgUserMatchesMobilePhone&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-MgGraphRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://graph.microsoft.com/v1.0/users?&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;filter=mobilePhone ne &amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$mobileNumberUrlSafe&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&amp;amp;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;count=true&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Filter users by business phone number not equals&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$mgUserMatchesBusinessPhone&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-MgGraphRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://graph.microsoft.com/v1.0/users?&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;filter=not businessPhones/any(p:p eq &amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$businessNumberUrlSafe&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;)&amp;amp;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;count=true&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Filter users by mobile phone number starts with&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$mgUserMatchesMobilePhone&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-MgGraphRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://graph.microsoft.com/v1.0/users?&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;filter=startsWith(mobilePhone, &amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$mobileNumberUrlSafe&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;)&amp;amp;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;count=true&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;value&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Filter users by business phone number starts with&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$mgUserMatchesBusinessPhone&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-MgGraphRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://graph.microsoft.com/v1.0/users?&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;filter=businessPhones/any(p:startswith(p,&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$businessNumberUrlSafe&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;))&amp;amp;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;count=true&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Filter users by mobile phone number greater or equal&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$mgUserMatchesMobilePhone&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-MgGraphRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://graph.microsoft.com/v1.0/users?&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;filter=mobilePhone ge &amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$mobileNumberUrlSafe&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&amp;amp;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;count=true&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Filter users by business phone number greater or equal&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$mgUserMatchesBusinessPhone&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-MgGraphRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://graph.microsoft.com/v1.0/users?&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;filter=businessPhones/any(p:p ge &amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$businessNumberUrlSafe&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;)&amp;amp;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;count=true&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Filter users by mobile phone number less or equal&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$mgUserMatchesMobilePhone&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-MgGraphRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://graph.microsoft.com/v1.0/users?&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;filter=mobilePhone le &amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$mobileNumberUrlSafe&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;&amp;amp;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;count=true&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Filter users by business phone number less or equal&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$mgUserMatchesBusinessPhone&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-MgGraphRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://graph.microsoft.com/v1.0/users?&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;filter=businessPhones/any(p:p le &amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$businessNumberUrlSafe&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;)&amp;amp;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;count=true&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Filter users by mobile phone number in&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$mobileNumberUrlSafe2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;+41 79 456 78 91&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;+&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;%2B&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$mgUserMatchesMobilePhone&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-MgGraphRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://graph.microsoft.com/v1.0/users?&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;filter=mobilePhone in [&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$mobileNumberUrlSafe&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$mobileNumberUrlSafe2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#39;]&amp;amp;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;count=true&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;value&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;example-output&#34;&gt;Example Output
&lt;/h4&gt;&lt;p&gt;What&amp;rsquo;s a little weird is that PowerShell outputs an array with name/value pairs instead of a PS custom object.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-graph-how-to-filter-users-by-phone-number-b659lvqwir32/image-1.png&#34;
	width=&#34;1644&#34;
	height=&#34;899&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-graph-how-to-filter-users-by-phone-number-b659lvqwir32/image-1_hu_92ff7fde5abe850d.png 480w, https://heusser.pro/p/microsoft-graph-how-to-filter-users-by-phone-number-b659lvqwir32/image-1_hu_84381021b589bf20.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Output from Invoke-MgGraphRequest&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;438px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;While it&amp;rsquo;s possible to access properties directly, it doesn&amp;rsquo;t work in &lt;code&gt;Format-Table&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-graph-how-to-filter-users-by-phone-number-b659lvqwir32/image-4.png&#34;
	width=&#34;1644&#34;
	height=&#34;262&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-graph-how-to-filter-users-by-phone-number-b659lvqwir32/image-4_hu_ca1b433299048a88.png 480w, https://heusser.pro/p/microsoft-graph-how-to-filter-users-by-phone-number-b659lvqwir32/image-4_hu_bb9630fd73059695.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Format-Table does not work with specific properties&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;627&#34;
		data-flex-basis=&#34;1505px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;A simple trick to convert the &lt;strong&gt;array&lt;/strong&gt; returned by Graph into a &lt;strong&gt;PS custom object&lt;/strong&gt; I often use is to convert it &lt;strong&gt;to&lt;/strong&gt; Json and than convert it &lt;strong&gt;from&lt;/strong&gt; Json straight away again.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$mgUserMatchesMobilePhone&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$mgUserMatchesMobilePhone&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ConvertTo-Json&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ConvertFrom-Json&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Obviously, you can do the same for the &lt;code&gt;$mgUserMatchesBusinessPhone&lt;/code&gt; variable. That will store and display the values as a proper PowerShell object.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-graph-how-to-filter-users-by-phone-number-b659lvqwir32/image-3.png&#34;
	width=&#34;1644&#34;
	height=&#34;899&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-graph-how-to-filter-users-by-phone-number-b659lvqwir32/image-3_hu_aa05bebc5e432893.png 480w, https://heusser.pro/p/microsoft-graph-how-to-filter-users-by-phone-number-b659lvqwir32/image-3_hu_f4a255960b2ec256.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;There are no name/value pairs anymore.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;438px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now you can work with the &lt;code&gt;$mgUserMatchesMobilePhone&lt;/code&gt;and &lt;code&gt;$mgUserMatchesBusinessPhone&lt;/code&gt; as expected and do anything you want with them.&lt;/p&gt;
&lt;h3 id=&#34;bonus-tip-power-automate&#34;&gt;Bonus Tip (Power Automate)
&lt;/h3&gt;&lt;p&gt;The standard action &lt;strong&gt;Search for users (V2)&lt;/strong&gt; from the &lt;strong&gt;Office 365 Users&lt;/strong&gt; connector doesn&amp;rsquo;t support to filter for phone numbers of any type.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-graph-how-to-filter-users-by-phone-number-b659lvqwir32/image-2.png&#34;
	width=&#34;1507&#34;
	height=&#34;262&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-graph-how-to-filter-users-by-phone-number-b659lvqwir32/image-2_hu_4de9e5b2909fb265.png 480w, https://heusser.pro/p/microsoft-graph-how-to-filter-users-by-phone-number-b659lvqwir32/image-2_hu_e5c8b0d94d0e16f7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Supported filters for Office 365 Users&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;575&#34;
		data-flex-basis=&#34;1380px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Luckily, there&amp;rsquo;s also a an action called &lt;strong&gt;Send an HTTP request&lt;/strong&gt; within the &lt;strong&gt;Office 365 Users&lt;/strong&gt; connector. This will allow you to make the same kinds of advanced requests to the Graph API as I&amp;rsquo;ve shown above with PowerShell.&lt;/p&gt;
&lt;p&gt;Below is an example of a simple Power Automate Flow that can also filter for Entra ID users by phone number. What&amp;rsquo;s important is that you also need to add the &lt;strong&gt;ConsistencyLevel&lt;/strong&gt; header and that you must remove all occurrences of the escape character &lt;code&gt;`&lt;/code&gt; from the Uri. Since Power Automate does not use &lt;code&gt;$&lt;/code&gt; to define variables, the escape character is not needed/supported here. The &lt;code&gt;&amp;amp;$count=true&lt;/code&gt; also needs to be included at the end of the Uri.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-graph-how-to-filter-users-by-phone-number-b659lvqwir32/image-5.png&#34;
	width=&#34;938&#34;
	height=&#34;1296&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-graph-how-to-filter-users-by-phone-number-b659lvqwir32/image-5_hu_15810a0c6ec70930.png 480w, https://heusser.pro/p/microsoft-graph-how-to-filter-users-by-phone-number-b659lvqwir32/image-5_hu_2571de27c697ea1d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Power Automate Flow to filter for users by phone number&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;72&#34;
		data-flex-basis=&#34;173px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Since this is just an example, the phone number used as the filter is simply stored in &lt;strong&gt;Compose Phone Number&lt;/strong&gt; action. The next action, &lt;strong&gt;Compose Phone Number URL Safe&lt;/strong&gt; will replace the &lt;code&gt;+&lt;/code&gt; with &lt;code&gt;%2B&lt;/code&gt; using an expression.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;replace(outputs(&amp;#39;Compose_Phone_Number&amp;#39;), &amp;#39;+&amp;#39;, &amp;#39;%2B&amp;#39;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;To extract the Display Name of the result, I&amp;rsquo;m using another compose action with the following expression.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;outputs(&amp;#39;Send_an_HTTP_request&amp;#39;)?[&amp;#39;body&amp;#39;]?[&amp;#39;value&amp;#39;][0][&amp;#39;displayName&amp;#39;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;example-output-1&#34;&gt;Example Output
&lt;/h4&gt;&lt;p&gt;If there is a user match for the phone number, Graph will return a nice Json response to Power Automate.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-graph-how-to-filter-users-by-phone-number-b659lvqwir32/image-6.png&#34;
	width=&#34;960&#34;
	height=&#34;1138&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-graph-how-to-filter-users-by-phone-number-b659lvqwir32/image-6_hu_28f9711ae8084ce3.png 480w, https://heusser.pro/p/microsoft-graph-how-to-filter-users-by-phone-number-b659lvqwir32/image-6_hu_370e74537fcbb3f8.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Output from Microsoft Graph within Power Automate&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;84&#34;
		data-flex-basis=&#34;202px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;summary--download&#34;&gt;Summary &amp;amp; Download
&lt;/h2&gt;&lt;p&gt;I hope that these examples help you with whatever you&amp;rsquo;re trying to achieve. I&amp;rsquo;m certainly going to use this blog post as a cheat sheet for myself in the future. You can also download the entire script from my &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Scripts/MicrosoftGraph/EntraID/FilterGraphUsersByPhoneNumber.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt; profile.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Microsoft Teams: Change Call Queue Opt In Status on Behalf of Other User</title>
        <link>https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/</link>
        <pubDate>Fri, 14 Jun 2024 16:48:53 +0000</pubDate>
        
        <guid>https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/</guid>
        <description>&lt;p&gt;&lt;strong&gt;Update 29.09.2024&lt;/strong&gt; This post features a proof of concept and was an experimental project leveraging not supported ways of achieving what was presented. It looks like Microsoft has made changes to the &lt;strong&gt;Send an HTTP request to SharePoint&lt;/strong&gt; and tightened the security around it. Some of the actions outlined in this blog post are no longer possible and now throw an &lt;strong&gt;Unauthorized&lt;/strong&gt; error. While it was nice to be able to do these things, I fully believe that Microsoft is doing the right thing by adding more security to their services. If you want to be able to opt in/out another user on their behalf, I recommend to use the now available &lt;strong&gt;Queues&lt;/strong&gt; app in Teams.&lt;/p&gt;
&lt;h2 id=&#34;history-lesson&#34;&gt;History Lesson
&lt;/h2&gt;&lt;p&gt;Up until now, it hasn&amp;rsquo;t been possible for a queue manager to opt in or opt out other agents on their behalf. Opting in or out of a queue was always an action that had to be done by agents themselves. This changes with the &lt;strong&gt;Queues&lt;/strong&gt; app which is currently still in private preview. If you&amp;rsquo;re reading this blog, I doubt that this is the first time that you&amp;rsquo;re hearing of this but nevertheless, I&amp;rsquo;m still going to add a couple of links to this blog post.&lt;/p&gt;
&lt;p&gt;You can read the official announcement of the Queues app &lt;a class=&#34;link&#34; href=&#34;https://techcommunity.microsoft.com/t5/microsoft-teams-blog/introducing-the-queues-app-enabling-customer-engagement-in/ba-p/4095971&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt; and you&amp;rsquo;ll find the official support article &lt;a class=&#34;link&#34; href=&#34;https://support.microsoft.com/en-us/office/use-the-queues-app-for-microsoft-teams-370ad83e-c2c1-4a9f-8a59-16c98be102e9&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. On &lt;a class=&#34;link&#34; href=&#34;https://regale.cloud/Microsoft/viewer/2963/queues-app/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; page you can see an interactive demo of the queues app.&lt;/p&gt;
&lt;p&gt;While this will finally make it possible to change the opt in status on someone else&amp;rsquo;s behalf, it comes at a price. The Queues app will be part of Teams Premium and thus increase your monthly license costs. At this point, I don&amp;rsquo;t think it&amp;rsquo;s confirmed if only a supervisor can have a Teams Premium license and still be able to change the opt in status of others, or if all the members of a queue will require a Teams Premium license. My best guess is that every member of the queue will require an additional license but please don&amp;rsquo;t take my word for it.&lt;/p&gt;
&lt;p&gt;Since this was one of the most requested features of Teams Phone customers, I already experimented with creating something that would allow somebody to change an agent&amp;rsquo;s opt in statuses remotely in the past. I blogged about this &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/opt-in-or-opt-out-teams-call-queue-agents-remotely-59fe6147f50d&#34; &gt;here&lt;/a&gt;. I don&amp;rsquo;t think that this method still works today but it did work at the time. However, this never made it past a proof of concept because it required the username, password and potentially an MFA secret for the user account for which the opt in status needed to be changed.&lt;/p&gt;
&lt;p&gt;Today, I&amp;rsquo;m presenting a different solution. It&amp;rsquo;s still very much a proof of concept and not very scalable but at least it doesn&amp;rsquo;t need user credentials anymore. But most importantly, it doesn&amp;rsquo;t need any additional licenses.&lt;/p&gt;
&lt;h2 id=&#34;inspiration-from-the-community&#34;&gt;Inspiration from the Community
&lt;/h2&gt;&lt;p&gt;I initially got the idea from fellow MVP &lt;a class=&#34;link&#34; href=&#34;https://www.loryanstrant.com/2023/06/05/automatically-change-your-microsoft-teams-working-location-with-home-assistant/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Loryan Strant&lt;/a&gt;. In this blog post, he explains how you can leverage the &lt;strong&gt;Send an HTTP request to SharePoint&lt;/strong&gt; in Power Automate to make web requests to other end points. In his case, he&amp;rsquo;s targeting the endpoint which is used to update a user&amp;rsquo;s work location. Unknowingly at that time, I worked on &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d&#34; &gt;my own way&lt;/a&gt; of programmatically setting my work location using PowerShell and AADInternals. I&amp;rsquo;ll soon be writing something new about this too but today&amp;rsquo;s issue is all about call queues and changing opt in statuses.&lt;/p&gt;
&lt;p&gt;My next step was to look at the browser dev tools in Edge to see if anything had changed in how the Teams web client handles an opt in change. I already used this method in my first proof of concept over two years ago and I learned how you can effectively use the browser dev tools to see what&amp;rsquo;s going on under the hood from Alexander Holmeset in &lt;a class=&#34;link&#34; href=&#34;https://alexholmeset.blog/2021/02/28/teams-network-planner-automated/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; blog post. On that note I want to point out that I&amp;rsquo;ll forever be grateful for that post. Acquiring this skill has helped me achieve something so many times already!&lt;/p&gt;
&lt;p&gt;In V1 of this PoC the request used to update an agent&amp;rsquo;s opt in status looked like this and the call queue Id was referenced in the payload.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-RestMethod&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://api.interfaces.records.teams.microsoft.com/Teams.VoiceApps/cq-agents/{User Id}&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Body&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$payload&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Put&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$Headers&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Today, this request looks like this and the call queue Id is now part of the URI:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-RestMethod&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://api.interfaces.records.teams.microsoft.com/Teams.DLX/optinsettings/callqueues/{Call Queue Id}/agents/{User Id}&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Body&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;optIn&amp;#34;: {true/false}&amp;#39;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Put&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$Headers&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;I have no idea what &lt;strong&gt;DLX&lt;/strong&gt; stands for. The only thing I could find was &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/openspecs/office_protocols/ms-dlx/fa0e41cd-2b34-4081-b3cf-59ecdad7a5da&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; reference.&lt;/p&gt;
&lt;p&gt;The challenge with these web requests is that you still need to provide a valid access token in the authorization header. In PowerShell, there&amp;rsquo;s no way around user credentials to obtain a token. This is different in Power Automate though.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-the-prerequisites&#34;&gt;Setting up the Prerequisites
&lt;/h2&gt;&lt;p&gt;Before we build the Flow, we&amp;rsquo;ll need something to trigger it. The best and easiest thing I could think of was to create a SharePoint list and add it as a tab to the Teams channel that&amp;rsquo;s linked to the call queue. If you don&amp;rsquo;t already know how to do that, follow the steps below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-1.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-1_hu_763bad1306e732c0.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-1_hu_ce8a67ed6527e6d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Click the &amp;#43; to add a tab.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-2.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-2_hu_125eeccbef5e5279.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-2_hu_34f0998b7753546f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Search for ‘Lists’ and click on it.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-3.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-3_hu_df774a1b8c9e92ec.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-3_hu_ab98990638826702.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Click Save.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-4.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-4_hu_4cb286772d89b4c7.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-4_hu_ae7d551129868a7a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Select Create a list.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-5.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-5_hu_614a7c26a408719f.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-5_hu_f1ee6a73bd8686e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Click on Blank list.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-6.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-6_hu_3b77dd866f18a75a.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-6_hu_cc68201dc3af55d6.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Give your list a name and select a color and an icon. Then click create.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now that the tab shows your list, we&amp;rsquo;ll need to add the columns. Start by clicking &lt;strong&gt;+ Add column&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-8.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-8_hu_1e4468a24bb032dd.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-8_hu_e284bf7ccd2c0230.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Select Person and click Next.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-7.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-7_hu_7ef5ad1f0a176dad.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-7_hu_2607eef89ad073f8.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Enter ‘Agent’ as column name and toggle Show profile photos to Yes.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-9.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-9_hu_e3e10171d06fbe17.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-9_hu_e944876ee0a48f19.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Add another column and choose Yes/No as type.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-10.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-10_hu_124a8db043c07947.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-10_hu_5594ac8f5c48030.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Name it ‘Opt In’ and click Save.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-11.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-11_hu_7f7898356c469be0.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-11_hu_d3815f09bdb2dfb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Add another Yes/No column called ‘Updated by Power Automate’ and set the default value to No.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Next, hide the &lt;strong&gt;Title&lt;/strong&gt; column from the view. We don&amp;rsquo;t need it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-12.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-12_hu_84251706f79dc0c9.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-12_hu_4d6af6dc197c6d46.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Click on the column, then select Column settings, Show/hide columns.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-13.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-13_hu_1f2ce508e48559ad.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-13_hu_740b876607f059d7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Uncheck Title and click Apply.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now select &lt;strong&gt;Edit in grid view&lt;/strong&gt; and add your call queue agents to the list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-14.png&#34;
	width=&#34;2108&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-14_hu_426e8c933604526.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-14_hu_678d6cb004eb2bd5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Add all call queue agents to the Agent column.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;176&#34;
		data-flex-basis=&#34;424px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;re done, click &lt;strong&gt;Exit grid view&lt;/strong&gt; to save the list. It should look something like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-18.png&#34;
	width=&#34;2108&#34;
	height=&#34;1216&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-18_hu_d457242dc34800d5.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-18_hu_43af90f6b183424.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Tip: You can reorder tabs by dragging. I’ve put my List tab next to the Calls tab.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;173&#34;
		data-flex-basis=&#34;416px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-power-of-power-automate&#34;&gt;The Power of Power Automate
&lt;/h2&gt;&lt;p&gt;In Power Automate, Flows are able to leverage connections for which Power Automate will automatically obtain a token for the user that&amp;rsquo;s running the Flow. While you can&amp;rsquo;t view the token, you can certainly use it to make web requests. The principle is quite simple. Each user needs to set up a Power Automate Flow which will update their opt in status when the Flow is triggered.&lt;/p&gt;
&lt;p&gt;The downside is that a Flow needs to be set up for each user and for each call queue where you want to leverage this custom solution. So, if a user is part of multiple queues, there also need to be multiple Flows per user. To be fair, I did say that this is a PoC at the beginning.&lt;/p&gt;
&lt;p&gt;The good thing about this is that I&amp;rsquo;ve built the Flow in a way, in which it will work for any user. A queue supervisor or an IT admin can just create Flow and then share it with all the agents. Each of the agents can then access the Flow using their own account and save a copy of the Flow to their own Flows. If they&amp;rsquo;ve never worked with Power Automate before, they might need help doing that but sharing and saving a copy is still the quickest way to set it all up.&lt;/p&gt;
&lt;h3 id=&#34;flow-for-each-agent&#34;&gt;Flow For Each Agent
&lt;/h3&gt;&lt;p&gt;Let&amp;rsquo;s look at the first Flow. I&amp;rsquo;ll call this the &lt;strong&gt;User-Flow&lt;/strong&gt; from now on.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image.png&#34;
	width=&#34;2064&#34;
	height=&#34;1823&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image_hu_4aca9d6c122e1f79.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image_hu_f5906340bd5d3fa1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;This is the Power Automate Flow in all it’s glory.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;113&#34;
		data-flex-basis=&#34;271px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The Flow will trigger any time the SharePoint list which is now a tab in Teams is updated.&lt;/p&gt;
&lt;h4 id=&#34;import-the-flow-package&#34;&gt;Import the Flow Package
&lt;/h4&gt;&lt;p&gt;Start by downloading the Flow from &lt;a class=&#34;link&#34; href=&#34;#download-flow-packages&#34; &gt;here&lt;/a&gt; and then import it in Power Automate with a user that is part of the call queue, for which you want to add the functionality.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-21.png&#34;
	width=&#34;876&#34;
	height=&#34;242&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-21_hu_3b7de55b599cf749.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-21_hu_24cefe900990c434.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Click on Import Package (Legacy).&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;361&#34;
		data-flex-basis=&#34;868px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-22.png&#34;
	width=&#34;2233&#34;
	height=&#34;431&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-22_hu_27ac99c260aa551a.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-22_hu_664837d80fefbed9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Next, select and upload the Zip file.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;518&#34;
		data-flex-basis=&#34;1243px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-23.png&#34;
	width=&#34;1847&#34;
	height=&#34;1147&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-23_hu_d08c18c70536136c.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-23_hu_fdc2496f6bf6ce48.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Click the first Wrench Icon to update the name of the Flow.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;161&#34;
		data-flex-basis=&#34;386px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-24.png&#34;
	width=&#34;1895&#34;
	height=&#34;1326&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-24_hu_e80da065e04a8a8.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-24_hu_82d41f487b9d4ccc.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Click the Wrench Icon for both connections and choose an existing connection or set up a new one.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;342px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-25.png&#34;
	width=&#34;1856&#34;
	height=&#34;1326&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-25_hu_a45ba4f7b1a63a3b.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-25_hu_8bbe9b7603cad842.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Finally, click Import.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;139&#34;
		data-flex-basis=&#34;335px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;After successfully importing the Flow, it will be disabled at first. Navigate to &lt;strong&gt;My flows&lt;/strong&gt; and click on the imported Flow to enable it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-26.png&#34;
	width=&#34;1439&#34;
	height=&#34;515&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-26_hu_408378babf9ac085.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-26_hu_c15b1bc333f303ff.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Click Trun on&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;279&#34;
		data-flex-basis=&#34;670px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Then, click &lt;strong&gt;Edit&lt;/strong&gt;. Now you need to update the trigger and select the correct Team/Site and List for the trigger. This will be the SharePoint site of the Team in which you created the list tab.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-15.png&#34;
	width=&#34;933&#34;
	height=&#34;330&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-15_hu_8d4da9d08e3a4ab6.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-15_hu_4694cb13c9cc3013.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Set the Flow trigger to your Site and List.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;282&#34;
		data-flex-basis=&#34;678px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In the third step &lt;strong&gt;Initialize CallQueueId&lt;/strong&gt; fill in the Id of your call queue. The easiest way to obtain the Id is to edit the queue in Teams Admin Center and copy the Id from the URL.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-16.png&#34;
	width=&#34;937&#34;
	height=&#34;298&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-16_hu_c585637524f351e3.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-16_hu_a76c81a1b6609569.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Set the call queue Id&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;314&#34;
		data-flex-basis=&#34;754px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;These are the only two things you need to adjust. Because the Flow uses the action &lt;strong&gt;Get my profile (V2)&lt;/strong&gt; you don&amp;rsquo;t need to set anything that&amp;rsquo;s user specific. That action will always get the details of the user that is running the Flow.&lt;/p&gt;
&lt;h4 id=&#34;share-the-flow-with-all-the-other-agents&#34;&gt;Share the Flow with all the other Agents
&lt;/h4&gt;&lt;p&gt;Now that you have the Flow imported to your account, share it with all agents of the call queue.&lt;/p&gt;
&lt;p&gt;Go back to &lt;strong&gt;My flows&lt;/strong&gt; and select the Flow again to share it with your team.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-27.png&#34;
	width=&#34;1440&#34;
	height=&#34;422&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-27_hu_586ea062b4215b68.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-27_hu_ca0fbe7ed24a004e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;From there, click Share.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;341&#34;
		data-flex-basis=&#34;818px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-28.png&#34;
	width=&#34;1716&#34;
	height=&#34;470&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-28_hu_f23f91783b719686.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-28_hu_d31bd19c823dc4eb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Search for another call queue agent and select them from the drop-down menu.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;365&#34;
		data-flex-basis=&#34;876px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-29.png&#34;
	width=&#34;1039&#34;
	height=&#34;734&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-29_hu_8ed9050a690eb506.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-29_hu_c31db2ea6ded8104.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Confirm by clicking Ok.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;141&#34;
		data-flex-basis=&#34;339px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now ask the user you shared the Flow with to sing in to &lt;a class=&#34;link&#34; href=&#34;https://make.powerautomate.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Power Automate&lt;/a&gt; and navigate to &lt;strong&gt;My flows&lt;/strong&gt; and switch to the &lt;strong&gt;Shared with me&lt;/strong&gt; tab.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-30.png&#34;
	width=&#34;1403&#34;
	height=&#34;955&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-30_hu_2a07896dfbb0fc3d.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-30_hu_8ed2f0e76eb181eb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Instruct them to click the three dots and select Save as.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;146&#34;
		data-flex-basis=&#34;352px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-31.png&#34;
	width=&#34;1030&#34;
	height=&#34;472&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-31_hu_5cd1ba5dd912abb9.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-31_hu_dbfcc3c28ecb29ba.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Instruct them to create the connections by clicking Continue.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;218&#34;
		data-flex-basis=&#34;523px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-32.png&#34;
	width=&#34;1038&#34;
	height=&#34;420&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-32_hu_bf04447320b9d52a.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-32_hu_24b7e18963320438.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;They can rename the Flow before saving.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;247&#34;
		data-flex-basis=&#34;593px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-33.png&#34;
	width=&#34;1057&#34;
	height=&#34;947&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-33_hu_e7168c50945fa66c.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-33_hu_5de16586c7e6c50b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Finally, they’ll need to go to My flows again and turn on the copied Flow using the menu behind the three dots.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;111&#34;
		data-flex-basis=&#34;267px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Repeat these steps for all the other call queue agents. Each agent needs to have this Flow in their own Power Automate environment since the Flow will need to run with their credentials to be able to change their opt in status.&lt;/p&gt;
&lt;h3 id=&#34;flow-to-keep-the-list-in-sync&#34;&gt;Flow to keep the List in Sync
&lt;/h3&gt;&lt;p&gt;Obviously the agents will still be able to change their opt in status on their own using their Teams clients. In that case, we want to keep the SharePoint list updated as well and reflect changes to opt in status made outside of the list. For this, I&amp;rsquo;ve created another Flow. I&amp;rsquo;ll call that one the &lt;strong&gt;Sync-Flow&lt;/strong&gt;. This Flow will update the list for all agents and it will need to be created only once. In my Lab, I&amp;rsquo;ve configured this Flow with a recurring trigger every 15 minutes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-17.png&#34;
	width=&#34;1428&#34;
	height=&#34;1835&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-17_hu_e8f80b80c0f62e88.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-17_hu_ba5466081c459b2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Flow to update the List if CQ Agents opt in/out via Teams clients.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;77&#34;
		data-flex-basis=&#34;186px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This Flow will send an HTTP Get request via the &lt;strong&gt;Send an HTTP request to SharePoint&lt;/strong&gt; to the call queue endpoint used to read and write the opt in states of agents. This is basically the same as what I&amp;rsquo;m using to update the opt in states but this time, I&amp;rsquo;m only reading from it. The JSON response will include a list of each agent&amp;rsquo;s Object Id and their current opt in state. Then it uses the &lt;strong&gt;Get user profile (V2)&lt;/strong&gt; action to find the email address of the current user by Object Id. This is needed so that the Flow can query the list item of each agent.&lt;/p&gt;
&lt;p&gt;Once the Flow knows both values, the actual opt in state and what&amp;rsquo;s currently stored in the list, it will compare the values. If they&amp;rsquo;re the same, nothing happens. If they&amp;rsquo;re not the same, the Flow will update the SharePoint list with the actual value.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-19.png&#34;
	width=&#34;2108&#34;
	height=&#34;1216&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-19_hu_f92b2030c82ceed3.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-19_hu_afcc35e23a8b9c40.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;The List tab after it’s been updated by Power Automate.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;173&#34;
		data-flex-basis=&#34;416px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If an opt in status was updated by Power Automate, it will also set the value in &lt;strong&gt;Updated by Power Automate&lt;/strong&gt; to &lt;code&gt;True&lt;/code&gt; (Checkmark). By doing it like this, we can avoid an infinite trigger loop on the User-Flows. Since they use &lt;strong&gt;When an item is created or modified&lt;/strong&gt; as their trigger, they would be triggered any time the List is updated. That will include updates made by the recurring Sync-Flow.&lt;/p&gt;
&lt;p&gt;Since we definitely don&amp;rsquo;t want that, I&amp;rsquo;ve added a trigger condition to the User-Flows. A trigger condition is an expression, which must evaluate to &lt;code&gt;True&lt;/code&gt; for the Flow to be triggered.&lt;/p&gt;
&lt;p&gt;This expression will check if the &lt;strong&gt;Updated by Power Automate&lt;/strong&gt; checkbox is not checked. So, whenever the list is updated by the Sync-Flow, the user Flows won&amp;rsquo;t be triggered.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;@equals(triggerOutputs()?[&amp;#39;body/UpdatedByPowerAutomate&amp;#39;], false)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-20.png&#34;
	width=&#34;917&#34;
	height=&#34;1395&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-20_hu_c507a8b7b58ddf83.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-20_hu_249ba26a2a550cdc.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;The trigger condition will prevent infinite trigger loops.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;65&#34;
		data-flex-basis=&#34;157px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s important to note that when you or somebody else wants to change the opt in status of an agent again from the list, the &lt;strong&gt;Updated by Power Automate&lt;/strong&gt; checkbox must be unchecked again. Otherwise the User-Flows won&amp;rsquo;t run and the opt in status won&amp;rsquo;t be changed.&lt;/p&gt;
&lt;h4 id=&#34;import-the-flow-package-1&#34;&gt;Import the Flow Package
&lt;/h4&gt;&lt;p&gt;You can download this Flow from &lt;a class=&#34;link&#34; href=&#34;#download-flow-packages&#34; &gt;here&lt;/a&gt;. Use the same process to import the Flow package as you already did with the User-Flow and don&amp;rsquo;t forget to turn it as well on once you&amp;rsquo;re done. In this Flow, you will need to do the following adjustments.&lt;/p&gt;
&lt;p&gt;Replace the value of the &lt;strong&gt;CallQueueId&lt;/strong&gt; variable with your call queue Id.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-35.png&#34;
	width=&#34;923&#34;
	height=&#34;410&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-35_hu_ee5cfbae98c25340.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-35_hu_222bb534c8265752.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Set the CallQueueId variable.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;225&#34;
		data-flex-basis=&#34;540px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Then expand all the action boxes and select your &lt;strong&gt;Site Address&lt;/strong&gt; and &lt;strong&gt;List Name&lt;/strong&gt; in the action &lt;strong&gt;Get items&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-36.png&#34;
	width=&#34;939&#34;
	height=&#34;446&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-36_hu_b583d297032db823.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-36_hu_421dab11de7df7cf.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Replace Site Address and List Name.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;210&#34;
		data-flex-basis=&#34;505px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Finally, do the same for the &lt;strong&gt;Update item&lt;/strong&gt; action inside the &lt;strong&gt;If yes&lt;/strong&gt; condition.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-37.png&#34;
	width=&#34;969&#34;
	height=&#34;717&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-37_hu_3b2bf93755b3c569.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-37_hu_d690148f27dd27ea.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Replace Site Address and List Name.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;135&#34;
		data-flex-basis=&#34;324px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it for the set up part. Let&amp;rsquo;s take a look at the user experience!&lt;/p&gt;
&lt;h2 id=&#34;user-experience&#34;&gt;User Experience
&lt;/h2&gt;&lt;p&gt;Here you can see how it works. Anyone that has access to the list, can simply edit the list and change the opt in status of another colleague.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/TeamsCQOptIn.gif&#34;
	width=&#34;1195&#34;
	height=&#34;672&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/TeamsCQOptIn_hu_f736fa3a24af3e80.gif 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/TeamsCQOptIn_hu_7e965ff2b75bee6.gif 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Note: The Flow was in test mode to speed up the demo. In real life, it will usually take a few minutes to change an opt in status.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Bonus tip: If you switch to the new designer in Power Automate you can change how often it checks for updated list items in the trigger configuration.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-34.png&#34;
	width=&#34;1488&#34;
	height=&#34;1090&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-34_hu_8401168aed3180ff.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/image-34_hu_85953db063fcd0d8.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;The default polling interval is 5 minutes.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;136&#34;
		data-flex-basis=&#34;327px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;additional-benefits&#34;&gt;Additional Benefits
&lt;/h2&gt;&lt;p&gt;As you may know, the &lt;strong&gt;Calls&lt;/strong&gt; tab in channels is not supported on the Teams mobile app. The call queue agents and their opt in status can only be viewed in the Teams desktop or web client. At this point I want to clarify again, that mobile clients can still receive calls from a call queue, even when the call queue is linked to a voice enabled channel. It&amp;rsquo;s only the view/tab that&amp;rsquo;s not supported on Teams mobile apps.&lt;/p&gt;
&lt;p&gt;But since this solution uses a SharePoint list, it will actually give you the ability to view and change the opt in status of other agents from a mobile device too. This can be done by either opening the list tab in Teams mobile or by accessing the list directly in the Lists mobile app.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/20240619_184713000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/20240619_184713000_iOS_hu_a073311d5d98549f.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/20240619_184713000_iOS_hu_a605fa63a0bc13d4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;List tab in Teams mobile.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/20240619_185305000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/20240619_185305000_iOS_hu_9b077990a18128c2.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/20240619_185305000_iOS_hu_976efe11209dcabc.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Editing a list item in Teams mobile.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/20240619_185536000_iOS.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/20240619_185536000_iOS_hu_4c78dee4407e037f.png 480w, https://heusser.pro/p/microsoft-teams-change-call-queue-opt-in-status-on-behalf-of-other-user-without-teams-premium-ztd1ry6tt6ml/20240619_185536000_iOS_hu_ca698d77c737eeeb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Toggle switches in Lists app.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The list app will even give you toggle switches which not only looks better but is also easier to edit compared to the experience within the Teams mobile app.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary
&lt;/h2&gt;&lt;p&gt;While Teams Premium provides a lot of benefits over the Standard license, the additional $10 per user per month can make quite the difference in your monthly license cost. I fully understand the price tag since Teams Premium also includes AI generated notes which use a lot of computing resources and thus cost Microsoft more money to run their services in the backend.&lt;/p&gt;
&lt;p&gt;However, if you&amp;rsquo;re only looking for a way to opt in/out other call queue agents on their behalf and don&amp;rsquo;t want to spend another $10 PUPM, I think this solution can be a suitable workaround. Especially for small companies which don&amp;rsquo;t have a lot of call queues with a lot of agents. Of course there is some work to be done by admins and the end users (agents) but it should be manageable for small teams. And let&amp;rsquo;s not forget the fact this will even allow you to change the opt in status for other agents on mobile platforms too!&lt;/p&gt;
&lt;h3 id=&#34;download-flow-packages&#34;&gt;Download Flow Packages
&lt;/h3&gt;&lt;p&gt;You can download both Flow packages for free from &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Scripts/PowerAutomate/Flows/UpdateCallQueueOptInStatus_20240614215253.zip&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Scripts/PowerAutomate/Flows/SyncOptInStatustoList_20240614215356.zip&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. If you like what I&amp;rsquo;ve presented in this blog post and if it will save you the money you would have otherwise spent on Teams Premium licenses, you can still choose to support me by &lt;a class=&#34;link&#34; href=&#34;https://buymeacoffee.com/martin.heusser&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;buying me a coffee&lt;/a&gt; or by sponsoring me on &lt;a class=&#34;link&#34; href=&#34;https://github.com/sponsors/mozziemozz?frequency=one-time&amp;amp;sponsor=mozziemozz&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Microsoft Graph: Get an Access Token from a PowerShell Session</title>
        <link>https://heusser.pro/p/microsoft-graph-get-an-access-token-from-an-established-powershell-session-zv37e1xmxr86/</link>
        <pubDate>Wed, 05 Jun 2024 19:24:44 +0000</pubDate>
        
        <guid>https://heusser.pro/p/microsoft-graph-get-an-access-token-from-an-established-powershell-session-zv37e1xmxr86/</guid>
        <description>&lt;p&gt;Authentication with the Microsoft Graph PowerShell SDK is pretty easy. All you have to do to establish a session is to run &lt;code&gt;Connect-MgGraph&lt;/code&gt;. After that, you can use all Cmdlets for which you&amp;rsquo;ve installed the necessary modules. It&amp;rsquo;s no secret that not all Cmdlets are as well documented as the REST API itself and in rare cases, the PowerShell Cmdlets might even have some limitations compared to their REST counterparts. In such cases, you can usually just use the universal &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/microsoft.graph.authentication/invoke-mggraphrequest?view=graph-powershell-1.0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;code&gt;Invoke-MgGraphRequest&lt;/code&gt;&lt;/a&gt; Cmdlet without providing your own access token. This Cmdlet will use the same authentication like any other &lt;strong&gt;&lt;code&gt;Mg*&lt;/code&gt;&lt;/strong&gt; Cmdlet.&lt;/p&gt;
&lt;p&gt;This is how Microsoft describes the &lt;code&gt;Invoke-MgGraphRequest&lt;/code&gt; Cmdlet on Microsoft Learn:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Invoke-MgGraphRequest issues REST API requests to the Graph API. It works for any Graph API if you know the REST URI, method, and optional body parameter. This command is especially useful for accessing APIs for which there isn&amp;rsquo;t an equivalent cmdlet yet.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Note that there is also an alias called &lt;code&gt;Invoke-GraphRequest&lt;/code&gt; for this Cmdlet. A perfect example of where you would need &lt;code&gt;Invoke-MgGraphRequest&lt;/code&gt; is uploading a small file to SharePoint. I recently published a script example making use of this method &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/powershell-script-example-upload-small-files-via-microsoft-graph-z45tbunyoa85&#34; &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;what-is-mgcontext&#34;&gt;What is MgContext?
&lt;/h2&gt;&lt;p&gt;By running &lt;code&gt;Get-MgContext&lt;/code&gt; you can get some information about the current session. Unfortunately, this doesn&amp;rsquo;t reveal any kind of tokens used for requests to the Graph API. Then again, this is most likely by design, because tokens should always be handled with care.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-graph-get-an-access-token-from-an-established-powershell-session-zv37e1xmxr86/image.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-graph-get-an-access-token-from-an-established-powershell-session-zv37e1xmxr86/image_hu_47ba1663556a2ad5.png 480w, https://heusser.pro/p/microsoft-graph-get-an-access-token-from-an-established-powershell-session-zv37e1xmxr86/image_hu_fa5f3458713001be.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Output of Get-MgContext&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-if-you-need-a-token-anyway&#34;&gt;What if you need a token anyway?
&lt;/h2&gt;&lt;p&gt;One option is to provide a client Id and a client secret and make a request to &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://login.microsoftonline.com/%7bYour&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://login.microsoftonline.com/{Your&lt;/a&gt; Tenant Name}/oauth2/v2.0/token&lt;/strong&gt;. If I want to do that, I always come back to this blog post on &lt;a class=&#34;link&#34; href=&#34;https://adamtheautomator.com/powershell-graph-api/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;adamtheautomator.com&lt;/a&gt;. But when I do that, I also want to call the REST API directly for all requests that the script I&amp;rsquo;m working on is doing. In my case, I &lt;strong&gt;want&lt;/strong&gt; to use the SDK and only &lt;strong&gt;need&lt;/strong&gt; to call the API directly for one specific request.&lt;/p&gt;
&lt;p&gt;I recently was working on something where neither the &lt;code&gt;Get-Mg*&lt;/code&gt; nor the &lt;code&gt;Invoke-MgGraphRequest&lt;/code&gt; were working. I wanted to fetch a profile picture of an Entra ID user but wanted to keep the image in memory and not save it to disk. Both the Cmdlets, &lt;code&gt;Get-MgUserPhotoContent&lt;/code&gt; and &lt;code&gt;Invoke-MgGraphRequest&lt;/code&gt; expected a value for an output file though. I know I could have just used a temporary file but if I had given up this easily, I wouldn&amp;rsquo;t have discovered how to get an access token from a Microsoft Graph PowerShell session.&lt;/p&gt;
&lt;p&gt;When I was testing the &lt;code&gt;Invoke-MgGraphRequest&lt;/code&gt; Cmdlet, I noticed that there were different accepted values for the parameter &lt;code&gt;-OutputType&lt;/code&gt;. One of the accepted values is &lt;strong&gt;HttpResponseMessage&lt;/strong&gt; and if you select this, Graph will return the access token in the HTTP response.&lt;/p&gt;
&lt;p&gt;This is the Graph URI/endpoint that I was using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$mgRequest&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Invoke-MgGraphRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://graph.microsoft.com/v1.0/users/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$userId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/photo/&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;value&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;image/jpeg&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-OutputType&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HttpResponseMessage&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-graph-get-an-access-token-from-an-established-powershell-session-zv37e1xmxr86/image-1.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-graph-get-an-access-token-from-an-established-powershell-session-zv37e1xmxr86/image-1_hu_de24c5ca676d4f59.png 480w, https://heusser.pro/p/microsoft-graph-get-an-access-token-from-an-established-powershell-session-zv37e1xmxr86/image-1_hu_bc7d332996866ea2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Graph access token retrieved using Invoke-MgGraphRequest&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;To access the token directly, you can use: &lt;code&gt;$mgRequest.RequestMessage.Headers.Authorization.Parameter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-graph-get-an-access-token-from-an-established-powershell-session-zv37e1xmxr86/image-2.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-graph-get-an-access-token-from-an-established-powershell-session-zv37e1xmxr86/image-2_hu_65217b8859c27daf.png 480w, https://heusser.pro/p/microsoft-graph-get-an-access-token-from-an-established-powershell-session-zv37e1xmxr86/image-2_hu_7ed5f848593d0277.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;The access token is now stored in a variable&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you want to build your own Authorization header to call the API directly without first requesting a dedicated token from &lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://login.microsoftonline.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://login.microsoftonline.com&lt;/a&gt;&lt;/strong&gt; you can use this code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$authHeader&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Authorization&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$mgRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;RequestMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Authorization&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Scheme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$mgRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;RequestMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Authorization&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Parameter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$profilePhoto&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-WebRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://graph.microsoft.com/v1.0/users/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$userId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/photo/&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;value&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$authHeader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Content&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This allowed me to retrieve the profile photo as a byte array without saving it to disk first.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary
&lt;/h2&gt;&lt;p&gt;This is a very niche use case but I&amp;rsquo;m glad that I discovered how to get an access token from an already authenticated Microsoft Graph PowerShell session. I&amp;rsquo;m sure that this will come in handy again some day and I hope that it will come in handy for you some day as well. I also published the entire example script including helpful comments in one of my GitHub &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Scripts/MicrosoftGraph/Authentication/Get-AccessTokenFromEstablishedMgSession.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;repositories&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Microsoft Teams Auto Attendants: What You Didn&#39;t Know Part 2</title>
        <link>https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/</link>
        <pubDate>Sun, 26 May 2024 10:06:44 +0000</pubDate>
        
        <guid>https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/</guid>
        <description>&lt;h2 id=&#34;intro&#34;&gt;Intro
&lt;/h2&gt;&lt;p&gt;I always love it when members of the community reach out to me via Twitter (Sorry, I&amp;rsquo;m still not calling it X&amp;hellip;), LinkedIn, or any other way. Last week, somebody named Ben reached out to me regarding an issue one of his Teams Phone clients was facing. He turned to me because apparently he couldn&amp;rsquo;t find an answer anywhere online and nor was Microsoft Support able to help him. To me, that&amp;rsquo;s what being an MVP is all about. Being able to help others by sharing knowledge and by providing technical expertise.&lt;/p&gt;
&lt;h2 id=&#34;the-problem&#34;&gt;The Problem
&lt;/h2&gt;&lt;p&gt;The problem was that Teams auto attendants are automatically disconnecting a call after some time, if the caller makes no selection in a voice menu. I tested this myself and discovered that the auto attendant will disconnect the call after the IVR greeting has been played back three times. That means that there is no hardcoded timeout value and the time to disconnect depends on how long the greeting is. Before the call is disconnected, callers will hear the greeting: &lt;code&gt;Sorry, we cannot connect your call at the moment. Please try again later.&lt;/code&gt; Even though I personally don&amp;rsquo;t view this as a real problem but rather a slight inconvenience, it was really important to Ben/his client that the caller is sent to voicemail if no selection is made by the caller in the voice menu.&lt;/p&gt;
&lt;h2 id=&#34;the-solution&#34;&gt;The Solution
&lt;/h2&gt;&lt;p&gt;After understanding the issue, I just thought that adding an operator to the auto attendant and assigning a dial key to the operator in the voice menu will likely fix the issue. Luckily, I was correct and that indeed proved itself to be the solution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you don&amp;rsquo;t want to hang up on callers who just &amp;ldquo;hang out&amp;rdquo; in your auto attendant menus, make sure that you add an operator to your attendant.&lt;/strong&gt; As a reminder, an operater can be one of the following types:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/44b04089-e32a-40ed-b42f-08001084f0fb.png&#34;
	width=&#34;973&#34;
	height=&#34;532&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/44b04089-e32a-40ed-b42f-08001084f0fb_hu_4e3797ce067a6134.png 480w, https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/44b04089-e32a-40ed-b42f-08001084f0fb_hu_520473b108a6698.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Supported operator types are: Teams user (Person in your organization), voice apps (auto attendants, call queues) or external phone numbers (in this case the auto attendant’s resource account needs to be set up for outbound calling as well).&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;438px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Read more about the requirements for auto attendant transfers to external phone numbers &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/microsoftteams/create-a-phone-system-auto-attendant?tabs=general-info#external-phone-number-transfers---technical-details&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to send callers who idle around in a voice menu to a voicemail, I still recommend to set up a call queue with overflow threshold 0 instead of an auto attendant. I explained the reason for that &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/#one-lastcaveat&#34; &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;example-diagrams&#34;&gt;Example Diagrams
&lt;/h3&gt;&lt;p&gt;Here you can see that this auto attendant has a default call flow greeting and an a voice menu greeting. Only the voice menu greeting will be repeated if no selection is made. The default call flow greeting will only be played back once.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/NoOperator.png&#34;
	width=&#34;7840&#34;
	height=&#34;11980&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/NoOperator_hu_d3c3f5df19cb9043.png 480w, https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/NoOperator_hu_9d754fe53a2a42e0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Since there is no operator configured on this auto attendant, the call will disconnect if the caller hasn’t made a selection before the voice menu greeting has been played back three times.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;65&#34;
		data-flex-basis=&#34;157px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/WithOperator.png&#34;
	width=&#34;7840&#34;
	height=&#34;12490&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/WithOperator_hu_d7c195b20561e655.png 480w, https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/WithOperator_hu_5a3e27b787b2bfe9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;In this case, I’ve added an operator to the auto attendant and also added it as a selection in the voice menu which means the call will be transferred to the operator, if no selection is made by the caller before the message has been played back three times.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;62&#34;
		data-flex-basis=&#34;150px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t want callers to dial the operator straight away, you can just not include any hint in the greeting, that it could be dialed by pressing &lt;code&gt;0&lt;/code&gt; (or whatever dial key you&amp;rsquo;ve assigned to the operator). You can see that my greeting &lt;code&gt;Please press 1 for English or 2 for German&lt;/code&gt; doesn&amp;rsquo;t mention anything about an operator.&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t expand the nested queues in these diagrams so the operator only shows as &lt;strong&gt;Call Queue VIP Support CQ&lt;/strong&gt; but that actually forwards to a shared voicemail immediately.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/CallQueueVoicemail.png&#34;
	width=&#34;480&#34;
	height=&#34;732&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/CallQueueVoicemail_hu_126418771572747e.png 480w, https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/CallQueueVoicemail_hu_784f78e8ae326b06.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;This is the call queue that forwards immediately to shared voicemail.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;65&#34;
		data-flex-basis=&#34;157px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;configuration-in-teams-admin-center&#34;&gt;Configuration in Teams Admin Center
&lt;/h3&gt;&lt;p&gt;This is how your auto attendant must be configured.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/image.png&#34;
	width=&#34;1313&#34;
	height=&#34;813&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/image_hu_781af7fe1ea4a9ee.png 480w, https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/image_hu_6fdd76f563d5ff7e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;First, add an operator to the auto attendant. In this case, I’m using a voice app (call queue).&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;161&#34;
		data-flex-basis=&#34;387px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/image-1.png&#34;
	width=&#34;1522&#34;
	height=&#34;942&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/image-1_hu_5647ae8d354263bd.png 480w, https://heusser.pro/p/microsoft-teams-auto-attendants-what-you-didnt-know-part-2-iz5ftexar5sq/image-1_hu_3008eeb7c50f4499.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;In the default call flow, make sure to assign a dial key to the operator and not to the voice app itself.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;161&#34;
		data-flex-basis=&#34;387px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary
&lt;/h2&gt;&lt;p&gt;I think this is another great example that Teams Phone is slowly maturing and that in fact, most features and scenarios one would expect can be realized. It&amp;rsquo;s just that sometimes it can be a little hard to discover or figure our how something can be achieved. That&amp;rsquo;s what we have the Teams community for. I hope that this short tutorial helps others as well.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Microsoft Forms Data Recovery: Going Down The Rabbit Hole</title>
        <link>https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/</link>
        <pubDate>Sat, 18 May 2024 09:07:35 +0000</pubDate>
        
        <guid>https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/</guid>
        <description>&lt;img src="https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/cover.png" alt="Featured image of post Microsoft Forms Data Recovery: Going Down The Rabbit Hole" /&gt;&lt;h2 id=&#34;intro&#34;&gt;Intro
&lt;/h2&gt;&lt;p&gt;Let me start by saying, that hopefully you&amp;rsquo;ll never need to go down this rabbit hole. But if you&amp;rsquo;re like me, you may be interested in the content anyway.&lt;/p&gt;
&lt;p&gt;A couple of weeks ago, I worked on a support request from a user who needed to recover some accidentally deleted responses of a Microsoft Form. The first place I was looking for answers was the Forms recycle bin. This however will only include your deleted forms but unfortunately it doesn&amp;rsquo;t contain deleted responses of active forms.&lt;/p&gt;
&lt;p&gt; &lt;img src=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/6131e543-e1b1-4f9f-871e-70d0aaddd728.png&#34;
	width=&#34;780&#34;
	height=&#34;811&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/6131e543-e1b1-4f9f-871e-70d0aaddd728_hu_ffca4a01f32614d0.png 480w, https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/6131e543-e1b1-4f9f-871e-70d0aaddd728_hu_655e0a51bc1ff1f4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;The good thing is that the restore process will also bring back the responses.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;96&#34;
		data-flex-basis=&#34;230px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;how-would-you-even-know-if-responses-of-a-form-got-deleted&#34;&gt;How would you even know if responses of a form got deleted?
&lt;/h3&gt;&lt;p&gt;I have a test form with 3 responses. On first sight, there&amp;rsquo;s no indication that some of the responses were actually deleted.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/02421d0f-c2c9-42b9-b187-f0a1e50f7819.png&#34;
	width=&#34;1294&#34;
	height=&#34;499&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/02421d0f-c2c9-42b9-b187-f0a1e50f7819_hu_71b8e0f6f5e851e9.png 480w, https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/02421d0f-c2c9-42b9-b187-f0a1e50f7819_hu_1fab24e292c8ca1c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Forms will only display responses which haven’t been deleted.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;259&#34;
		data-flex-basis=&#34;622px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;But once I click on &lt;strong&gt;View results&lt;/strong&gt; I can see that the number of the first respondent that is shown is actually &lt;strong&gt;2&lt;/strong&gt; and not &lt;strong&gt;1&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/d15a45af-ed02-4433-ada2-7161d03c788b.png&#34;
	width=&#34;1197&#34;
	height=&#34;321&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/d15a45af-ed02-4433-ada2-7161d03c788b_hu_ace5700abbfcc1ee.png 480w, https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/d15a45af-ed02-4433-ada2-7161d03c788b_hu_6b4ccdffa7916594.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;This is how you know if a form has deleted responses.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;372&#34;
		data-flex-basis=&#34;894px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The response IDs will also be visible if you download a copy of the responses as an Excel file.&lt;/p&gt;
&lt;h4 id=&#34;how-can-responses-be-deleted&#34;&gt;How can responses be deleted?
&lt;/h4&gt;&lt;p&gt;In most cases, responses are deleted unintentionally by accident. Responses can be deleted from the &lt;strong&gt;View results&lt;/strong&gt; menu in &lt;strong&gt;Responses&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/image.png&#34;
	width=&#34;1301&#34;
	height=&#34;431&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/image_hu_528bf2ae5450f31d.png 480w, https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/image_hu_47396ba6676caee1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Click the three dots ()…) and then Delete response to delete a specific response.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;301&#34;
		data-flex-basis=&#34;724px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;There will be a warning that the response will be permanently deleted.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/image-1.png&#34;
	width=&#34;1113&#34;
	height=&#34;217&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/image-1_hu_6beb944b71fbdd8f.png 480w, https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/image-1_hu_40c714ca383c0426.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Spoiler alert: That’s not 100% true…&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;512&#34;
		data-flex-basis=&#34;1230px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;sync-responses-to-excel&#34;&gt;Sync Responses to Excel
&lt;/h2&gt;&lt;p&gt;At the time I had to recover the responses for the user, the option to sync responses to Excel wasn&amp;rsquo;t available yet, as this feature was only introduced recently in the fashion of a public preview. Even if it was already available, it would have only saved me all of the trouble and investigation work, if the user had clicked it before the responses were deleted.&lt;/p&gt;
&lt;p&gt;From your form&amp;rsquo;s responses, you can either download a copy of a static Excel file or you can &lt;strong&gt;Open results in Excel&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/a2fa3d9a-6e0c-4355-a1ee-68bf78ff01fd.png&#34;
	width=&#34;1306&#34;
	height=&#34;418&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/a2fa3d9a-6e0c-4355-a1ee-68bf78ff01fd_hu_9e3691265939a97d.png 480w, https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/a2fa3d9a-6e0c-4355-a1ee-68bf78ff01fd_hu_14b64b60b0a1f5fa.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Previously, Forms only allowed us to download a static copy of the current data.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;312&#34;
		data-flex-basis=&#34;749px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Downloading a copy will only include the current responses but obviously not add any new responses. To view new responses in Excel, you had to download a new copy after more respondents filled out your form.&lt;/p&gt;
&lt;p&gt;A common workaround was to create a Power Automate flow to automatically save all responses to either an Excel file or a SharePoint list. With the most recent update to Forms, that&amp;rsquo;s not necessary anymore. At least not for basic scenarios.&lt;/p&gt;
&lt;p&gt;Opening the results in Excel will automatically create an Excel file in your OneDrive which is then also automatically updated every time somebody submits a new response to your form.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/6f819493-d240-406c-8ff8-cde512e4e4fe.png&#34;
	width=&#34;1048&#34;
	height=&#34;534&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/6f819493-d240-406c-8ff8-cde512e4e4fe_hu_97aa9319bc9fd307.png 480w, https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/6f819493-d240-406c-8ff8-cde512e4e4fe_hu_f19419442b3cffaa.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Each user will only see this message once.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;196&#34;
		data-flex-basis=&#34;471px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/f9384969-369e-426f-94c0-6911733b95f8.png&#34;
	width=&#34;765&#34;
	height=&#34;490&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/f9384969-369e-426f-94c0-6911733b95f8_hu_fd4bf0f88b6b7822.png 480w, https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/f9384969-369e-426f-94c0-6911733b95f8_hu_10f5bef6c784d2b8.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;A new tab will open with the newly created Excel sheet.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;156&#34;
		data-flex-basis=&#34;374px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/705e56cb-a2ba-41cc-a7ab-81629ec2fb4d.png&#34;
	width=&#34;1310&#34;
	height=&#34;259&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/705e56cb-a2ba-41cc-a7ab-81629ec2fb4d_hu_a95d51340473ace.png 480w, https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/705e56cb-a2ba-41cc-a7ab-81629ec2fb4d_hu_8ea1f29fa5a4f5cd.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;The Excel file will include all responses and also show a hint that this workbook is synced with Forms.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;505&#34;
		data-flex-basis=&#34;1213px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/d79564be-c589-465c-b5a5-bb58e0226328.png&#34;
	width=&#34;1292&#34;
	height=&#34;367&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/d79564be-c589-465c-b5a5-bb58e0226328_hu_be37936c6fcc1cea.png 480w, https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/d79564be-c589-465c-b5a5-bb58e0226328_hu_e348a4c703d4a0e5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;After setting up the sync, the form will show the linked Excel file instead of the button Open results in Excel.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;352&#34;
		data-flex-basis=&#34;844px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Based on my testing, only newly added responses will be synced to the Excel file. If you delete a response from Forms, it will stay in Excel, which is not necessarily a bad thing. But even if deleted responses would be removed from the Excel as well, we could still get the data back through OneDrive&amp;rsquo;s version history.&lt;/p&gt;
&lt;p&gt;Therefore, I advise every form creator to start syncing the responses to Excel Online immediately after the form has been created. This will ensure that no response data can get lost.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s look at your options in case you or a user didn&amp;rsquo;t sync or download a static copy of the responses before they were deleted.&lt;/p&gt;
&lt;h2 id=&#34;where-are-form-responses-stored&#34;&gt;Where are Form responses stored?
&lt;/h2&gt;&lt;p&gt;You might think that they&amp;rsquo;re stored in OneDrive or SharePoint but that&amp;rsquo;s not the case. Form responses are stored in the Exchange Online Mailbox of the user who created the form. I was only able to find all of this information because of &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/feed/update/urn:li:activity:7173720646349123584?utm_source=share&amp;amp;utm_medium=member_desktop&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; LinkedIn post by Andrew Chomik. The post includes another link which leads &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/purview/ediscovery-what-is-stored-in-a-mailbox&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is what it says in the Microsoft Learn article:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Forms and responses to a form are stored in files that are attached to email messages and stored in a hidden folder in the mailbox of the user who created the form.
Forms created before April 2020 are stored as a PDF file. Forms created after 2020 are stored as a JSON file. Responses to a form are stored in a CSV file.
When you export content from Forms in a PST file, this data is located in the &lt;strong&gt;ApplicationDataRoot&lt;/strong&gt; folder in a subfolder named with the following globally unique identified (GUID): &lt;strong&gt;c9a559d2-7aab-4f13-a6ed-e7e9c52aec87&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-do-we-access-the-forms-data-stored-in-exchange-online&#34;&gt;How do we access the forms data stored in Exchange Online?
&lt;/h2&gt;&lt;p&gt;At first I tried to get the data by using Exchange Online PowerShell but that turned into a dead end rather quickly. Since this all happened a couple of weeks ago, I don&amp;rsquo;t remember exactly how I discovered the tool &lt;a class=&#34;link&#34; href=&#34;https://github.com/microsoft/mfcmapi&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MFCMAPI&lt;/a&gt; but somehow I found this and it helped me solve my issue.&lt;/p&gt;
&lt;p&gt;This tool only works if Outlook is installed on the same system you&amp;rsquo;re running it from. Furthermore, the user who created the form for which you want to restore responses needs to be signed into Outlook (Classic). Outlook doesn&amp;rsquo;t need to be running for MFCMAPI to work though.&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t want to perform this task on an end user&amp;rsquo;s machine, you can grant yourself temporary full access to the user&amp;rsquo;s mailbox so that you can use MFCMAPI on your own machine.&lt;/p&gt;
&lt;h3 id=&#34;use-mfcmapi-to-export-form-responses&#34;&gt;Use MFCMAPI to export form responses
&lt;/h3&gt;&lt;p&gt;To be able to see the forms data in a mailbox, you need to enable two options in MFCMAPI first. Click on &lt;strong&gt;Tools&lt;/strong&gt; and then &lt;strong&gt;Options&lt;/strong&gt; to open the settings.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/image-2.png&#34;
	width=&#34;1048&#34;
	height=&#34;828&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/image-2_hu_6798d4d18537b6fd.png 480w, https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/image-2_hu_6ec6b39c574463da.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Open MFCMAPI settings&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;126&#34;
		data-flex-basis=&#34;303px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Scroll down and make sure that &lt;strong&gt;Use the MDB_ONLINE flag when calling OpenMsgStore&lt;/strong&gt; and &lt;strong&gt;Use the MAPI_NO_CACHE flag when calling OpenEntry&lt;/strong&gt; are both enabled.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/c9d5cc19-b03a-40b8-b12e-bd513b424228.png&#34;
	width=&#34;718&#34;
	height=&#34;547&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/c9d5cc19-b03a-40b8-b12e-bd513b424228_hu_f7a757a267e7f1a4.png 480w, https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/c9d5cc19-b03a-40b8-b12e-bd513b424228_hu_5240a54afdc0a5ce.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Without these options enabled you won’t see forms data.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;131&#34;
		data-flex-basis=&#34;315px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;You can find more info on how to use MFCMAPI &lt;a class=&#34;link&#34; href=&#34;https://office365concepts.com/how-to-use-mfcmapi/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next, click on &lt;strong&gt;Session&lt;/strong&gt; and then &lt;strong&gt;Logon&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/ac9717fa-b74e-4eed-962d-15444d1c7f98.png&#34;
	width=&#34;1048&#34;
	height=&#34;828&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/ac9717fa-b74e-4eed-962d-15444d1c7f98_hu_b6eac50eed218bd9.png 480w, https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/ac9717fa-b74e-4eed-962d-15444d1c7f98_hu_b7be868f86f99f8d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;MFCMAPI Session Logon&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;126&#34;
		data-flex-basis=&#34;303px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Select the correct Outlook profile.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/da558d8c-f98e-4848-b797-58d231378757.png&#34;
	width=&#34;429&#34;
	height=&#34;163&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/da558d8c-f98e-4848-b797-58d231378757_hu_82ec9f1066abb562.png 480w, https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/da558d8c-f98e-4848-b797-58d231378757_hu_cca9b343d6421eeb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Select the correct Outlook profile&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;263&#34;
		data-flex-basis=&#34;631px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In my case, I&amp;rsquo;m signed into Outlook using the account called &lt;strong&gt;Olivia&lt;/strong&gt; but the Forms data is actually stored in &lt;strong&gt;Emma Dupont&amp;rsquo;s&lt;/strong&gt;* mailbox. Olivia has full access to Emma&amp;rsquo;s Mailbox and can thus use MFCMAPI on her machine.&lt;/p&gt;
&lt;p&gt;Double click the mailbox to open it. This will open a new window.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/6f156165-0434-4e0d-a017-be82ebff2865.png&#34;
	width=&#34;1048&#34;
	height=&#34;828&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/6f156165-0434-4e0d-a017-be82ebff2865_hu_460d4ba3906466b9.png 480w, https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/6f156165-0434-4e0d-a017-be82ebff2865_hu_f62d772b89a90d3e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Open mailbox in MFCMAPI&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;126&#34;
		data-flex-basis=&#34;303px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Expand the &lt;strong&gt;Root Container&lt;/strong&gt; and then expand &lt;strong&gt;ApplicationDataRoot&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/44e07eba-187f-4217-9c99-ec3ab9fadcc3.png&#34;
	width=&#34;1048&#34;
	height=&#34;828&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/44e07eba-187f-4217-9c99-ec3ab9fadcc3_hu_e8def961dd8bae48.png 480w, https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/44e07eba-187f-4217-9c99-ec3ab9fadcc3_hu_8ce5b361cca9d3aa.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Find the ApplicationDataRoot folder&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;126&#34;
		data-flex-basis=&#34;303px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Look for the folder &lt;strong&gt;c9a559d2-7aab-4f13-a6ed-e7e9c52aec87&lt;/strong&gt; and expand it as well. In there, you will see the IDs of the user&amp;rsquo;s Forms. Identify the Form Id by comparing it to the one shown in the URL on &lt;strong&gt;forms.office.com&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/78f1a696-68a3-4018-9e92-371667941783.png&#34;
	width=&#34;1866&#34;
	height=&#34;821&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/78f1a696-68a3-4018-9e92-371667941783_hu_d263961979a052c9.png 480w, https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/78f1a696-68a3-4018-9e92-371667941783_hu_73e2ef71dc1d2c24.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Find the correct form Id&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;227&#34;
		data-flex-basis=&#34;545px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;ve identified the correct form, double click the Id to open it in a new window.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/8b7a81f5-af28-4a27-bfff-cd91debfd604.png&#34;
	width=&#34;2023&#34;
	height=&#34;891&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/8b7a81f5-af28-4a27-bfff-cd91debfd604_hu_c18093c3bbacc45a.png 480w, https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/8b7a81f5-af28-4a27-bfff-cd91debfd604_hu_bffb879958c62e2b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;This will display all data linked to the selected form.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;227&#34;
		data-flex-basis=&#34;544px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Remember that in the beginning of this blog post I mentioned, that the first response which is available in Forms had the Id 2? The other two responses which are available in Forms are 3 and 5. This means that 1 and 4 are missing from Forms because they were deleted.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see if we can find them in MFCMAPI&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;export-deleted-form-responses&#34;&gt;Export deleted form responses
&lt;/h3&gt;&lt;p&gt;In the bottom half of MFCMAPI, sort the &lt;strong&gt;Name&lt;/strong&gt; column ascending and look for the name &lt;strong&gt;0x3662001F&lt;/strong&gt; and select it. Then click on any of the items in the top half of the window. Now you can use the arrow keys to cycle through all items. For all items which store a form response, the value in 0x3662001F will hold a number, which corresponds to the response Id. In this case, I&amp;rsquo;ve found the response &lt;strong&gt;4&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/5019dd67-b8a2-4770-9561-5ba6b284dd16.png&#34;
	width=&#34;2023&#34;
	height=&#34;891&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/5019dd67-b8a2-4770-9561-5ba6b284dd16_hu_d6c56927c3d35c39.png 480w, https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/5019dd67-b8a2-4770-9561-5ba6b284dd16_hu_511bcf8aba7582d8.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Identify the deleted form response&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;227&#34;
		data-flex-basis=&#34;544px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;To export the response data, select the entry in the upper half of the window and right-click to select &lt;strong&gt;Attachments&lt;/strong&gt;, &lt;strong&gt;Save all attachments&amp;hellip;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/2efe93ab-b990-4e1b-89a9-fdc83d5f7284.png&#34;
	width=&#34;2023&#34;
	height=&#34;891&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/2efe93ab-b990-4e1b-89a9-fdc83d5f7284_hu_1dfc1524f0599c1e.png 480w, https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/2efe93ab-b990-4e1b-89a9-fdc83d5f7284_hu_b9c2c7577bdb6501.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Save the attachment&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;227&#34;
		data-flex-basis=&#34;544px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/e374301a-3a5d-484e-bf0d-6ece8d0b30c9.png&#34;
	width=&#34;1419&#34;
	height=&#34;864&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/e374301a-3a5d-484e-bf0d-6ece8d0b30c9_hu_db7bf5b13cfd9472.png 480w, https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/e374301a-3a5d-484e-bf0d-6ece8d0b30c9_hu_80eb839a52ba8138.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Save the CSV file to your PC in a folder of your choice.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;164&#34;
		data-flex-basis=&#34;394px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now you can open and view the response in Excel.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/31b52ebd-43d7-4f10-9755-2dc40a8872ba.png&#34;
	width=&#34;1606&#34;
	height=&#34;98&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/31b52ebd-43d7-4f10-9755-2dc40a8872ba_hu_f2b9ec5dbacbf9de.png 480w, https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/31b52ebd-43d7-4f10-9755-2dc40a8872ba_hu_22f5d6104182f75d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Forms response recovered through MFCMAPI in Excel&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1638&#34;
		data-flex-basis=&#34;3933px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Repeat these steps for all the deleted response Ids that you need to recover.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary
&lt;/h2&gt;&lt;p&gt;It&amp;rsquo;s noteworthy that you can also create a support request at Microsoft if you really need to recover deleted responses of Forms. The experience I had with that approach wasn&amp;rsquo;t the greatest. It took me weeks of emailing back and forth with the support engineer until they were finally able to restore the data. I also had to provide a UTC timestamp for the point in time as well as a written and signed consent letter to confirm that Microsoft is allowed to perform the restore. The fact that the restore was performed by a backend engineer and the support engineer only acted as a middleman didn&amp;rsquo;t help either.&lt;/p&gt;
&lt;p&gt;If you go down that route, it also means that all responses that were submitted after the restore point will be lost. If you want to keep all the responses, you&amp;rsquo;&amp;rsquo;ll have to wait for Microsoft to perform the restore, download a copy of the restored data and then ask them to restore the form a second time to the most recent version before the initial restore was performed.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not a 100% certain anymore but I believe that they can only perform a restore if the data was deleted less than 30 days ago.&lt;/p&gt;
&lt;p&gt;The response I recovered through MFCMAPI in this blog post was submitted/received/deleted on March 25th, 2024. So, even though the response was deleted almost 2 months ago, it&amp;rsquo;s still available in mailbox. I also spot-checked some mailboxes of other users and they all seemed to contain all the data of all forms ever created by these users. Because of this, I&amp;rsquo;m fairly confident that all Forms related data is stored in a user&amp;rsquo;s mailbox forever.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/image-4.png&#34;
	width=&#34;2016&#34;
	height=&#34;164&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/image-4_hu_c8040b8ff81617b3.png 480w, https://heusser.pro/p/microsoft-forms-data-recovery-going-down-the-rabbit-hole-dgohztjppz49/image-4_hu_170a9b29b33c36f7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Timestamp of the deleted/recovered response&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1229&#34;
		data-flex-basis=&#34;2950px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Because the process to get Microsoft to restore the Forms data took so long, I started my own investigation in parallel and actually managed to restore the data myself before Microsoft was able to complete the restore. That being said, if you need to restore a lot of deleted responses it will be a lot of additional work to export all the responses one by one from MFCMAPI and then merge all the recovered CSV files with the rest of your responses again. If Microsoft performs the restore, you can simply download a copy of the restored data from Forms again.&lt;/p&gt;
&lt;p&gt;In case of data loss in Forms, taking a look through MFCMAPI is a great way of quickly recovering the data yourself. Especially if you only need to restore a handful of responses. I only recommend to contact Microsoft support in a last resort type of scenario.&lt;/p&gt;
&lt;p&gt;To avoid a situation like this, I recommend to make users aware of the new &amp;ldquo;Sync results to Excel&amp;rdquo; feature and train them to always start syncing any new form right after it has been created. After all, this feature is a huge improvement to Forms as it&amp;rsquo;s not necessary to create your own Power Automate flow to achieve a similar result anymore.&lt;/p&gt;
&lt;p&gt;If this blog post has made your day because you were able to recover some precious Forms data, please consider supporting my work by making a donation on my &lt;a class=&#34;link&#34; href=&#34;https://github.com/sponsors/mozziemozz?frequency=one-time&amp;amp;sponsor=mozziemozz&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub Sponsors Profile&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Teams Call Queues now Support Greetings in Exception Handlings</title>
        <link>https://heusser.pro/p/teams-call-queues-now-support-greetings-in-exception-handlings-1ye1avs43jps/</link>
        <pubDate>Wed, 01 May 2024 15:31:57 +0000</pubDate>
        
        <guid>https://heusser.pro/p/teams-call-queues-now-support-greetings-in-exception-handlings-1ye1avs43jps/</guid>
        <description>&lt;img src="https://heusser.pro/p/teams-call-queues-now-support-greetings-in-exception-handlings-1ye1avs43jps/cover.png" alt="Featured image of post Teams Call Queues now Support Greetings in Exception Handlings" /&gt;&lt;h2 id=&#34;how-it-was-before&#34;&gt;How It Was Before
&lt;/h2&gt;&lt;p&gt;I noticed a whole lot of new properties returned by &lt;code&gt;Get-CsCallQueue&lt;/code&gt; quite a while ago but somehow I completely missed that Microsoft has now added this feature in Teams Admin Center. Before this was rolled out, the only way to play a message before disconnecting when a call timed out, when there were too many concurrent calls or when no agents were available in a call queue, you had to forward the call to an additional auto attendant which only played the message and then disconnected the call.&lt;/p&gt;
&lt;p&gt;A call flow which had no message looked like this. The call disconnected without any message.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-call-queues-now-support-greetings-in-exception-handlings-1ye1avs43jps/PS_Test_EV_Enabled_CQ_CallFlow.png&#34;
	width=&#34;2110&#34;
	height=&#34;3840&#34;
	srcset=&#34;https://heusser.pro/p/teams-call-queues-now-support-greetings-in-exception-handlings-1ye1avs43jps/PS_Test_EV_Enabled_CQ_CallFlow_hu_9ce3ad824e151aa2.png 480w, https://heusser.pro/p/teams-call-queues-now-support-greetings-in-exception-handlings-1ye1avs43jps/PS_Test_EV_Enabled_CQ_CallFlow_hu_ff8e913474fa05a3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;No Disconnect Message&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;54&#34;
		data-flex-basis=&#34;131px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;A call flow using the workaround with an additional auto attendant looked like this. The call had to be forwarded to an auto attendant so that a message could be played back before disconnecting the call.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-call-queues-now-support-greetings-in-exception-handlings-1ye1avs43jps/PS_Test_EV_Enabled_CQ_CallFlow_Disconnect_AA.png&#34;
	width=&#34;1947&#34;
	height=&#34;3840&#34;
	srcset=&#34;https://heusser.pro/p/teams-call-queues-now-support-greetings-in-exception-handlings-1ye1avs43jps/PS_Test_EV_Enabled_CQ_CallFlow_Disconnect_AA_hu_8197b11800ce5725.png 480w, https://heusser.pro/p/teams-call-queues-now-support-greetings-in-exception-handlings-1ye1avs43jps/PS_Test_EV_Enabled_CQ_CallFlow_Disconnect_AA_hu_691dfed19e6c2c3b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Disconnect Message on Auto Attendant&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;50&#34;
		data-flex-basis=&#34;121px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;While it wasn&amp;rsquo;t very hard to build something like that, it certainly required more time and added unnecessary complexity to otherwise relatively simple call flows.&lt;/p&gt;
&lt;h2 id=&#34;whats-changed&#34;&gt;What&amp;rsquo;s Changed?
&lt;/h2&gt;&lt;p&gt;With the recently added functionality, it&amp;rsquo;s now possible to configure greetings on call queues in exception handling actions. At the time of writing this blog post it&amp;rsquo;s possible to configure a greeting for &lt;strong&gt;Disconnect&lt;/strong&gt; and &lt;strong&gt;Redirect to External Phone Number&lt;/strong&gt; or &lt;strong&gt;Redirect to Voice App&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-call-queues-now-support-greetings-in-exception-handlings-1ye1avs43jps/image.png&#34;
	width=&#34;1992&#34;
	height=&#34;826&#34;
	srcset=&#34;https://heusser.pro/p/teams-call-queues-now-support-greetings-in-exception-handlings-1ye1avs43jps/image_hu_30c6236880ac8d65.png 480w, https://heusser.pro/p/teams-call-queues-now-support-greetings-in-exception-handlings-1ye1avs43jps/image_hu_d436c5cd35f9c367.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Greeting on Disconnect&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;241&#34;
		data-flex-basis=&#34;578px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/teams-call-queues-now-support-greetings-in-exception-handlings-1ye1avs43jps/image-1.png&#34;
	width=&#34;1398&#34;
	height=&#34;655&#34;
	srcset=&#34;https://heusser.pro/p/teams-call-queues-now-support-greetings-in-exception-handlings-1ye1avs43jps/image-1_hu_954ee248ce8e49fd.png 480w, https://heusser.pro/p/teams-call-queues-now-support-greetings-in-exception-handlings-1ye1avs43jps/image-1_hu_6638a0504d35a0a8.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Greeting for Redirect to Phone Number&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;213&#34;
		data-flex-basis=&#34;512px&#34;
	
&gt; &lt;img src=&#34;https://heusser.pro/p/teams-call-queues-now-support-greetings-in-exception-handlings-1ye1avs43jps/image-2.png&#34;
	width=&#34;1412&#34;
	height=&#34;960&#34;
	srcset=&#34;https://heusser.pro/p/teams-call-queues-now-support-greetings-in-exception-handlings-1ye1avs43jps/image-2_hu_a90222cbc432f261.png 480w, https://heusser.pro/p/teams-call-queues-now-support-greetings-in-exception-handlings-1ye1avs43jps/image-2_hu_8a8eabc1958ebc50.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Greeting for Redirect to Voice App&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;147&#34;
		data-flex-basis=&#34;353px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve already added support for these new configuration options to the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;M365 Call Flow Visualizer&lt;/a&gt;. In this demo call flow I&amp;rsquo;m just using text to speech greetings but of course it also works for audio files including exporting them to disk. This is how it looks now.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-call-queues-now-support-greetings-in-exception-handlings-1ye1avs43jps/PS_Test_EV_Enabled_CQ_CallFlow_New_Greetings.png&#34;
	width=&#34;1978&#34;
	height=&#34;3840&#34;
	srcset=&#34;https://heusser.pro/p/teams-call-queues-now-support-greetings-in-exception-handlings-1ye1avs43jps/PS_Test_EV_Enabled_CQ_CallFlow_New_Greetings_hu_924f5a60a5e00bfc.png 480w, https://heusser.pro/p/teams-call-queues-now-support-greetings-in-exception-handlings-1ye1avs43jps/PS_Test_EV_Enabled_CQ_CallFlow_New_Greetings_hu_57e9d38580f8eb25.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Greetings are configured on call queue directly&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;51&#34;
		data-flex-basis=&#34;123px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the greetings are now configured directly on the call queue and there&amp;rsquo;s no need to deploy and manage additional auto attendants anymore. The greeting options for redirect to shared voicemail are unchanged. This can be seen on the &lt;strong&gt;PS Test EV Enabled On Call CQ&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;powershell-vs-teams-admin-center&#34;&gt;PowerShell vs Teams Admin Center
&lt;/h2&gt;&lt;p&gt;Teams Admin Center doesn&amp;rsquo;t support configuring a greeting if the call is being forwarded to another Teams user (person in organization) or a personal voicemail. However, the available properties which are returned in &lt;code&gt;Get-CsCallQueue&lt;/code&gt; hint that support for greetings before a call is forwarded to a person might be coming soon too.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$cq&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-CsCallQueue&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Identity&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$cq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Identity&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;PS &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;V:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GitHub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;M365CallFlowVisualizer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$cq&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;fl &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;OverflowRedirectPersonAudioFilePrompt&lt;/span&gt;         &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;OverflowRedirectPersonAudioFilePromptFileName&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;OverflowRedirectPersonTextToSpeechPrompt&lt;/span&gt;      &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;TimeoutRedirectPersonAudioFilePrompt&lt;/span&gt;          &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;TimeoutRedirectPersonAudioFilePromptFileName&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;TimeoutRedirectPersonTextToSpeechPrompt&lt;/span&gt;       &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;NoAgentRedirectPersonAudioFilePrompt&lt;/span&gt;          &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;NoAgentRedirectPersonAudioFilePromptFileName&lt;/span&gt;  &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;NoAgentRedirectPersonTextToSpeechPrompt&lt;/span&gt;       &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;I wouldn&amp;rsquo;t be me unless I tested this. Using &lt;code&gt;Set-CsCallQueue -Identity $cq.Identity -OverflowRedirectPersonTextToSpeechPrompt &amp;quot;Test overflow redirect to person greeting&amp;quot;&lt;/code&gt; I was able to configure a greeting before the call was forwarded to the specified Teams user. A quick test call to the queue successfully played back the message before the call was forwarded to the Teams user. &lt;strong&gt;But&lt;/strong&gt; when I updated the call queue in TAC again, the greeting was deleted (as expected) from the queue. I strongly recommend not to configure a greeting before redirecting to a person until the feature is officially available in Teams Admin Center. Otherwise, you can only update the queue through PS until Microsoft has added the feature to TAC as well. Because of that, I also didn&amp;rsquo;t include this in the Visualizer yet.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary
&lt;/h2&gt;&lt;p&gt;I haven&amp;rsquo;t seen anybody talk about this new feature online before so I thought that it would be worth sharing. And of course I also wanted to share that the M365 Call Flow Visualizer has been updated to display all configured greetings accurately. I hope you like the new feature and that the Visualizer will help you to get your documentation up to speed quickly.&lt;/p&gt;
&lt;p&gt;If you want to learn how to download existing audio files from call queues through TAC or PowerShell without the M365 Call Flow Visualizer, you can check out &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/download-existing-audio-files-from-teams-admin-center-1839230eadb0&#34; &gt;this&lt;/a&gt; post.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>PowerShell Script Example: Upload Small Files to SharePoint via Microsoft Graph</title>
        <link>https://heusser.pro/p/powershell-script-example-upload-small-files-via-microsoft-graph-z45tbunyoa85/</link>
        <pubDate>Sat, 13 Apr 2024 11:25:07 +0000</pubDate>
        
        <guid>https://heusser.pro/p/powershell-script-example-upload-small-files-via-microsoft-graph-z45tbunyoa85/</guid>
        <description>&lt;h2 id=&#34;lacking-documentation&#34;&gt;Lacking Documentation
&lt;/h2&gt;&lt;p&gt;I recently wanted to upload a couple of files to SharePoint Online using Microsoft Graph. It took me a while to figure it out so I thought that sharing my working script examples will probably help other people accomplish this task faster.&lt;/p&gt;
&lt;p&gt;The documentation for uploading files with Microsoft Graph can be found &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/graph/api/driveitem-put-content?view=graph-rest-1.0&amp;amp;tabs=http&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. The problem is that Microsoft Learn only lists an example for a web request and doesn&amp;rsquo;t really include any examples as to what the &lt;strong&gt;Body&lt;/strong&gt; of the request needs to contain.&lt;/p&gt;
&lt;h3 id=&#34;example-as-of-2024-04-13&#34;&gt;Example as of 2024-04-13
&lt;/h3&gt;&lt;p&gt;This is all we get today:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;PUT https://graph.microsoft.com/v1.0/me/drive/root:/FolderA/FileB.txt:/content
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;Content-Type: text/plain
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;The contents of the file goes here.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;While there is an example of how to update an existing file using &lt;code&gt;Set-MgDriveItemContent&lt;/code&gt; it doesn&amp;rsquo;t mention how to construct the &lt;code&gt;$params&lt;/code&gt; either:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-PowerShell&#34; data-lang=&#34;PowerShell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Import-Module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Microsoft&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Files&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$params&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;The&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;contents&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;goes&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;here&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Set-MgDriveItemContent&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-DriveId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$driveId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-DriveItemId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$driveItemId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-BodyParameter&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$params&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;script-examples&#34;&gt;Script Examples
&lt;/h2&gt;&lt;p&gt;Through trial and error, I discovered two different ways of uploading files to SharePoint Online through Microsoft Graph. One uses a simple web request using &lt;code&gt;Invoke-RestMethod&lt;/code&gt; and app authentication and the other one uses the &lt;code&gt;Invoke-GraphRequest&lt;/code&gt; Cmdlet from the &lt;code&gt;Microsoft.Graph.Authentication&lt;/code&gt; module. The second one uses delegated permissions.&lt;/p&gt;
&lt;p&gt;As it&amp;rsquo;s often the case with Graph operations, you first need to know some specific Ids before you can make your request. In this case, we need to know the Id of the &lt;strong&gt;drive&lt;/strong&gt; in SharePoint. The DriveId is the Id of the Document Library. However, to get the DriveId, we also need to know the Id of the SharePoint Site. Therefore we must first find the SiteId, and then the DriveId. Unfortunately, the examples on the Graph documentation always assume that we already know these Ids so we need to get this data on our own&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;example-using-delegated-auth-and-invoke-graphrequest&#34;&gt;Example Using Delegated Auth and Invoke-GraphRequest
&lt;/h3&gt;&lt;p&gt;Let&amp;rsquo;s look at the script using the Graph PowerShell module first. The first thing you want to do is to replace &lt;code&gt;$siteName&lt;/code&gt; with the name of your destination site. When you run the script, you&amp;rsquo;ll be prompted to sign into Microsoft Graph. Make sure that you&amp;rsquo;ve previously configured and consented the delegated permissions &lt;code&gt;Sites.Read.All&lt;/code&gt; and &lt;code&gt;Files.ReadWrite.All&lt;/code&gt; to the &lt;strong&gt;Microsoft Graph Command Line Tools&lt;/strong&gt; Enterprise Application or that you&amp;rsquo;re using your own App which has at least these two permissions configured.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$siteName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Azure Automation&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Connect-MgGraph&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Site&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$site&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-MgSite&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Search&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$siteName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$siteId&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$site&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;id&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Drives&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$drives&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-MgSiteDrive&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-SiteId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$siteId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-All&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$drive&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$drives&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Where-Object&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-eq&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Documents&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-or&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-eq&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Dokumente&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# SharePoint Drive Id (Document Library)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$driveId&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$drive&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;id&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# File to upload&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$filePath&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;C:\Temp\Test.txt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$fileProperties&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-ChildItem&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Path&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filePath&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Read the file content as a byte array&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$fileContent&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;System.IO.File&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReadAllBytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$filePath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Destination file name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$destinationName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$fileProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BaseName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Get-Date&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Format&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;yyyy-MM-dd HH-mm-ss&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$fileProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Extension&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Upload the file to SharePoint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-GraphRequest&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PUT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://graph.microsoft.com/v1.0/drives/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$driveId&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/root:/Test/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$destinationName&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;`:/content&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Body&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$fileContent&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/octet-stream&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$Header&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This will upload files up to 250 MB to SharePoint Online. If you rather want to use application authentication and not have any dependencies on installed Graph modules, you can do the same using HTTP requests.&lt;/p&gt;
&lt;h3 id=&#34;example-using-app-auth-and-invoke-restmethod&#34;&gt;Example Using App Auth and Invoke-RestMethod
&lt;/h3&gt;&lt;p&gt;The required permissions stay the same as for the first example. However, in this case they need to be application permissions. This script uses an external function to acquire a token which is then used to perform the web requests to the Graph API. The easiest way is to just clone the entire &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;repository&lt;/a&gt;. This will keep the relative paths working. Alternatively, you can download the function from &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Functions/Connect-MgGraphHTTP.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt; and either copy it into the script or adjust the relative path. At this point, I&amp;rsquo;d like to thank Alex Asplund again for providing this awesome function to acquire a token for Microsoft Graph. I use &lt;a class=&#34;link&#34; href=&#34;https://adamtheautomator.com/powershell-graph-api&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;his function&lt;/a&gt; in quite a lot in my scripts.&lt;/p&gt;
&lt;p&gt;Before you run the script, fill in your own data for &lt;code&gt;$TenantId&lt;/code&gt;, &lt;code&gt;$AppId&lt;/code&gt;, &lt;code&gt;$AppSecret&lt;/code&gt; and &lt;code&gt;$SiteName&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$TenantId&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$AppId&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$AppSecret&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$SiteName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Azure Automation&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Functions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Connect-MgGraphHTTP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;ps1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Connect-MgGraphHTTP&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-TenantId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$TenantId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-AppId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$AppId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-AppSecret&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$AppSecret&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Site&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$site&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Invoke-RestMethod&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$Header&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://graph.microsoft.com/v1.0/sites?search=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$siteName&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$siteId&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$site&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;id&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Drives&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$drives&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Invoke-RestMethod&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$Header&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://graph.microsoft.com/v1.0/sites/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$siteId&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/drives&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# SharePoint Drive Id (Document Library)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$driveId&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$drives&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Where-Object&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-eq&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Documents&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-or&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-eq&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Dokumente&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Id&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# File to upload&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$filePath&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;C:\Temp\Test.txt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$fileProperties&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-ChildItem&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Path&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$filePath&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Read the file content as a byte array&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$fileContent&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;System.IO.File&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ReadAllBytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$filePath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Destination file name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$destinationName&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$fileProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BaseName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Get-Date&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Format&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;yyyy-MM-dd HH-mm-ss&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$fileProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Extension&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Upload the file to SharePoint&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-RestMethod&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PUT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://graph.microsoft.com/v1.0/drives/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$driveId&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/root:/Test/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$destinationName&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;`:/content&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Body&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$fileContent&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/octet-stream&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$Header&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This code will give you the exact same result as the first script does but it will only use out-of-the-box PowerShell commands and doesn&amp;rsquo;t have any dependencies on PowerShell modules.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary
&lt;/h2&gt;&lt;p&gt;I hope you like these two examples on how to upload small files to SharePoint Online using Microsoft Graph. I think this can be a really powerful tool, especially when you pair it with your own Entra ID App Registration/Enterprise Application. When you create your own app to connect to Microsoft Graph, you can limit the use of it to a specific subset of users, such as IT staff and the app is only allowed to read all sites and read/write all files the signed in user has access to.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m thinking of scenarios where IT runs a diagnostic script or any other script that collects information on a users device and then uploads the log files/collected data directly to the specified SharePoint Site.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>M365 Call Flow Visualizer Update: Show Shared Voicemail Group Subscribers</title>
        <link>https://heusser.pro/p/m365-call-flow-visualizer-update-show-shared-voicemail-group-subscribers-s30piv4qliee/</link>
        <pubDate>Mon, 08 Apr 2024 18:28:42 +0000</pubDate>
        
        <guid>https://heusser.pro/p/m365-call-flow-visualizer-update-show-shared-voicemail-group-subscribers-s30piv4qliee/</guid>
        <description>&lt;p&gt;It&amp;rsquo;s been a while since I&amp;rsquo;ve added some new features to the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;M365 Call Flow Visualizer&lt;/a&gt;. If you&amp;rsquo;re a Microsoft Teams Phone Admin and have never heard of this tool before, I recommend to check it out sooner rather than later. This script will allow you to document all your Teams call flows consisting of auto attendants, call queues and even user settings in just a couple of minutes.&lt;/p&gt;
&lt;p&gt;The Visualizer was able to list all members of an M365 Group which is configured as target for shared voicemail for quite some time now. Here&amp;rsquo;s an example of a very simple call flow and how the diagram displayed the M365 Group members without their actual subscriber status:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/m365-call-flow-visualizer-update-show-shared-voicemail-group-subscribers-s30piv4qliee/Main_Number_Busy_AA_CallFlow.png&#34;
	width=&#34;374&#34;
	height=&#34;854&#34;
	srcset=&#34;https://heusser.pro/p/m365-call-flow-visualizer-update-show-shared-voicemail-group-subscribers-s30piv4qliee/Main_Number_Busy_AA_CallFlow_hu_e764535b3c0862ee.png 480w, https://heusser.pro/p/m365-call-flow-visualizer-update-show-shared-voicemail-group-subscribers-s30piv4qliee/Main_Number_Busy_AA_CallFlow_hu_2b71fb6abda3e6db.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Diagram without subscriber status&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;43&#34;
		data-flex-basis=&#34;105px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Today, I&amp;rsquo;ve added support to also display which members are subscribed to the group mailbox. Subscribing to a group mailbox means that emails sent to a group will also be delivered into the personal mailboxes of subscribers. This is very often preferred because group emails get easily overlooked. Microsoft calls this feature &lt;a class=&#34;link&#34; href=&#34;https://support.microsoft.com/en-us/office/follow-a-group-in-outlook-e147fc19-f548-4cd2-834f-80c6235b7c36#ID0EBBF=Web&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;Follow in inbox&lt;/strong&gt;&lt;/a&gt; on the Outlook client side.&lt;/p&gt;
&lt;p&gt;As Admins, we can configure a group to auto subscribe it&amp;rsquo;s members but they can still opt out on their own. With this new feature it&amp;rsquo;s now very easy for admins to see which members have chosen to subscribe or unsubscribe from certain call flow related M365 Groups.&lt;/p&gt;
&lt;h2 id=&#34;how-to-display-subscriber-info-in-diagram&#34;&gt;How To Display Subscriber Info in Diagram
&lt;/h2&gt;&lt;p&gt;To include this information in the diagrams generated by the script, you need to set the two parameters &lt;code&gt;-ShowSharedVoicemailGroupMembers&lt;/code&gt; and &lt;code&gt;-ShowSharedVoicemailGroupSubscribers&lt;/code&gt; to &lt;code&gt;$true&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites
&lt;/h3&gt;&lt;p&gt;In order for this to work, you also need to have the &lt;strong&gt;ExchangeOnlineManagement&lt;/strong&gt; PowerShell module installed. This is because the only way to get this information is to use the &lt;code&gt;Get-UnifiedGroupLinks&lt;/code&gt; Cmdlet which is part of the Exchange Online Module. If you set the &lt;code&gt;-ShowSharedVoicemailGroupSubscribers&lt;/code&gt; parameter to &lt;code&gt;$true&lt;/code&gt;, you&amp;rsquo;ll automatically be prompted to sign into Exchange Online as well.&lt;/p&gt;
&lt;p&gt;In case you&amp;rsquo;re getting the annoying error below, just terminate your current PowerShell session and start the script again. If the Exchange Module is loaded before Teams or Graph, it should work without any issues.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/m365-call-flow-visualizer-update-show-shared-voicemail-group-subscribers-s30piv4qliee/image-2.png&#34;
	width=&#34;1420&#34;
	height=&#34;87&#34;
	srcset=&#34;https://heusser.pro/p/m365-call-flow-visualizer-update-show-shared-voicemail-group-subscribers-s30piv4qliee/image-2_hu_fb0c2aae849209f1.png 480w, https://heusser.pro/p/m365-call-flow-visualizer-update-show-shared-voicemail-group-subscribers-s30piv4qliee/image-2_hu_c304f2fef318cb7d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Error Message&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1632&#34;
		data-flex-basis=&#34;3917px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Once you&amp;rsquo;re signed into all three services, your console output should look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Connected Teams Tenant: NoCapTech
Connected Graph Tenant matches connected Teams Tenant: nocaptech.ch
Connected Exchange Online Tenant matches connected Teams and Graph Tenant: NoCapTech
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;example&#34;&gt;Example:
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;M365CallFlowVisualizerV2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;ps1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Identity&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Your Top-Level Voice App Id&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ShowSharedVoicemailGroupMembers&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;$true&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ShowSharedVoicemailGroupSubscribers&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;$true&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-CacheResults&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;$true&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-PreviewHtml&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Theme&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dark&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ExportPng&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;$true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;example-diagram&#34;&gt;Example Diagram
&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/m365-call-flow-visualizer-update-show-shared-voicemail-group-subscribers-s30piv4qliee/PS_Test_EV_Enabled_CQ_CallFlow.png&#34;
	width=&#34;1018&#34;
	height=&#34;1920&#34;
	srcset=&#34;https://heusser.pro/p/m365-call-flow-visualizer-update-show-shared-voicemail-group-subscribers-s30piv4qliee/PS_Test_EV_Enabled_CQ_CallFlow_hu_43ccc6f0375d5e52.png 480w, https://heusser.pro/p/m365-call-flow-visualizer-update-show-shared-voicemail-group-subscribers-s30piv4qliee/PS_Test_EV_Enabled_CQ_CallFlow_hu_648200a8deaece5c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Example Diagram&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;53&#34;
		data-flex-basis=&#34;127px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the last node of the diagram which lists the email addresses of the M365 Group which is configured as target for the Shared Voicemail action inside this call flow now also lists a boolean value for &lt;strong&gt;Follow In Inbox&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I hope you enjoy this small update to my script. This feature is available in Version &lt;strong&gt;3.1.4&lt;/strong&gt; which can be downloaded/cloned from my &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Test Entra ID Dynamic Group Queries with PowerShell</title>
        <link>https://heusser.pro/p/test-entra-id-dynamic-group-queries-with-powershell-cv29crjhsbzc/</link>
        <pubDate>Mon, 04 Mar 2024 00:00:00 +0000</pubDate>
        
        <guid>https://heusser.pro/p/test-entra-id-dynamic-group-queries-with-powershell-cv29crjhsbzc/</guid>
        <description>&lt;img src="https://heusser.pro/p/test-entra-id-dynamic-group-queries-with-powershell-cv29crjhsbzc/cover.png" alt="Featured image of post Test Entra ID Dynamic Group Queries with PowerShell" /&gt;&lt;p&gt;Dynamic groups in Entra ID are extremely powerful. That also means that updating a query of an existing group is not always an easy task. Making a mistake in an updated query could lead to really big problems. Especially when dynamic groups are used to assign licenses or control access to certain resources. Imagine making a mistake where suddenly all users lose their license because they&amp;rsquo;re not included in the group after the query has been changed.&lt;/p&gt;
&lt;p&gt;Luckily, something like this never happened to me. And nor should it happen to you. That&amp;rsquo;s why I&amp;rsquo;m sharing a script sample to validate rules before you update a query or even create a group for that matter.&lt;/p&gt;
&lt;h2 id=&#34;rule-validation-in-entra-id&#34;&gt;Rule Validation in Entra ID
&lt;/h2&gt;&lt;p&gt;The Entra ID portal already features a rule validation feature which is still in preview. This is great if you just need to check a handful of users. It even gives you detailed results on each of your expressions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/test-entra-id-dynamic-group-queries-with-powershell-cv29crjhsbzc/image.png&#34;
	width=&#34;1677&#34;
	height=&#34;1019&#34;
	srcset=&#34;https://heusser.pro/p/test-entra-id-dynamic-group-queries-with-powershell-cv29crjhsbzc/image_hu_1be4c27bd1d719b9.png 480w, https://heusser.pro/p/test-entra-id-dynamic-group-queries-with-powershell-cv29crjhsbzc/image_hu_aea594cb7f3f25f0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Rule Validation in Entra ID (Preview)&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;164&#34;
		data-flex-basis=&#34;394px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;rule-validation&#34;&gt;Rule Validation
&lt;/h2&gt;&lt;p&gt;The &lt;code&gt;Microsoft.Graph.Beta.Groups&lt;/code&gt; PowerShell module includes a nice little Cmdlet to test dynamic group queries so you can create your own scripts and potentially check your queries against hundreds of users.&lt;/p&gt;
&lt;p&gt;I use two external files for this script. The first one stores the dynamic query in an &lt;code&gt;*.sql&lt;/code&gt; file. Technically, dynamic Entra ID groups use their own syntax but I&amp;rsquo;ve found that the SQL syntax is pretty close to it. That means we&amp;rsquo;ll also get linting in VS Code and syntax errors such as a missing parenthesis are quite easy to spot.&lt;/p&gt;
&lt;p&gt;If you check the screenshot above, the original query was &lt;code&gt;(user.userPrincipalName -match &amp;quot;nocaptech.ch&amp;quot;)&lt;/code&gt; which also included a user called &lt;strong&gt;Admin NCT&lt;/strong&gt;. This is the content of my &lt;code&gt;DynamicUserGroupRule.sql&lt;/code&gt; file which gets imported on line 8:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userPrincipalName&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;nocaptech.ch&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;userPrincipalName&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;notmatch&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;admin&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The &lt;code&gt;DynamicUserGroupTestMembers.txt&lt;/code&gt; which is imported on line 10 just contains the IDs of a couple of Entra ID users.&lt;/p&gt;
&lt;h3 id=&#34;script-example&#34;&gt;Script Example
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$localRepoPath&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;rev-parse&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-show-toplevel&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$localTestPath&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./.local&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Connect-MgGraph&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Import-Module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Microsoft&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Graph&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Beta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Groups&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$membershipRule&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-Content&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Path&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$localRepoPath&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/Scripts/EntraID/DynamicGroupResources/DynamicUserGroupRule.sql&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Out-String&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$userIds&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-Content&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Path&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$localTestPath&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/DynamicUserGroupTestMembers.txt&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$results&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$userId&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$userIds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;$params&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;MemberId&lt;/span&gt;       &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$userId&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;MembershipRule&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$membershipRule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;$evaluation&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Test-MgBetaGroupDynamicMembershipRule&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-BodyParameter&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$params&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;$userProperties&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-MgUser&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-UserId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$userId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Property&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;City&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserPrincipalName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DisplayName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JobTitle&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;$userDetails&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;New-Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-TypeName&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;psobject&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;$userDetails&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Add-Member&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-MemberType&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NoteProperty&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Name&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Value&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$userId&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;$userDetails&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Add-Member&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-MemberType&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NoteProperty&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Name&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserPrincipalName&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Value&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$userProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;UserPrincipalName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;$userDetails&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Add-Member&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-MemberType&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NoteProperty&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Name&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DisplayName&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Value&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$userProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;DisplayName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;$userDetails&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Add-Member&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-MemberType&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NoteProperty&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Name&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JobTitle&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Value&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$userProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;JobTitle&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;$userDetails&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Add-Member&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-MemberType&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NoteProperty&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Name&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Value&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$evaluation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;MembershipRuleEvaluationResult&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;$userDetails&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Add-Member&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-MemberType&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NoteProperty&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Name&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;City&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Value&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$userProperties&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;City&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nv&#34;&gt;$results&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$userDetails&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$results&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Format-Table&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-AutoSize&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$date&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-Date&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Format&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;yyyy-MM-dd-HH-mm&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$results&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Export-Csv&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Path&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$localTestPath&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/DynamicGroupEvaluationReport-&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$date&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;.csv&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Delimiter&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;;&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Encoding&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;utf8&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Force&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;As you can see, there&amp;rsquo;s not even a reference of any group ID. Therefore you can test dynamic group queries before you even create a group. Or you can test an updated query without the risk of touching a production group.&lt;/p&gt;
&lt;h3 id=&#34;result&#34;&gt;Result
&lt;/h3&gt;&lt;p&gt;Because of the updated query, &lt;strong&gt;Admin NCT&lt;/strong&gt; should not be a member of the group any more. Let&amp;rsquo;s see if that&amp;rsquo;s the case&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/test-entra-id-dynamic-group-queries-with-powershell-cv29crjhsbzc/image-1.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/test-entra-id-dynamic-group-queries-with-powershell-cv29crjhsbzc/image-1_hu_487a1a690508d403.png 480w, https://heusser.pro/p/test-entra-id-dynamic-group-queries-with-powershell-cv29crjhsbzc/image-1_hu_82353e15e0fc316a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Script Output&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Looks good to me. Now I can update my production group with the new query in confidence.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary
&lt;/h2&gt;&lt;p&gt;The code sample uses a function so it can easily be adjusted and you could for example test multiple queries against different sets of user IDs by creating your own &lt;code&gt;for-each&lt;/code&gt; loop. If you find this code sample useful, you can also grab it from my &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Scripts/EntraID/EvaluateDynamicUserGroupRule.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub repo&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Minimize Downtime when Porting Numbers to Microsoft Teams Calling Plans</title>
        <link>https://heusser.pro/p/minimize-downtime-when-porting-numbers-to-microsoft-teams-calling-plans-ix1vcwlfjbyr/</link>
        <pubDate>Sat, 03 Feb 2024 00:00:00 +0000</pubDate>
        
        <guid>https://heusser.pro/p/minimize-downtime-when-porting-numbers-to-microsoft-teams-calling-plans-ix1vcwlfjbyr/</guid>
        <description>&lt;p&gt;Number porting can sometimes be a tedious process but Microsoft actually does a really good job with their Porting Wizard in the Microsoft Teams Admin Center (TAC). I recently had to port a lot of numbers from a previous carrier to Microsoft. As you may know, there are two main types for numbers with Calling Plans and Operator Connect: &lt;code&gt;Subscriber&lt;/code&gt; and &lt;code&gt;Service&lt;/code&gt; numbers. Subscriber numbers can be assigned to users and Service numbers are for use with voice apps (auto attendants and call queues) or dedicated conference bridges. By default, all numbers are created in your tenant as Subscriber numbers but you will be able to change the usage to Service for specific numbers during the port order creation process.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/minimize-downtime-when-porting-numbers-to-microsoft-teams-calling-plans-ix1vcwlfjbyr/Screenshot-2024-45-03-19-45-27.png&#34;
	width=&#34;1239&#34;
	height=&#34;173&#34;
	srcset=&#34;https://heusser.pro/p/minimize-downtime-when-porting-numbers-to-microsoft-teams-calling-plans-ix1vcwlfjbyr/Screenshot-2024-45-03-19-45-27_hu_83d10b7e9a73742c.png 480w, https://heusser.pro/p/minimize-downtime-when-porting-numbers-to-microsoft-teams-calling-plans-ix1vcwlfjbyr/Screenshot-2024-45-03-19-45-27_hu_38f235f0272a4be9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Usages of numbers can only be changed during the initial creation of the port request.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;716&#34;
		data-flex-basis=&#34;1718px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When you&amp;rsquo;re porting hundreds of numbers, it&amp;rsquo;s easy to forget or overlook an important number that should have been labelled as Service but unfortunately, was missed. Once the port order has been submitted, there&amp;rsquo;s no way of changing the usage anymore until the numbers have been fully ported to your tenant. I confirmed this with Microsoft through a PSTN Service Desk support request. At this point, your only two options are to either cancel the port order request and start over or accept that you can only change the usage after the numbers have been ported. Since cancelling and starting over will mean that there will be an unwelcome delay of at least a couple of days, that&amp;rsquo;s not really a viable option in most cases. Today, I&amp;rsquo;m going to show you a very easy workaround how you can make sure that your auto attendant or call queue will still be reachable by their phone number as soon as the port order has completed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/minimize-downtime-when-porting-numbers-to-microsoft-teams-calling-plans-ix1vcwlfjbyr/Screenshot-2024-47-03-19-47-17.png&#34;
	width=&#34;2046&#34;
	height=&#34;666&#34;
	srcset=&#34;https://heusser.pro/p/minimize-downtime-when-porting-numbers-to-microsoft-teams-calling-plans-ix1vcwlfjbyr/Screenshot-2024-47-03-19-47-17_hu_def2f7d961b19f0.png 480w, https://heusser.pro/p/minimize-downtime-when-porting-numbers-to-microsoft-teams-calling-plans-ix1vcwlfjbyr/Screenshot-2024-47-03-19-47-17_hu_5b8199332ce612cf.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;User = Subscriber / Conference, Voice app = Service&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;307&#34;
		data-flex-basis=&#34;737px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;workaround&#34;&gt;Workaround
&lt;/h2&gt;&lt;p&gt;When a number gets created as a Subscriber number, you won&amp;rsquo;t be able to assign it to an auto attendant or a call queue. But you can still create the resource account that&amp;rsquo;s linked to the voice app in advance. All you need to do to ensure that the voice app is reachable via it&amp;rsquo;s phone number is to create a temporary routing rule. To do so, navigate to &lt;strong&gt;Voice\Phone numbers&lt;/strong&gt; in TAC and switch to &lt;strong&gt;Routing rules&lt;/strong&gt;. Click &lt;strong&gt;+ Add&lt;/strong&gt; to create a new rule. Give the rule a name and fill out the description. Then choose &lt;code&gt;Single number&lt;/code&gt; and enter your number. Under &lt;strong&gt;Routing options&lt;/strong&gt; choose &lt;code&gt;Voice application&lt;/code&gt; and select your auto attendant or call queue from the list. If you already have other rules, set the &lt;code&gt;Evaluation order&lt;/code&gt; to a value that&amp;rsquo;s not already in use. If you don&amp;rsquo;t already have other rules with a lower evaluation order and which use regular expressions which could also match your number, it doesn&amp;rsquo;t really matter what you set this value to.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/minimize-downtime-when-porting-numbers-to-microsoft-teams-calling-plans-ix1vcwlfjbyr/Screenshot-2024-56-03-19-56-02.png&#34;
	width=&#34;541&#34;
	height=&#34;1302&#34;
	srcset=&#34;https://heusser.pro/p/minimize-downtime-when-porting-numbers-to-microsoft-teams-calling-plans-ix1vcwlfjbyr/Screenshot-2024-56-03-19-56-02_hu_b56dcdda82fcb795.png 480w, https://heusser.pro/p/minimize-downtime-when-porting-numbers-to-microsoft-teams-calling-plans-ix1vcwlfjbyr/Screenshot-2024-56-03-19-56-02_hu_763a5783620f9964.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Unassigned routing rule for the number that was accidentally left on User instead of Voice app.&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;41&#34;
		data-flex-basis=&#34;99px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s very important that you don&amp;rsquo;t assign this number to any user. The rule is only effective for unassigned numbers. Usually, it takes a couple of hours until these rules become effective but if you do it at least one day before the porting date, you should be fine. Of course you could also set up a temporary user and forward all calls to that user to your voice app but that requires more work and more importantly a paid license.&lt;/p&gt;
&lt;p&gt;If somebody calls that number before you were able to change the usage to Service and assign it to the voice app, the calls will show as &lt;code&gt;unassigned_in&lt;/code&gt; in the PSTN usage report in TAC. However, the calls will be routed to the voice app you specified in your routing rule without any issues. Service numbers can receive a lot more concurrent calls than subscriber numbers can. However, I made some tests and was able to establish &lt;strong&gt;10 concurrent calls&lt;/strong&gt; to a call queue where each call was routed through an unassigned routing rule.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In any case, I recommend to change the usage and assign the number to a resource account as quickly as possible. Using a routing rule is only a temporary workaround.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once the numbers have been ported, you can go to &lt;code&gt;Voice\Phone numbers&lt;/code&gt; in TAC again and search for the number in question. Sometimes you can change the usage directly from TAC. If you don&amp;rsquo;t see that option, create a new support request at the PSTN service desk. They&amp;rsquo;re usually quite fast and will change the usage within a couple of hours after creating the request.&lt;/p&gt;
&lt;p&gt;When you receive confirmation from Microsoft that the usage has been changed, you can assign the number to the resource account of the voice app directly and delete the routing rule. As soon as the number is assigned to the resource account, the unassigned routing rule will not match anymore. This little workaround will allow you to keep the downtime to a minimum. In fact, you won&amp;rsquo;t have any downtime except the time it takes your old carrier to switch the routing to Microsoft.&lt;/p&gt;
&lt;h2 id=&#34;caveats&#34;&gt;Caveats
&lt;/h2&gt;&lt;p&gt;The only caveat you have to consider is when you want to use that number as an outgoing caller ID. Since you can&amp;rsquo;t assign it to a resource account before the usage was switched to Service, you won&amp;rsquo;t be able to configure it as caller ID for call queues or to a Caller ID policy. If you can live with the fact that you can&amp;rsquo;t use the number as outgoing caller ID for a couple of hours, there&amp;rsquo;s really no reason to panic and cancel the port request because you forgot to change the usage of some numbers.&lt;/p&gt;
&lt;h2 id=&#34;closing-words&#34;&gt;Closing Words
&lt;/h2&gt;&lt;p&gt;To me that was a gentle reminder that mistakes can happen to all of us. But as always, I tried to keep a clear head and look for a solution and most importantly share it with the awesome Teams community so all of you can take advantage of this knowledge as well.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Teams Shared Voicemail for Basic Call Flows</title>
        <link>https://heusser.pro/p/teams-shared-voicemail-for-basic-call-flows-1qru2qqlx0ju/</link>
        <pubDate>Wed, 17 Jan 2024 19:59:21 +0000</pubDate>
        
        <guid>https://heusser.pro/p/teams-shared-voicemail-for-basic-call-flows-1qru2qqlx0ju/</guid>
        <description>&lt;img src="https://heusser.pro/p/teams-shared-voicemail-for-basic-call-flows-1qru2qqlx0ju/cover.png" alt="Featured image of post Teams Shared Voicemail for Basic Call Flows" /&gt;&lt;p&gt;Not too long ago I wrote &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc&#34; &gt;this&lt;/a&gt; blog post about the ultimate Teams shared voicemail solution. This solution assumed a full blown call flow with on-call coverage and an advanced notification mechanism. Today I&amp;rsquo;m going to show you a simplified but yet optimized version of my Power Automate Flow. While the previous solution works without any issues, it&amp;rsquo;s not really scalable. If you have a lot of queues, you probably don&amp;rsquo;t want to create a dedicated shared mailbox for every queue that needs shared voicemail access via Teams and Adaptive Cards. That just adds unnecessary management overhead to your Teams phone environment.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve got some good news for you. I found a way to do it all without the need of shared mailbox. The flow is now directly triggered by a new email to the Microsoft 365 Group instead of a new email to the shared mailbox. Furthermore, all other mail related actions in the flow have been updated to use the &lt;strong&gt;Office 365 Groups Mail&lt;/strong&gt; connector as well.&lt;/p&gt;
&lt;h2 id=&#34;call-flow-diagram&#34;&gt;Call Flow Diagram
&lt;/h2&gt;&lt;p&gt;Let&amp;rsquo;s look at the scenario first. This time around, it&amp;rsquo;s a very simple call flow which consists of an auto attendant, a call queue and a Microsoft 365 Group as shared voicemail target.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-shared-voicemail-for-basic-call-flows-1qru2qqlx0ju/PS_Test_EV_Enabled_AA_CallFlow.png&#34;
	width=&#34;7840&#34;
	height=&#34;7820&#34;
	srcset=&#34;https://heusser.pro/p/teams-shared-voicemail-for-basic-call-flows-1qru2qqlx0ju/PS_Test_EV_Enabled_AA_CallFlow_hu_260817bfe9a7390c.png 480w, https://heusser.pro/p/teams-shared-voicemail-for-basic-call-flows-1qru2qqlx0ju/PS_Test_EV_Enabled_AA_CallFlow_hu_615eefe02aa2a20a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;flow-trigger&#34;&gt;Flow Trigger
&lt;/h2&gt;&lt;p&gt;The flow is now triggered by &lt;strong&gt;When a new email arrives to a group&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-shared-voicemail-for-basic-call-flows-1qru2qqlx0ju/Screenshot-2024-46-17-21-46-39.png&#34;
	width=&#34;920&#34;
	height=&#34;172&#34;
	srcset=&#34;https://heusser.pro/p/teams-shared-voicemail-for-basic-call-flows-1qru2qqlx0ju/Screenshot-2024-46-17-21-46-39_hu_e960f18bdafca6b5.png 480w, https://heusser.pro/p/teams-shared-voicemail-for-basic-call-flows-1qru2qqlx0ju/Screenshot-2024-46-17-21-46-39_hu_7c0e4795983a9ba4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;534&#34;
		data-flex-basis=&#34;1283px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;flow-actions&#34;&gt;Flow Actions
&lt;/h2&gt;&lt;p&gt;Using the Office 365 Groups Mail connector is not as straight forward as retrieving an email from a shared mailbox or a normal user mailbox. There are conversations, threads and thread posts. Everything must be queried in the correct order to receive all the data that&amp;rsquo;s needed.&lt;/p&gt;
&lt;p&gt;This is how it&amp;rsquo;s done.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-shared-voicemail-for-basic-call-flows-1qru2qqlx0ju/Screenshot-2024-47-17-21-47-39.png&#34;
	width=&#34;1104&#34;
	height=&#34;1365&#34;
	srcset=&#34;https://heusser.pro/p/teams-shared-voicemail-for-basic-call-flows-1qru2qqlx0ju/Screenshot-2024-47-17-21-47-39_hu_2cf1d40bdfce727.png 480w, https://heusser.pro/p/teams-shared-voicemail-for-basic-call-flows-1qru2qqlx0ju/Screenshot-2024-47-17-21-47-39_hu_20c493535ae8346f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;80&#34;
		data-flex-basis=&#34;194px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Because this call flow doesn&amp;rsquo;t have an on-call option, the flow uses way less actions. However, there&amp;rsquo;s still a parallel branch needed. Once the Adaptive Card has been posted to the Teams channel, the flow waits for a reply so the &lt;code&gt;messageId&lt;/code&gt; of the message containing the Adaptive card is still unknown to the flow. That&amp;rsquo;s where the parallel branch comes into play. It will get the &lt;code&gt;messageId&lt;/code&gt; and then the &lt;code&gt;userId&lt;/code&gt; of each Team member. Finally, the flow will send a Teams activity feed notification for the new Adaptive Card to each Team member. By using the flow to send the notifications we don&amp;rsquo;t need to worry about users not enabling notifications for all new channel posts. They&amp;rsquo;ll have no excuse if they ever forget to call somebody back.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-shared-voicemail-for-basic-call-flows-1qru2qqlx0ju/flow-notification-2024-59-17-21-59-53.png&#34;
	width=&#34;1944&#34;
	height=&#34;1585&#34;
	srcset=&#34;https://heusser.pro/p/teams-shared-voicemail-for-basic-call-flows-1qru2qqlx0ju/flow-notification-2024-59-17-21-59-53_hu_c7ba3ead60d40c9e.png 480w, https://heusser.pro/p/teams-shared-voicemail-for-basic-call-flows-1qru2qqlx0ju/flow-notification-2024-59-17-21-59-53_hu_dda079d38fd74060.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;122&#34;
		data-flex-basis=&#34;294px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;result-in-teams&#34;&gt;Result in Teams
&lt;/h2&gt;&lt;p&gt;This is how the notification looks like for end users in Teams. In case the audio player on the card is not working for whatever reason, I&amp;rsquo;ve also included an additional button called &lt;strong&gt;Open MP3&lt;/strong&gt; which will open the audio file in Microsoft Stream when it&amp;rsquo;s clicked.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-shared-voicemail-for-basic-call-flows-1qru2qqlx0ju/teams-voicemail-notification-2024-34-17-23-34-17.png&#34;
	width=&#34;2241&#34;
	height=&#34;932&#34;
	srcset=&#34;https://heusser.pro/p/teams-shared-voicemail-for-basic-call-flows-1qru2qqlx0ju/teams-voicemail-notification-2024-34-17-23-34-17_hu_b33b2e3438113f62.png 480w, https://heusser.pro/p/teams-shared-voicemail-for-basic-call-flows-1qru2qqlx0ju/teams-voicemail-notification-2024-34-17-23-34-17_hu_58b7cfe370057bde.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;240&#34;
		data-flex-basis=&#34;577px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;final-notes&#34;&gt;Final Notes
&lt;/h2&gt;&lt;p&gt;If you have an on-call option in your call flow but you still want to take advantage of the simplified trigger without the shared mailbox, you can just import both flows into your Power Automate Environment and build a new flow from scratch which combines the best of both worlds. The Microsoft Edge split screen feature and Power Automate&amp;rsquo;s copy/paste feature are a great help for that.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary
&lt;/h2&gt;&lt;p&gt;The initial scenario which included the on-call notification mechanism was designed for a very specific use case. This iteration of my Teams Shared Voicemail solution should fit a lot more customer scenarios. It&amp;rsquo;s easier to understand and implement and also has less moving parts. Feel free to download the basic version of my flow from &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/raw/main/Scripts/PowerAutomate/Flows/TeamsSharedVoicemailBasicV3%28M365GroupInbox%29_GitHub.zip&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt; and give it a try. Just make sure to replace anything that&amp;rsquo;s specific to my lab tenant with your actual values.&lt;/p&gt;
&lt;p&gt;If you need help importing the flow, please read this section in the &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/#the-flow&#34; &gt;initial article&lt;/a&gt; first.&lt;/p&gt;
&lt;p&gt;If this blog provides additional value to you or your company, I want you to know that you can always show your support by donating on my &lt;a class=&#34;link&#34; href=&#34;https://github.com/sponsors/mozziemozz?frequency=one-time&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub Sponsors&lt;/a&gt; profile.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>The Ultimate Teams Shared Voicemail Solution</title>
        <link>https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/</link>
        <pubDate>Wed, 06 Dec 2023 20:59:21 +0000</pubDate>
        
        <guid>https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/</guid>
        <description>&lt;p&gt;In June last year I wrote about &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4&#34; &gt;handling Teams shared voicemail more efficiently&lt;/a&gt;. Although the principle is the same today, a couple of things have changed which has allowed me to build a much more elegant version of this Power Automate flow.&lt;/p&gt;
&lt;p&gt;About a year ago, I also &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1&#34; &gt;wrote&lt;/a&gt; about shared voicemail now supporting not just Microsoft 365 groups but also distribution lists and mail enabled security groups. While it’s great to have more options, that doesn’t solve the issue at its core.&lt;/p&gt;
&lt;p&gt;My main complaint about shared voicemail in Teams is that it’s hard to keep an overview over which voicemails have already been processed (as in the person who left the message has been called back). You either train people to regularly check their Microsoft 365 group inboxes or you enable &lt;a class=&#34;link&#34; href=&#34;https://support.microsoft.com/en-us/office/follow-a-group-in-outlook-e147fc19-f548-4cd2-834f-80c6235b7c36#:~:text=Follow%20a%20group%3A%201%20In%20Outlook%20for%20Windows%2C,list%2C%20select%20Not%20following%20%3E%20Follow%20in%20Inbox.&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;follow in inbox&lt;/a&gt; for all the group&amp;rsquo;s members. Follow in inbox will make sure that no voicemail/email gets lost, but it also means that more communication is required within a team to make sure that the caller is not called back multiple times or not at all (because everybody believes that someone else will call back). My Power Automate Flow solves this issue by delivering the voicemails directly into a Teams channel.&lt;/p&gt;
&lt;h4 id=&#34;call-flowdiagram&#34;&gt;Call Flow Diagram
&lt;/h4&gt;&lt;p&gt;This is the example scenario. A relatively simple call flow with an auto attendant which routes calls to a call queue during business hours and redirects to a second auto attendant after hours. The second auto attendant offers callers a choice to either leave a message or get connected to the on-call service.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1RMziOV2rbncLrbdFMbnAzw.png&#34;
	width=&#34;7840&#34;
	height=&#34;5630&#34;
	srcset=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1RMziOV2rbncLrbdFMbnAzw_hu_8f20dfd6747f1d83.png 480w, https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1RMziOV2rbncLrbdFMbnAzw_hu_ec119919f185c28f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;139&#34;
		data-flex-basis=&#34;334px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I purposely used a dedicated auto attendant for the after-hours so it can be re-used if the call flow is extended in the future. You can see that the after-hours call flow of the main auto attendant (PS Test EV Enabled AA) only plays the greeting &lt;em&gt;Welcome to heusser.pro. You’re calling us outside of our business hours&lt;/em&gt;. And &lt;strong&gt;PS Test EV Enabled On Call AA&lt;/strong&gt; does the actual after-hours routing. By splitting the greeting, I could also use the IVR of the second auto attendant for another call queue or for holidays configured on the main auto attendant. This way, I won’t have to build a new/the same IVR per holiday call handling which saves time and reduces management effort.&lt;/p&gt;
&lt;p&gt;The second reason I built it like this is that the name of the auto attendant includes the keyword &lt;strong&gt;On Call&lt;/strong&gt;. Because the on-call call queue uses the same naming convention. This means that the email containing the voicemail includes the name of the voice app in which the call was sent to voicemail, which makes it easy to determine if a voicemail was left during business hours or during on-call/after hours.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1DFC8bAkYRUtHZJIpF21w.png&#34;
	width=&#34;2033&#34;
	height=&#34;543&#34;
	srcset=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1DFC8bAkYRUtHZJIpF21w_hu_4f269ca5ccda894a.png 480w, https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1DFC8bAkYRUtHZJIpF21w_hu_b5549786c88c9422.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;374&#34;
		data-flex-basis=&#34;898px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;shared-voicemail&#34;&gt;Shared Voicemail
&lt;/h4&gt;&lt;p&gt;As you can see in the diagram, in every case where a call cannot be answered, it goes to the same shared voicemail group. This Microsoft 365 group is the same group that’s linked to the Team which also hosts the two voice enabled channels which are linked to the call queues.&lt;/p&gt;
&lt;p&gt;Instead of relying on people either checking the group mailbox for new voicemail messages or subscribing to the group mailbox, we’re going to build a Power Automate flow to deliver voicemail messages directly into a Teams channel.&lt;/p&gt;
&lt;p&gt;The first thing we need to do is to create or define a shared mailbox so we can subscribe it to new messages of the M365 group. The flow will only process emails which have attachments, and the attachments name must end with &lt;code&gt;.mp3&lt;/code&gt; . But I still strongly recommend to create a dedicated shared mailbox which will only receive emails from the M365 group. To keep things clean, I would also deter from sending any kind of other emails to the M365 group. If you also use a dedicated Team for your call queues, that shouldn’t be an issue.&lt;/p&gt;
&lt;p&gt;Once the shared mailbox is created, we need to give the user which will own the Flow full access to it.&lt;/p&gt;
&lt;p&gt;You will need the PowerShell module &lt;code&gt;ExchangeOnlineManagement&lt;/code&gt; and need to run &lt;code&gt;Connect-ExchangeOnline&lt;/code&gt; before you can run these commands.&lt;/p&gt;
&lt;h3 id=&#34;create-shared-mailbox&#34;&gt;Create shared mailbox
&lt;/h3&gt;&lt;p&gt;New-Mailbox -Shared -Name &amp;ldquo;PS Test EV Enabled SharedVoicemail&amp;rdquo; -DisplayName &amp;ldquo;PS Test EV Enabled SharedVoicemail&amp;rdquo; -Alias &amp;ldquo;PSTestEVEnabledSharedVoicemail&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Start-Sleep -Seconds 30&lt;/p&gt;
&lt;h4 id=&#34;grant-full-mailbox-access-to-the-flow-owner&#34;&gt;Grant full mailbox access to the flow owner
&lt;/h4&gt;&lt;p&gt;Add-MailboxPermission -Identity &amp;ldquo;PSTestEVEnabledSharedVoicemail&amp;rdquo; -User &amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;mailto:mozzie@mozzism.ch&#34; &gt;mozzie@mozzism.ch&lt;/a&gt;&amp;rdquo; -AccessRights FullAccess -InheritanceType All&lt;/p&gt;
&lt;h4 id=&#34;subscribing-the-shared-mailbox-to-the-m365-groupinbox&#34;&gt;Subscribing the Shared Mailbox to the M365 Group Inbox
&lt;/h4&gt;&lt;p&gt;Next, we add the newly created shared mailbox as a member of the group and then also subscribe it to the group’s inbox.&lt;/p&gt;
&lt;h4 id=&#34;add-the-shared-mailbox-as-a-member-to-the-m365-group&#34;&gt;Add the shared mailbox as a member to the M365 group
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Add-UnifiedGroupLinks&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Identity&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$groupId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-LinkType&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Members&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Links&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;PSTestEVEnabledSharedVoicemail&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;subscribe-the-shared-mailbox-to-the-m365-groups-emails-enable-follow-in-inbox&#34;&gt;Subscribe the shared mailbox to the M365 group&amp;rsquo;s emails (enable follow in inbox)
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Add-UnifiedGroupLinks&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Identity&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$groupId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-LinkType&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Subscribers&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Links&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;PSTestEVEnabledSharedVoicemail&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;We can verify that the shared mailbox is indeed subscribed by using this code. (I have no idea why it says &lt;code&gt;UserMailbox&lt;/code&gt; though…)&lt;/p&gt;
&lt;p&gt;PS V:\GitHub\TeamsPhoneAutomation&amp;gt; Get-UnifiedGroupLinks -Identity $groupId -LinkType Subscribers&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Name                               RecipientType  
----                               -------------  
PS Test EV Enabled SharedVoicemail UserMailbox
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The idea here is that only the shared mailbox gets new voicemails in its mailbox. None of the users should get the voicemails in their personal inbox because they receive them in Teams. This allows for much better and efficient collaboration.&lt;/p&gt;
&lt;h3 id=&#34;the-result&#34;&gt;The Result
&lt;/h3&gt;&lt;p&gt;This is the Team I created for this call flow. Channels 1 and 2 are linked to the queues which receive calls. 3 and 4 are the ones which receive the voicemails. As explained earlier in this article, the flow can easily determine at which stage in the call flow (during business hours or on-call/after hours) a voicemail was left. That’s why we have two separate voicemail channels.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1ERgB32HAsCptqOqTdj0BGw.png&#34;
	width=&#34;1054&#34;
	height=&#34;489&#34;
	srcset=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1ERgB32HAsCptqOqTdj0BGw_hu_2c87107b1a734ab8.png 480w, https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1ERgB32HAsCptqOqTdj0BGw_hu_abe867a345c229d2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;215&#34;
		data-flex-basis=&#34;517px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;voicemail-during-businesshours&#34;&gt;Voicemail During Business Hours
&lt;/h4&gt;&lt;p&gt;Adaptive Cards in Teams now support &lt;a class=&#34;link&#34; href=&#34;https://adaptivecards.io/explorer/Media.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;media&lt;/a&gt;. This means that we can now embed an audio file which is stored on SharePoint directly on an adaptive card and we’ll get a neat little Stream powered media player inside Teams.&lt;/p&gt;
&lt;p&gt;The card will include the number or the email address of the user who left the voicemail.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1N07rBJWK18W1euy4cQzG6g.png&#34;
	width=&#34;1382&#34;
	height=&#34;763&#34;
	srcset=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1N07rBJWK18W1euy4cQzG6g_hu_9d324ee456607556.png 480w, https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1N07rBJWK18W1euy4cQzG6g_hu_cb786e0a7b08ea15.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1fonLxu3PBkT7HhWfqp6jQ.png&#34;
	width=&#34;1384&#34;
	height=&#34;760&#34;
	srcset=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1fonLxu3PBkT7HhWfqp6jQ_hu_df0b9be26b1b3310.png 480w, https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1fonLxu3PBkT7HhWfqp6jQ_hu_4feb3c8217f1ba70.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;437px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;After members of the channel have listened to a voicemail, they can call the person who left a voicemail back directly from the channel.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1e9z0eSHELDBRHsHUBQeObA.png&#34;
	width=&#34;885&#34;
	height=&#34;232&#34;
	srcset=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1e9z0eSHELDBRHsHUBQeObA_hu_ececa6da711a1655.png 480w, https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1e9z0eSHELDBRHsHUBQeObA_hu_39c5d48ac1d9d47c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;381&#34;
		data-flex-basis=&#34;915px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1RUyvz8rZnRkIvd09QDxug.png&#34;
	width=&#34;882&#34;
	height=&#34;230&#34;
	srcset=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1RUyvz8rZnRkIvd09QDxug_hu_a6b8543956033421.png 480w, https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1RUyvz8rZnRkIvd09QDxug_hu_72345325d415829b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;383&#34;
		data-flex-basis=&#34;920px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;updated-adaptivecards&#34;&gt;Updated Adaptive Cards
&lt;/h4&gt;&lt;p&gt;Once a team member has called back, a card can be marked as completed. This will update the card so that all other team members can see that there’s no action left to take. It’s even possible to see who has marked a card as completed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/19JfyMJstjSP28RABrpIVQ.png&#34;
	width=&#34;1384&#34;
	height=&#34;481&#34;
	srcset=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/19JfyMJstjSP28RABrpIVQ_hu_49a699708462405f.png 480w, https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/19JfyMJstjSP28RABrpIVQ_hu_9d38a50bef3184fb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;287&#34;
		data-flex-basis=&#34;690px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Completed cards don’t show the media player anymore. However, the &lt;strong&gt;Voicemail Details&lt;/strong&gt; button will reveal the original card including the audio file again. This is helpful in case somebody needs to listen to a message again or the &lt;strong&gt;Call Completed&lt;/strong&gt; button was clicked by accident.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1ACYALybGWJoArNe8UambPA.png&#34;
	width=&#34;1379&#34;
	height=&#34;1003&#34;
	srcset=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1ACYALybGWJoArNe8UambPA_hu_f545d5486ad946ba.png 480w, https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1ACYALybGWJoArNe8UambPA_hu_e67878864d57c0c0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;137&#34;
		data-flex-basis=&#34;329px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Users don’t really need to worry about this, but technically, the files get uploaded to the channel’s folder in the Teams’ SharePoint site.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1Z4LN9USbrAkCKJ13EzaKA.png&#34;
	width=&#34;1468&#34;
	height=&#34;422&#34;
	srcset=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1Z4LN9USbrAkCKJ13EzaKA_hu_3194ffe0c91e66d.png 480w, https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1Z4LN9USbrAkCKJ13EzaKA_hu_3869f30fe3592f9e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;347&#34;
		data-flex-basis=&#34;834px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Completed cards also feature a &lt;strong&gt;Show Metrics&lt;/strong&gt; button which will tell you when a voicemail was received, when it was completed and how many hours and minutes it took until it was marked as completed. Based on that, it will display a different emoji.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/133dz2lFitMlRusIK8k3G1Q.png&#34;
	width=&#34;1385&#34;
	height=&#34;539&#34;
	srcset=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/133dz2lFitMlRusIK8k3G1Q_hu_1751dc284ba1d809.png 480w, https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/133dz2lFitMlRusIK8k3G1Q_hu_2de9e647c863a89e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;256&#34;
		data-flex-basis=&#34;616px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Less or equal 1 hour = 😊&lt;br&gt;
Less or equal 2 hours = 😐&lt;br&gt;
More than 2 hours = 😞&lt;/p&gt;
&lt;h4 id=&#34;voicemail-during-after-hours-oncall&#34;&gt;Voicemail During After Hours (On Call)
&lt;/h4&gt;&lt;p&gt;Voicemails which were left outside business hours will go into the &lt;strong&gt;Voicemail On Call&lt;/strong&gt; channel. When a voicemail is left during on-call hours, it means that the people who are on-call missed a call and should call back as soon as possible. Thus, we want to have an appropriate alerting system in place.&lt;/p&gt;
&lt;p&gt;I’m using a shift which is linked to my Call Queue Team which defines which user is on call on which days.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1vfGE9YXP2x2YJx0yBEig.png&#34;
	width=&#34;2149&#34;
	height=&#34;961&#34;
	srcset=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1vfGE9YXP2x2YJx0yBEig_hu_629788c01542017f.png 480w, https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1vfGE9YXP2x2YJx0yBEig_hu_219cba109726bf0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;223&#34;
		data-flex-basis=&#34;536px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The great thing about using Shifts is that this will automatically create a Tag with the Shift name in the Team which is linked to the shift and update the members of the Tag dynamically. In other words, the tag always includes only the users which have a currently active shift assigned.&lt;/p&gt;
&lt;p&gt;When a new voicemail is received in the On Call channel, all members of the On Call Shift Tag will get notified about new voicemails every 15 minutes for 4 hours if a card is not completed sooner. As soon as card is completed, the notifications stop.&lt;/p&gt;
&lt;p&gt;In case of an on-call voicemail the flow will take at least 15 minutes to complete, even if the card was marked as completed sooner. This is because there’s a delay action which waits for 15 minutes before it checks again if the card has been completed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1IBU2Pc9lwN7E0D5TMxb1iw.png&#34;
	width=&#34;1554&#34;
	height=&#34;740&#34;
	srcset=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1IBU2Pc9lwN7E0D5TMxb1iw_hu_aa64a69e905122bb.png 480w, https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1IBU2Pc9lwN7E0D5TMxb1iw_hu_57d982876e3bc0bc.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;210&#34;
		data-flex-basis=&#34;504px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Because the flow is still waiting on the card to be completed in the on-call scenario, there’s no way to get the message Id of the adaptive card that was sent to the channel from a subsequent step in the flow. Instead, the flow needs to retrieve the latest message which was sent to the channel in a parallel branch.&lt;/p&gt;
&lt;p&gt;Because of that, I strongly recommend turning on channel moderation and prohibit members from posting new messages to the &lt;strong&gt;On Call Voicemail&lt;/strong&gt; channel. This way, we can make sure that the newest message in the channel is always the adaptive card which was sent by the flow and not something posted by a user.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1vHUTKmRHNbKSXstHFfjQhQ.png&#34;
	width=&#34;1025&#34;
	height=&#34;1195&#34;
	srcset=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1vHUTKmRHNbKSXstHFfjQhQ_hu_ed8e1b08e26e972f.png 480w, https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1vHUTKmRHNbKSXstHFfjQhQ_hu_6915680e687aeebb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;85&#34;
		data-flex-basis=&#34;205px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Channel members should only be allowed to reply to messages so that they can e.g. mention a team member who should carry out a call back action.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1jbbDZa4DBMfNtFmRN7qw.png&#34;
	width=&#34;1388&#34;
	height=&#34;846&#34;
	srcset=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1jbbDZa4DBMfNtFmRN7qw_hu_8f2fda2d7d5e8615.png 480w, https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1jbbDZa4DBMfNtFmRN7qw_hu_fdcc56d5cfd2dace.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;164&#34;
		data-flex-basis=&#34;393px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I changed the delay action from 15 minutes to 15 seconds for demonstration purposes. Here you can see three Teams activity feed notifications which link directly to the channel message containing the voicemail. Using a Teams activity feed notification instead of a channel message reply has two main advantages. It doesn’t clutter the channel feed and members don’t need to specifically enable notifications for all channel messages to get the alerts.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1H4mIfIX2E8FpbkR1aqUX0A.png&#34;
	width=&#34;2284&#34;
	height=&#34;961&#34;
	srcset=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1H4mIfIX2E8FpbkR1aqUX0A_hu_78eb2723b933f471.png 480w, https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1H4mIfIX2E8FpbkR1aqUX0A_hu_bb545286fbe90dde.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;237&#34;
		data-flex-basis=&#34;570px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;the-flow&#34;&gt;The Flow
&lt;/h3&gt;&lt;p&gt;The flow has become quite large and Power Automate keeps reminding me that it contains too many actions to use the new AI-powered designer. 🙃&lt;/p&gt;
&lt;p&gt;To make it easier for you, I exported the flow and made it available for download &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Scripts/PowerAutomate/Flows/TeamsSharedVoicemailv2.4_GitHub.zip&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. To import it, go to &lt;a class=&#34;link&#34; href=&#34;https://make.powerautomate.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://make.powerautomate.com&lt;/a&gt; and select &lt;strong&gt;Import&lt;/strong&gt; and then &lt;strong&gt;Import Package (Legacy)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Select an existing or set up a new connection for each of the resources listed before you click &lt;strong&gt;Import.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1PjOBPj93JF5mUnRj9jX6g.png&#34;
	width=&#34;2095&#34;
	height=&#34;1392&#34;
	srcset=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1PjOBPj93JF5mUnRj9jX6g_hu_225c36404e438c1b.png 480w, https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1PjOBPj93JF5mUnRj9jX6g_hu_f5b553056da9b909.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;361px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, you still need to expand every action and check if you need to modify/update the values. To make it easier for you, I added a note to all the actions which need to be updated. Here are some examples.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/13a2N43Dn0FSyhwhumCryDw.png&#34;
	width=&#34;915&#34;
	height=&#34;351&#34;
	srcset=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/13a2N43Dn0FSyhwhumCryDw_hu_743e7f965189621d.png 480w, https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/13a2N43Dn0FSyhwhumCryDw_hu_411f7983b045b97c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;260&#34;
		data-flex-basis=&#34;625px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1xugazCEKqoQ8ujjNlToClQ.png&#34;
	width=&#34;1933&#34;
	height=&#34;907&#34;
	srcset=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1xugazCEKqoQ8ujjNlToClQ_hu_743b5d0b1a64f03.png 480w, https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1xugazCEKqoQ8ujjNlToClQ_hu_6591f6409bf09161.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;213&#34;
		data-flex-basis=&#34;511px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1UbT09eRnOVQ5C8w3jb8Lw.png&#34;
	width=&#34;913&#34;
	height=&#34;349&#34;
	srcset=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1UbT09eRnOVQ5C8w3jb8Lw_hu_f42b60474443fa0d.png 480w, https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1UbT09eRnOVQ5C8w3jb8Lw_hu_83f2757fea081d92.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;261&#34;
		data-flex-basis=&#34;627px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1uFe7nY71LGjXHUfElaa1KQ.png&#34;
	width=&#34;914&#34;
	height=&#34;1033&#34;
	srcset=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1uFe7nY71LGjXHUfElaa1KQ_hu_665132cb22bf0eab.png 480w, https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1uFe7nY71LGjXHUfElaa1KQ_hu_972c3ea6e84eb429.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;88&#34;
		data-flex-basis=&#34;212px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1NU84CkNj9stAoCGxHSGUw.png&#34;
	width=&#34;916&#34;
	height=&#34;218&#34;
	srcset=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1NU84CkNj9stAoCGxHSGUw_hu_68cffa45d72fe459.png 480w, https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1NU84CkNj9stAoCGxHSGUw_hu_1cabe4a793d65c59.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;420&#34;
		data-flex-basis=&#34;1008px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;You get the gist. At least you won’t have to create all the actions manually.&lt;/p&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary
&lt;/h3&gt;&lt;p&gt;Even though it took me days to finally get this right, I had so much fun building this. Besides that, I also learned a lot of new stuff about Power Automate. In fact, this was the very first parallel branch I ever built. It’s awesome that Adaptive Card in Teams now support media. I think this is a really great example of how powerful Adaptive Cards can be. They not only look beautiful, but they also provide a fantastic user experience since users will be able to interact with them directly in Teams.&lt;/p&gt;
&lt;p&gt;I’d be lying if I said that I wasn’t a little proud of the flow and process I built. The only thing I’m still missing with this solution is to be able to create Teams deep links which also specify which outbound caller id should be used when a call back link is clicked. Wouldn’t it just be great if we could say that users should always use the queue’s/attendant’s phone number when they call somebody back from a voicemail card?&lt;/p&gt;
&lt;p&gt;What’s funny is that the Teams mobile apps actually prompt users which have multiple calling line identities assigned to select an identity before the call is made.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1rI1ZJKlVVJ1J6E0PPhrg.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1rI1ZJKlVVJ1J6E0PPhrg_hu_2bb9d93d996b8ad1.png 480w, https://heusser.pro/p/the-ultimate-teams-shared-voicemail-solution-5dd2ce57facc/1rI1ZJKlVVJ1J6E0PPhrg_hu_8fc425194d8f16f7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;As you can tell, I’m pretty excited about all of this. I hope you like it too and that you can implement it for your users or customers as well.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Clear Teams 2.1 Cache (Windows 11)</title>
        <link>https://heusser.pro/p/clear-teams-2-1-cache-windows-11-be3e76ff6ea2/</link>
        <pubDate>Fri, 01 Dec 2023 18:39:59 +0000</pubDate>
        
        <guid>https://heusser.pro/p/clear-teams-2-1-cache-windows-11-be3e76ff6ea2/</guid>
        <description>&lt;p&gt;Microsoft has &lt;a class=&#34;link&#34; href=&#34;https://techcommunity.microsoft.com/t5/microsoft-teams-blog/announcing-general-availability-of-the-new-microsoft-teams-app/ba-p/3934603&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;announced&lt;/a&gt; that anybody that’s still using Teams Classic (old Teams) will be updated to Teams 2.1 (new Teams) after &lt;strong&gt;&lt;em&gt;March 31, 2024&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;As more and more people start to use the new Teams, it’s time to explore how the client cache for Teams 2.1 can be cleared on Windows devices.&lt;/p&gt;
&lt;p&gt;As of writing this article, the official &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/microsoftteams/troubleshoot/teams-administration/clear-teams-cache#clear-teams-cache-in-windows&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Microsoft Learn article&lt;/a&gt; still only includes the procedure for Teams classic. In today’s blog, I’m going to show you how you can clear the cache for Teams 2.1&lt;/p&gt;
&lt;h4 id=&#34;clear-the-cache-via-windowssettings&#34;&gt;Clear the Cache via Windows Settings
&lt;/h4&gt;&lt;p&gt;The easiest way is to just go to Windows Settings (&lt;code&gt;Win + I&lt;/code&gt; ) and go to &lt;strong&gt;Apps &amp;gt; Installed Apps&lt;/strong&gt;. Either scroll down and find &lt;strong&gt;Microsoft Teams (work or school)&lt;/strong&gt; or search for it. Once you’ve found it, click on the &lt;strong&gt;three dots&lt;/strong&gt; and then &lt;strong&gt;Advanced options.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/clear-teams-2-1-cache-windows-11-be3e76ff6ea2/15ofSHXw8dflKuPlFyqFSg.png&#34;
	width=&#34;1544&#34;
	height=&#34;509&#34;
	srcset=&#34;https://heusser.pro/p/clear-teams-2-1-cache-windows-11-be3e76ff6ea2/15ofSHXw8dflKuPlFyqFSg_hu_e2b57fece06e3b79.png 480w, https://heusser.pro/p/clear-teams-2-1-cache-windows-11-be3e76ff6ea2/15ofSHXw8dflKuPlFyqFSg_hu_6425ea530306139b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;303&#34;
		data-flex-basis=&#34;728px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Scroll down to &lt;strong&gt;Reset&lt;/strong&gt; and click &lt;strong&gt;Reset&lt;/strong&gt; and then click &lt;strong&gt;Reset&lt;/strong&gt; again.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/clear-teams-2-1-cache-windows-11-be3e76ff6ea2/1toZFbI9H3d2kceqzA8zg.png&#34;
	width=&#34;858&#34;
	height=&#34;353&#34;
	srcset=&#34;https://heusser.pro/p/clear-teams-2-1-cache-windows-11-be3e76ff6ea2/1toZFbI9H3d2kceqzA8zg_hu_24f3f2f9bcb6252.png 480w, https://heusser.pro/p/clear-teams-2-1-cache-windows-11-be3e76ff6ea2/1toZFbI9H3d2kceqzA8zg_hu_730f8fc4424e7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;243&#34;
		data-flex-basis=&#34;583px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This will remove all the cached files &lt;strong&gt;including custom backgrounds&lt;/strong&gt; from the folder below.&lt;/p&gt;
&lt;p&gt;%LOCALAPPDATA%\Packages\MSTeams_8wekyb3d8bbwe&lt;/p&gt;
&lt;h4 id=&#34;clear-the-cache-via-powershell&#34;&gt;Clear the Cache via PowerShell
&lt;/h4&gt;&lt;p&gt;I’ve created a PowerShell script which will automatically close Teams, clear the cache &lt;strong&gt;but keep custom backgrounds&lt;/strong&gt; and start Teams automatically again.&lt;/p&gt;
&lt;p&gt;The script works for both versions of Teams. It will only clear the cache of the Teams version that’s running when the script is launched.&lt;/p&gt;
&lt;p&gt;The cache of Teams Classic is located in the folder listed below.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%APPDATA%\\Roaming\\Microsoft\\Teams&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Custom backgrounds must be stored in the folders below to be retained.&lt;/p&gt;
&lt;p&gt;Teams 2.1: &lt;code&gt;%LOCALAPPDATA%\Packages\\MSTeams\_8wekyb3d8bbwe\LocalCache\\Microsoft\MSTeams\\Backgrounds\Uploads&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Teams Classic: &lt;code&gt;%APPDATA%\Roaming\Microsoft\Teams\Backgrounds\Uploads&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here’s the script.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/20827afeeb9b76ac0b9b08768cb131af.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;I hope this helps.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Teams Phone Number Management List Part 3</title>
        <link>https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/</link>
        <pubDate>Thu, 16 Nov 2023 10:30:16 +0000</pubDate>
        
        <guid>https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/</guid>
        <description>&lt;p&gt;I think it’s safe to say by now that this project has been a success. I’ve received lots of positive feedback about this from the community.&lt;/p&gt;
&lt;p&gt;That didn’t stop me from going even further and adding more features to this project though.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1VrXnQeg6wj3KJYetSCXQ.png&#34;
	width=&#34;1080&#34;
	height=&#34;1080&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1VrXnQeg6wj3KJYetSCXQ_hu_e1d6baea0fece90e.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1VrXnQeg6wj3KJYetSCXQ_hu_5322f738578521d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;new-features-and-improvements&#34;&gt;New Features and Improvements
&lt;/h3&gt;&lt;h4 id=&#34;localized--formatted-phonenumbers&#34;&gt;Localized / Formatted Phone Numbers
&lt;/h4&gt;&lt;p&gt;As you may know by now, I consider myself a data driven guy. What I really dig about Teams phone is the fact that every number is a full E.164 number in every case. This kind of absoluteness provides great safety because each number is unique. Just as with user principal names or GUIDs, there’s no funny business going on.&lt;/p&gt;
&lt;p&gt;That safety comes at the cost of readability though. If you’ve seen &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/prettify-and-sync-teams-phone-numbers-to-azure-ad-e973755f83d5&#34; &gt;this&lt;/a&gt; article before, then you already know that I came up with a solution to format phone numbers in their local format using Python.&lt;/p&gt;
&lt;p&gt;The runbook logic powering the list can now also leverage Python to store the formatted phone number in an additional column. This way you always have both, the E.164 number and a prettified version of it readily available.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1eH5p9VVDZ9zlnSfb0G9A.png&#34;
	width=&#34;999&#34;
	height=&#34;488&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1eH5p9VVDZ9zlnSfb0G9A_hu_7022d15e6eeaa66.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1eH5p9VVDZ9zlnSfb0G9A_hu_f4668b82a68aff8d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;204&#34;
		data-flex-basis=&#34;491px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;For US numbers or numbers from other countries such as Japan or Israel which typically use hyphens, you might have noticed that I’m removing the hyphens, even though they’re included after a number has been formatted using the phonenumbers library. I do this so that every number in the list contains only digits and a plus sign. Also, it’s how Teams Admin Center displays the numbers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1eq5k3nw1Nd6nFTUTjoxFQ.png&#34;
	width=&#34;1670&#34;
	height=&#34;123&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1eq5k3nw1Nd6nFTUTjoxFQ_hu_bc50ccfd5441646d.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1eq5k3nw1Nd6nFTUTjoxFQ_hu_c7113618fa5125fc.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1357&#34;
		data-flex-basis=&#34;3258px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;write-back-teams-phone-number-to-entraid&#34;&gt;Write back Teams Phone Number to Entra ID
&lt;/h4&gt;&lt;p&gt;When you view a user’s profile card in Teams, Outlook or anywhere else in Microsoft 365, it doesn’t display the phone number which is actually configured as &lt;strong&gt;LineURI&lt;/strong&gt; in Teams. Instead, the information is taken from Entra ID. I’ve created a variable inside the runbook which controls if the &lt;strong&gt;BusinessPhones&lt;/strong&gt; property of Entra ID users should be set to the assigned &lt;strong&gt;LineUri&lt;/strong&gt; in Teams. I’ll explain how to turn this &lt;strong&gt;on&lt;/strong&gt; or &lt;strong&gt;off&lt;/strong&gt; later in this article.&lt;/p&gt;
&lt;p&gt;With the current permissions/scopes assigned to the Entra ID App registration, this only works for users which don’t have any administrator roles assigned in Entra ID. If a user has an admin role, you’ll get an error.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1raGaYRAkmtuYw6eis0Y9A.png&#34;
	width=&#34;1677&#34;
	height=&#34;150&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1raGaYRAkmtuYw6eis0Y9A_hu_89f4a19b579804a0.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1raGaYRAkmtuYw6eis0Y9A_hu_8a85757495e0ae5a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1118&#34;
		data-flex-basis=&#34;2683px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;previous-usercolumn&#34;&gt;Previous User Column
&lt;/h4&gt;&lt;p&gt;I’ve added a new column which shows the UPN of the previous user/owner of a number after it has been removed. This is achieved by an update I made to the Power Automate Flow. Note that the flow will now also retain the value of the &lt;strong&gt;Comment&lt;/strong&gt; column.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1BEWqNsDCKrY0BOBbMc9tkg.png&#34;
	width=&#34;1455&#34;
	height=&#34;255&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1BEWqNsDCKrY0BOBbMc9tkg_hu_9420fcbe4ade5972.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1BEWqNsDCKrY0BOBbMc9tkg_hu_5cfca7fa890d7c20.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;570&#34;
		data-flex-basis=&#34;1369px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The reason for this column is that you have a better overview over who has previously used a number. I’m sure you don’t want to assign the previous CEO’s number to a new intern.&lt;/p&gt;
&lt;h4 id=&#34;unassigned-routingrules&#34;&gt;Unassigned Routing Rules
&lt;/h4&gt;&lt;p&gt;When people leave, we sometimes want to forward their unassigned number to another person in the company or to the main number. This is done by routing rules. But do we typically remember or even know that such rules have been created in the past…? Now we do!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1mazY1aTB8fOWSqHcKsnSrA.png&#34;
	width=&#34;2160&#34;
	height=&#34;518&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1mazY1aTB8fOWSqHcKsnSrA_hu_b4080f47867d04a3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1mazY1aTB8fOWSqHcKsnSrA_hu_95ed7411c80aaf45.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;416&#34;
		data-flex-basis=&#34;1000px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Every number is checked against all routing rules a tenant has configured and if there are any matches, they’re reflected on the list. The name of the matching rule gets stored in the &lt;strong&gt;User Name&lt;/strong&gt; column. (Because this column isn’t used for the flow trigger condition.)&lt;/p&gt;
&lt;p&gt;This even works if a number is reserved. In this case, the status will be changed to &lt;strong&gt;Reserved (Routing Rule)&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1nLAAAS1BoTH5RfGGN788Q.png&#34;
	width=&#34;1767&#34;
	height=&#34;615&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1nLAAAS1BoTH5RfGGN788Q_hu_47c0c548165f9e87.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1nLAAAS1BoTH5RfGGN788Q_hu_2585d3cded3f7066.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;287&#34;
		data-flex-basis=&#34;689px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;improved-number-assignment-capabilities&#34;&gt;Improved Number Assignment Capabilities
&lt;/h4&gt;&lt;p&gt;I’ve also made some improvements to assigning numbers. If a number has a status of &lt;strong&gt;Reserved (Routing Rule)&lt;/strong&gt; or &lt;strong&gt;Assignment Error&lt;/strong&gt;, the script will try to assign the number as well. In the case of an assignment error, the script will try to assign the number again with each new job. This is helpful in scenarios where e.g. a license hasn’t been assigned yet.&lt;/p&gt;
&lt;p&gt;Furthermore, you can now also reserve a number and enter the user’s UPN in the &lt;strong&gt;User Principal Name&lt;/strong&gt; column. This is great if the account does not exist yet (so you can’t fill in the &lt;strong&gt;User Profile&lt;/strong&gt;) but you already know the UPN of a soon to be created user. All of these changes make it easier for you to plan ahead and have the runbook take care of everything automatically, once a user has been created and licensed.&lt;/p&gt;
&lt;h4 id=&#34;operator-column&#34;&gt;Operator Column
&lt;/h4&gt;&lt;p&gt;Last but not least, the list now also displays the name of the &lt;strong&gt;Operator&lt;/strong&gt;. This works for all types, including &lt;strong&gt;Direct Routing&lt;/strong&gt;. You will have to manually list the operator name for each Direct Routing number in your source CSV though.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1uGIXZRh99eE0prMLPkLnA.png&#34;
	width=&#34;1874&#34;
	height=&#34;612&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1uGIXZRh99eE0prMLPkLnA_hu_16931b902547c67.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1uGIXZRh99eE0prMLPkLnA_hu_ca26602676017de3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;306&#34;
		data-flex-basis=&#34;734px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;updating-all-the-components&#34;&gt;Updating All the Components
&lt;/h3&gt;&lt;p&gt;I will most likely update the deployment script at some point to deploy everything from scratch including all the updates. If I can find enough time, I may also create an update script to update an existing deployment.&lt;/p&gt;
&lt;p&gt;But today, I’ll show you how to implement all the changes manually in an existing deployment which consists of an Azure automation account, a list, a flow and your local source files.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To do these steps, you should have followed and deployed everything as described in&lt;/strong&gt; &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf&#34; &gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;article and implemented all the updates described in&lt;/strong&gt; &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a&#34; &gt;&lt;strong&gt;this&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;article.&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;add-newcolumns&#34;&gt;Add New Columns
&lt;/h4&gt;&lt;p&gt;Add the following columns to the SharePoint list. All columns must be of type &lt;strong&gt;text&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comment&lt;/li&gt;
&lt;li&gt;Previous User&lt;/li&gt;
&lt;li&gt;Operator&lt;/li&gt;
&lt;li&gt;Phone Number&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;add-the-phonenumbers-python-package-to-the-automation-account&#34;&gt;Add the phonenumbers Python Package to the Automation Account
&lt;/h4&gt;&lt;p&gt;Go to &lt;a class=&#34;link&#34; href=&#34;https://pypi.org/project/phonenumbers/#files&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; website and download the built distribution (*.whl) file to your PC. Then go to your automation account in Azure Portal and upload the file under &lt;strong&gt;Python packages&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1g7hFFDAp9c6HwdMFUIimw.png&#34;
	width=&#34;1298&#34;
	height=&#34;655&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1g7hFFDAp9c6HwdMFUIimw_hu_da60db5a0d3062c8.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1g7hFFDAp9c6HwdMFUIimw_hu_90f9106826f60567.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;198&#34;
		data-flex-basis=&#34;475px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;add-automation-variables-to-automation-account&#34;&gt;Add Automation Variables to Automation Account
&lt;/h4&gt;&lt;p&gt;Add the following variables to your automation account. Since you’ll need to enter a value, just type a dot (“.”). Leave the integer value at 0.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;TeamsPhoneNumberOverview_AllCsOnlineNumbers (String)&lt;/li&gt;
&lt;li&gt;TeamsPhoneNumberOverview_PrettyNumbers (String)&lt;/li&gt;
&lt;li&gt;TeamsPhoneNumberOverview_TotalNumberCount (Integer)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1A6uNqGeSwBjpEuMGTuhw.png&#34;
	width=&#34;1524&#34;
	height=&#34;842&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1A6uNqGeSwBjpEuMGTuhw_hu_50edc387662a538b.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1A6uNqGeSwBjpEuMGTuhw_hu_7f11e91cb8c7947b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;180&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;add-operator-info-to-your-direct-routingnumbers&#34;&gt;Add Operator info to your Direct Routing Numbers
&lt;/h4&gt;&lt;p&gt;If you have direct routing numbers, you’ll need to update your source list. The old structure only had one column called &lt;strong&gt;PhoneNumber&lt;/strong&gt;. Now there’s &lt;strong&gt;PhoneNumber&lt;/strong&gt; and &lt;strong&gt;Operator&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;PhoneNumber;Operator&lt;br&gt;
4144520xxxx;Test Provider 1&lt;br&gt;
4144512xxxx;Test Provider 2&lt;br&gt;
4144512xxxx;Test Provider 3&lt;/p&gt;
&lt;p&gt;Place your updated CSV in &lt;code&gt;.\Resources\DirectRoutingNumbers-V2.csv&lt;/code&gt; and then run &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Setup/UpdateDirectRoutingNumbers-V2.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; script to update your automation variable in Azure.&lt;/p&gt;
&lt;p&gt;Alternatively, you can also run the below code and paste the content into your &lt;code&gt;TeamsPhoneNumberOverview_DirectRoutingNumbers&lt;/code&gt; automation variable.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;&amp;rsquo;&amp;rdquo; + (Import-Csv -Path .\Resources\DirectRoutingNumbers-V2.csv -Delimiter &amp;ldquo;;&amp;rdquo; | ConvertTo-Json | Out-String) + &amp;ldquo;&amp;rsquo;&amp;rdquo; | Set-Clipboard&lt;/p&gt;
&lt;h4 id=&#34;create-a-pythonrunbook&#34;&gt;Create a Python Runbook
&lt;/h4&gt;&lt;p&gt;Go to your runbooks in your automation account and click &lt;strong&gt;Create a runbook&lt;/strong&gt;. Name it &lt;code&gt;Format-TeamsPhoneNumbers&lt;/code&gt; and choose &lt;strong&gt;Python&lt;/strong&gt; as runbook type and &lt;strong&gt;3.10 (preview)&lt;/strong&gt; as runtime version.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1rgIq7gWJ29Wa9rBctif0A.png&#34;
	width=&#34;1226&#34;
	height=&#34;590&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1rgIq7gWJ29Wa9rBctif0A_hu_6d39c1ba538bfa2.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1rgIq7gWJ29Wa9rBctif0A_hu_1adbd065aeddfe1b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;207&#34;
		data-flex-basis=&#34;498px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Grab &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Functions/Format-TeamsPhoneNumbers.py&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; code and paste it into the Azure portal. Save and publish the runbook.&lt;/p&gt;
&lt;h4 id=&#34;setup-a-managed-identity-and-permissions&#34;&gt;Setup a Managed Identity and Permissions
&lt;/h4&gt;&lt;p&gt;Every time the main runbook runs, it will check if the total number count is still the same by comparing the current count to the count of the previous job which is stored in the &lt;strong&gt;TeamsPhoneNumberOverview_TotalNumberCount&lt;/strong&gt; variable. If the count of numbers is different compared to the previous job, the main runbook will start the python runbook. The python runbook will use the phonenumbers library to format all your phone numbers to their localized format.&lt;/p&gt;
&lt;p&gt;However, we must first allow the runbook to start another runbook job using a managed identity. In the automation account, go to &lt;strong&gt;Identity&lt;/strong&gt; and flip the toggle switch for &lt;strong&gt;System assigned&lt;/strong&gt; (managed identity) to &lt;strong&gt;On&lt;/strong&gt;. Then click &lt;strong&gt;Save&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1EDBRytpBpi8HYFN2kwiLdA.png&#34;
	width=&#34;2113&#34;
	height=&#34;500&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1EDBRytpBpi8HYFN2kwiLdA_hu_d7e0811a4bd90c1b.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1EDBRytpBpi8HYFN2kwiLdA_hu_c36238ca86dbb4ce.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;422&#34;
		data-flex-basis=&#34;1014px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Click &lt;strong&gt;Azure role assignments&lt;/strong&gt; and then &lt;strong&gt;Add role assignment (Preview)&lt;/strong&gt;. Set the scope to &lt;strong&gt;Resource group&lt;/strong&gt;, select your subscription and resource group and choose &lt;strong&gt;Automation Operator&lt;/strong&gt; as role.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1gnhE04XQSUDcagh8wASow.png&#34;
	width=&#34;1256&#34;
	height=&#34;504&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1gnhE04XQSUDcagh8wASow_hu_4dea5d254f3b494f.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1gnhE04XQSUDcagh8wASow_hu_596ddc1f1398854.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;249&#34;
		data-flex-basis=&#34;598px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Click &lt;strong&gt;Save&lt;/strong&gt;.&lt;/p&gt;
&lt;h4 id=&#34;update-the-mainrunbook&#34;&gt;Update the Main Runbook
&lt;/h4&gt;&lt;p&gt;Replace the code in the &lt;strong&gt;TeamsPhoneOverview&lt;/strong&gt; runbook with &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Scripts/TeamsPhoneNumberOverview%20-V2.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; code. &lt;strong&gt;Make sure to change the&lt;/strong&gt; &lt;code&gt;**$localTestMode**&lt;/code&gt; &lt;strong&gt;variable to&lt;/strong&gt; &lt;code&gt;**$false**&lt;/code&gt; &lt;strong&gt;before you save and publish the runbook. Also update the names of your automation account and resource group on lines 95–97.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1Szx2vDwh4929HXR4DPp4MA.png&#34;
	width=&#34;522&#34;
	height=&#34;79&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1Szx2vDwh4929HXR4DPp4MA_hu_1f096338280888cb.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1Szx2vDwh4929HXR4DPp4MA_hu_3d29e348e84512f4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;660&#34;
		data-flex-basis=&#34;1585px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you don’t want to write back user’s &lt;strong&gt;LineURIs&lt;/strong&gt; to Entra ID &lt;strong&gt;BusinessPhones&lt;/strong&gt;, change &lt;code&gt;syncTeamsPhoneNumbersToEntraIdBusinessPhones&lt;/code&gt; to &lt;code&gt;$false&lt;/code&gt; on line 6.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1MFWbPjRVqUjXwHAw5HdDZg.png&#34;
	width=&#34;415&#34;
	height=&#34;20&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1MFWbPjRVqUjXwHAw5HdDZg_hu_864f8be38dfd4cf1.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1MFWbPjRVqUjXwHAw5HdDZg_hu_b92fbcc2dcdcdffd.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;2075&#34;
		data-flex-basis=&#34;4980px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;update-theflow&#34;&gt;Update the Flow
&lt;/h4&gt;&lt;p&gt;Finally, go to your flow and make the last small changes. In here, add the values for the new columns that we created. If you need a refresher, this is the part where the flow deletes numbers which were unassigned because there’s no way to remove the user profile. We then recreate the list entry with all the information &lt;strong&gt;except&lt;/strong&gt; the &lt;strong&gt;User Profile Claims&lt;/strong&gt;. Because the user profile stays, we can use the &lt;strong&gt;User Profile Email&lt;/strong&gt; and write it to the &lt;strong&gt;Previous User&lt;/strong&gt; column. Comments in the comment field will also be added again, once a deleted entry has been recreated.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1BvLOlUfRBHAr1IFNxm7tYg.png&#34;
	width=&#34;929&#34;
	height=&#34;1374&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1BvLOlUfRBHAr1IFNxm7tYg_hu_9f1ae3b393ae527b.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-3-e083a320004d/1BvLOlUfRBHAr1IFNxm7tYg_hu_8dfa75a1b319817b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;67&#34;
		data-flex-basis=&#34;162px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;update-the-flow-trigger-condition&#34;&gt;Update the Flow Trigger Condition
&lt;/h4&gt;&lt;p&gt;The current trigger condition checks if a user’s email address is equal to the user principal name. As much as I want this to always be the case, the reality is sometimes different. Some readers have reported that their Flow gets stuck in an infinite trigger loop because of that.&lt;/p&gt;
&lt;p&gt;I’ve slightly tweaked the trigger condition, so it doesn’t compare the email address to the UPN anymore. Instead, the UPN is extracted from the user profile using a split operation and then compared to the UPN from the list column. Here’s the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Resources/FlowTriggerConditionRobustUpn.txt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;updated trigger condition&lt;/a&gt;. Make sure to update it on your flow as well as it will be more robust than the old one.&lt;/p&gt;
&lt;p&gt;@or(&lt;br&gt;
and(&lt;br&gt;
not(equals(triggerOutputs()?[&amp;lsquo;body/User_x0020_Principal_x0020_Name&amp;rsquo;], &amp;lsquo;Unassigned&amp;rsquo;)),&lt;br&gt;
not(contains(triggerBody(), &amp;lsquo;UserProfile&amp;rsquo;))&lt;br&gt;
),&lt;br&gt;
not(equals(toLower(triggerOutputs()?[&amp;lsquo;body/User_x0020_Principal_x0020_Name&amp;rsquo;]), split(toLower(triggerOutputs()?[&amp;lsquo;body/UserProfile&amp;rsquo;][&amp;lsquo;Claims&amp;rsquo;]),&amp;rsquo;|&amp;rsquo;)[2])),&lt;br&gt;
and(&lt;br&gt;
contains(triggerBody(), &amp;lsquo;UserProfile&amp;rsquo;),&lt;br&gt;
not(equals(triggerOutputs()?[&amp;lsquo;body/User_x0020_Principal_x0020_Name&amp;rsquo;], &amp;lsquo;Unassigned&amp;rsquo;)),&lt;br&gt;
not(contains(triggerBody(), &amp;lsquo;TeamsAdminCenter&amp;rsquo;))&lt;br&gt;
)&lt;br&gt;
)&lt;/p&gt;
&lt;p&gt;That’s all. If you’ve followed all the steps, you should now be able to make use of all the new features I created. Like I said, I’ll try to find some time and create a new deployment script which deploys the version 2 from scratch. I hope you enjoy the list as much as I do.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Advanced Teams Auto Attendant Troubleshooting</title>
        <link>https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/</link>
        <pubDate>Tue, 07 Nov 2023 13:41:33 +0000</pubDate>
        
        <guid>https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/</guid>
        <description>&lt;p&gt;It’s that time of the year again. The holidays are right around the corner. Which begs the question: &lt;strong&gt;&lt;em&gt;Did you update the holiday schedules for your Teams Auto Attendants already? And if so, are you sure they’re configured correctly?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/0y1IZwOr6MkdJ2v48.jpg&#34;
	width=&#34;1024&#34;
	height=&#34;1024&#34;
	srcset=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/0y1IZwOr6MkdJ2v48_hu_d8d12f7257a9aa9a.jpg 480w, https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/0y1IZwOr6MkdJ2v48_hu_189ef7faa5c6953f.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;No? Me neither. But I do remember that I wrote a comprehensive guide about &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743&#34; &gt;&lt;strong&gt;Everything You Ever Wanted to Know About Teams Holidays&lt;/strong&gt;&lt;/a&gt; about a year ago. This is a great resource to read up on some of my personal best practices and some lesser-known things about Teams Holidays and how they work.&lt;/p&gt;
&lt;p&gt;If you’d rather outsource this to end users for next year, &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471&#34; &gt;this&lt;/a&gt; article might be interesting to you as well.&lt;/p&gt;
&lt;h4 id=&#34;what-is-todays-blog-post-allabout&#34;&gt;What is today’s blog post all about?
&lt;/h4&gt;&lt;p&gt;I recently built a very large &lt;strong&gt;&lt;em&gt;follow the sun&lt;/em&gt;&lt;/strong&gt; type of call flow which consists of about ten different Auto Attendants and Call Queues. Each Auto Attendant has different business hours, and many Auto Attendants have a different time zone configured as well. This can get quite complicated to build, verify and troubleshoot. How can something like this be tested and verified that it works as intended?&lt;/p&gt;
&lt;p&gt;Since this was not live yet, I started out by adding a greeting to each Call Queue which said the name of the Queue whenever a call was routed to a Call Queue. Then I just made a couple of test calls during the day to see if calls were routed to the correct Queue.&lt;/p&gt;
&lt;p&gt;But then I thought of something much better. I’ve already got the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;M365 Call Flow Visualizer&lt;/a&gt; script in place which is capable of reading all nested voice apps recursively from any starting point. I only had to code some additional stuff to check whether an Auto Attendant is currently in business hours, after hours or in a holiday schedule. The best part about this is that it works for any date. Past, present and future. And of course, any date and time is converted to the time zone which is configured on each Auto Attendant in your call flow. Just as if you would call the Auto Attendant.&lt;/p&gt;
&lt;h4 id=&#34;demo-callflow&#34;&gt;Demo Call Flow
&lt;/h4&gt;&lt;p&gt;This is the demo call flow I’ll be using to demonstrate and explain the new feature. Nothing crazy, just an Auto Attendant with two holiday call handlings and schedules and some business hours.&lt;/p&gt;
&lt;p&gt;Note that the Auto Attendant is configured in &lt;strong&gt;Pacific Standard Time&lt;/strong&gt; while I live in &lt;strong&gt;W. Europe Standard Time&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1fiPIdMocTgqdYRHlZE1kw.png&#34;
	width=&#34;7840&#34;
	height=&#34;20020&#34;
	srcset=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1fiPIdMocTgqdYRHlZE1kw_hu_9d8abf78408af3b0.png 480w, https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1fiPIdMocTgqdYRHlZE1kw_hu_1a6ac0c40aafb59d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;39&#34;
		data-flex-basis=&#34;93px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;how-to-check-business-hours-andholidays&#34;&gt;How to Check Business Hours and Holidays
&lt;/h3&gt;&lt;p&gt;To check if any Auto Attendant is currently in business hours or after hours or in a holiday schedule, simply run the M365 CFV script with the switch parameter &lt;code&gt;-CheckCallFlowRouting&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;Note that the&lt;code&gt;-CheckCallFlowRouting&lt;/code&gt; parameter is not mutually exclusive from the Visualizer. You can generate a diagram and check business hours/holiday in the same script run.&lt;/p&gt;
&lt;p&gt;. .\M365CallFlowVisualizerV2.ps1 -CheckCallFlowRouting -Identity edde8e13-1a73-434b-a724-xxxxxxxxxxxx&lt;/p&gt;
&lt;p&gt;This will use your local system time and convert it to whatever time zone is set on the Auto Attendant. The script will output the local and the Auto Attendant time and time zones.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/18EknlCjKIUMexJCdJGpDHQ.png&#34;
	width=&#34;1645&#34;
	height=&#34;209&#34;
	srcset=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/18EknlCjKIUMexJCdJGpDHQ_hu_2ceddb63c89c033c.png 480w, https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/18EknlCjKIUMexJCdJGpDHQ_hu_26d5302fe16be08c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;787&#34;
		data-flex-basis=&#34;1888px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;As you can see, it’s already &lt;strong&gt;Tuesday&lt;/strong&gt; in Switzerland but it’s still &lt;strong&gt;Monday&lt;/strong&gt; in Pacific Standard Time. Since the business hours for Monday are only configured to &lt;strong&gt;17:45 PST&lt;/strong&gt; the Auto Attendant is closed.&lt;/p&gt;
&lt;p&gt;Further down in the output, we’ll see the information about holidays as well. In this case, the Auto Attendant has actually multiple holidays which match my local date and time. While an Auto Attendant can’t have two holidays with the same start date, it’s possible to have holidays which enclose others and/or have the same end date. In that case, the holiday which is most precise (smallest time range) will be active. (This is also explained in the &lt;em&gt;Everything You Ever Wanted to Know About Teams Holidays&lt;/em&gt; article linked at the beginning of this post.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1TH5IO8IG0dZ33HdI6t4vRA.png&#34;
	width=&#34;2264&#34;
	height=&#34;645&#34;
	srcset=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1TH5IO8IG0dZ33HdI6t4vRA_hu_e60d89aaaf65334c.png 480w, https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1TH5IO8IG0dZ33HdI6t4vRA_hu_f53f4ae53dcb05d1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;351&#34;
		data-flex-basis=&#34;842px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In PST, it’s still Monday, November 6th and there are three holidays starting on this date. One starts at &lt;code&gt;00:00:00&lt;/code&gt; one at &lt;code&gt;17:15:00&lt;/code&gt; and one at &lt;code&gt;17:30:00&lt;/code&gt; . The time in PST is currently &lt;code&gt;23:50:00&lt;/code&gt; so it’s already past all start times of the aforementioned holidays which means, the one starting at &lt;code&gt;17:30:00&lt;/code&gt; is the currently active one, because its start time is closest to the current time. You can see the name of the active holiday call handling and holiday schedule in the output. But that’s not all. You can also see that it lists the actual time range of the schedule on the line which starts with &lt;code&gt;Holiday Schedule:&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;If nobody can answer a call, during business hours, after hours, this demo Auto Attendant (&lt;strong&gt;USA Toll Free Test&lt;/strong&gt;) just forwards to another Auto Attendant called &lt;strong&gt;Main Number Busy AA&lt;/strong&gt; which will just play a greeting and disconnect. This Auto Attendant does not have any business hours or holidays configured, which is also visible in the console output when the &lt;code&gt;-CheckCallFlowRouting&lt;/code&gt; switch is used.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1ivagCv8KIVIHLMSGyABkXA.png&#34;
	width=&#34;2276&#34;
	height=&#34;206&#34;
	srcset=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1ivagCv8KIVIHLMSGyABkXA_hu_8581e3ce92ea81c5.png 480w, https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1ivagCv8KIVIHLMSGyABkXA_hu_9a5f8826b872916b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1104&#34;
		data-flex-basis=&#34;2651px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It even tells you that it’s a nested Auto Attendant and which was the initially queried Auto Attendant.&lt;/p&gt;
&lt;h4 id=&#34;advanced-check&#34;&gt;Advanced Check
&lt;/h4&gt;&lt;p&gt;Obviously, we won’t always have the time or the patience to stay up all night just to verify that business hours or holidays are configured correctly on an Auto Attendant which serves customers on the other end of the world.&lt;/p&gt;
&lt;p&gt;To check the call flow routing for any specific date we can just pass an additional parameter to the script. &lt;strong&gt;It doesn’t matter if the date lies in the past or in the future.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-CheckCallFlowRouting -CheckCallFlowRoutingSpecificDate &amp;quot;07.11.2024 17:00:01&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The only thing you need to consider is that you need to enter it in a format which is expected by your system. This depends on your regional settings in Windows.&lt;/p&gt;
&lt;p&gt;For me that would be &lt;code&gt;dd.MM.yyyy HH:mm:ss&lt;/code&gt; . You can test this using the following code.&lt;/p&gt;
&lt;p&gt;Get-Date -Date &amp;ldquo;08.11.2023 17:00:01&amp;rdquo;&lt;/p&gt;
&lt;p&gt;If you for example, typically use &lt;code&gt;MM/dd/yyyy HH:mm:ss&lt;/code&gt; you have to specify it like this.&lt;/p&gt;
&lt;p&gt;Get-Date -Date &amp;ldquo;11/08/2023 17:00:01&amp;rdquo;&lt;/p&gt;
&lt;p&gt;As long as this doesn’t throw an error and the returned date is correct, you should be fine.&lt;/p&gt;
&lt;p&gt;When I queried the Auto Attendant in the first example it was &lt;code&gt;08:50:00&lt;/code&gt; in my local time. Now, I’m going to query the same Auto Attendant again but this time, I’m specifying a date and time which was &lt;strong&gt;7 hours&lt;/strong&gt; before at &lt;code&gt;07.11.2023 01:50:00&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;. .\M365CallFlowVisualizerV2.ps1 -CheckCallFlowRouting -Identity edde8e13-1a73-434b-a724-xxxxxxxxxxxx -CheckCallFlowRoutingSpecificDateTime &amp;ldquo;07.11.2023 01:50:00&amp;rdquo;&lt;/p&gt;
&lt;p&gt;At this time, which is &lt;code&gt;16:50:00&lt;/code&gt; in PST, the Auto Attendant was still open. Even though there are multiple schedules configured for Monday (which are also listed in the output) the script is still able to determine which time range from the Monday schedule is the currently active one.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1LvC58oq2DdhSty9qGzEeg.png&#34;
	width=&#34;1663&#34;
	height=&#34;236&#34;
	srcset=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1LvC58oq2DdhSty9qGzEeg_hu_6a2d631ce0641cdf.png 480w, https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1LvC58oq2DdhSty9qGzEeg_hu_55b6f3eb7d16c9cb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;704&#34;
		data-flex-basis=&#34;1691px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;And because it’s not &lt;code&gt;17:15:00&lt;/code&gt; or &lt;code&gt;17:30:00&lt;/code&gt; in PST yet, there are only two matching holiday schedules returned now.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/10kkp2EAk917jOWxqftxcfA.png&#34;
	width=&#34;2270&#34;
	height=&#34;583&#34;
	srcset=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/10kkp2EAk917jOWxqftxcfA_hu_e61eba580afeac8f.png 480w, https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/10kkp2EAk917jOWxqftxcfA_hu_647ed8366d669c02.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;389&#34;
		data-flex-basis=&#34;934px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Let’s check what happens if we query it again after the holiday on &lt;strong&gt;18.11.2023&lt;/strong&gt; has ended. Pacific Standard Time is currently -9 hours from W. Europe Standard Time. So, I need to check for &lt;code&gt;18.11.2023&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;If I check for &lt;code&gt;18.11.2023 00:00:00&lt;/code&gt; it’s still in the holiday schedule.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/17hQxglSj5V9eOGQ4rtzw.png&#34;
	width=&#34;1634&#34;
	height=&#34;299&#34;
	srcset=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/17hQxglSj5V9eOGQ4rtzw_hu_ce1d4de6cde1bc2.png 480w, https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/17hQxglSj5V9eOGQ4rtzw_hu_4ce8d041899c98c8.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;546&#34;
		data-flex-basis=&#34;1311px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;But if I check for &lt;code&gt;18.11.2023 00:00:01&lt;/code&gt; the holiday is over, but since this is a Saturday, the Auto Attendant is closed because of business hours anyway.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1oXnJNbrAq0Fp6yzadsQiA.png&#34;
	width=&#34;1654&#34;
	height=&#34;326&#34;
	srcset=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1oXnJNbrAq0Fp6yzadsQiA_hu_e17bdea4ce38e8a.png 480w, https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1oXnJNbrAq0Fp6yzadsQiA_hu_d8be5ea99196edea.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;507&#34;
		data-flex-basis=&#34;1217px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Let’s try Monday &lt;code&gt;20.11.2023 17:15:00.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1ZyD35XzHgy0QYEquOBL6WQ.png&#34;
	width=&#34;1668&#34;
	height=&#34;526&#34;
	srcset=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1ZyD35XzHgy0QYEquOBL6WQ_hu_8d062f08762f8205.png 480w, https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1ZyD35XzHgy0QYEquOBL6WQ_hu_10ae6152a8e50251.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;317&#34;
		data-flex-basis=&#34;761px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Looks good, the Auto Attendant is open again. However, there is one caveat. There is another holiday scheduled on &lt;strong&gt;20.11.2023&lt;/strong&gt; (which can be seen in the diagram above as well). &lt;strong&gt;Holidays always take precedence over business hours.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The M365 CFV was built in a way, where it first checks the business hours and then the holidays. So, there’s no easy way to properly reflect that in the output, because the script is unaware of possible holidays at the time it outputs the information about business hours. I’m sure it’s possible somehow but I don’t know how much work that would require.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;For now, we must accept that and just pay attention to all the output. If there’s an active holiday, business hours will be disregarded until that holiday is over.&lt;/strong&gt; On the other hand, I think it’s great to get all the information, so one could check how the call would have been routed at that date and time, if it weren’t a holiday.&lt;/p&gt;
&lt;p&gt;Let’s do one more check to see if everything will be back to normal on &lt;code&gt;21.11.2023&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1nbQvsvu4WRLHKWmVhZsBww.png&#34;
	width=&#34;2280&#34;
	height=&#34;845&#34;
	srcset=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1nbQvsvu4WRLHKWmVhZsBww_hu_bdfa05612e134802.png 480w, https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1nbQvsvu4WRLHKWmVhZsBww_hu_56c3abce7ab44b25.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;269&#34;
		data-flex-basis=&#34;647px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I set the time to &lt;code&gt;21.11.2023 23:30:00&lt;/code&gt; so that it would be &lt;code&gt;21.11.2023 14:30:00&lt;/code&gt; in PST which is covered by the second date time range on Tuesday’s schedule. Looks good to me.&lt;/p&gt;
&lt;h3 id=&#34;deep-dive-on-auto-attendant-schedules&#34;&gt;Deep Dive on Auto Attendant Schedules
&lt;/h3&gt;&lt;p&gt;There’s one more thing I want to mention. You might have noticed the &lt;code&gt;Complement: Enabled&lt;/code&gt; output in the screenshots above. This is a parameter which belongs to &lt;code&gt;New-CsOnlineSchedule&lt;/code&gt; or &lt;code&gt;Set-CsOnlineSchedule&lt;/code&gt; which is used to create/update business hours schedules for Auto Attendants. You can find the official parameter description &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/new-csonlineschedule?view=skype-ps#-complement&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/14vYbtKJq4sQwPuvSXuvYPw.png&#34;
	width=&#34;1054&#34;
	height=&#34;297&#34;
	srcset=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/14vYbtKJq4sQwPuvSXuvYPw_hu_31f24806501ef3e.png 480w, https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/14vYbtKJq4sQwPuvSXuvYPw_hu_2691417fc5ce3857.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;354&#34;
		data-flex-basis=&#34;851px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;As of writing this article, it says the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Complement parameter indicates how the schedule is used. When Complement is enabled, the schedule is used as the inverse of the provided configuration. For example, if Complement is enabled and the schedule only contains time ranges of Monday to Friday from 9AM to 5PM, then the schedule is active at all times other than the specified time ranges.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;If you think about this from looking at Teams Admin Center and how business hours are configured under &lt;strong&gt;Call flow for after hours&lt;/strong&gt; in TAC it makes sense. There is no way to configure business hours under &lt;strong&gt;Call flow&lt;/strong&gt; (which is the default call flow). So, when you configure &lt;strong&gt;Business and after hours&lt;/strong&gt;, the time ranges you define will be the times during which the default call flow is active. Outside of the configured times, the after hours call flow will be active. This is 100% in line with what the docs say for the &lt;code&gt;-Complement&lt;/code&gt; switch parameter.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1XR0AamDozStlUDLTSQugZQ.png&#34;
	width=&#34;1670&#34;
	height=&#34;1515&#34;
	srcset=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1XR0AamDozStlUDLTSQugZQ_hu_513909b7581cd289.png 480w, https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1XR0AamDozStlUDLTSQugZQ_hu_4b0db1c9ce0ccd6f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;110&#34;
		data-flex-basis=&#34;264px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It’s not possible to set &lt;code&gt;ComplementEnabled&lt;/code&gt; to &lt;code&gt;$false&lt;/code&gt; using Teams Admin Center. It’s only possible through PowerShell. This will set &lt;code&gt;ComplementEnabled&lt;/code&gt; to &lt;code&gt;$false&lt;/code&gt; on an Auto Attendant’s after hours schedule.&lt;/p&gt;
&lt;p&gt;# Define Auto Attendant&lt;br&gt;
$aaId = &amp;ldquo;b74da106-ea89-4786-b8aa-xxxxxxxxxxxx&amp;rdquo;&lt;br&gt;
$aa = Get-CsAutoAttendant -Identity $aaId&lt;/p&gt;
&lt;p&gt;# Get schedule&lt;br&gt;
$schedule = Get-CsOnlineSchedule -Id $aa.Schedules.Id&lt;/p&gt;
&lt;p&gt;# Disable ComplementEnabled&lt;br&gt;
$schedule.WeeklyRecurrentSchedule.ComplementEnabled = $false&lt;/p&gt;
&lt;p&gt;# Check value in schedule variable&lt;br&gt;
$schedule.WeeklyRecurrentSchedule&lt;/p&gt;
&lt;p&gt;# Set new (disabled) value for the schedule&lt;br&gt;
Set-CsOnlineSchedule -Instance $schedule&lt;/p&gt;
&lt;p&gt;# Check result&lt;br&gt;
$aa = Get-CsAutoAttendant -Identity $aaId&lt;br&gt;
$aa.Schedules.WeeklyRecurrentSchedule&lt;/p&gt;
&lt;p&gt;In this case, the after hours call flow will be active during the specified time ranges.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/14lvuctyk7szFS7knkmIO8g.png&#34;
	width=&#34;1177&#34;
	height=&#34;300&#34;
	srcset=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/14lvuctyk7szFS7knkmIO8g_hu_e2b097dac2c4d84.png 480w, https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/14lvuctyk7szFS7knkmIO8g_hu_60b12115dd91a8d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;392&#34;
		data-flex-basis=&#34;941px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This is where it gets complicated. &lt;strong&gt;Any time you change business hours in Teams Admin Center, complement will be ENABLED again without any warning.&lt;/strong&gt; I haven’t figured out changing which properties exactly trigger TAC to reset the Complement setting but it’s definitely not just editing business hours. A change to the default and after hours call flow greeting resulted in TAC overwritting &lt;code&gt;ComplementEnabled&lt;/code&gt;to &lt;code&gt;$true&lt;/code&gt; too.&lt;/p&gt;
&lt;p&gt;Also, Teams Admin Center won’t display open/closed hours correctly when complement is off. When I view the after hours call flow in TAC, it says, it’s closed during that time when in fact it should say open.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1I6KmVUwo2s8ICzHMfN0Jg.png&#34;
	width=&#34;1189&#34;
	height=&#34;145&#34;
	srcset=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1I6KmVUwo2s8ICzHMfN0Jg_hu_36d1f32c368222d6.png 480w, https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1I6KmVUwo2s8ICzHMfN0Jg_hu_830c1255f9dccf24.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;820&#34;
		data-flex-basis=&#34;1968px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I verified that the schedule is in fact not inverted by calling the Auto Attendant at &lt;code&gt;11:26&lt;/code&gt; which is within the defined time range of &lt;code&gt;09:30-12:00&lt;/code&gt; . I was indeed able to hear the greeting which was configured for the after hours call flow. To summarize: setting &lt;code&gt;ComplementEnabled&lt;/code&gt; to &lt;code&gt;$false&lt;/code&gt; through PowerShell is working, but TAC won’t display it correctly.&lt;/p&gt;
&lt;p&gt;I’ve enabled complement again to verify if there’s any change in how TAC displays things. There isn’t. TAC simply doesn’t care if &lt;code&gt;ComlementEnabled&lt;/code&gt; is enabled or disabled.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1qzcjJD557Se3KN4Kn7yG0w.png&#34;
	width=&#34;1205&#34;
	height=&#34;159&#34;
	srcset=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1qzcjJD557Se3KN4Kn7yG0w_hu_db07e6ca1f6724b9.png 480w, https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1qzcjJD557Se3KN4Kn7yG0w_hu_1406dbdd4f8dd97.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;757&#34;
		data-flex-basis=&#34;1818px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;After I enabled &lt;code&gt;ComplementEnabled&lt;/code&gt; I called the Auto Attendant again, still between &lt;code&gt;09:30-12:00&lt;/code&gt; and was able to hear the greeting which is configured for the default call flow.&lt;/p&gt;
&lt;p&gt;Sadly, I didn’t consider this in the CFV so here, the output &lt;strong&gt;&lt;em&gt;was&lt;/em&gt;&lt;/strong&gt; wrong, when Complement is disabled.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1zYKhgZhp4yPg9XhI8oHEyQ.png&#34;
	width=&#34;7040&#34;
	height=&#34;11030&#34;
	srcset=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1zYKhgZhp4yPg9XhI8oHEyQ_hu_35b7a3f9b1dc91eb.png 480w, https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1zYKhgZhp4yPg9XhI8oHEyQ_hu_5780bda1e27ac548.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;63&#34;
		data-flex-basis=&#34;153px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When Complement is disabled, the &lt;code&gt;Yes&lt;/code&gt; and &lt;code&gt;No&lt;/code&gt; nodes should be switched.&lt;/p&gt;
&lt;p&gt;The output of the &lt;strong&gt;CheckCallFlowRouting&lt;/strong&gt; is correct though. Even though the checked time of &lt;code&gt;11:41&lt;/code&gt; is within the schedule &lt;code&gt;09:30:00-12:00:00&lt;/code&gt; it says it’s closed because Complement is disabled. In this case, the colors (red/green) are also inverted, and it says &lt;strong&gt;Active After Hours Time Range&lt;/strong&gt; instead of &lt;strong&gt;Active Business Hours Time Range.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1K99P060upRCKbWvXKWteLQ.png&#34;
	width=&#34;2159&#34;
	height=&#34;378&#34;
	srcset=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1K99P060upRCKbWvXKWteLQ_hu_40f3ce911bdc67ef.png 480w, https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1K99P060upRCKbWvXKWteLQ_hu_2b6bd51eafb0992a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;571&#34;
		data-flex-basis=&#34;1370px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When I check it for &lt;code&gt;13:49&lt;/code&gt; which is not part of the specified schedule, the Auto Attendant is open, and the default call flow is active.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1h4UB7jz6S2MK5IPbazlF4A.png&#34;
	width=&#34;2161&#34;
	height=&#34;354&#34;
	srcset=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1h4UB7jz6S2MK5IPbazlF4A_hu_5ae425884afc972b.png 480w, https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1h4UB7jz6S2MK5IPbazlF4A_hu_af9731e30f933c39.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;610&#34;
		data-flex-basis=&#34;1465px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Luckily, it was easy enough to fix the CFV and add support for Complement disabled schedules in Version 3.1.1. Even when you don’t use the &lt;strong&gt;CheckCallFlowRouting&lt;/strong&gt; paraemeter, you’ll still see a warning when &lt;code&gt;ComplementEnabled&lt;/code&gt; is &lt;code&gt;$false&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1ZCUHgh103T16ksqNPm5OTw.png&#34;
	width=&#34;2243&#34;
	height=&#34;470&#34;
	srcset=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1ZCUHgh103T16ksqNPm5OTw_hu_83236f8f61ca6703.png 480w, https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1ZCUHgh103T16ksqNPm5OTw_hu_eb96c934fae8c594.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;477&#34;
		data-flex-basis=&#34;1145px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Here we can see an Auto Attendant, which has two nested AAs. One has Complement disabled and the other one enabled and everything is displayed correctly now. You can see that on the left side, for &lt;strong&gt;Complement Disabled AA&lt;/strong&gt; the &lt;strong&gt;Yes&lt;/strong&gt; option for the business hours goes to the after hours call flow greeting. On the right side for &lt;strong&gt;Complement Enabled AA&lt;/strong&gt; it’s the opposite. (This is the standard.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1qwwbJaahEpCKTyEBKlRCQ.png&#34;
	width=&#34;7840&#34;
	height=&#34;8470&#34;
	srcset=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1qwwbJaahEpCKTyEBKlRCQ_hu_e253a427dee06836.png 480w, https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1qwwbJaahEpCKTyEBKlRCQ_hu_1f37ac0868237905.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;92&#34;
		data-flex-basis=&#34;222px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;And here you can see, that the after hours call flow greeting in TAC for &lt;strong&gt;Complement Disabled AA&lt;/strong&gt; says: &lt;em&gt;This is the after hours greeting&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1dQgyhp4ak1B3jq6lFs4FDA.png&#34;
	width=&#34;1351&#34;
	height=&#34;498&#34;
	srcset=&#34;https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1dQgyhp4ak1B3jq6lFs4FDA_hu_34628513a48acfd8.png 480w, https://heusser.pro/p/advanced-teams-auto-attendant-troubleshooting-2b6ec32fc9cb/1dQgyhp4ak1B3jq6lFs4FDA_hu_1daeedae2d76ecf3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;271&#34;
		data-flex-basis=&#34;651px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;You can get Version 3.1.1 of the M365 CFV from my &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Anyway, this doesn’t change the fact that &lt;strong&gt;I strongly recommend not to use&lt;/strong&gt; &lt;code&gt;**ComplementEnabled: $false**&lt;/code&gt; &lt;strong&gt;in any case&lt;/strong&gt;. There’s no point in using it since TAC won’t display it correctly and even more important, will always set it to &lt;code&gt;$true&lt;/code&gt; again if you update the Auto Attendant through TAC.&lt;/p&gt;
&lt;p&gt;Using schedules with Complement enabled (inverted) schedules makes total sense because the business hours are configured under &lt;strong&gt;Call flow for after hours&lt;/strong&gt; and the title says &lt;strong&gt;Set business hours&lt;/strong&gt; in TAC, so, it’s only logical that the schedules are inverted and that the after hours call flow is active outside of the configured business hours and business hours (default call flow) are active during the specified time ranges.&lt;/p&gt;
&lt;p&gt;I hope that this new feature, to check any Auto Attendant’s schedules for any given date and time, also helps you to verify and troubleshoot complex call flows more efficiently. By the way, thanks to a Pull Request from a community member, the CFV now also supports export to PDF!&lt;/p&gt;
&lt;p&gt;If you like my work, feel free to consider sponsoring my work through my &lt;a class=&#34;link&#34; href=&#34;https://github.com/sponsors/mozziemozz&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub Sponsors Profile&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Teams Clipboard Dialer</title>
        <link>https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/</link>
        <pubDate>Thu, 26 Oct 2023 19:22:01 +0000</pubDate>
        
        <guid>https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/</guid>
        <description>&lt;p&gt;As you may know, I try to blog at least once a month. Although I’m a little behind this month, I’m still well on track to reach my goal in 2023 again.&lt;/p&gt;
&lt;p&gt;I still got plenty of topics to blog about in my backlog but what I like most is when I discover something new and get so hyped out about it that I can’t just not blog about it right away.&lt;/p&gt;
&lt;p&gt;Thanks to my awesome Discord community (join &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/discord.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;) which is full of enthusiastic Teams Phone admins like myself, it was brought to my attention that Microsoft is making some changes to how normalization rules in Teams dial plans are applied.&lt;/p&gt;
&lt;h4 id=&#34;tldr&#34;&gt;TLDR;
&lt;/h4&gt;&lt;p&gt;I’ve created an app which allows you to call any phone number which has been copied to the clipboard simply by clicking an app on the taskbar or by pressing a hotkey. Skip to the bottom of this post if you’re only interested in the app.&lt;/p&gt;
&lt;h3 id=&#34;what-are-dial-plans-and-normalization-rules&#34;&gt;What are Dial Plans and Normalization Rules?
&lt;/h3&gt;&lt;p&gt;Normalization rules are regular expressions which change certain phone numbers before they’re dialed in Teams. An easy example is e.g. that any Swiss phone number which is entered in the national format (with a leading &lt;code&gt;0&lt;/code&gt;) is converted to &lt;a class=&#34;link&#34; href=&#34;https://en.wikipedia.org/wiki/E.164&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;&lt;em&gt;E.164&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;E.g. &lt;code&gt;044 123 45 67&lt;/code&gt; is changed to &lt;code&gt;+41441234567&lt;/code&gt; before it’s dialed.&lt;/p&gt;
&lt;p&gt;This rule is actually part of the system dial plans which are already included in Teams. Admins can create their own dial plans by creating so called &lt;strong&gt;Tenant Dial Plans&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can view the built-in dial plans by entering the following in a Teams PowerShell session. Replace &lt;code&gt;CH&lt;/code&gt; with the country you want to check.&lt;/p&gt;
&lt;p&gt;Get-CsDialPlan -Identity CH&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/18JxlggrooV95RMwJMIRvA.png&#34;
	width=&#34;1734&#34;
	height=&#34;870&#34;
	srcset=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/18JxlggrooV95RMwJMIRvA_hu_4346f5b7eb286da8.png 480w, https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/18JxlggrooV95RMwJMIRvA_hu_e8a3b1df73616a98.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;199&#34;
		data-flex-basis=&#34;478px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;tenant-dialplans&#34;&gt;Tenant Dial Plans
&lt;/h4&gt;&lt;p&gt;With tenant dial plans, it’s possible to create much more complex rules such as &lt;a class=&#34;link&#34; href=&#34;https://ucken.blogspot.com/2016/03/trunk-prefixes-in-skype4b.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; one which contains a monster regular expression created by no other than Ken Lasko (&lt;a class=&#34;link&#34; href=&#34;https://www.ucdialplans.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;UCDialPlans.com — Dial Plan Tools&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I don’t know why there are still people on this planet who think it’s a good idea to list a phone number in a format in which it &lt;strong&gt;&lt;em&gt;simply does not exist&lt;/em&gt;&lt;/strong&gt;. &lt;code&gt;+41 (0) 44 123 45 67&lt;/code&gt; or &lt;code&gt;+41 0 44 123 45 67&lt;/code&gt; are not valid phone numbers. That’s effectively the same as if I told people that my email address is &lt;code&gt;mozzie(0)@heusser.pro&lt;/code&gt; when in fact it’s &lt;code&gt;mozzie@heusser.pro&lt;/code&gt; . It’s either &lt;code&gt;+41 44 123 45 67&lt;/code&gt; (when calling internationally) or &lt;code&gt;044 123 45 67&lt;/code&gt; (when calling from the same country).&lt;/p&gt;
&lt;p&gt;From my experience many people also don’t know that you can dial an E.164 number even when calling from the same country. I wouldn’t be surprised if there is an exception to this rule in some countries, but it works in almost every case.&lt;/p&gt;
&lt;p&gt;Unfortunately, the normalization rules which are built into Teams, don’t fix these numbers for us. If people dial a number with an &lt;strong&gt;&lt;em&gt;illegal zero&lt;/em&gt;&lt;/strong&gt; after the international prefix, the call will fail, since it’s an invalid number.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/14YWX8uJZeF4KVKsxtPQE3A.png&#34;
	width=&#34;2136&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/14YWX8uJZeF4KVKsxtPQE3A_hu_d88ada5f906578b7.png 480w, https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/14YWX8uJZeF4KVKsxtPQE3A_hu_5400acf23c936607.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;223&#34;
		data-flex-basis=&#34;535px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Since we can’t possibly knock some sense into every website owner that lists their phone number incorrectly or access and fix everybody’s precious personal Outlook contacts, adding Ken’s rule to a tenant dial plan &lt;strong&gt;&lt;em&gt;was&lt;/em&gt;&lt;/strong&gt; a great way of solving this particular issue.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;But now Microsoft is taking this away from us.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This was the link that was shared on Discord: &lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://petri.com/microsoft-changelog/m365-changelog-changes-in-normalization/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;M365 Changelog: (Updated) Changes in Normalization — Petri IT Knowledgebase&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There is a Message Center post about this as well: &lt;strong&gt;MC536885&lt;/strong&gt;. It mentions the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Stopping normalization on number that starts with plus sign (+)&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Normalization in Microsoft Teams was not designed to do normalization when the phone number starts with plus sign (+) as documented, but we’ve never enforced this in the Teams desktop or Web client. We are planning to enforce this in the future but for now we recommend avoiding this pattern.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;We are making this change to align with our Calling Service, other Teams services, Azure Communication Services SDKs, and other Microsoft services. Numbers that start with a plus sign (+) will not pass through any normalization rules.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1wyBIMDRn3qkDKckT1EsU0Q.png&#34;
	width=&#34;759&#34;
	height=&#34;499&#34;
	srcset=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1wyBIMDRn3qkDKckT1EsU0Q_hu_af0488ae5253e452.png 480w, https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1wyBIMDRn3qkDKckT1EsU0Q_hu_b56b99cf3df52bd2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;152&#34;
		data-flex-basis=&#34;365px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 10.11.2023&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Message Center post was updated by Microsoft. They’re not following through with this anymore.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Updated November 2, 2023: Based on customer feedback we will not be moving forward with this change at this time. You can safely disregard this message. Thank you for your feedback.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;/Update&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;testing-with-powershell&#34;&gt;Testing with PowerShell
&lt;/h3&gt;&lt;p&gt;I’ve noticed that something was not right, when the PowerShell commands to test dialed numbers against a tenant dial plan stopped matching numbers which start with a plus.&lt;/p&gt;
&lt;p&gt;I have a tenant dial plan in Teams which contains Ken Lasko’s awesome normalization rule.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1WteEwba1CLM2fqkpj4joYg.png&#34;
	width=&#34;1885&#34;
	height=&#34;481&#34;
	srcset=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1WteEwba1CLM2fqkpj4joYg_hu_54107192aa6e8101.png 480w, https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1WteEwba1CLM2fqkpj4joYg_hu_ced0f566d019915c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;391&#34;
		data-flex-basis=&#34;940px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;We can use the following PowerShell command to test a user’s normalization rules.&lt;/p&gt;
&lt;p&gt;Get-CsEffectiveTenantDialPlan -Identity &lt;a class=&#34;link&#34; href=&#34;mailto:user@domain.com&#34; &gt;user@domain.com&lt;/a&gt; | Test-CsEffectiveTenantDialPlan -DialedNumber +410441234567 -TenantScopeOnly&lt;/p&gt;
&lt;p&gt;As you can see in the screenshot below, the number starting with &lt;code&gt;+&lt;/code&gt; does not match any rules despite the fact the rule exists. The number starting with &lt;code&gt;00&lt;/code&gt; is matched by another rule in the same dial plan.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1uvHzgIINJYK9QYvItJig.png&#34;
	width=&#34;2122&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1uvHzgIINJYK9QYvItJig_hu_2f4d79802b89dc3b.png 480w, https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1uvHzgIINJYK9QYvItJig_hu_a4826682fa21d6d4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;221&#34;
		data-flex-basis=&#34;532px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Verifying Ken Lasko’s regular expression with &lt;a class=&#34;link&#34; href=&#34;https://regex101.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;regex101.com&lt;/a&gt; proves that it’s 100% correct.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1OSqAxfdvyF5gUfUXDihhdQ.png&#34;
	width=&#34;1224&#34;
	height=&#34;1191&#34;
	srcset=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1OSqAxfdvyF5gUfUXDihhdQ_hu_c54862dbb26bc984.png 480w, https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1OSqAxfdvyF5gUfUXDihhdQ_hu_974922c907bad25b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;102&#34;
		data-flex-basis=&#34;246px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;what-about-the-teamsclient&#34;&gt;What about the Teams Client?
&lt;/h4&gt;&lt;p&gt;Interesting enough, the Teams client still seems to match the rule from the tenant dial plan.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1M60DOscRIwosemXqbylQbQ.png&#34;
	width=&#34;2135&#34;
	height=&#34;1422&#34;
	srcset=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1M60DOscRIwosemXqbylQbQ_hu_b70ebbda6de0173a.png 480w, https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1M60DOscRIwosemXqbylQbQ_hu_588ed72b8f651825.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;360px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;However, I suspect it’s only a matter of time before this stops working too.&lt;/p&gt;
&lt;h4 id=&#34;starting-calls-fromoutlook&#34;&gt;Starting Calls from Outlook
&lt;/h4&gt;&lt;p&gt;If Teams is registered as the chat app for Microsoft 365 Apps (such as Outlook) we can call numbers which are stored on Outlook contacts.&lt;/p&gt;
&lt;p&gt;The problem with this is that classic Outlook does not apply any normalization rules either. The number is called as it’s stored on the contact.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1WFO6dkLuWfJOYCPJliJlcw.png&#34;
	width=&#34;943&#34;
	height=&#34;497&#34;
	srcset=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1WFO6dkLuWfJOYCPJliJlcw_hu_b12b54c6eec36c80.png 480w, https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1WFO6dkLuWfJOYCPJliJlcw_hu_15c6eecb9929f6ce.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;189&#34;
		data-flex-basis=&#34;455px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When I try to call this number, the call fails. You can see that the illegal zero was not dropped in the title bar of the call window.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/18VYzjecFvrfoqqiYl4Fuog.png&#34;
	width=&#34;1451&#34;
	height=&#34;996&#34;
	srcset=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/18VYzjecFvrfoqqiYl4Fuog_hu_7acb78a14b00d81.png 480w, https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/18VYzjecFvrfoqqiYl4Fuog_hu_fd5262e9130710a6.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;145&#34;
		data-flex-basis=&#34;349px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It’s noteworthy that clicking a number in the old Outlook will start a call directly without prompting you to start the call in Teams.&lt;/p&gt;
&lt;p&gt;In my tests with the new Outlook, the number was normalized correctly, even for a user who didn’t have a tenant dial plan assigned. This makes me believe that it’s actually the new Outlook which is applying the normalization rules. When you click a number in the new Outlook, you’ll get a prompt to start the call in Teams.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1Z5Jm7DSGlTyJLl3YYr8ww.png&#34;
	width=&#34;883&#34;
	height=&#34;232&#34;
	srcset=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1Z5Jm7DSGlTyJLl3YYr8ww_hu_6ceed7ab82232759.png 480w, https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1Z5Jm7DSGlTyJLl3YYr8ww_hu_2b68cfc6d2109c0d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;380&#34;
		data-flex-basis=&#34;913px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;However, every time a number is clicked in the new Outlook, an annoying blank pop up is opened and it doesn’t even close once you have made the call.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1q1b8uLbj997HaUMbFxMVg.png&#34;
	width=&#34;1211&#34;
	height=&#34;322&#34;
	srcset=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1q1b8uLbj997HaUMbFxMVg_hu_2faf666580b1546c.png 480w, https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1q1b8uLbj997HaUMbFxMVg_hu_10c28a737472b42d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;376&#34;
		data-flex-basis=&#34;902px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Time to look for alternatives.&lt;/p&gt;
&lt;h3 id=&#34;alternative-solutions&#34;&gt;Alternative Solutions
&lt;/h3&gt;&lt;p&gt;Dialing phone numbers from other apps and links or even through a hotkey is not an uncommon ask from users.&lt;/p&gt;
&lt;p&gt;If you’ve received this request before, you’ve probably stumbled upon this free app called &lt;a class=&#34;link&#34; href=&#34;http://www.lyncwizard.com/products.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;Teams Wizard&lt;/strong&gt;&lt;/a&gt;. This will allow you to start Teams PSTN calls by selecting a phone number and pressing the configured hotkey.&lt;/p&gt;
&lt;p&gt;In Teams Wizard’s settings, there’s a setting called &lt;strong&gt;Enable normalization of phone numbers&lt;/strong&gt; (Normalisierung der Telefonnummern aktivieren).&lt;/p&gt;
&lt;p&gt;On first sight, it looks like this only goes as far as the Teams built in dial plans and won’t drop the illegal zero after the E.164 prefix.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/16e4K0bnpbbbU5jRv1aWYA.png&#34;
	width=&#34;1321&#34;
	height=&#34;495&#34;
	srcset=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/16e4K0bnpbbbU5jRv1aWYA_hu_ee88d4e3dac43064.png 480w, https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/16e4K0bnpbbbU5jRv1aWYA_hu_2f69e04c86d2293b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;266&#34;
		data-flex-basis=&#34;640px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;However, when you click on &lt;strong&gt;Yes&lt;/strong&gt; (Ja) the number appears correct in Teams, even if the user does not have a special tenant dial plan assigned.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1oqAqO3GVoYrPRFPJJVYw.png&#34;
	width=&#34;877&#34;
	height=&#34;231&#34;
	srcset=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1oqAqO3GVoYrPRFPJJVYw_hu_337a3391f970009b.png 480w, https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1oqAqO3GVoYrPRFPJJVYw_hu_2176d6280e499ade.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;379&#34;
		data-flex-basis=&#34;911px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;So far so good. But the hotkey only works when you’ve selected a phone number with your mouse. Although it’s possible to just select a contact in old Outlook and then press the hotkey, the success rate is quite low. First of all, many contacts hold multiple numbers and it’s not possible to tell Teams Wizard which number should be called. Secondly, it’s not possible to select a number with your mouse in old Outlook. They can only be copied. But Teams Wizard does not monitor your clipboard. And copy/paste the number into another app (like Notepad) just to select it and then press the hotkey seems like one step too many.&lt;/p&gt;
&lt;p&gt;While it’s possible to select phone numbers of contacts in the new Outlook, the experience isn’t great either. Because the new Outlook is also based on web technology, selecting a number with your mouse without triggering the calling link is a very tricky undertaking. And don’t forget all the ugly blank pop ups this will open.&lt;/p&gt;
&lt;p&gt;If the new Outlook really does (and keeps on doing) number normalization, then I guess this problem will be mitigated at &lt;strong&gt;&lt;em&gt;some point&lt;/em&gt;&lt;/strong&gt; in the future. But a future where everybody only uses the new Outlook is likely still very far off. But I don’t even want to go into a discussion of new vs. classic Outlook and how some folks will cope (&lt;strong&gt;&lt;em&gt;or not&lt;/em&gt;&lt;/strong&gt;) with the new Outlook.&lt;/p&gt;
&lt;p&gt;Therefore, I don’t think that it hurts to prepare ourselves for a world in which we can apply normalization rules outside of Teams and Outlook.&lt;/p&gt;
&lt;p&gt;All of this got me thinking… &lt;strong&gt;&lt;em&gt;wouldn’t it be awesome if we could have a way to instantly normalize and dial any number that has been copied to the clipboard…?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;…Because copying a number with only &lt;strong&gt;one click&lt;/strong&gt; is possible in both the &lt;strong&gt;new&lt;/strong&gt; and the &lt;strong&gt;old&lt;/strong&gt; Outlook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1PPyoBA3xszRe0nDk5cNOHQ.png&#34;
	width=&#34;1335&#34;
	height=&#34;405&#34;
	srcset=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1PPyoBA3xszRe0nDk5cNOHQ_hu_7e835ed68670efa2.png 480w, https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1PPyoBA3xszRe0nDk5cNOHQ_hu_77d4ee1b8a6afed7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;329&#34;
		data-flex-basis=&#34;791px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/10qv6ML4d6FBZkV9LCg4Yxg.png&#34;
	width=&#34;986&#34;
	height=&#34;462&#34;
	srcset=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/10qv6ML4d6FBZkV9LCg4Yxg_hu_ee2ecd7e58565e5.png 480w, https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/10qv6ML4d6FBZkV9LCg4Yxg_hu_dc1218a041ea0c0d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;213&#34;
		data-flex-basis=&#34;512px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Copying the number before calling it also provides great flexibility. Be it multiple numbers on a single contact or any phone number in any app or website. Heck, we could even use PowerToys’ text extractor feature (&lt;code&gt;Win + Shift + T&lt;/code&gt; ) or the new Snipping Tool to extract and copy phone numbers from screenshots which got sent our way by people who were too lazy to put the number in a reusable format.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1vSbtxT9dKxd0bCYVaEzlw.png&#34;
	width=&#34;1182&#34;
	height=&#34;742&#34;
	srcset=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1vSbtxT9dKxd0bCYVaEzlw_hu_daabd681086a012b.png 480w, https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1vSbtxT9dKxd0bCYVaEzlw_hu_d595962952a7b224.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;382px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;i-proudly-present-teams-clipboard-dialer&#34;&gt;I Proudly Present: Teams Clipboard Dialer
&lt;/h3&gt;&lt;p&gt;I don’t know how to write and compile a proper app, but I like to think that I do know my way around PowerShell. And I think I’ve come up with a very neat solution here.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Teams Clipboard Dialer&lt;/strong&gt; consists of a PowerShell script and a Desktop shortcut which calls that script. The script reads phone numbers from the clipboard, normalizes the number, and then passes it to Teams to start the call.&lt;/p&gt;
&lt;p&gt;All you have to do to start a call is to copy a phone number and either click the icon on the taskbar or press the configured hotkey.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1KtHkD1MmZaahl5R81h7W5Q.png&#34;
	width=&#34;1181&#34;
	height=&#34;71&#34;
	srcset=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1KtHkD1MmZaahl5R81h7W5Q_hu_fa73ae56b0cf26e4.png 480w, https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1KtHkD1MmZaahl5R81h7W5Q_hu_c5a85831a3e5b1df.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1663&#34;
		data-flex-basis=&#34;3992px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If your clipboard is empty or doesn’t contain a phone number, a notification will be shown.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1rxi8ME2LgGTx4g9ioQdSKg.png&#34;
	width=&#34;1110&#34;
	height=&#34;251&#34;
	srcset=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1rxi8ME2LgGTx4g9ioQdSKg_hu_ac6d062d083e7434.png 480w, https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1rxi8ME2LgGTx4g9ioQdSKg_hu_4df8ad81b94bc45a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;442&#34;
		data-flex-basis=&#34;1061px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If your clipboard does contain a phone number, Teams will launch and ask you to start the call.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1NlTAypYtlbm83Q6xFjlKg.png&#34;
	width=&#34;2141&#34;
	height=&#34;1383&#34;
	srcset=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1NlTAypYtlbm83Q6xFjlKg_hu_48472eba593fd6d9.png 480w, https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1NlTAypYtlbm83Q6xFjlKg_hu_fdb48e65ebe79614.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;154&#34;
		data-flex-basis=&#34;371px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It’s even possible to call 1–4 digit long extension numbers or emergency numbers. Because these numbers don’t start with a &lt;code&gt;+&lt;/code&gt; the Teams tenant dial plan (if you have one configured) will still apply the normalization rules and convert the extensions to full E.164 numbers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1z4gcS6aqm4MUiWPbGm6Dg.png&#34;
	width=&#34;882&#34;
	height=&#34;231&#34;
	srcset=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1z4gcS6aqm4MUiWPbGm6Dg_hu_ebd030fb97f3276b.png 480w, https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1z4gcS6aqm4MUiWPbGm6Dg_hu_ab80164c99c372cf.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;381&#34;
		data-flex-basis=&#34;916px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;And no, there’s no browser pop up.&lt;/em&gt;&lt;/strong&gt; Teams is opened directly. Luckily, I remembered that I blogged about &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/creating-microsoft-teams-calling-deep-links-f7c9d62eacdd#:~:text=By%20adding%20the%20prefix%20msteams%3A%2F%2F%20in%20front%20of,plus%20sign%20as%20%E2%80%9C%252b%E2%80%9D%20for%20it%20to%20work.&#34; &gt;creating Teams calling deep links&lt;/a&gt; a while ago, so I already knew how to create calling deep links. The part about how I can open Teams directly (without the detour in Edge) &lt;strong&gt;and&lt;/strong&gt; have it start a call, I figured out by &lt;strong&gt;&lt;em&gt;mere luck&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;# Launch Teams to dial the number&lt;br&gt;
Start-Process ms-teams &amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;https://teams.microsoft.com/l/call/0/0?users=4:$phoneNumber%22&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://teams.microsoft.com/l/call/0/0?users=4:$phoneNumber&#34;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I’ve only tested the Teams Clipboard Dialer on Windows 11 and Teams 2.1.&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;setup&#34;&gt;Setup
&lt;/h4&gt;&lt;p&gt;I also created an install script which copies the script to &lt;code&gt;$env:APPDATA\OneDrive\TeamsClipboardDialer&lt;/code&gt; and creates a shortcut in &lt;code&gt;$env:OneDrive\Desktop&lt;/code&gt; . Unfortunately, I didn’t find a way to automatically pin the app to the taskbar. When you run the script, you’ll see a pop up message which will pause the script and give you time to pin the app manually to the taskbar.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/078v39dCn4iWwIiR6.png&#34;
	width=&#34;1749&#34;
	height=&#34;739&#34;
	srcset=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/078v39dCn4iWwIiR6_hu_5ddcf138e91077ce.png 480w, https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/078v39dCn4iWwIiR6_hu_7e7ca65566377ddc.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;236&#34;
		data-flex-basis=&#34;568px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;By default, the hotkey &lt;code&gt;Ctrl + Shift + F8&lt;/code&gt; is assigned to launch the app and dial numbers. You can change this by running the &lt;code&gt;Createshortcut.ps1&lt;/code&gt; script with the parameter &lt;code&gt;-HotKey &amp;quot;Your hotkey combo&amp;quot;&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;You can find all the files in my &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/tree/main/TeamsClipboardDialer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub repo&lt;/a&gt;. Also make sure to read the script headers carefully for more information on the available parameters.&lt;/p&gt;
&lt;p&gt;If you’re interested in what normalization rules are applied, you can examine the script &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/TeamsClipboardDialer/TeamsClipboardDialer.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. Basically, it removes any special characters like whitespaces, brackets, hyphens, dots etc. from copied phone numbers and then also applies Ken Lasko’s rule to get rid of those damn illegal zeros. You can read more about it in detail &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/TeamsClipboardDialer/ReadMe.md#normalization-rule-behavior&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;By applying the normalization rules outside of Outlook and Teams, we get more control over it since we can do whatever we want. I guess if Microsoft won’t let us match numbers starting with &lt;code&gt;+&lt;/code&gt; any longer, we have to do it ourselves. Compared to the Teams Wizard, my solution gives us way more flexibility and visibility in terms of how numbers are normalized before they’re dialed.&lt;/p&gt;
&lt;h3 id=&#34;hold-on-i-am-not-doneyet&#34;&gt;Hold on… I Am Not Done Yet!
&lt;/h3&gt;&lt;p&gt;When I realized that I was on to something, I just couldn’t let it go. &lt;strong&gt;&lt;em&gt;I replicated the whole functionality in an iOS shortcut&lt;/em&gt;&lt;/strong&gt;. I don’t know why but every time an Android Fanboy asks me why I prefer the iPhone over Android I forget to mention Shortcuts. &lt;strong&gt;&lt;em&gt;It’s literally the most underrated feature of iOS.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The shortcut uses the exact same regular expressions as the PowerShell script to normalize the numbers. (Yes, that’s possible in Shortcuts.) It also gets the phone number from the clipboard and will display the same hints if there’s no phone number stored in the clipboard.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1ZvBMJVHFO1jdr8Bl5rESrg.png&#34;
	width=&#34;2279&#34;
	height=&#34;890&#34;
	srcset=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1ZvBMJVHFO1jdr8Bl5rESrg_hu_2139a0b51a08c0ca.png 480w, https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1ZvBMJVHFO1jdr8Bl5rESrg_hu_c924da5bc79dc2ac.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;256&#34;
		data-flex-basis=&#34;614px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Once the number has been normalized, the Shortcut will ask you to start or cancel the call. On iOS this step is handled by the Shortcut and not in the Teams app itself like it is the case on the Teams desktop client.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/13qugvQ8xQsLHYZKjNKAbZQ.png&#34;
	width=&#34;1125&#34;
	height=&#34;725&#34;
	srcset=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/13qugvQ8xQsLHYZKjNKAbZQ_hu_e32dfa5b670a8d11.png 480w, https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/13qugvQ8xQsLHYZKjNKAbZQ_hu_db28eb0e21c08d09.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;372px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;get-theshortcut&#34;&gt;Get the Shortcut
&lt;/h4&gt;&lt;p&gt;You can download and import the Shortcut via &lt;a class=&#34;link&#34; href=&#34;https://www.icloud.com/shortcuts/45b99b70ef0f40adab6726e220cf4e7b&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;iCould&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I’ve tested the shortcut on an iPad and an iPhone both running iOS/iPad OS 17.0.3. When you run it for the first time, you will need to confirm a couple of privacy prompts and allow it to run all the actions without asking again. After that, you’re good to go.&lt;/p&gt;
&lt;h4 id=&#34;showtime&#34;&gt;Showtime
&lt;/h4&gt;&lt;p&gt;This animated gif demonstrates how it works on iOS. The number has already been copied to the clipboard before the shortcut was executed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1sCzx0j6auIV4gBlO343cQ.gif&#34;
	width=&#34;886&#34;
	height=&#34;1920&#34;
	srcset=&#34;https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1sCzx0j6auIV4gBlO343cQ_hu_a5b65b67361d206f.gif 480w, https://heusser.pro/p/teams-clipboard-dialer-c5cb737f37f3/1sCzx0j6auIV4gBlO343cQ_hu_e206baedeef29168.gif 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary
&lt;/h3&gt;&lt;p&gt;When I first read the MC post about normalization rules no longer matching numbers starting with a &lt;code&gt;+&lt;/code&gt; I panicked a little. But now that I’ve done the research and came to the conclusion that having an app which normalizes and calls numbers from the clipboard, is actually a very nice and versatile solution and I’m very much relieved. And having the same functionality on iOS is an awesome bonus.&lt;/p&gt;
&lt;p&gt;I hope you like what I’ve done and that you can make use of it as well. As always, all the code for the Teams Clipboard Dialer is provided free of charge. If you would still like to support my work, feel free to buy me a coffee over at &lt;a class=&#34;link&#34; href=&#34;https://github.com/sponsors/mozziemozz?frequency=one-time&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub Sponsors&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Pick Up Held and Join Active Calls for Boss/Delegate Scenarios in Microsoft Teams</title>
        <link>https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/</link>
        <pubDate>Mon, 18 Sep 2023 08:28:01 +0000</pubDate>
        
        <guid>https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/</guid>
        <description>&lt;p&gt;Microsoft recently introduced a big update to call delegation in Microsoft Teams. The last substantial change was when Microsoft rolled out &lt;code&gt;Set-CsUserCallingSettings&lt;/code&gt; and the possibility to change a Teams user’s call forwarding settings through Teams Admin Center.&lt;/p&gt;
&lt;p&gt;The new features include the ability for delegates or delegators to pick up held calls or join active calls. There’s a small catch though. When a new delegate is added through TAC or PowerShell, permission to join active calls can’t be granted. It needs to be granted by the delegator itself or through the workaround I will teach you in this blog.&lt;/p&gt;
&lt;p&gt;In TAC, it’s only possible to flip a toggle switch for &lt;strong&gt;Allow changing call settings.&lt;/strong&gt; There’s no specific option for join or pickup calls yet.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1jDMcHylHOX8704yzYzNuBA.png&#34;
	width=&#34;1534&#34;
	height=&#34;1086&#34;
	srcset=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1jDMcHylHOX8704yzYzNuBA_hu_e214e62b7084d80.png 480w, https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1jDMcHylHOX8704yzYzNuBA_hu_3f9d6ab69aed79d8.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;141&#34;
		data-flex-basis=&#34;339px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It’s the same in PowerShell unfortunately.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1G9MQGdfTpyLsScrMP1iDw.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1G9MQGdfTpyLsScrMP1iDw_hu_2f216d85004c8534.png 480w, https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1G9MQGdfTpyLsScrMP1iDw_hu_f553aaa90bc44345.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;test-scenario&#34;&gt;Test Scenario
&lt;/h3&gt;&lt;p&gt;I’ve added the user &lt;strong&gt;Bill Stearn&lt;/strong&gt; as a delegate of &lt;strong&gt;Mike Wagner&lt;/strong&gt; in this case. As Bill, I can view the granted permissions in his Teams client.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1PiILqDdHXeVHnsQG47xVyA.png&#34;
	width=&#34;1156&#34;
	height=&#34;474&#34;
	srcset=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1PiILqDdHXeVHnsQG47xVyA_hu_7ef722423b4f0ad9.png 480w, https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1PiILqDdHXeVHnsQG47xVyA_hu_b76285d7bfc8b1da.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;243&#34;
		data-flex-basis=&#34;585px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Here we can see that &lt;strong&gt;Join active calls&lt;/strong&gt; is disabled and greyed out because the delegate permissions were granted by an admin through TAC and not by the delegator himself.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1TZ7zQhnEfpTyWlZj3p9zg.png&#34;
	width=&#34;650&#34;
	height=&#34;815&#34;
	srcset=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1TZ7zQhnEfpTyWlZj3p9zg_hu_93e4fb0fe9314608.png 480w, https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1TZ7zQhnEfpTyWlZj3p9zg_hu_d0a3b2a988e05725.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;79&#34;
		data-flex-basis=&#34;191px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Mike has set up &lt;strong&gt;Wendy Rhoades&lt;/strong&gt; as an additional delegate. This delegate was added through TAC as well, so her permissions look exactly the same and she can’t enable &lt;strong&gt;Join active calls&lt;/strong&gt; either.&lt;/p&gt;
&lt;p&gt;Let’s take a look at Mike’s call settings in Teams. From there, he would be able to enable the &lt;strong&gt;Join active calls&lt;/strong&gt; permission for his delegates.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/19PL9m1NtORRcFXPHtg6w.png&#34;
	width=&#34;655&#34;
	height=&#34;969&#34;
	srcset=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/19PL9m1NtORRcFXPHtg6w_hu_5abcb9cfbf5854ce.png 480w, https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/19PL9m1NtORRcFXPHtg6w_hu_a4600d376242d2db.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;67&#34;
		data-flex-basis=&#34;162px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Here’s the thing though. Because both delegates were granted the &lt;strong&gt;Allow changing call settings&lt;/strong&gt; permission through TAC, they’re both allowed to change Mike’s call settings, which does in fact allow them to set the delegate permissions as well.&lt;/p&gt;
&lt;p&gt;If you want to do &lt;em&gt;Ninja IT&lt;/em&gt; and set up full delegate permissions without bothering Mike at all, you’ll need to set up two delegates and they’ll need to enable the missing permission of each other.&lt;/p&gt;
&lt;p&gt;Let’s see how Wendy would enable Bill to join Mike’s active calls. From &lt;strong&gt;Manage delegates&lt;/strong&gt; she’ll need to click on the three dots on Mike’s entry and select &lt;strong&gt;Change delegates.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1vWd26yJKv2WY6Djkr1lvSQ.png&#34;
	width=&#34;1154&#34;
	height=&#34;563&#34;
	srcset=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1vWd26yJKv2WY6Djkr1lvSQ_hu_3711f1d1558c5664.png 480w, https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1vWd26yJKv2WY6Djkr1lvSQ_hu_b7a4a7ed6bd11743.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;204&#34;
		data-flex-basis=&#34;491px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In Mike’s delegate settings, she then has to click the three dots on Bill’s entry and select &lt;strong&gt;Edit permissions&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1KwYgPYD4gnIDjkBYrKBK9A.png&#34;
	width=&#34;1160&#34;
	height=&#34;416&#34;
	srcset=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1KwYgPYD4gnIDjkBYrKBK9A_hu_c68458cbe58c296b.png 480w, https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1KwYgPYD4gnIDjkBYrKBK9A_hu_b39715fd1697e361.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;278&#34;
		data-flex-basis=&#34;669px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This will allow Wendy to enable &lt;strong&gt;Join active calls&lt;/strong&gt; on Mike’s delegate permissions for Bill.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1TjdJa5vFr7d7UTtbtC6qWA.png&#34;
	width=&#34;639&#34;
	height=&#34;872&#34;
	srcset=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1TjdJa5vFr7d7UTtbtC6qWA_hu_613427bc64bf7597.png 480w, https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1TjdJa5vFr7d7UTtbtC6qWA_hu_5d5da328cd344790.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;73&#34;
		data-flex-basis=&#34;175px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If Bill now goes back to view his delegate permissions for Mike, he can see that &lt;strong&gt;Join active calls&lt;/strong&gt; was enabled.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1EcDgPRLMjYe6z3XJEwgldw.png&#34;
	width=&#34;650&#34;
	height=&#34;816&#34;
	srcset=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1EcDgPRLMjYe6z3XJEwgldw_hu_79b8cd559b7bebac.png 480w, https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1EcDgPRLMjYe6z3XJEwgldw_hu_896dcdf98f63c0ab.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;79&#34;
		data-flex-basis=&#34;191px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;As you can see, multiple delegates can help each other set up full delegate permissions for their shared boss without bothering them as long as at least one delegate is added by an admin through TAC.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If there’s only going to be one delegate, you can temporarily add your own Teams account as a delegate through TAC. Then you can use your own Teams client to add the real delegate with full permissions and remove your own account through TAC again.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I hope that Microsoft will soon update TAC so that the new permission can be granted without the need of my workaround.&lt;/p&gt;
&lt;h3 id=&#34;new-delegate-user-interface&#34;&gt;New Delegate User Interface
&lt;/h3&gt;&lt;p&gt;Finally, here are some screenshots of how the new UI for call delegation works. Mike’s call settings are configured to also ring his delegates for these example calling scenarios.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1UZcfAKqnO1FJhbS9Mirxsw.png&#34;
	width=&#34;799&#34;
	height=&#34;606&#34;
	srcset=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1UZcfAKqnO1FJhbS9Mirxsw_hu_db1f66e2b8613d54.png 480w, https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1UZcfAKqnO1FJhbS9Mirxsw_hu_8aab2eb4c62a9634.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;131&#34;
		data-flex-basis=&#34;316px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The new delegate tabs in the Calls app are available in both the new and the old Teams client.&lt;/p&gt;
&lt;p&gt;Delegates can also see other people supporting the same person. In this case, Wendy can see that Bill is supporting Mike as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1NiQ6zHfGQ4rxW1PmjXAg.png&#34;
	width=&#34;2004&#34;
	height=&#34;1176&#34;
	srcset=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1NiQ6zHfGQ4rxW1PmjXAg_hu_1d685bae3107893e.png 480w, https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1NiQ6zHfGQ4rxW1PmjXAg_hu_962ba1c6fa1c9c97.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;170&#34;
		data-flex-basis=&#34;408px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;An inbound call which is intended for a delegator but forwarded to delegates will look like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1m2B6ebHrfMX34ckn1Yn6hQ.png&#34;
	width=&#34;541&#34;
	height=&#34;417&#34;
	srcset=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1m2B6ebHrfMX34ckn1Yn6hQ_hu_5e666f28b75865ae.png 480w, https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1m2B6ebHrfMX34ckn1Yn6hQ_hu_5250f65716a6e5d7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;129&#34;
		data-flex-basis=&#34;311px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;For the record, this is how it looked in the old Teams client.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1lMmaHnyIl0angFvf7VXw.png&#34;
	width=&#34;452&#34;
	height=&#34;438&#34;
	srcset=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1lMmaHnyIl0angFvf7VXw_hu_4696ecbdf24fe4f9.png 480w, https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1lMmaHnyIl0angFvf7VXw_hu_76b17c8316e2b1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;103&#34;
		data-flex-basis=&#34;247px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The new Teams client will also show an indicator for missed calls on a delegator’s line.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1vvSkRWSA2Clu1XIZoLw4w.png&#34;
	width=&#34;718&#34;
	height=&#34;91&#34;
	srcset=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1vvSkRWSA2Clu1XIZoLw4w_hu_541587ee0149dc5a.png 480w, https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1vvSkRWSA2Clu1XIZoLw4w_hu_247e54b3d7308f6b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;789&#34;
		data-flex-basis=&#34;1893px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;join-and-pick-upcalls&#34;&gt;Join and Pick Up Calls
&lt;/h3&gt;&lt;p&gt;In this example, Mike (the delegator) accepted the call himself. Wendy can see that there’s an active call in Mike’s call tab. She can also see that the call is managed by Mike himself. If need be, she could join the call too.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1ahR0QvgKAIaJF2pt493tg.png&#34;
	width=&#34;2004&#34;
	height=&#34;1176&#34;
	srcset=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1ahR0QvgKAIaJF2pt493tg_hu_f9d51d585cb5386.png 480w, https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1ahR0QvgKAIaJF2pt493tg_hu_6a7b85fd282e9781.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;170&#34;
		data-flex-basis=&#34;408px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If Mike puts the call on hold, Wendy can see that, and the &lt;strong&gt;Join&lt;/strong&gt; button changes to a &lt;strong&gt;Resume&lt;/strong&gt; button.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1b1TGVydKd4Uvdde1BvJpQ.png&#34;
	width=&#34;2004&#34;
	height=&#34;1176&#34;
	srcset=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1b1TGVydKd4Uvdde1BvJpQ_hu_53ff6f575465227f.png 480w, https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1b1TGVydKd4Uvdde1BvJpQ_hu_546b1730b0c20e67.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;170&#34;
		data-flex-basis=&#34;408px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Of course, the call cannot just be picked up by Wendy but by all of Mike’s delegates who have that permission. Or he could just resume the call himself.&lt;/p&gt;
&lt;p&gt;In this example, Bill who is another delegate picked up the call and Wendy can see that Mike’s call is connected to Bill now.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1iBbYB6G1CEbUYGn1YjYWA.png&#34;
	width=&#34;2004&#34;
	height=&#34;1176&#34;
	srcset=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1iBbYB6G1CEbUYGn1YjYWA_hu_b953811cb440aa4c.png 480w, https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1iBbYB6G1CEbUYGn1YjYWA_hu_3793360ef2a6ddac.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;170&#34;
		data-flex-basis=&#34;408px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If Mike decides to Join the call with the external caller and Bill, Wendy will be able to see that too, and she still has the option to join the three people who are already on the call.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1oux26xT5AHEV3mLaIarpzA.png&#34;
	width=&#34;2004&#34;
	height=&#34;1176&#34;
	srcset=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1oux26xT5AHEV3mLaIarpzA_hu_313f7de8f9cb6545.png 480w, https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1oux26xT5AHEV3mLaIarpzA_hu_7d3aea44f9cf1954.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;170&#34;
		data-flex-basis=&#34;408px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1lNACYe4LWgltcvxRxthbig.png&#34;
	width=&#34;2004&#34;
	height=&#34;1176&#34;
	srcset=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1lNACYe4LWgltcvxRxthbig_hu_2d5933b7dbc7e81c.png 480w, https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/1lNACYe4LWgltcvxRxthbig_hu_d5080388e9df904d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;170&#34;
		data-flex-basis=&#34;408px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This works in the opposite direction too. If Wendy answers a call which was forwarded to her by Mike and puts that call on hold, Mike will be able to pick up the call.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/17fiLpMRJ8LxJy0XNpvLoQ.png&#34;
	width=&#34;2004&#34;
	height=&#34;1169&#34;
	srcset=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/17fiLpMRJ8LxJy0XNpvLoQ_hu_5acc27a5885517d0.png 480w, https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/17fiLpMRJ8LxJy0XNpvLoQ_hu_efa4a92426fe6e5d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;171&#34;
		data-flex-basis=&#34;411px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;And last but not least, delegates can also see the call history of their delegators and for example see when another delegate answered a call of their shared delegator.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/16eqh8GUuZO2ZL0ffXqiaHg.png&#34;
	width=&#34;2004&#34;
	height=&#34;1169&#34;
	srcset=&#34;https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/16eqh8GUuZO2ZL0ffXqiaHg_hu_aeba3a2ecc817fa7.png 480w, https://heusser.pro/p/pick-up-held-and-join-active-calls-for-boss-delegate-scenarios-in-microsoft-teams-4cb1d4965424/16eqh8GUuZO2ZL0ffXqiaHg_hu_5168017c2529298a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;171&#34;
		data-flex-basis=&#34;411px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;wrapping-up&#34;&gt;Wrapping Up
&lt;/h4&gt;&lt;p&gt;The new delegate features are a huge improvement and finally fill a big void in Microsoft Teams Phone. Everything is super easy and intuitive. The new Teams client is looking great as well, and I really like the style of the new calling notifications. The fact that missed calls on a delegator line are only visible in the new Teams client makes me believe that we’re going to see lots of calling related improvements in the new Teams over the next coming months. Exciting times lie ahead. The only thing that remains a little cumbersome is that you can’t grant the &lt;strong&gt;Join active calls&lt;/strong&gt; permission through TAC or PowerShell yet. However, the workaround outlined in this article should do the trick until Microsoft adds official support in TAC and PowerShell.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>How to Pin a Phone Number to the Teams Side Rail</title>
        <link>https://heusser.pro/p/how-to-pin-an-phone-number-to-the-teams-side-rail-539a230a55c7/</link>
        <pubDate>Sun, 10 Sep 2023 11:08:37 +0000</pubDate>
        
        <guid>https://heusser.pro/p/how-to-pin-an-phone-number-to-the-teams-side-rail-539a230a55c7/</guid>
        <description>&lt;p&gt;Many companies have internal emergency response teams which often also have their own internal/local emergency number. Businesses usually want these numbers to be very prominently placed on a user&amp;rsquo;s computer, like in the taskbar, the start menu or on the desktop. What about Microsoft Teams though? Can we place a link to start a call to a phone number on the Teams side rail? (The left rail where all the apps like Activity, Chat, Teams, Calendar, Calls etc. are pinned.)&lt;/p&gt;
&lt;p&gt;From &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/creating-microsoft-teams-calling-deep-links-f7c9d62eacdd&#34; &gt;this&lt;/a&gt; blog post, we already know how to construct a deep link which starts a call to a phone number.&lt;/p&gt;
&lt;p&gt;When I was researching something entirely different, I stumbled over &lt;a class=&#34;link&#34; href=&#34;https://tech-peanuts.com/2021/01/07/how-to-run-any-website-as-a-teams-app/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; interesting blog post from Tech Peanuts. When I read this article, I noticed that all that the author is doing is executing a Teams deep link to a tab in a Teams channel. I immediately asked myself if this would work with a Teams calling deep link too?&lt;/p&gt;
&lt;p&gt;The answer is yes. To do this, we need two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A Teams App&lt;/li&gt;
&lt;li&gt;Any kind of web server to host one or multiple html files&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;create-and-host-the-htmlfiles&#34;&gt;Create and host the html file(s)
&lt;/h4&gt;&lt;p&gt;Let’s start with the web server. This can be any kind of platform or service that can host and serve a html file publicly. Tech Peanuts uses an Azure storage account in their tutorial. It makes total sense since it’s amazingly easy to create and configure a storage account from within VS Code. You can refer to their article to learn how to upload files to Azure Storage directly from VS Code.&lt;/p&gt;
&lt;p&gt;Here’s the html code we need to create a calling deep link. Just replace the phone number after &lt;code&gt;4:%2b&lt;/code&gt; with your phone number. &lt;code&gt;%2b&lt;/code&gt; is a &lt;code&gt;+&lt;/code&gt; sign in URL encoded format.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/e1b387e07589c7f0fc486a14b2570604.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Please note that storing the number with a leading plus sign did not work in the new Teams client yet. I had to replace the &lt;code&gt;+&lt;/code&gt; with &lt;code&gt;00&lt;/code&gt; to get it working. Even though it doesn’t look as nice as the plus does, at least 00 is working in both the old and the new Teams client.&lt;/p&gt;
&lt;p&gt;If you want this to work in the new Teams client as well, use the following link format:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://teams.microsoft.com/l/call/0/0?users=4:0041123456789&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Then upload the file to your web server of choice. If you have multiple locations with different emergency numbers, you can create multiple html files with different names and numbers. You can still upload them to the same location as the first file. There’s no need to create a separate storage account or web app for each html file/number.&lt;/p&gt;
&lt;h4 id=&#34;create-the-teamsapp&#34;&gt;Create the Teams App
&lt;/h4&gt;&lt;p&gt;Next, go to &lt;a class=&#34;link&#34; href=&#34;https://dev.teams.microsoft.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://dev.teams.microsoft.com&lt;/a&gt; and sign in with a Teams admin account.&lt;/p&gt;
&lt;p&gt;Go to &lt;strong&gt;Apps&lt;/strong&gt; and click &lt;strong&gt;+ New app&lt;/strong&gt; and give your app a name.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-pin-an-phone-number-to-the-teams-side-rail-539a230a55c7/1T1jm9F4WsGlBZC8i4blxvA.png&#34;
	width=&#34;882&#34;
	height=&#34;305&#34;
	srcset=&#34;https://heusser.pro/p/how-to-pin-an-phone-number-to-the-teams-side-rail-539a230a55c7/1T1jm9F4WsGlBZC8i4blxvA_hu_2685cc3bf934266e.png 480w, https://heusser.pro/p/how-to-pin-an-phone-number-to-the-teams-side-rail-539a230a55c7/1T1jm9F4WsGlBZC8i4blxvA_hu_bb888f357e4438aa.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;289&#34;
		data-flex-basis=&#34;694px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Next, fill out the &lt;strong&gt;Basic information&lt;/strong&gt; portion of the app. You can copy your &lt;strong&gt;App ID&lt;/strong&gt; and paste it under &lt;strong&gt;Application (client) ID.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-pin-an-phone-number-to-the-teams-side-rail-539a230a55c7/16ZZdpshqTSEsTAWd4pB7g.png&#34;
	width=&#34;1308&#34;
	height=&#34;1452&#34;
	srcset=&#34;https://heusser.pro/p/how-to-pin-an-phone-number-to-the-teams-side-rail-539a230a55c7/16ZZdpshqTSEsTAWd4pB7g_hu_19559fe20b97e767.png 480w, https://heusser.pro/p/how-to-pin-an-phone-number-to-the-teams-side-rail-539a230a55c7/16ZZdpshqTSEsTAWd4pB7g_hu_b62bd9424aa66e2f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;90&#34;
		data-flex-basis=&#34;216px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Then go to &lt;strong&gt;App features&lt;/strong&gt; and click on &lt;strong&gt;Personal app&lt;/strong&gt; and then &lt;strong&gt;Create your first personal app tab&lt;/strong&gt;. Fill in the details such as the tab name and the content URL. The content URL is the link to where your html file is hosted. If you have multiple files and don’t use an index.html file, the url must be an absolute path. Set the scope to &lt;strong&gt;personal&lt;/strong&gt; and the context to &lt;strong&gt;personalTab&lt;/strong&gt; and &lt;strong&gt;confirm&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-pin-an-phone-number-to-the-teams-side-rail-539a230a55c7/1lfTXEyWS0I7tBpbJ3kMSRQ.png&#34;
	width=&#34;863&#34;
	height=&#34;883&#34;
	srcset=&#34;https://heusser.pro/p/how-to-pin-an-phone-number-to-the-teams-side-rail-539a230a55c7/1lfTXEyWS0I7tBpbJ3kMSRQ_hu_c531ed4e6763012.png 480w, https://heusser.pro/p/how-to-pin-an-phone-number-to-the-teams-side-rail-539a230a55c7/1lfTXEyWS0I7tBpbJ3kMSRQ_hu_47d613ef21e892bc.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;97&#34;
		data-flex-basis=&#34;234px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Save&lt;/strong&gt; your tab app.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-pin-an-phone-number-to-the-teams-side-rail-539a230a55c7/1y6twx4IlKDCiKBsF0athug.png&#34;
	width=&#34;1655&#34;
	height=&#34;412&#34;
	srcset=&#34;https://heusser.pro/p/how-to-pin-an-phone-number-to-the-teams-side-rail-539a230a55c7/1y6twx4IlKDCiKBsF0athug_hu_bf926bf5d110f082.png 480w, https://heusser.pro/p/how-to-pin-an-phone-number-to-the-teams-side-rail-539a230a55c7/1y6twx4IlKDCiKBsF0athug_hu_28dbedb8c9215ca9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;401&#34;
		data-flex-basis=&#34;964px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;That’s it. If you want to, you can click &lt;strong&gt;Preview in Teams&lt;/strong&gt; if you want to test it in the Teams web client.&lt;/p&gt;
&lt;p&gt;If you want to test it in the Teams client, click on &lt;strong&gt;Publish&lt;/strong&gt; and then &lt;strong&gt;Download the app package.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-pin-an-phone-number-to-the-teams-side-rail-539a230a55c7/1NHO9Br7TMFi6ElrQP1Q.png&#34;
	width=&#34;865&#34;
	height=&#34;581&#34;
	srcset=&#34;https://heusser.pro/p/how-to-pin-an-phone-number-to-the-teams-side-rail-539a230a55c7/1NHO9Br7TMFi6ElrQP1Q_hu_2b6c2812442375ad.png 480w, https://heusser.pro/p/how-to-pin-an-phone-number-to-the-teams-side-rail-539a230a55c7/1NHO9Br7TMFi6ElrQP1Q_hu_2762f5d3a47daa2d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;148&#34;
		data-flex-basis=&#34;357px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In Teams, go to &lt;strong&gt;Apps&lt;/strong&gt;, &lt;strong&gt;Manage your apps&lt;/strong&gt; and then select &lt;strong&gt;Upload an app&lt;/strong&gt; to upload your app.&lt;/p&gt;
&lt;p&gt;Note: Your admin must allow sideloading apps for this.&lt;/p&gt;
&lt;h4 id=&#34;see-it-inaction&#34;&gt;See it in Action
&lt;/h4&gt;&lt;p&gt;Now you have an app in the siderail which can start a call. The only thing that’s left to do is to publish the app in your tenant.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-pin-an-phone-number-to-the-teams-side-rail-539a230a55c7/1FfN90woT9tQGuHUS0DYJZQ.png&#34;
	width=&#34;2325&#34;
	height=&#34;1370&#34;
	srcset=&#34;https://heusser.pro/p/how-to-pin-an-phone-number-to-the-teams-side-rail-539a230a55c7/1FfN90woT9tQGuHUS0DYJZQ_hu_76cb0682519b1af8.png 480w, https://heusser.pro/p/how-to-pin-an-phone-number-to-the-teams-side-rail-539a230a55c7/1FfN90woT9tQGuHUS0DYJZQ_hu_c0cad3a290a621df.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;169&#34;
		data-flex-basis=&#34;407px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you’ve never published an app in Teams before, I suggest starting with &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-US/microsoftteams/manage-apps?WT.mc_id=TeamsAdminCenterCSH&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; Microsoft Learn article. If you only have one location, it will be fairly easy to add the app just to the global app setup policy.&lt;/p&gt;
&lt;p&gt;If you have multiple offices in different locations or countries, it will be a little more complex. You will need to create a separate app for each number and then also create and assign different Teams app setup policies to the users based on their location. Each policy will then pin a different app where each app will ultimately link to a different html file (containing a different phone number) on your web server.&lt;/p&gt;
&lt;h4 id=&#34;summary&#34;&gt;Summary
&lt;/h4&gt;&lt;p&gt;I think it’s really cool that we can leverage Teams deep links to pin different actions in Teams to the side rail instead of just normal apps. I really hope that Microsoft will fix the bug where the leading plus is not recognized in deep links. It not only looks bad, but it also causes calls to file.&lt;/p&gt;
&lt;p&gt;While pinning emergency numbers might be the most obvious use case, you could use this for any number. I could also see some companies wanting to pin their IT service desk hotline to the side rail for example.&lt;/p&gt;
&lt;p&gt;One last thing I want to mention is to keep in mind that the phone number you put in the html file can theoretically be viewed/obtained by anybody with internet access. Of course, you must know the URL to access it but that probably won’t protect it from web scrapers or other data gathering tools. However, since your company’s main number is probably listed on your home page anyway, I don’t see too big of a risk here.&lt;/p&gt;
&lt;p&gt;If you do think it’s a risk, &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/in/anthony-drozdek-9a3a188/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Anthony Drozdek&lt;/a&gt; might just have the solution for you. He suggests using a fake number, e.g. &lt;code&gt;+4199...&lt;/code&gt; which is then translated into the real number using a Teams &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/microsoftteams/create-and-manage-dial-plans&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;dial plan&lt;/a&gt;. You can read the original comment &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/feed/update/urn:li:activity:7106597293469880320?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7106597293469880320%2C7106602482113339392%29&amp;amp;dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287106602482113339392%2Curn%3Ali%3Aactivity%3A7106597293469880320%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>How to Validate Phone Number Assignments in Teams (in Bulk)</title>
        <link>https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/</link>
        <pubDate>Fri, 25 Aug 2023 12:22:29 +0000</pubDate>
        
        <guid>https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/</guid>
        <description>&lt;p&gt;I’ve been assigning phone numbers in Teams for pretty much five years now. I remember when it all started for me with Direct Routing in 2018.&lt;/p&gt;
&lt;p&gt;Numbers were assigned by using something like this:&lt;br&gt;
&lt;code&gt;Set-CsUser -Identity &amp;quot;user@domain.com&amp;quot; -OnPremLineUri &amp;quot;tel:+12345678900&amp;quot; -EnterpriseVoiceEnabled $true&lt;/code&gt; . Later on, &lt;code&gt;OnPremLineUri&lt;/code&gt; was replaced by the &lt;code&gt;LineUri&lt;/code&gt; attribute before Microsoft finally introduced the new &lt;code&gt;Set-CsPhoneNumberAssignment&lt;/code&gt; cmdlet.&lt;/p&gt;
&lt;p&gt;I don’t know how many phone numbers I’ve assigned in Teams over the years but one thing I know for sure is that I’ve had my fair share of assignment failures. Granted, it’s gotten way better and more reliable in recent years, but sadly, I still run into number assignment issues occasionally.&lt;/p&gt;
&lt;p&gt;By assignment issues I mean that after a number has been assigned to users, they either don’t receive inbound calls, can’t make outbound calls or both. The nasty thing about this is that in Teams Admin Center or PowerShell everything looks ok. I can see that the users in question indeed have a phone number assigned.&lt;/p&gt;
&lt;p&gt;In other words, you can’t always trust that a number is successfully assigned when you can see it in TAC or in PowerShell.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/10GLcAACWKdy8YmRwiDTKA.png&#34;
	width=&#34;680&#34;
	height=&#34;227&#34;
	srcset=&#34;https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/10GLcAACWKdy8YmRwiDTKA_hu_99708699a0a08316.png 480w, https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/10GLcAACWKdy8YmRwiDTKA_hu_90b0891b19d61e74.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;299&#34;
		data-flex-basis=&#34;718px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/16CTFxF1hiseqWnVFjd1eKQ.png&#34;
	width=&#34;744&#34;
	height=&#34;153&#34;
	srcset=&#34;https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/16CTFxF1hiseqWnVFjd1eKQ_hu_adf37075a7bf8171.png 480w, https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/16CTFxF1hiseqWnVFjd1eKQ_hu_a78b5a2754d3f8e7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;486&#34;
		data-flex-basis=&#34;1167px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;But when you check a user’s calls app in Teams or ask them to send you a screenshot of it, you notice that they don’t have a work phone number listed beneath the dial pad.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/1WvODGT0lZqv9ByCh1xnEvg.png&#34;
	width=&#34;348&#34;
	height=&#34;525&#34;
	srcset=&#34;https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/1WvODGT0lZqv9ByCh1xnEvg_hu_cb5a8d9034c4ad2d.png 480w, https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/1WvODGT0lZqv9ByCh1xnEvg_hu_ab0158072a153704.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;66&#34;
		data-flex-basis=&#34;159px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now obviously there are legit scenarios where users don’t have their own &lt;strong&gt;LineUri&lt;/strong&gt; but in most cases, each user gets assigned a phone number.&lt;/p&gt;
&lt;p&gt;This is how it’s supposed to look after a number has been assigned.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/1caNWs4I4L0XByceG6zw.png&#34;
	width=&#34;352&#34;
	height=&#34;556&#34;
	srcset=&#34;https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/1caNWs4I4L0XByceG6zw_hu_96b1e733ad280e81.png 480w, https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/1caNWs4I4L0XByceG6zw_hu_461c8cc75f891074.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;63&#34;
		data-flex-basis=&#34;151px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This is very much undocumented, but I believe that the Teams client and TAC/PowerShell are reading/pulling the number from different systems. It has to be this way since they both display different information.&lt;/p&gt;
&lt;p&gt;If you’re setting up Teams phone for a bunch of users at once, it’s not like we can just go and ask each user if they can see the number in their Teams client. &lt;strong&gt;That would make IT look bad&lt;/strong&gt;. On the other hand, trying to assign the number a few more times until it hopefully sticks doesn’t seem like an ideal solution either.&lt;/p&gt;
&lt;h4 id=&#34;reverse-number-lookup-rnl-to-validate-the-assignment&#34;&gt;Reverse Number Lookup (RNL) to validate the assignment
&lt;/h4&gt;&lt;p&gt;As you might know, I run a &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/discord.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Discord Server&lt;/a&gt; for Teams Phone Admins. When the issue reoccurred for me earlier this year, I decided to ask the Discord community if they have a clever way of remotely checking if a phone number assignment has been successful?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/0GpvfcYavklU7iIg.jpg&#34;
	width=&#34;2615&#34;
	height=&#34;300&#34;
	srcset=&#34;https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/0GpvfcYavklU7iIg_hu_b07a98b7e11ee043.jpg 480w, https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/0GpvfcYavklU7iIg_hu_a3b14c82cb185fc7.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;871&#34;
		data-flex-basis=&#34;2092px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Our member &lt;strong&gt;Ashish Mishra&lt;/strong&gt; suggested to type in the number in my own Teams client to see if anything comes up on the RNL (reverse number lookup). As it turns out, this is a genius idea.&lt;/p&gt;
&lt;p&gt;Last week, I stumbled over this issue again when a few users who have recently gotten a new Teams phone number reported to me that outbound calls were not working. Luckily, there were only a handful, and I was able to ask them directly if they could see the phone number in Teams. They couldn’t.&lt;/p&gt;
&lt;p&gt;I then went on to my Teams client and entered some of the numbers to see if they return anything or not.&lt;/p&gt;
&lt;p&gt;If the number is not successfully (or not at all) assigned, only the number but no name will be returned.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/13G7UzNqHtfp4Tx0z5UN8Lg.png&#34;
	width=&#34;353&#34;
	height=&#34;164&#34;
	srcset=&#34;https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/13G7UzNqHtfp4Tx0z5UN8Lg_hu_50992fdf3fb58649.png 480w, https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/13G7UzNqHtfp4Tx0z5UN8Lg_hu_8dac8b148cb8419.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;215&#34;
		data-flex-basis=&#34;516px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;As soon as the number is successfully assigned, the name of the user will be returned.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/1tJCCTL3n5C8U8nD9IthSGw.png&#34;
	width=&#34;353&#34;
	height=&#34;166&#34;
	srcset=&#34;https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/1tJCCTL3n5C8U8nD9IthSGw_hu_28a19ec8c5cb7918.png 480w, https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/1tJCCTL3n5C8U8nD9IthSGw_hu_bfc2519103f8c033.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;212&#34;
		data-flex-basis=&#34;510px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Because I’ve encountered the issue before, I didn’t even bother to check the M365 service health dashboard. But apparently, there was indeed an issue related to numbers assigned during a time frame which matched my errors.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/1xgYbaKQOPjo221dBXR6cJA.png&#34;
	width=&#34;818&#34;
	height=&#34;649&#34;
	srcset=&#34;https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/1xgYbaKQOPjo221dBXR6cJA_hu_a1fce60c59759cb0.png 480w, https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/1xgYbaKQOPjo221dBXR6cJA_hu_ea9521ce6b394dc8.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;126&#34;
		data-flex-basis=&#34;302px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Title: Users can’t make or receive Public Switched Telephone Network (PSTN) calls in Microsoft Teams&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;User impact: Users couldn’t make or receive any PSTN calls from any connection method of Microsoft Teams.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;More info: This only impacted users who had their phone numbers assigned between Monday, August 14, 2023 at 10:30 PM GMT+2 , and Wednesday, August 16, 2023 at 4:00 AM GMT+2.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In that particular case, I was able to fix the issue by reassigning the numbers. But that didn’t stop me from looking for a more practical, permanent solution.&lt;/p&gt;
&lt;h4 id=&#34;reverse-engineering&#34;&gt;Reverse engineering
&lt;/h4&gt;&lt;p&gt;Once again, we go back to Microsoft Edge’s dev tools to see what’s going on when RNL is done. All it does is to send a request to the following endpoint:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://teams.microsoft.com/api/mt/emea/beta/phone/numbers/+41438833079/teamsidentity&lt;/code&gt;
&lt;img src=&#34;https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/1xJ60RmW1XFqmugU9KQKwIg.png&#34;
	width=&#34;794&#34;
	height=&#34;644&#34;
	srcset=&#34;https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/1xJ60RmW1XFqmugU9KQKwIg_hu_66bfad9d09dbdf52.png 480w, https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/1xJ60RmW1XFqmugU9KQKwIg_hu_9e3661c8b89ba879.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;123&#34;
		data-flex-basis=&#34;295px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If there is a user found for the phone number, a user object Id will be returned.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/1kPrP0SJW3a55aANVK75tVg.png&#34;
	width=&#34;682&#34;
	height=&#34;154&#34;
	srcset=&#34;https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/1kPrP0SJW3a55aANVK75tVg_hu_a810fedb9ae9f030.png 480w, https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/1kPrP0SJW3a55aANVK75tVg_hu_e11709952ed341b7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;442&#34;
		data-flex-basis=&#34;1062px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If no users are found, the API returns an error.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/1c2LsbM1AUmW4PgU9MQozhA.png&#34;
	width=&#34;691&#34;
	height=&#34;146&#34;
	srcset=&#34;https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/1c2LsbM1AUmW4PgU9MQozhA_hu_61706a95c239c933.png 480w, https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/1c2LsbM1AUmW4PgU9MQozhA_hu_505c32ac39b30710.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;473&#34;
		data-flex-basis=&#34;1135px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It’s noteworthy that only numbers assigned in a user’s own tenant can be checked. You can’t use this API to scrape numbers of other tenants.&lt;/p&gt;
&lt;p&gt;If we want to send these kinds of requests using PowerShell, we obviously need to get a valid bearer token first. For this, we can reuse much of the code I’ve already written for &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d&#34; &gt;this&lt;/a&gt; blog post. We’re using the same function to either create or read our encrypted credentials which we then use to get a token using the AADInternals PowerShell module/functions.&lt;/p&gt;
&lt;p&gt;Please note that you don’t need the credentials of a Teams admin user. Since any Teams enterprise voice enabled user can dial a number and trigger RNL, non-admin credentials of any Teams phone enabled user work just fine.&lt;/p&gt;
&lt;p&gt;What’s interesting is that doing RNL through the API also worked using the bearer token of a user which isn’t even enterprise voice enabled.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please bear in mind that this means that a user’s password and possibly an OTP secret (albeit both encrypted) are saved to your local disk. Treat the files with care and remove them once you don’t need them anymore!&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;the-scriptfunctions&#34;&gt;The Script/Functions
&lt;/h4&gt;&lt;p&gt;Finally, here’s the PowerShell code to make it all happen.&lt;/p&gt;
&lt;p&gt;Please make sure that you clone the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;repository&lt;/a&gt; from my GitHub because of the dependencies. Simply copying the script from the gist won’t work.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Run this in PowerShell to clone the repository  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clone&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;github&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;com&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mozziemozz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TeamsPhoneAutomation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;git&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;I made this in a way that you can use it in your own scripts. I purposely made this a lightweight function without any requests to Teams or Graph.&lt;/p&gt;
&lt;p&gt;I did, however, create an example script to show you how you can use the function to validate phone number assignments in bulk.&lt;/p&gt;
&lt;p&gt;If you want to read users/numbers from a CSV or directly from Teams/Graph, you’ll need to write your own code to build the &lt;code&gt;$lineURIs&lt;/code&gt; array.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;-AdminUser&lt;/code&gt; to specify the user you want to get a Teams token for via the AADInternals module. Use either &lt;code&gt;-MFA $true&lt;/code&gt; or &lt;code&gt;-MFA $false&lt;/code&gt; to tell the function if the account specified is MFA enabled or not.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/7d986581c385c9aeb04ce8a403dff19d.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;The example script will create an object in &lt;code&gt;$results&lt;/code&gt; which includes all the checked phone numbers and if they’re assigned successfully. If a number is assigned correctly, the object id of the user will be included as well if you keep &lt;code&gt;$hideObjectId $false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/1Sid8Gir1zmeKHCmgPg5qgA.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/1Sid8Gir1zmeKHCmgPg5qgA_hu_76ae03929f63bd81.png 480w, https://heusser.pro/p/how-to-validate-phone-number-assignments-in-teams-in-bulk-8a0909c7b5f5/1Sid8Gir1zmeKHCmgPg5qgA_hu_3bb903638afb8f06.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The actual function doing the RNL can be found &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Scripts/ValidateTeamsReverseNumberLookup/ValidateTeamsReverseNumberLookup.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I hope that this bit of code helps you the next time you need to check if a Teams phone number is assigned 100% correctly.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>PowerShell Script: Set Emergency Location for Unassigned Numbers in Teams</title>
        <link>https://heusser.pro/p/powershell-script-set-emergency-location-for-unassigned-numbers-in-teams-5e00c61b4246/</link>
        <pubDate>Fri, 11 Aug 2023 16:23:20 +0000</pubDate>
        
        <guid>https://heusser.pro/p/powershell-script-set-emergency-location-for-unassigned-numbers-in-teams-5e00c61b4246/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/powershell-script-set-emergency-location-for-unassigned-numbers-in-teams-5e00c61b4246/0rgv90To2E1EOPe.jpg&#34;
	width=&#34;1024&#34;
	height=&#34;1024&#34;
	srcset=&#34;https://heusser.pro/p/powershell-script-set-emergency-location-for-unassigned-numbers-in-teams-5e00c61b4246/0rgv90To2E1EOPe_hu_ff57815dc3ada66c.jpg 480w, https://heusser.pro/p/powershell-script-set-emergency-location-for-unassigned-numbers-in-teams-5e00c61b4246/0rgv90To2E1EOPe_hu_f75e99138d2a5f90.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;With the MicrosoftTeams PowerShell module version &lt;strong&gt;5.4.0.&lt;/strong&gt; Microsoft has added the possibility to set the emergency location on unassigned numbers.&lt;/p&gt;
&lt;p&gt;Typically, whenever new numbers are bought or ported to Microsoft, an admin needs to specify the emergency address which should be assigned to the new numbers. In some cases, this process can fail which means that you could end up with user/subscriber numbers which don’t have an emergency address linked to it.&lt;/p&gt;
&lt;p&gt;When you try to assign a number wich does not have an emergency location assigned, you’ll get an error, and you need to assign it again, including the &lt;code&gt;-LocationId&lt;/code&gt; .&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Set-CsPhoneNumberAssignment&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-PhoneNumber&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;TelephoneNumber&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-LocationId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$matchingEmergencyLocationId&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This is an operational risk since scripts that may have been working fine for months suddenly stop working properly for certain numbers and new users could end up without a phone number. To mitigate this risk, it’s best to make sure that all your numbers have an emergency address linked to them from the get-go.&lt;/p&gt;
&lt;p&gt;Up until now, the only way to solve this issue was to create a case for Microsoft’s PSTN service desk team and ask them to assign a location Id to your unassigned number.&lt;/p&gt;
&lt;p&gt;Previously, I’ve tackled this issue by making sure that my scripts checked if the number was assigned successfully. If it wasn’t I made sure that the number got assigned again including the location Id.&lt;/p&gt;
&lt;p&gt;I also thought about creating a dummy user and a script which I could (mis)use. The script would get all unassigned numbers which don’t have a location Id assigned and processes all numbers after each other. Each time, the user’s usage location would be set to the country of the current number, the number would be assigned to the dummy user including the location Id and then unassigned again. However, that sounded like a waste of time to me, so I never pursued that idea.&lt;/p&gt;
&lt;p&gt;The possibilities now are much better, and the recent update allowed me to create a simple script which makes sure that all unassigned numbers also have a location Id assigned.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Please note that the script assumes that there’s only ever 1 emergency address per city and that there’s at least 1 other number which already uses the correct emergency address.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If your environment does not meet the above criteria, you can’t use this script without tailoring it specifically to your needs. Use it at your own risk!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Also note that you need to clone or download the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub repo&lt;/a&gt; since it depends on other functions present in the repo.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/3d750fef739c17a73832f542459fac72.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;I hope this helps you in streamlining and optimizing your phone number inventory.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Everything You Ever Wanted to Know About Creating Teams and Microsoft 365 Groups</title>
        <link>https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/</link>
        <pubDate>Mon, 07 Aug 2023 13:10:37 +0000</pubDate>
        
        <guid>https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/</guid>
        <description>&lt;p&gt;Did you know that you can create new Microsoft 365 Group in &lt;strong&gt;six&lt;/strong&gt; and a new Microsoft Teams Team in &lt;strong&gt;four&lt;/strong&gt; different places? And I’m not even counting PowerShell…&lt;/p&gt;
&lt;p&gt;Today, I’m going to show you the differences in default settings when a Group/Team is created from a different place and what impact it could have.&lt;/p&gt;
&lt;p&gt;Let’s start with all the different admin portals and clients a Microsoft 365 Group can be created in.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Entra ID Admin Center&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;M365 Admin Center&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exchange Admin Center&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Teams Admin Center&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;SharePoint Admin Center&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Teams Client&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The bold ones are the ones where we can also create a Team alongside the Group.&lt;/p&gt;
&lt;p&gt;As we all know, every Team includes a “surrounding” Microsoft 365 Group to manage access to the Team. &lt;strong&gt;You can have a Microsoft 365 Group without a Team, but you can’t have a Team without an associated Microsoft 365 Group.&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;entra-id-admincenter&#34;&gt;Entra ID Admin Center
&lt;/h4&gt;&lt;p&gt;If you create a new M365 Group in Entra ID, you won’t have the option to add a Team to the group during the creation process. The only reason why you’d want to use Entra ID to add an M365 Group with a Team is if you want to use a dynamic group. Entra ID is the only GUI where you can create dynamic M365 Groups. Also, you can’t configure the group’s visibility upon creation of the group. It has to be manually changed in M365 Admin Center after the group has been created in Entra ID.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1Ks0QQyarwoK0HLpIQYw.png&#34;
	width=&#34;1036&#34;
	height=&#34;1091&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1Ks0QQyarwoK0HLpIQYw_hu_d962ad55756d05b3.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1Ks0QQyarwoK0HLpIQYw_hu_b2fb96e287c964.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;94&#34;
		data-flex-basis=&#34;227px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;m365-admincenter&#34;&gt;M365 Admin Center
&lt;/h4&gt;&lt;p&gt;If you create the M365 Group from the M365 Admin Center, the group’s visibility will default to &lt;strong&gt;PUBLIC,&lt;/strong&gt; and you’ll need to provide the group’s email address manually. The checkbox for &lt;strong&gt;Create a team for this group&lt;/strong&gt; is enabled by default.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1OLo4fcAatonsKKHC8fCIA.png&#34;
	width=&#34;1134&#34;
	height=&#34;909&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1OLo4fcAatonsKKHC8fCIA_hu_8cc38413ff5be589.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1OLo4fcAatonsKKHC8fCIA_hu_ce119eda9ca6a18b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;124&#34;
		data-flex-basis=&#34;299px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;exchange-admincenter&#34;&gt;Exchange Admin Center
&lt;/h4&gt;&lt;p&gt;Creating the group from the Exchange Online Admin Center does essentially the same thing as creating it from the M365 Admin Center. The only difference is that you’ll be able to create a &lt;strong&gt;Dynamic distribution&lt;/strong&gt; group from Exchange. This option is not available in M365 Admin. However, M365 Admin Center allows you to create &lt;strong&gt;Security&lt;/strong&gt; groups while the Exchange Admin Center won’t.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1yv8Aumuzx6q5H4zhrbRkqg.png&#34;
	width=&#34;1139&#34;
	height=&#34;836&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1yv8Aumuzx6q5H4zhrbRkqg_hu_64f748114f4e8014.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1yv8Aumuzx6q5H4zhrbRkqg_hu_383489b8075d91e2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;136&#34;
		data-flex-basis=&#34;326px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;teams-admincenter&#34;&gt;Teams Admin Center
&lt;/h4&gt;&lt;p&gt;In Teams Admin Center, the default visibility/privacy is set to &lt;strong&gt;Private&lt;/strong&gt;. Like in Entra ID, the email address of the M365 Group is also created for you with no option to change it during the creation process.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1FZlDNoVcf0Axd57QQFeyw.png&#34;
	width=&#34;523&#34;
	height=&#34;697&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1FZlDNoVcf0Axd57QQFeyw_hu_95e84aa1697be1ae.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1FZlDNoVcf0Axd57QQFeyw_hu_d940cc467cba6615.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;75&#34;
		data-flex-basis=&#34;180px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;sharepoint-admincenter&#34;&gt;SharePoint Admin Center
&lt;/h4&gt;&lt;p&gt;When you create a new Team Site in SharePoint Admin Center, a new Microsoft 365 Group is created as well. The group’s email address is set automatically and the default option for the visibility is private. In this case, you can adjust the group’s email address, if you want to.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1IfhZCo2ZFn01uwgpBqepw.png&#34;
	width=&#34;1331&#34;
	height=&#34;1486&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1IfhZCo2ZFn01uwgpBqepw_hu_5372a793fb4474f7.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1IfhZCo2ZFn01uwgpBqepw_hu_d167427cb6fae478.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;89&#34;
		data-flex-basis=&#34;214px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Creating the group from SharePoint Admin Center does not create a Team automatically. A Team can be added to the group in the Microsoft 365 Admin Center after the Team Site has been created.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1kE1YtLVIL7lk8iKSDJWngg.png&#34;
	width=&#34;1334&#34;
	height=&#34;459&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1kE1YtLVIL7lk8iKSDJWngg_hu_a70cc96bdef490c5.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1kE1YtLVIL7lk8iKSDJWngg_hu_b20dbe5a9804d62b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;290&#34;
		data-flex-basis=&#34;697px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;teams-client&#34;&gt;Teams Client
&lt;/h4&gt;&lt;p&gt;In Teams Client, things look a little bit different. First, you need to decide whether you want to start from scratch or from another group or team. There are also some basic templates available.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1fijm1R7xxa5ngZp8vnbA.png&#34;
	width=&#34;860&#34;
	height=&#34;859&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1fijm1R7xxa5ngZp8vnbA_hu_99003d8ad86fd6ce.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1fijm1R7xxa5ngZp8vnbA_hu_b898c1ca80c06c49.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I chose &lt;strong&gt;From scratch&lt;/strong&gt; for this blog post. Next, you’ll be asked if you want to create a Private, Public or Org-wide Team. I tested all 3 types and all of them created a new M365 Group with the same settings. The group is always assigned, not even the Org-wide Team is created as dynamic group. The email address is derived from the Team name too, without the option to customize it during the creation process. The most important thing to note here is that if you create a Team from Teams itself, the group will be hidden in Outlook clients by default.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1j8BsmyfTxNnOhJOlbeeuQ.png&#34;
	width=&#34;812&#34;
	height=&#34;659&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1j8BsmyfTxNnOhJOlbeeuQ_hu_5b36de55cb9cda01.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1j8BsmyfTxNnOhJOlbeeuQ_hu_d032329a71507e37.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;123&#34;
		data-flex-basis=&#34;295px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;comparison-chart&#34;&gt;Comparison Chart
&lt;/h4&gt;&lt;p&gt;I’ve created a table which tells you what settings/defaults are applied for Teams created in each location.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1f1t0FfEjhgy1Q3X2gSmeIw.png&#34;
	width=&#34;1719&#34;
	height=&#34;321&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1f1t0FfEjhgy1Q3X2gSmeIw_hu_8d54fb8340343be5.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1f1t0FfEjhgy1Q3X2gSmeIw_hu_f0b78a96ab378f8a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;535&#34;
		data-flex-basis=&#34;1285px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I think all the above except &lt;strong&gt;OwnerAddedAsMember&lt;/strong&gt; and &lt;strong&gt;OwnerIsPartOfTeamWhileNotAMember&lt;/strong&gt; should be self-explanatory.&lt;/p&gt;
&lt;p&gt;Every group has owners and members. Owners are typically also members, but members don’t necessarily have to be owners as well.&lt;/p&gt;
&lt;p&gt;If you add certain users only as an owner, they won’t be added to the group&amp;rsquo;s members unless you create the Team from Teams Admin Center or from the Teams Client. (OwnerAddedAsMember).&lt;/p&gt;
&lt;p&gt;However, even if they’re just owners, they can still see the Team in Teams (OwnerIsPartOfTeamWhileNotAMember).&lt;/p&gt;
&lt;p&gt;Example: Team Created in M365 Admin Center&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1sKnTcPvGMPXSOxzurQkzA.png&#34;
	width=&#34;1022&#34;
	height=&#34;454&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1sKnTcPvGMPXSOxzurQkzA_hu_b497cc8f0137eac9.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1sKnTcPvGMPXSOxzurQkzA_hu_c2e39299003812d0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;225&#34;
		data-flex-basis=&#34;540px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1Tc27AG8fYx7IyLNlH4Cmw.png&#34;
	width=&#34;1250&#34;
	height=&#34;453&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1Tc27AG8fYx7IyLNlH4Cmw_hu_421a90570f04085.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1Tc27AG8fYx7IyLNlH4Cmw_hu_928372f68d401d29.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;275&#34;
		data-flex-basis=&#34;662px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1HjfYRrvTHStUi1kDVBSjdg.png&#34;
	width=&#34;1587&#34;
	height=&#34;479&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1HjfYRrvTHStUi1kDVBSjdg_hu_8e362a1994ffdb.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1HjfYRrvTHStUi1kDVBSjdg_hu_71f43ce4e8d3786b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;331&#34;
		data-flex-basis=&#34;795px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If we compare this Team to one created in Teams Admin Center, we can see that it looks exactly the same in Teams.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1NKi2Pdxdqd30yavHOg8GA.png&#34;
	width=&#34;1652&#34;
	height=&#34;511&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1NKi2Pdxdqd30yavHOg8GA_hu_65e6564eab1d5ea8.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1NKi2Pdxdqd30yavHOg8GA_hu_8f537e27d53f1f22.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;323&#34;
		data-flex-basis=&#34;775px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;However, in M365 Admin Center we can see that the user is both an owner and a member of the group.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1MvFKN9z4vrC6q1nILilHmQ.png&#34;
	width=&#34;1036&#34;
	height=&#34;639&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1MvFKN9z4vrC6q1nILilHmQ_hu_bf21a9b320035e1e.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1MvFKN9z4vrC6q1nILilHmQ_hu_9b25ba6a7e7131fe.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;162&#34;
		data-flex-basis=&#34;389px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Teams will display each user only once, under the highest privilege a user has while M365 Groups list owners and members separately, even if it’s the same user account.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1Jw5pIMkgJDtaYwnPmGyQbQ.png&#34;
	width=&#34;1040&#34;
	height=&#34;377&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1Jw5pIMkgJDtaYwnPmGyQbQ_hu_3b41e1d12149720f.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1Jw5pIMkgJDtaYwnPmGyQbQ_hu_dff8ba05e16e4243.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;275&#34;
		data-flex-basis=&#34;662px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;voice-enabled-channelscaveat&#34;&gt;Voice Enabled Channels Caveat
&lt;/h4&gt;&lt;p&gt;For normal Teams usage, it shouldn’t be a problem if an owner is not also a member. However, there is one important thing to mention. &lt;strong&gt;If an owner is not also a member and the owner is part of a Team which is used for a Voice Enabled Channel in Teams, the owner won’t be added to the queue’s agent list, unless the owner is added explicitly as a member too.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’ve linked a Team which I created from M365 Admin Center to this call queue. During the creation, I’ve only added 1 owner and no members.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1cCSpNYnw92CDChAB4vXdQ.png&#34;
	width=&#34;1377&#34;
	height=&#34;421&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1cCSpNYnw92CDChAB4vXdQ_hu_ce8e14ba2cd80d73.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1cCSpNYnw92CDChAB4vXdQ_hu_21cc38e1c546eca0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;327&#34;
		data-flex-basis=&#34;784px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When we check the call agents of this queue, we can see that it says &lt;strong&gt;zero&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1WxLllnbtYMltwNBa8Ymb6Q.png&#34;
	width=&#34;1286&#34;
	height=&#34;250&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1WxLllnbtYMltwNBa8Ymb6Q_hu_f9cde674a4f4b2c2.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1WxLllnbtYMltwNBa8Ymb6Q_hu_39d3c7aad6c22dec.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;514&#34;
		data-flex-basis=&#34;1234px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When I add the owner also as a member of the group in M365 Admin Center and save the queue again, we can see that it now has &lt;strong&gt;one&lt;/strong&gt; call agent.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1tko8IXwu7Fec7LztJ1UqQ.png&#34;
	width=&#34;1295&#34;
	height=&#34;258&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1tko8IXwu7Fec7LztJ1UqQ_hu_c0f92fc929495186.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-creating-teams-and-microsoft-365-groups-cc069d920d43/1tko8IXwu7Fec7LztJ1UqQ_hu_a62c6f84733e0664.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;501&#34;
		data-flex-basis=&#34;1204px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;You can read more about Voice Enabled Channels and Call Queue Agent Lists &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0&#34; &gt;here&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552&#34; &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;where-to-create-newteams&#34;&gt;Where to Create New Teams?
&lt;/h4&gt;&lt;p&gt;So where is it best to create new Teams? Sadly, the answer is: It depends. The first question you should ask yourself is if the membership needs to be assigned or dynamic. If it should be dynamic, you must create it from Entra ID. Otherwise, there is no clear winner here. Each portal does it slightly different which creates unwanted and most likely also unnoticed differences in M365 Group settings. If you want to be consistent across all your Teams and Groups, I recommend defining one or multiple standards and then creating a PowerShell script which creates new Teams and Groups according to your needs.&lt;/p&gt;
&lt;h3 id=&#34;powershell-cheat-sheet-for-m365groups&#34;&gt;PowerShell Cheat-Sheet for M365 Groups
&lt;/h3&gt;&lt;p&gt;Since we’ve now learned that creating Groups or Teams from different Admin Centers can have different effects, I put together a little PowerShell cheat-sheet containing some handy one-lineres to help you quickly adjust M365 Group settings. Since these settings are applied to the M365 Group and not to the Team, they all require the Exchange Online PowerShell Module which can be installed using this code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;43
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;44
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;45
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;46
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Install Module  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Install-Module&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Name&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ExchangeOnlineManagement&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Connect to Exchange Online  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Connect-ExchangeOnline&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;To&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;store&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;group &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;object&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;we&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;simply&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;need&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;group &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;like&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Get group properties  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$group&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-UnifiedGroup&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Identity&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TeamCreatedinTACPublic&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;@mvplab&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;ch&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;To&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;disable&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;welcome&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;email&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;which&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sent&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;group &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;members&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Disable welcome message for new group members  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Set-UnifiedGroup&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Identity&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Identity&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-UnifiedGroupWelcomeMessageEnabled&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;$false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;If&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Team&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;has&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;been&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;created&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Teams&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;you&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;can&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;code&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;unhide&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;group &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Outlook&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Unhide group from Outlook clients  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Set-UnifiedGroup&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Identity&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Identity&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-HiddenFromExchangeClientsEnabled:&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;$false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;To&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;allow&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;external&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;email&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;addresses&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;send&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;emails&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;group &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;email&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Enable let people outside this organization email this group  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Set-UnifiedGroup&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Identity&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Identity&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-RequireSenderAuthenticationEnabled:&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;$false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;To&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;change&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;privacy&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;group &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;either&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Private&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Public&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;`-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AccessType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;`&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;parameter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Change access type to private  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Set-UnifiedGroup&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Identity&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Identity&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-AccessType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Private&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;To&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keep&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;owners&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;members&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sync&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rather&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;make&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sure&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;that&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;all&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;owners&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;are&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;added&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;members&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;too&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;you&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;can&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;use&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Add group owners to group members if not already there  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Connect-MgGraph&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$group&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-MgGroup&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-GroupId&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;GUID&amp;gt;&amp;#34;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$groupOwners&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-MgGroupOwner&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-All&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-GroupId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Id&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$groupMembers&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-MgGroupMember&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-All&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-GroupId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Id&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$groupOwner&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$groupOwners&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Where-Object&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{$\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Id&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-notin&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$groupMembers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;New-MgGroupMember&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-GroupId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Id&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-DirectoryObjectId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$groupOwner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Id&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Note: This uses the &lt;strong&gt;Microsoft.Graph.Groups&lt;/strong&gt; PowerShell module and not &lt;strong&gt;ExchangeOnlineManagement&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;closing-words&#34;&gt;Closing Words
&lt;/h3&gt;&lt;p&gt;I hope that this article and the comparison chart help you to better understand why some groups might have different settings than others. I also recommend to always add all owners as explicit members too, whenever you assign owners to a group. Hopefully, the last code snippet will make things easier for you to accomplish this.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Automate Setting Work Location in Teams/Outlook [PoC]</title>
        <link>https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/</link>
        <pubDate>Sat, 08 Jul 2023 08:50:29 +0000</pubDate>
        
        <guid>https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/</guid>
        <description>&lt;p&gt;Warning: This is another one of those proof of concept &lt;em&gt;“because I can”&lt;/em&gt; kind of things. I’m going to do some things which shouldn’t be done in production. It was just for the fun of it.&lt;/p&gt;
&lt;p&gt;Microsoft recently released the new &lt;strong&gt;Work location&lt;/strong&gt; feature in Teams and the new Outlook/Outlook on the web. This allows users to set their work location so co-workers can see if their colleagues are working in the &lt;strong&gt;office&lt;/strong&gt; or &lt;strong&gt;remotely&lt;/strong&gt; on any specific day. You can find more information &lt;a class=&#34;link&#34; href=&#34;https://techcommunity.microsoft.com/t5/microsoft-365-blog/coordination-is-the-key-to-spontaneity-with-these-features-in/ba-p/3814143&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://support.microsoft.com/en-au/office/show-your-hybrid-work-location-availability-to-meet-work-hours-and-more-c861198d-f82e-41d7-88ec-c2e716be5ede&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I was extremely disappointed when I learned that there is no support for Microsoft Graph or Power Automate yet, so we could automatically set this each day based on e.g., an IP address or even through geo-fencing on a mobile device.&lt;/p&gt;
&lt;p&gt;Off I went to try and find a way to do it anyway. First, I opened Teams in Microsoft Edge and used the browser dev tools to see what kind of requests are sent to which APIs when the work location is changed.&lt;/p&gt;
&lt;p&gt;Here we can see that a &lt;strong&gt;PUT&lt;/strong&gt; request is made to &lt;code&gt;https://presence.teams.microsoft.com/v1/me/workLocation&lt;/code&gt; when the location is edited.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/1Ylwjq2bqJUws0kO0nI6SA.png&#34;
	width=&#34;1435&#34;
	height=&#34;902&#34;
	srcset=&#34;https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/1Ylwjq2bqJUws0kO0nI6SA_hu_7e71fa45b85c8195.png 480w, https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/1Ylwjq2bqJUws0kO0nI6SA_hu_d5e70905dbc9f12e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In this case the location was cleared with the following JSON payload.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/1TUd3bgXiIp7hyKQIWLDTdA.png&#34;
	width=&#34;975&#34;
	height=&#34;278&#34;
	srcset=&#34;https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/1TUd3bgXiIp7hyKQIWLDTdA_hu_9ee1d59560961f4.png 480w, https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/1TUd3bgXiIp7hyKQIWLDTdA_hu_14dccec72bd80590.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;350&#34;
		data-flex-basis=&#34;841px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The value &lt;strong&gt;0&lt;/strong&gt; clears the location. &lt;strong&gt;1&lt;/strong&gt; is used to set it to &lt;strong&gt;Office&lt;/strong&gt; and &lt;strong&gt;2&lt;/strong&gt; will map to &lt;strong&gt;Remote.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Next, I inspected the token needed for this request with the help of &lt;a class=&#34;link&#34; href=&#34;https://jwt.ms&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;jwt.ms&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{  
  &amp;quot;typ&amp;quot;: &amp;quot;JWT&amp;quot;,  
  &amp;quot;nonce&amp;quot;: &amp;quot;xxxxxxxxxxxxxxxxxxxxxxxxx&amp;quot;,  
  &amp;quot;alg&amp;quot;: &amp;quot;RS256&amp;quot;,  
  &amp;quot;x5t&amp;quot;: &amp;quot;-xxxxxxxxxxxxxxxxxxxxxxxxx&amp;quot;,  
  &amp;quot;kid&amp;quot;: &amp;quot;-xxxxxxxxxxxxxxxxxxxxxxxxx&amp;quot;  
}.{  
  &amp;quot;aud&amp;quot;: &amp;quot;https://presence.teams.microsoft.com/&amp;quot;,  
  &amp;quot;iss&amp;quot;: &amp;quot;https://sts.windows.net/4bffbf87-53a0-4fce-b58b-4179cb3a3b7d/&amp;quot;,  
  &amp;quot;iat&amp;quot;: 1688763565,  
  &amp;quot;nbf&amp;quot;: 1688763565,  
  &amp;quot;exp&amp;quot;: 1688841846,  
  &amp;quot;acr&amp;quot;: &amp;quot;1&amp;quot;,  
  &amp;quot;aio&amp;quot;: &amp;quot;xxxxxxxxxxxxxxxxxxxxxxxxx&amp;quot;,  
  &amp;quot;amr&amp;quot;: [  
    &amp;quot;pwd&amp;quot;,  
    &amp;quot;mfa&amp;quot;  
  ],  
  &amp;quot;appid&amp;quot;: &amp;quot;5e3ce6c0-2b1f-4285-8d4b-75ee78787346&amp;quot;,  
  &amp;quot;appidacr&amp;quot;: &amp;quot;0&amp;quot;,  
  &amp;quot;family_name&amp;quot;: &amp;quot;Mozz&amp;quot;,  
  &amp;quot;given_name&amp;quot;: &amp;quot;Mozzie&amp;quot;,  
  &amp;quot;ipaddr&amp;quot;: &amp;quot;xxx.xxx.xxx.xxx&amp;quot;,  
  &amp;quot;name&amp;quot;: &amp;quot;Mozzism Admin&amp;quot;,  
  &amp;quot;oid&amp;quot;: &amp;quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&amp;quot;,  
  &amp;quot;puid&amp;quot;: &amp;quot;10032000330C6A66&amp;quot;,  
  &amp;quot;rh&amp;quot;: &amp;quot;xxxxxxxxxxxxxxxxxxxxxxxxx&amp;quot;,  
  &amp;quot;scp&amp;quot;: &amp;quot;user_impersonation&amp;quot;,  
  &amp;quot;sub&amp;quot;: &amp;quot;xxxxxxxxxxxxxxxxxxxxxxxxx&amp;quot;,  
  &amp;quot;tid&amp;quot;: &amp;quot;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx&amp;quot;,  
  &amp;quot;unique_name&amp;quot;: &amp;quot;mozzie@mozzism.ch&amp;quot;,  
  &amp;quot;upn&amp;quot;: &amp;quot;mozzie@mozzism.ch&amp;quot;,  
  &amp;quot;uti&amp;quot;: &amp;quot;xxxxxxxxxxxxxxxxxxxxxxxxx&amp;quot;,  
  &amp;quot;ver&amp;quot;: &amp;quot;1.0&amp;quot;,  
  &amp;quot;xms_cc&amp;quot;: [  
    &amp;quot;CP1&amp;quot;  
  ],  
  &amp;quot;xms_ssm&amp;quot;: &amp;quot;1&amp;quot;  
}.[Signature]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;aadinternals&#34;&gt;AADInternals
&lt;/h4&gt;&lt;p&gt;Copying the token from the browser and using it to make a web request with PowerShell is easy. The hard thing was to figure out how I can obtain that token programmatically. Luckily, there’s this awesome PowerShell module called &lt;a class=&#34;link&#34; href=&#34;https://www.powershellgallery.com/packages/AADInternals/0.9.0&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;AADInternals&lt;/strong&gt;&lt;/a&gt; by one Dr. Nestori Syynimaa. This is an amazing resource to test almost anything related to Azure AD and Graph authentication.&lt;/p&gt;
&lt;p&gt;The documentation for this module can be found &lt;a class=&#34;link&#34; href=&#34;https://aadinternals.com/aadinternals/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. I discovered that the following command would give me a token for Teams.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$teamsToken&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-AADIntAccessTokenForTeams&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;What’s really cool is that now, with PowerShell 7 the whole login process can be done through the CLI without any browser pop-ups! Even MFA is supported!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/1dsPmfR9rFSmCsWYKlb5mA.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/1dsPmfR9rFSmCsWYKlb5mA_hu_6cfc710016dcf843.png 480w, https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/1dsPmfR9rFSmCsWYKlb5mA_hu_6dbf596e2e933e61.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Even though the audience for this token is &lt;a class=&#34;link&#34; href=&#34;https://api.spaces.skype.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://api.spaces.skype.com&lt;/a&gt; and not &lt;a class=&#34;link&#34; href=&#34;https://presence.teams.microsoft.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://presence.teams.microsoft.com&lt;/a&gt; it still works to change the work location in Teams.&lt;/p&gt;
&lt;p&gt;Because everything can be done through the CLI I wondered if I could pass the credentials and the MFA secret to the AADInternals functions so that the login process could be automated to be 100% unattended.&lt;/p&gt;
&lt;p&gt;After some trial and error, I had that figured out too. Not all functions of the AADInternals module are exposed to the user so the key is to make them available to your current PowerShell session by dot sourcing some of the *.ps1 files included in the module.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$functions&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-ChildItem&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Path&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;C:\\Program Files\\WindowsPowerShell\\Modules\\AADInternals\\0.9.0&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Filter&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;\*.ps1&amp;#34;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$functions&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$functions&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Where-Object&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{$\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-match&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Teams&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-or&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;$\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-match&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;AccessToken&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-or&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;$\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-match&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;CommonUtils&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$function&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$functions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;FullName&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;By executing this code which uses some of the not exposed functions from AADInternals, we can pass a credential object (and MFA secret) and then get an access token to write Teams presence.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$teamsPresenceToken&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Prompt-Credentials&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ClientId&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$ClientId&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Resource&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://presence.teams.microsoft.com&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Credentials&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$secureCreds&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-OTPSecretKey&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$passwordDecrypted&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;credentials&#34;&gt;Credentials
&lt;/h4&gt;&lt;p&gt;I’ve put together a script which does everything for you. However, you must install the AADInternals module first and you also need to clone the repo from my &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt; account since it has dependencies on other functions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;git&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;clone&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;//&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;github&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;com&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mozziemozz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TeamsPhoneAutomation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;git&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Even though this was all part of some good Friday night hacking, we obviously don’t want to store the credentials and especially the MFA secret as plain text on our machines. Therefore, I’ve added a couple of &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Modules/SecureCredsMgmt.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;functions&lt;/a&gt; to help handle encrypted credentials. We want to be better than &lt;a class=&#34;link&#34; href=&#34;https://www.theverge.com/2022/9/16/23356213/uber-hack-teen-slack-google-cloud-credentials-powershell&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;UBER&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When encrypted credentials are stored on a Windows PC, they can only be decrypted using the same &lt;strong&gt;account&lt;/strong&gt; and the same &lt;strong&gt;machine&lt;/strong&gt; because of &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-identifiers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;security identifiers&lt;/a&gt; (SID).&lt;/p&gt;
&lt;p&gt;If you don’t trust me, see for yourself. Here’ I’m retrieving the password I encrypted on my main PC using my user account.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/1W628X8LBOfnUCpplMXMj4w.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/1W628X8LBOfnUCpplMXMj4w_hu_4940aeddf6c6f64d.png 480w, https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/1W628X8LBOfnUCpplMXMj4w_hu_fc9aea1ed352f4d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I copied the file to a virtual machine where I’m logged in with the same user. This code will let you decrypt the password if the key matches.&lt;br&gt;
(I found this code years ago, unfortunately I don’t have the source anymore…)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR((Get-Content -Path .\.local\SecureCreds\mozzie@mozzism.ch.txt | ConvertTo-SecureString))) | Out-String
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When I run this on another machine with the same logged in user, I get an error that the Key is invalid. Which is good.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/1xHjGlNGoWxiJ3qTkRNsxBQ.png&#34;
	width=&#34;1758&#34;
	height=&#34;928&#34;
	srcset=&#34;https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/1xHjGlNGoWxiJ3qTkRNsxBQ_hu_127b3d13f3483a6c.png 480w, https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/1xHjGlNGoWxiJ3qTkRNsxBQ_hu_da6928d12bcda226.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;189&#34;
		data-flex-basis=&#34;454px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;My Function &lt;code&gt;Get-MzzSecureCreds&lt;/code&gt; will automatically create a PS Credential Object when &lt;code&gt;-AdminUser &amp;quot;user@domain.com&amp;quot;&lt;/code&gt; is specified. The username will be set as file name, and it will also be used as the username of the credential object.&lt;/p&gt;
&lt;h4 id=&#34;the-finalscript&#34;&gt;The Final Script
&lt;/h4&gt;&lt;p&gt;Here’s the script to change your work location in Teams.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/bd60e4c77623b516333e329660e39142.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;If you run it for the first time, you’ll need to provide the username and password and possibly the MFA secret of the user for which you want to change the work location.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;At this point I want to make clear again that this is a proof of concept. Even though the credentials are encrypted, you should not store production passwords on the device and most importantly, you shouldn’t store the MFA secret in the same place as the password.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can determine if you’re working remotely or in the office by specifying either your local or public home/remote IP address.&lt;/p&gt;
&lt;p&gt;Since my private IP is &lt;strong&gt;192.168.127.117&lt;/strong&gt;, and I specified &lt;strong&gt;192.168.1.10&lt;/strong&gt; my work location is set to &lt;strong&gt;Office.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/1H9Jn0x3GNJ1gglcfYmRg.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/1H9Jn0x3GNJ1gglcfYmRg_hu_aa046d479c47679a.png 480w, https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/1H9Jn0x3GNJ1gglcfYmRg_hu_265b830b583962c3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When I change the IP address to &lt;strong&gt;192.168.127.117&lt;/strong&gt; the work location is set to remote because that matches my local subnet.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/1JCJNuJqCHz2FvGnYBkB0A.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/1JCJNuJqCHz2FvGnYBkB0A_hu_e9a0d6f3e4d647b3.png 480w, https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/1JCJNuJqCHz2FvGnYBkB0A_hu_c1345709df7142fe.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In case your office and your home network both use the same private address space, you can use &lt;code&gt;-IpType Public&lt;/code&gt; and specify your home/remote public IP.&lt;/p&gt;
&lt;h4 id=&#34;the-result&#34;&gt;The Result
&lt;/h4&gt;&lt;p&gt;The updated work location is then visible in both Teams and Outlook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/1rgszjARcTFdFADtwPT9bUg.png&#34;
	width=&#34;490&#34;
	height=&#34;396&#34;
	srcset=&#34;https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/1rgszjARcTFdFADtwPT9bUg_hu_b81a6c2aa1eb804.png 480w, https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/1rgszjARcTFdFADtwPT9bUg_hu_f381a482b49f4f87.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;123&#34;
		data-flex-basis=&#34;296px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/16wcOq4ZGJ4e9Oy2J80Nyw.png&#34;
	width=&#34;686&#34;
	height=&#34;351&#34;
	srcset=&#34;https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/16wcOq4ZGJ4e9Oy2J80Nyw_hu_4bfed16fa82d11c1.png 480w, https://heusser.pro/p/automate-setting-work-location-in-teams-outlook-poc-deb7b05de08d/16wcOq4ZGJ4e9Oy2J80Nyw_hu_f372c65f866c96a0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;195&#34;
		data-flex-basis=&#34;469px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Even though I won’t be using this in production, I had great fun developing this and I also learned a thing or two about AADInternals, Json Web Tokens and encrypted credentials in PowerShell.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Prettify and Sync Teams Phone Numbers to Azure AD</title>
        <link>https://heusser.pro/p/prettify-and-sync-teams-phone-numbers-to-azure-ad-e973755f83d5/</link>
        <pubDate>Thu, 06 Jul 2023 22:30:04 +0000</pubDate>
        
        <guid>https://heusser.pro/p/prettify-and-sync-teams-phone-numbers-to-azure-ad-e973755f83d5/</guid>
        <description>&lt;p&gt;I am a very data and fact driven guy. I strongly believe that clean, consistent and structured data is a tremendously important aspect of information technology.&lt;/p&gt;
&lt;p&gt;An example of inconsistency to which probably most Teams Phone admins can relate is that there is no relation between a Teams user’s &lt;strong&gt;LineURI&lt;/strong&gt; and the &lt;strong&gt;BusinessPhones&lt;/strong&gt; property of the same user in Azure AD.&lt;/p&gt;
&lt;p&gt;The problem is that throughout Microsoft 365 only the values in Azure AD are published on profile cards. This includes Teams and Outlook. A different phone number in Azure AD than in Teams can create all kinds of problems. Inbound calls might not get routed to a Teams user or calls may be transferred to a wrong user if a call is placed via the number available on a profile card.&lt;/p&gt;
&lt;p&gt;Here’s an example of a profile card which shows the user’s phone number from Azure AD.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/prettify-and-sync-teams-phone-numbers-to-azure-ad-e973755f83d5/1qJTQBFoMOT8Ch8SBVGw9w.png&#34;
	width=&#34;476&#34;
	height=&#34;554&#34;
	srcset=&#34;https://heusser.pro/p/prettify-and-sync-teams-phone-numbers-to-azure-ad-e973755f83d5/1qJTQBFoMOT8Ch8SBVGw9w_hu_db01875526f3e149.png 480w, https://heusser.pro/p/prettify-and-sync-teams-phone-numbers-to-azure-ad-e973755f83d5/1qJTQBFoMOT8Ch8SBVGw9w_hu_a6e00e9ff02cd92e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;85&#34;
		data-flex-basis=&#34;206px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If we check the same user in Teams Admin Center, we can see that he has a different LineURI.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/prettify-and-sync-teams-phone-numbers-to-azure-ad-e973755f83d5/1XgygFkOc2ljYRbuaPiZ3hA.png&#34;
	width=&#34;1162&#34;
	height=&#34;393&#34;
	srcset=&#34;https://heusser.pro/p/prettify-and-sync-teams-phone-numbers-to-azure-ad-e973755f83d5/1XgygFkOc2ljYRbuaPiZ3hA_hu_b481940ff29971fd.png 480w, https://heusser.pro/p/prettify-and-sync-teams-phone-numbers-to-azure-ad-e973755f83d5/1XgygFkOc2ljYRbuaPiZ3hA_hu_b1378f39a4d8836c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;295&#34;
		data-flex-basis=&#34;709px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When it comes to phone numbers in Teams, I view the LineURI as the single source of truth. Writing a simple script which mirrors the LineURI to Azure AD seemed like an easy task.&lt;/p&gt;
&lt;p&gt;But then I realized that I can only get the raw value of the LineURI which doesn’t include any spaces which makes it hard to read or spell on profile cards.&lt;/p&gt;
&lt;p&gt;While the phone number is displayed nicely formatted according to the local and regional format in TAC or in the Teams Client, it looks like this in PowerShell.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/prettify-and-sync-teams-phone-numbers-to-azure-ad-e973755f83d5/1QTijGX2jlRXoWNmqhMU8jg.png&#34;
	width=&#34;1265&#34;
	height=&#34;139&#34;
	srcset=&#34;https://heusser.pro/p/prettify-and-sync-teams-phone-numbers-to-azure-ad-e973755f83d5/1QTijGX2jlRXoWNmqhMU8jg_hu_ea44e5ab71c2f300.png 480w, https://heusser.pro/p/prettify-and-sync-teams-phone-numbers-to-azure-ad-e973755f83d5/1QTijGX2jlRXoWNmqhMU8jg_hu_fcea3c587607f834.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;910&#34;
		data-flex-basis=&#34;2184px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The Teams Client also displays the number in the correct format.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/prettify-and-sync-teams-phone-numbers-to-azure-ad-e973755f83d5/1G4CllxCII1RWb7GAPyBPQ.png&#34;
	width=&#34;541&#34;
	height=&#34;731&#34;
	srcset=&#34;https://heusser.pro/p/prettify-and-sync-teams-phone-numbers-to-azure-ad-e973755f83d5/1G4CllxCII1RWb7GAPyBPQ_hu_a5749697272db881.png 480w, https://heusser.pro/p/prettify-and-sync-teams-phone-numbers-to-azure-ad-e973755f83d5/1G4CllxCII1RWb7GAPyBPQ_hu_1049f9fbafe61980.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;74&#34;
		data-flex-basis=&#34;177px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I started to dig around in the browser dev tools to try and see if I could find these formatted numbers anywhere. Not luck. I could only ever find the raw values. I did some more research and learned that there are a couple of already existing and well-established libraries for various programming languages such as Python or Node.JS.&lt;/p&gt;
&lt;p&gt;A few years ago, I made some attempts to learn the basics of Python but since I never really used it in real life, I kind of forgot everything. Thanks to ChatGPT I then learned that it’s actually possible to run python code inline in any PowerShell script. Good for me.&lt;/p&gt;
&lt;p&gt;Now I have a neat little script which not only copies the LineURI of all Teams Phone users to Azure AD, but it also prettifies them in the same way as TAC and the Teams client do!&lt;/p&gt;
&lt;h3 id=&#34;the-script&#34;&gt;The Script
&lt;/h3&gt;&lt;p&gt;Note: The script has only been tested on Windows 11 using Python 3.11.1.&lt;/p&gt;
&lt;h4 id=&#34;prerequisties&#34;&gt;Prerequisties
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Install &lt;a class=&#34;link&#34; href=&#34;https://www.python.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Python&lt;/a&gt; on your machine&lt;/li&gt;
&lt;li&gt;Run the following command to install the &lt;strong&gt;phonenumbers&lt;/strong&gt; library &lt;code&gt;python -m pip install phonenumbers&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Clone the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/tree/main&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;repository&lt;/a&gt; from my GitHub account &lt;br&gt;
&lt;code&gt;git clone [https://github.com](https://github.com)/mozziemozz/TeamsPhoneAutomation.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make sure that the &lt;strong&gt;MicrosoftTeams&lt;/strong&gt; and &lt;strong&gt;Microsoft.Graph&lt;/strong&gt; PowerShell modules are installed&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;code&#34;&gt;Code
&lt;/h4&gt;&lt;p&gt;This is the script. It connects to Teams and Graph, gets all Teams users with a LineURI and then prettifies each LineURI before it’s set on the user’s BuinessPhones property in Azure AD.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/c05ddbd07a9b102fbf94ef1c30bba490.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;If you prefer connecting via Azure AD Service Principal, there’s also a &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Scripts/PhoneNumberFormatting/PrettifyPhoneNumbersServicePrincipal.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;version&lt;/a&gt; in the repo which supports that.&lt;/p&gt;
&lt;p&gt;Keep in mind that you need to make sure that your App has all required graph scopes added and consented and that the Service Principal is also assigned the &lt;strong&gt;Skype for Business Online Administrator&lt;/strong&gt; role in Azure AD. For more information on how to set up and automated runbook, please refer to &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf&#34; &gt;this&lt;/a&gt; article.&lt;/p&gt;
&lt;h4 id=&#34;result&#34;&gt;Result
&lt;/h4&gt;&lt;p&gt;The output of the script will look like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/prettify-and-sync-teams-phone-numbers-to-azure-ad-e973755f83d5/1WoHkH5WLrR9gcBGDygeDPw.png&#34;
	width=&#34;1498&#34;
	height=&#34;271&#34;
	srcset=&#34;https://heusser.pro/p/prettify-and-sync-teams-phone-numbers-to-azure-ad-e973755f83d5/1WoHkH5WLrR9gcBGDygeDPw_hu_820a06a8ac62ae9c.png 480w, https://heusser.pro/p/prettify-and-sync-teams-phone-numbers-to-azure-ad-e973755f83d5/1WoHkH5WLrR9gcBGDygeDPw_hu_2b9ff669b226fde7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;552&#34;
		data-flex-basis=&#34;1326px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;As we can see, the phone number of the Azure AD user object has now been changed to the same number as it is in Teams. For better readability and aesthetics, spaces have been added where users would expect them for a phone number from the respective region.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/prettify-and-sync-teams-phone-numbers-to-azure-ad-e973755f83d5/1YrjWmqbCzpnUtpqwRLjtLg.png&#34;
	width=&#34;587&#34;
	height=&#34;300&#34;
	srcset=&#34;https://heusser.pro/p/prettify-and-sync-teams-phone-numbers-to-azure-ad-e973755f83d5/1YrjWmqbCzpnUtpqwRLjtLg_hu_ef19840fb8d1f7de.png 480w, https://heusser.pro/p/prettify-and-sync-teams-phone-numbers-to-azure-ad-e973755f83d5/1YrjWmqbCzpnUtpqwRLjtLg_hu_799b84a3f3f1011d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;195&#34;
		data-flex-basis=&#34;469px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, it can take multiple days until updated phone numbers are visible in Teams or Outlook due to heavy client-side caching.&lt;/p&gt;
&lt;p&gt;I hope that this script helps you to keep LineURIs and BusinessPhones in Azure AD in sync or that you can even use it to automate that process.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Translate Microsoft 365 License GUIDs to Product Names in PowerShell</title>
        <link>https://heusser.pro/p/translate-microsoft-365-license-guids-to-product-names-in-powershell-e8fa373ace16/</link>
        <pubDate>Fri, 02 Jun 2023 19:57:48 +0000</pubDate>
        
        <guid>https://heusser.pro/p/translate-microsoft-365-license-guids-to-product-names-in-powershell-e8fa373ace16/</guid>
        <description>&lt;p&gt;Working with Microsoft 365 and Azure AD licenses and understanding them can be quite the task for many system administrators. Did you know that the official &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/azure/active-directory/enterprise-users/licensing-service-plan-reference&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Microsoft Learn article&lt;/a&gt; lists more than &lt;strong&gt;3230&lt;/strong&gt; different SKU IDs and names as of June 1st 2023?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/translate-microsoft-365-license-guids-to-product-names-in-powershell-e8fa373ace16/00pCCCvKg0Z8d8u1L.jpg&#34;
	width=&#34;1024&#34;
	height=&#34;1024&#34;
	srcset=&#34;https://heusser.pro/p/translate-microsoft-365-license-guids-to-product-names-in-powershell-e8fa373ace16/00pCCCvKg0Z8d8u1L_hu_c250dddf0912feb8.jpg 480w, https://heusser.pro/p/translate-microsoft-365-license-guids-to-product-names-in-powershell-e8fa373ace16/00pCCCvKg0Z8d8u1L_hu_d42a5c5efffb6537.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The problem is that Graph or PowerShell Modules never return a product name that actually means something to an admin. The names you’ll see there are not the same ones we’re used to from the Azure or M365 Admin Portals.&lt;/p&gt;
&lt;p&gt;Let’s take a look at what the &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/graph/api/subscribedsku-list?view=graph-rest-1.0&amp;amp;tabs=http&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;subscribedSkus&lt;/strong&gt;&lt;/a&gt; Graph Endpoint returns. &lt;br&gt;
This is how we get a list of all SKUs a tenant is subscribed to.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$licenseSkus&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Invoke-RestMethod&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$Header&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://graph.microsoft.com/v1.0/subscribedSkus&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Obviously, most tenants have many different SKUs. For the sake of simplicity, I’ll just show the details of the last entry returned by Graph.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PS C:\Temp\\GitHub\TeamsPhoneAutomation&amp;gt; $sku = $licenseSkus.value[-1]  
PS C:\Temp\\GitHub\TeamsPhoneAutomation&amp;gt; $sku  
  
  
accountName      : company  
accountId        : 4bffbf87-53a0-4fce-b58b-xxxxxxxxxxxx  
appliesTo        : User  
capabilityStatus : Enabled  
consumedUnits    : 7  
id               : 4bffbf87-53a0-4fce-b58b-xxxxxxxxxxxx_18181a46-0d4e-45cd-891e-60aabd171b4e  
skuId            : 18181a46-0d4e-45cd-891e-60aabd171b4e  
skuPartNumber    : STANDARDPACK  
subscriptionIds  : {3474312c-2333-47bc-9d87-da1cfcb75f85}  
prepaidUnits     : @{enabled=9; suspended=0; warning=0}  
servicePlans     : {@{servicePlanId=a82fbf69-b4d7-49f4-83a6-915b2cf354f4; servicePlanName=VIVAENGAGE_CORE; provisioningStatus=PendingProvisioning;   
                   appliesTo=User}, @{servicePlanId=199a5c09-e0ca-4e37-8f7c-b05d533e1ea2; servicePlanName=MICROSOFTBOOKINGS; provisioningStatus=Success;   
                   appliesTo=User}, @{servicePlanId=b76fb638-6ba6-402a-b9f9-83d28acb3d86; servicePlanName=VIVA_LEARNING_SEEDED; provisioningStatus=Success;   
                   appliesTo=User}, @{servicePlanId=db4d623d-b514-490b-b7ef-8885eee514de; servicePlanName=Nucleus; provisioningStatus=Success;   
                   appliesTo=Company}...}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;strong&gt;skuPartNumber&lt;/strong&gt; is what Microsoft calls &lt;strong&gt;String ID&lt;/strong&gt; on their learn article. As we all know, Microsoft is no stranger to changing or rebranding product names. I have never seen them change an skuPartNumber though. Even though we can count on that name staying the same, it most likely won’t mean much to most people. Now what the heck is a &lt;strong&gt;STANDARDPACK!?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;A quick search on the Microsoft Learn article will do the trick and give us the desired information. STANDARDPACK = Office 365 E1. &lt;br&gt;
But there’s a better way!&lt;/p&gt;
&lt;p&gt;What’s really nice is that Microsoft also provides a download link to a CSV file which contains all the SKUs, Ids and names. If it can be downloaded by using a browser, it can also be downloaded by PowerShell.&lt;/p&gt;
&lt;p&gt;All we need to do is &lt;code&gt;Invoke-RestMethod&lt;/code&gt; and use &lt;code&gt;| ConvertFrom-CSV&lt;/code&gt; to convert the retrieved content to a PowerShell object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$translationTable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Invoke-RestMethod&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://download.microsoft.com/download/e/3/e/e3e9faf2-f28b-490a-9ada-c6089a1fc5b0/Product%20names%20and%20service%20plan%20identifiers%20for%20licensing.csv&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;ConvertFrom-Csv&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;The SKU information retrieved by graph is already in our &lt;code&gt;$sku&lt;/code&gt; variable. So, all that’s left to do is a simple one-liner to search the &lt;code&gt;$translationTable.GUID&lt;/code&gt; for a matching &lt;code&gt;$sku.skuId&lt;/code&gt; .&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$skuNamePretty&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$translationTable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Where-Object&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{$\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;GUID&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-eq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$sku&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;skuId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Sort-Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_Display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_Name&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Unique&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Product&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_Display&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_Name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This will translate the skuPartNumber to the familiar License name known from the admin portals.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PS C:\Temp\GitHub\TeamsPhoneAutomation&amp;gt; $skuNamePretty  
Office 365 E1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I’ve put all the above code snippets together and created a little more sophisticated, yet still very basic script which will output a table with all the available license names. Please note that you’ll need an existing Azure AD App Registration/Service Principal which has at least the &lt;strong&gt;Organization.Read.All&lt;/strong&gt; Graph permission.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/174b665e5aa94cbd3c1421665032cbb0.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;The output will look like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/translate-microsoft-365-license-guids-to-product-names-in-powershell-e8fa373ace16/1wQy6obQWLE2uVOhZjoPcw.png&#34;
	width=&#34;1014&#34;
	height=&#34;622&#34;
	srcset=&#34;https://heusser.pro/p/translate-microsoft-365-license-guids-to-product-names-in-powershell-e8fa373ace16/1wQy6obQWLE2uVOhZjoPcw_hu_3a1802f720b13e70.png 480w, https://heusser.pro/p/translate-microsoft-365-license-guids-to-product-names-in-powershell-e8fa373ace16/1wQy6obQWLE2uVOhZjoPcw_hu_cc430893832cc2a2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;163&#34;
		data-flex-basis=&#34;391px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;As far as I understand, the download URL of the CSV should not be changed once a new version is uploaded. I verified this by viewing GitHubs &lt;a class=&#34;link&#34; href=&#34;https://github.com/MicrosoftDocs/azure-docs/commit/f75ae8190c08cffd5c73088b723226ece4176fc7&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;commit history for that article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/translate-microsoft-365-license-guids-to-product-names-in-powershell-e8fa373ace16/1q9Oz2Udf4ttHNvk94SCEPQ.png&#34;
	width=&#34;1812&#34;
	height=&#34;799&#34;
	srcset=&#34;https://heusser.pro/p/translate-microsoft-365-license-guids-to-product-names-in-powershell-e8fa373ace16/1q9Oz2Udf4ttHNvk94SCEPQ_hu_6464ff59edccd92b.png 480w, https://heusser.pro/p/translate-microsoft-365-license-guids-to-product-names-in-powershell-e8fa373ace16/1q9Oz2Udf4ttHNvk94SCEPQ_hu_4c535eebbdf50cfe.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;226&#34;
		data-flex-basis=&#34;544px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;As you can see, even though the date in the note was updated, the URL stayed the same. That’s why it should be safe to assume that we won’t need to update that URL in any script where we download that list.&lt;/p&gt;
&lt;p&gt;If you’re wondering what my use case for this was… I was creating an Azure runbook which monitors remaining free licenses and sends alerts to a Teams channel in case any of the licenses fall below a certain threshold. Obviously, I wanted to mention the well-known license name and not the string ID returned by Graph on the messages sent to Teams. Thanks to the CSV file hosted by Microsoft my scripts can now always grab the latest data and use that to transalte any license GUID into something more recognizable.&lt;/p&gt;
&lt;p&gt;I hope that this helps you too create more robust and better scripts when you need to deal with licensing in MS Graph or PowerShell.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Simultaneously Forward Calls to Multiple Numbers in Teams</title>
        <link>https://heusser.pro/p/simultaneously-forward-calls-to-multiple-numbers-in-teams-d228adb805b7/</link>
        <pubDate>Sun, 14 May 2023 08:23:26 +0000</pubDate>
        
        <guid>https://heusser.pro/p/simultaneously-forward-calls-to-multiple-numbers-in-teams-d228adb805b7/</guid>
        <description>&lt;p&gt;When configuring call flows in Microsoft Teams, one question I hear a lot is if a call can be forwarded to multiple external numbers at the same time.&lt;/p&gt;
&lt;p&gt;This most likely applies to after-hours on-call scenarios where it’s absolutely crucial that somebody will eventually answer the call.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/simultaneously-forward-calls-to-multiple-numbers-in-teams-d228adb805b7/0rL2fJDRh74kKQK7Z.jpg&#34;
	width=&#34;1024&#34;
	height=&#34;1024&#34;
	srcset=&#34;https://heusser.pro/p/simultaneously-forward-calls-to-multiple-numbers-in-teams-d228adb805b7/0rL2fJDRh74kKQK7Z_hu_5a3eaf8bc6c9c4a4.jpg 480w, https://heusser.pro/p/simultaneously-forward-calls-to-multiple-numbers-in-teams-d228adb805b7/0rL2fJDRh74kKQK7Z_hu_75186815f37b0f8f.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Currently, this is impossible with Teams call queues. However, this is by design. The purpose of a queue is that the call stays within the queue and the company has control over the call for the entire flow of the call. In other words, the queue makes sure that the call stays within company boundaries by ignoring all user configured call answering rules. So, if a user has configured his calls to immediately forward to a personal cell phone, the queue simply doesn’t care and will present the call to the user in Teams anyway.&lt;/p&gt;
&lt;p&gt;If you must forward the call to multiple numbers at the same time, you can use regular Teams (Microsoft 365) users. I always suggest using dedicated, generic accounts for this, even though it’s an additional license cost. This will make management easier and ensures that no user is able to change the forwarding settings and mess with the call flow on their own.&lt;/p&gt;
&lt;p&gt;Since I did this in my lab, I used the users I already had to demonstrate this. This means that they have real sounding names and are not generically named accounts like I would use in a real-world scenario.&lt;/p&gt;
&lt;h4 id=&#34;how-to-configure-it&#34;&gt;How To Configure It
&lt;/h4&gt;&lt;p&gt;To configure forwarding to multiple external numbers simultaneously, identify where in your auto attendant or call queue the call must be forwarded.&lt;/p&gt;
&lt;p&gt;Next, think about to how many numbers the call must be forwarded. Create one Teams enterprise voice enabled user for each external target number. Then create one more Teams voice enabled user. On this user, configure a call group and add all the users which forward to external numbers immediately.&lt;/p&gt;
&lt;p&gt;Set this user’s call forwarding settings to either immediately forward to or also ring the call group.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/simultaneously-forward-calls-to-multiple-numbers-in-teams-d228adb805b7/1GFWLa0rX87G1PIvrBqX0jg.png&#34;
	width=&#34;1251&#34;
	height=&#34;640&#34;
	srcset=&#34;https://heusser.pro/p/simultaneously-forward-calls-to-multiple-numbers-in-teams-d228adb805b7/1GFWLa0rX87G1PIvrBqX0jg_hu_c92b3a18fdc4c3e6.png 480w, https://heusser.pro/p/simultaneously-forward-calls-to-multiple-numbers-in-teams-d228adb805b7/1GFWLa0rX87G1PIvrBqX0jg_hu_c46428d6cb3edf07.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;195&#34;
		data-flex-basis=&#34;469px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/simultaneously-forward-calls-to-multiple-numbers-in-teams-d228adb805b7/1Y70lmU10yu9gbNH8JZeJaQ.png&#34;
	width=&#34;1248&#34;
	height=&#34;787&#34;
	srcset=&#34;https://heusser.pro/p/simultaneously-forward-calls-to-multiple-numbers-in-teams-d228adb805b7/1Y70lmU10yu9gbNH8JZeJaQ_hu_52073134cd6b0231.png 480w, https://heusser.pro/p/simultaneously-forward-calls-to-multiple-numbers-in-teams-d228adb805b7/1Y70lmU10yu9gbNH8JZeJaQ_hu_147b7a241b540f2f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;158&#34;
		data-flex-basis=&#34;380px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The accounts which are members of the call group must all be configured like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/simultaneously-forward-calls-to-multiple-numbers-in-teams-d228adb805b7/1XH5BluccXOhJiCrPyMkDQ.png&#34;
	width=&#34;1243&#34;
	height=&#34;650&#34;
	srcset=&#34;https://heusser.pro/p/simultaneously-forward-calls-to-multiple-numbers-in-teams-d228adb805b7/1XH5BluccXOhJiCrPyMkDQ_hu_d751e17c601d8a3.png 480w, https://heusser.pro/p/simultaneously-forward-calls-to-multiple-numbers-in-teams-d228adb805b7/1XH5BluccXOhJiCrPyMkDQ_hu_7894773101ec806a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;191&#34;
		data-flex-basis=&#34;458px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;While the first user can be configured to either also ring or immediately forward to the call group, the call group members must be configured to &lt;strong&gt;immediately forward&lt;/strong&gt;. If they’re set to also ring to an external number, it will not work.&lt;/p&gt;
&lt;h4 id=&#34;call-flowdiagram&#34;&gt;Call Flow Diagram
&lt;/h4&gt;&lt;p&gt;I updated the M365 Call Flow Visualizer and added two new parameters.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-ShowNestedUserCallGroups  
    Specifies if call groups of users should be expanded and included into the diagram.  
    Required:           false  
    Type:               boolean  
    Default value:      false  

-ShowNestedUserDelegates  
    Specifies if delegates s of users should be expanded and included into the diagram.  
    Required:           false  
    Type:               boolean  
    Default value:      false
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This allows us to indefinitely expand and display the user calling settings of call group members and delegates in the diagrams as well.&lt;/p&gt;
&lt;p&gt;Please note that these features are currently only available in the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer/tree/dev&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DEV&lt;/a&gt; branch of the GitHub repo. I did my best to thoroughly test this but since there are basically unlimited possibilities of how users are interlinked within user call groups and delegates this is quite hard. There may still be some bugs, if you encounter any, please let me know.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/simultaneously-forward-calls-to-multiple-numbers-in-teams-d228adb805b7/1dgXzEKcsD0wZF74b5qg.png&#34;
	width=&#34;674&#34;
	height=&#34;1694&#34;
	srcset=&#34;https://heusser.pro/p/simultaneously-forward-calls-to-multiple-numbers-in-teams-d228adb805b7/1dgXzEKcsD0wZF74b5qg_hu_a6cc687aa00630b6.png 480w, https://heusser.pro/p/simultaneously-forward-calls-to-multiple-numbers-in-teams-d228adb805b7/1dgXzEKcsD0wZF74b5qg_hu_9beaba2cb0ef2a5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;39&#34;
		data-flex-basis=&#34;95px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/simultaneously-forward-calls-to-multiple-numbers-in-teams-d228adb805b7/1R6tSs1eHHGO255tRCxAkg.png&#34;
	width=&#34;637&#34;
	height=&#34;1694&#34;
	srcset=&#34;https://heusser.pro/p/simultaneously-forward-calls-to-multiple-numbers-in-teams-d228adb805b7/1R6tSs1eHHGO255tRCxAkg_hu_6250c28e0d894104.png 480w, https://heusser.pro/p/simultaneously-forward-calls-to-multiple-numbers-in-teams-d228adb805b7/1R6tSs1eHHGO255tRCxAkg_hu_d95be82c760fbb33.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;37&#34;
		data-flex-basis=&#34;90px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;other-options&#34;&gt;Other Options
&lt;/h4&gt;&lt;p&gt;This also works if you use call delegation instead of a call group with both immediately forward and also ring on the first user. I tested it with Microsoft Calling Plans, but it should work with Direct Routing or Operator Connect as well. The maximum amount of simultaneous external forwards via call group I tested was three and that still worked as expected.&lt;/p&gt;
&lt;p&gt;I recommend using a call group over delegates because this gives you a little more flexibility. While delegates will always simultaneously ring all delegates, a call group can be configured for serial ring as well. In this case, it will always ring for &lt;strong&gt;20 seconds&lt;/strong&gt; per call group member before the next one is tried. This time out cannot be changed as of today.&lt;/p&gt;
&lt;h4 id=&#34;caveats&#34;&gt;Caveats
&lt;/h4&gt;&lt;p&gt;When you do this, you need to be aware of issues that might occur. At the beginning of this article, I briefly mentioned that the purpose of a queue is to stay in control of the call for the entire time. That’s not the case when using external forwarding on user calling settings. For example, if one of the external targets is not reachable by e.g. having a rather short voicemail timeout, is in flight mode or just has no reception, calls might get lost on personal voicemail boxes outside of a company’s control. Once a call hits any voicemail box, the call is technically connected and will stop ringing the other targets, even if parallel ringing is configured on the call group. This also applies to call groups configured in serial ring. If e.g. the first target is not reachable, and the call goes to voicemail the other targets won’t even be tried anymore.&lt;/p&gt;
&lt;p&gt;It’s also noteworthy that user configured calling settings can become extremely complex and it’s easy for users (or admins for that matter) to build loops or enable forwards without knowing about it.&lt;/p&gt;
&lt;p&gt;The same goes for the M365 Call Flow Visualizer, I don’t think that it’s possible to accurately display everything that’s configured in nested user calling settings. I tried my best to render call flows where a serial ring is configured on a user configured call group though. As an example, I configured the same call group which was already shown in the above diagram for serial ring. Now all the call group targets are displayed in chronological order, and you can see how the call trickles down to the next target after 20 seconds.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/simultaneously-forward-calls-to-multiple-numbers-in-teams-d228adb805b7/14omtG0AeKdTOD4TzNItlA.png&#34;
	width=&#34;690&#34;
	height=&#34;2971&#34;
	srcset=&#34;https://heusser.pro/p/simultaneously-forward-calls-to-multiple-numbers-in-teams-d228adb805b7/14omtG0AeKdTOD4TzNItlA_hu_21b2714bedecc897.png 480w, https://heusser.pro/p/simultaneously-forward-calls-to-multiple-numbers-in-teams-d228adb805b7/14omtG0AeKdTOD4TzNItlA_hu_cd0e4d7fbd1af96d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;23&#34;
		data-flex-basis=&#34;55px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Unlike with call queues and auto attendants, where the M365 Call Flow Visualizer does a fantastic job displaying things as they are, please take complicated nested user call groups and delegate flows with a grain of salt. At least for now.&lt;/p&gt;
&lt;p&gt;Look at this call flow for example. When the call gets to &lt;strong&gt;Bill Stearn&lt;/strong&gt; it will also ring his call group in serial order. Thus, it will ring the mobile number &lt;strong&gt;+4178857****&lt;/strong&gt; for 20 seconds. Because there is an unanswered timeout of 20s configured for &lt;strong&gt;Bill&lt;/strong&gt; the call will then be forwarded to his delegates where the call will be forwarded to &lt;strong&gt;Bobby&lt;/strong&gt; and &lt;strong&gt;Mike&lt;/strong&gt; and they have an immediate forwarding configured to their mobiles.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/simultaneously-forward-calls-to-multiple-numbers-in-teams-d228adb805b7/1cZyXiLxV40aMOM5YsXkbUw.png&#34;
	width=&#34;882&#34;
	height=&#34;3730&#34;
	srcset=&#34;https://heusser.pro/p/simultaneously-forward-calls-to-multiple-numbers-in-teams-d228adb805b7/1cZyXiLxV40aMOM5YsXkbUw_hu_2b0545fc8ba5ed0.png 480w, https://heusser.pro/p/simultaneously-forward-calls-to-multiple-numbers-in-teams-d228adb805b7/1cZyXiLxV40aMOM5YsXkbUw_hu_220bb95abada4b62.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;23&#34;
		data-flex-basis=&#34;56px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;All the users who are members of the call group are linked after each other because the call group is configured in serial ring. The links which point from the delegate sub graph (which is always parallel ring) to the delegate users are still linked to the correct user but it’s not very easy to understand what’s going on.&lt;/p&gt;
&lt;p&gt;When we think about the delegate flow, the chaining from &lt;strong&gt;Bobby’s&lt;/strong&gt; time out of 20s doesn’t actually apply anymore and the call won’t be forwarded to &lt;strong&gt;Mike&lt;/strong&gt; because that part of the diagram only applies to the serial order of &lt;strong&gt;Bill’s&lt;/strong&gt; call group.&lt;/p&gt;
&lt;p&gt;Last but not least, &lt;strong&gt;Wendy&lt;/strong&gt; is also included in the call flow even though a call could never go this far in that specific call flow because of the applied time outs.&lt;/p&gt;
&lt;p&gt;Unfortunately, I currently don’t see any way I could solve this with the visualizer script.&lt;/p&gt;
&lt;p&gt;I’d like to point out that configuring both a call group and delegates on the same user seems extremely unlikely and is something I would generally refrain from.&lt;/p&gt;
&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h4&gt;&lt;p&gt;Although it’s not an ideal solution, using generic user accounts and call groups for certain scenarios is for sure a creative one. In some cases, this might help you solve a very specific niche scenario which previously seemed impossible.&lt;/p&gt;
&lt;p&gt;I do recommend using auto attendants and call queues to build your call flows whenever possible. If you must use call groups, I advise you to keep it simple and create generic accounts to which only Teams admins have access to. Otherwise, it’s free-for-all kind of situation and users can mess with your configuration as they please.&lt;/p&gt;
&lt;p&gt;If you stick with simple scenarios (like shown in the first three diagrams in this article) and avoid building call group loops or timeouts which cancel each other out, I don’t see any issues why you shouldn’t do this if you really need to.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Teams Phone Number Management List Part 2</title>
        <link>https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/</link>
        <pubDate>Sat, 08 Apr 2023 16:02:49 +0000</pubDate>
        
        <guid>https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/</guid>
        <description>&lt;p&gt;This article builds on the following article.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf&#34; &gt;Teams Phone Number Management on a Budget | by martin heusser | Mar, 2023 | Medium&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Please make sure you read that one first.&lt;/p&gt;
&lt;p&gt;After I built the list initially, I quickly realized that there’s still room for improvement. Especially a feature to assign and unassign phone numbers through the list would be incredibly handy. This would allow us to delegate this task to users without Teams Admin Center access.&lt;/p&gt;
&lt;p&gt;The &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;repository&lt;/a&gt; has been updated and already includes the code required for number assignment. If you’ve already deployed it, just delete the resource group in Azure and re-deploy. Of course, you can also replace the existing files with the new scripts and variables by hand if you know what you’re doing. But since there’s a deployment script available, I recommend deleting and re-deploying.&lt;/p&gt;
&lt;p&gt;Let’s check out the new features first and go over the manual changes required later.&lt;/p&gt;
&lt;h3 id=&#34;new-features&#34;&gt;New Features
&lt;/h3&gt;&lt;h4 id=&#34;country&#34;&gt;Country
&lt;/h4&gt;&lt;p&gt;All Calling Plan and Operator Connect phone numbers already include a country attribute. Therefore, I decided to use the property which is already known to Teams. The &lt;strong&gt;Country&lt;/strong&gt; column now includes the two-digit ISO code instead of the country’s full name.&lt;/p&gt;
&lt;p&gt;For consistency, the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Resources/CountryLookupTable.json&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CountryLookupTable.json&lt;/a&gt; has been updated to include the ISO codes as well. Please see the &lt;strong&gt;Changes in V2&lt;/strong&gt; section of this article if the Country does not always match your direct routing numbers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1fXx1TOgZFuZVhjx1eDjUQ.png&#34;
	width=&#34;2262&#34;
	height=&#34;504&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1fXx1TOgZFuZVhjx1eDjUQ_hu_7987eedd010e75ba.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1fXx1TOgZFuZVhjx1eDjUQ_hu_39879f56bf6aa2ea.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;448&#34;
		data-flex-basis=&#34;1077px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;city&#34;&gt;City
&lt;/h4&gt;&lt;p&gt;The purpose of this list is to make the management of phone numbers easier. The more information you have, the better you can filter. That’s why I added a &lt;strong&gt;City&lt;/strong&gt; column as well.&lt;/p&gt;
&lt;h4 id=&#34;number-reservation&#34;&gt;Number Reservation
&lt;/h4&gt;&lt;p&gt;The &lt;strong&gt;Status&lt;/strong&gt; column is now a drop-down list. Setting a number to &lt;strong&gt;Reserved&lt;/strong&gt; won’t do anything yet, except letting other people which use the list know that this number should not be assigned to any user or resource account.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1hCvnQlLcivK4l6aqVptQ.png&#34;
	width=&#34;1804&#34;
	height=&#34;266&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1hCvnQlLcivK4l6aqVptQ_hu_17ad2a280247b488.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1hCvnQlLcivK4l6aqVptQ_hu_7080d2278fa93b72.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;678&#34;
		data-flex-basis=&#34;1627px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Because this is a SharePoint list, we can add a comment on that entry.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/19B3gsc94JUVpwVXhbEiLw.png&#34;
	width=&#34;1186&#34;
	height=&#34;498&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/19B3gsc94JUVpwVXhbEiLw_hu_53b9080a00ad6d40.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/19B3gsc94JUVpwVXhbEiLw_hu_35151cf7ecbbf80.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;238&#34;
		data-flex-basis=&#34;571px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The runbook will not make any changes or updates to that entry until the number is assigned or the Status is changed by hand again.&lt;/p&gt;
&lt;h4 id=&#34;assign-anumber&#34;&gt;Assign a Number
&lt;/h4&gt;&lt;p&gt;To assign a number, simply set a number to &lt;strong&gt;Reserved&lt;/strong&gt; and choose a &lt;strong&gt;User Profile&lt;/strong&gt; from the people picker.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1QNTzy43yr2pBe9Ow3xAWA.png&#34;
	width=&#34;1067&#34;
	height=&#34;246&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1QNTzy43yr2pBe9Ow3xAWA_hu_b766eb874636bac3.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1QNTzy43yr2pBe9Ow3xAWA_hu_cbac88d374b7be2e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;433&#34;
		data-flex-basis=&#34;1040px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The list will then look like this. There’s a &lt;strong&gt;User Profile&lt;/strong&gt; linked but the &lt;strong&gt;User Principal Name&lt;/strong&gt; is still unassigned.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1xrSnRsutiS2xUJ6y4U6Lw.png&#34;
	width=&#34;1581&#34;
	height=&#34;266&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1xrSnRsutiS2xUJ6y4U6Lw_hu_eee5a65fe39f16fb.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1xrSnRsutiS2xUJ6y4U6Lw_hu_fc9bb1858e5ff133.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;594&#34;
		data-flex-basis=&#34;1426px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The next time the runbook runs, it will try to assign the number. If the assignment fails for any reason, the Staus will change to &lt;strong&gt;Assignment Error&lt;/strong&gt; but the linked User Profile will be retained.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1z8KikMnOal4Oa2WxTYQ73A.png&#34;
	width=&#34;1586&#34;
	height=&#34;260&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1z8KikMnOal4Oa2WxTYQ73A_hu_d6d92f5a90c5df3b.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1z8KikMnOal4Oa2WxTYQ73A_hu_58f872185e3750c2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;610&#34;
		data-flex-basis=&#34;1464px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Currently, the list only reflects a generic error. The runbook output, however, does include more information.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/11OI1hJz1RuwkoEm43rU0Q.png&#34;
	width=&#34;809&#34;
	height=&#34;107&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/11OI1hJz1RuwkoEm43rU0Q_hu_ec2466f19ebf88ce.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/11OI1hJz1RuwkoEm43rU0Q_hu_e1ed31cbe8a879a1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;756&#34;
		data-flex-basis=&#34;1814px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The script will even assign a voice routing policy for direct routing numbers if you specify one in the CountryLookupTable.json file. I will show you how to do that at the end of this article.&lt;/p&gt;
&lt;p&gt;If you really want to be on top of your game, you can also create a rule to notify you of failed assignments.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/151zUCwelWtbrDgbnzkfNQ.png&#34;
	width=&#34;2300&#34;
	height=&#34;1259&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/151zUCwelWtbrDgbnzkfNQ_hu_74fba7abba987dfa.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/151zUCwelWtbrDgbnzkfNQ_hu_5840c872664539b1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;438px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;unassign-anumber&#34;&gt;Unassign a Number
&lt;/h4&gt;&lt;p&gt;To unassign a number, simply change the Status to &lt;strong&gt;Remove Pending&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1o5Nh9gEBN07IBhByFt8Few.png&#34;
	width=&#34;1582&#34;
	height=&#34;267&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1o5Nh9gEBN07IBhByFt8Few_hu_eea8772a560afc0c.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1o5Nh9gEBN07IBhByFt8Few_hu_98397c55cc2126d0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;592&#34;
		data-flex-basis=&#34;1422px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The number will then be removed from the user, the next time the runbook is running.&lt;/p&gt;
&lt;h4 id=&#34;performance-improvements&#34;&gt;Performance Improvements
&lt;/h4&gt;&lt;p&gt;I’ve also made some changes which will improve the performance of the script dramatically. I discovered a couple of redundant Graph requests which have now been reduced to the minimum required.&lt;/p&gt;
&lt;h3 id=&#34;changes-inv2&#34;&gt;Changes in V2
&lt;/h3&gt;&lt;h4 id=&#34;changes-to-thelist&#34;&gt;Changes to the List
&lt;/h4&gt;&lt;p&gt;Edit the &lt;strong&gt;Status&lt;/strong&gt; column of your list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1P2a8Jd5iHaAPfAvS6IglA.png&#34;
	width=&#34;1424&#34;
	height=&#34;518&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1P2a8Jd5iHaAPfAvS6IglA_hu_f2c97fe8e728aade.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1P2a8Jd5iHaAPfAvS6IglA_hu_41b851539e45c8db.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;274&#34;
		data-flex-basis=&#34;659px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Change the &lt;strong&gt;Type&lt;/strong&gt; from &lt;strong&gt;Single line of Text&lt;/strong&gt; to &lt;strong&gt;Choice&lt;/strong&gt; and add the following choices.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1scOs84KlwMBYFhiCNnG3Q.png&#34;
	width=&#34;484&#34;
	height=&#34;836&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1scOs84KlwMBYFhiCNnG3Q_hu_fe698f43eac36da.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1scOs84KlwMBYFhiCNnG3Q_hu_3d857631019ff1fd.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;57&#34;
		data-flex-basis=&#34;138px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Save the changes to the &lt;strong&gt;Status&lt;/strong&gt; column.&lt;/p&gt;
&lt;p&gt;Now add a new &lt;strong&gt;Text&lt;/strong&gt; column.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1cjsXM6TTXhTYVAZGMag.png&#34;
	width=&#34;837&#34;
	height=&#34;636&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1cjsXM6TTXhTYVAZGMag_hu_26dd21e9f5f39347.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1cjsXM6TTXhTYVAZGMag_hu_a40be6c259a7cc94.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;131&#34;
		data-flex-basis=&#34;315px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Name it &lt;strong&gt;City&lt;/strong&gt; and choose Type &lt;strong&gt;Single line of text.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1QXZyFo02BJglprnd8cS4og.png&#34;
	width=&#34;479&#34;
	height=&#34;689&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1QXZyFo02BJglprnd8cS4og_hu_d3b5bf52ce169617.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1QXZyFo02BJglprnd8cS4og_hu_63d83db3a0c206fc.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;69&#34;
		data-flex-basis=&#34;166px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;changes-to-theflow&#34;&gt;Changes to the Flow
&lt;/h3&gt;&lt;h4 id=&#34;update-trigger-condition&#34;&gt;Update Trigger Condition
&lt;/h4&gt;&lt;p&gt;In your flow’s trigger condition, delete the existing condition and paste the following expression.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 08.08.2023&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thanks to a community member of my Teams Phone Admin &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/discord.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Discord Server&lt;/a&gt; I was made aware that the trigger condition can fail if the UPN and the email address case did not match. Below is the corrected trigger condition which includes a &lt;code&gt;toLower()&lt;/code&gt; expression as well.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;/Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;@or(&lt;br&gt;
and(&lt;br&gt;
not(equals(triggerOutputs()?[&amp;lsquo;body/User_x0020_Principal_x0020_Name&amp;rsquo;], &amp;lsquo;Unassigned&amp;rsquo;)),&lt;br&gt;
not(contains(triggerBody(), &amp;lsquo;UserProfile&amp;rsquo;))&lt;br&gt;
),&lt;br&gt;
not(equals(toLower(triggerOutputs()?[&amp;lsquo;body/User_x0020_Principal_x0020_Name&amp;rsquo;]), toLower(triggerOutputs()?[&amp;lsquo;body/UserProfile&amp;rsquo;][&amp;lsquo;Email&amp;rsquo;]))),&lt;br&gt;
and(&lt;br&gt;
contains(triggerBody(), &amp;lsquo;UserProfile&amp;rsquo;),&lt;br&gt;
not(equals(triggerOutputs()?[&amp;lsquo;body/User_x0020_Principal_x0020_Name&amp;rsquo;], &amp;lsquo;Unassigned&amp;rsquo;)),&lt;br&gt;
not(contains(triggerBody(), &amp;lsquo;TeamsAdminCenter&amp;rsquo;))&lt;br&gt;
)&lt;br&gt;
)&lt;/p&gt;
&lt;p&gt;The expression is now also included in the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Resources/FlowTriggerCondition.txt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;repository&lt;/a&gt; for better readability. The line breaks will be automatically removed once you paste it in Power Automate.&lt;/p&gt;
&lt;p&gt;This will also trigger the flow, when a &lt;strong&gt;User Profile&lt;/strong&gt; was added manually through the list (not by the flow) which is what happens when a list user wants to assign a number to a new Teams User.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/15XzTMBRpRFoAN8QWg0wg.png&#34;
	width=&#34;1658&#34;
	height=&#34;257&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/15XzTMBRpRFoAN8QWg0wg_hu_384d0a12921df924.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/15XzTMBRpRFoAN8QWg0wg_hu_3d57b7770865b63b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;645&#34;
		data-flex-basis=&#34;1548px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;add-another-condition&#34;&gt;Add Another Condition
&lt;/h4&gt;&lt;p&gt;I don’t know why it didn’t occur to me initially but instead of using the runbook to recreate items which have been deleted by the flow, we can just use the flow to do that as well. The reason why we need to delete and re-create is because setting the User Profile to &lt;strong&gt;null&lt;/strong&gt; did not work in Power Automate.&lt;/p&gt;
&lt;p&gt;In the first &lt;strong&gt;If yes&lt;/strong&gt; action, we have to add another condition which checks if the &lt;strong&gt;Status Value&lt;/strong&gt; is equal to &lt;strong&gt;Unassigned.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/11borC4Preqwfg27E0VYQA.png&#34;
	width=&#34;926&#34;
	height=&#34;296&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/11borC4Preqwfg27E0VYQA_hu_65f998cf443c64ea.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/11borC4Preqwfg27E0VYQA_hu_b6c6ac53f28c38d1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;312&#34;
		data-flex-basis=&#34;750px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The existing &lt;strong&gt;Delete&lt;/strong&gt; &lt;strong&gt;item&lt;/strong&gt; action has to be copied to the clipboard, deleted, and then pasted inside the &lt;strong&gt;If yes&lt;/strong&gt; action of the second condition again.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1b0l089aKSKjnKzGhs2WLw.png&#34;
	width=&#34;1241&#34;
	height=&#34;125&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1b0l089aKSKjnKzGhs2WLw_hu_274f51ddd3211577.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1b0l089aKSKjnKzGhs2WLw_hu_fb6ee3d9480c04f2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;992&#34;
		data-flex-basis=&#34;2382px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/151IVw0NFOPlwJIyS5Z6A.png&#34;
	width=&#34;918&#34;
	height=&#34;326&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/151IVw0NFOPlwJIyS5Z6A_hu_ff7972a07f008623.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/151IVw0NFOPlwJIyS5Z6A_hu_8b82c47929ff006f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;281&#34;
		data-flex-basis=&#34;675px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;add-create-itemaction&#34;&gt;Add Create Item Action
&lt;/h4&gt;&lt;p&gt;In the second &lt;strong&gt;If yes&lt;/strong&gt; action, add a &lt;strong&gt;Create item&lt;/strong&gt; action after &lt;strong&gt;Delete&lt;/strong&gt; item with the following dynamic values.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1KEG3uPMLbf8mXKkAHXCBw.png&#34;
	width=&#34;964&#34;
	height=&#34;1421&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1KEG3uPMLbf8mXKkAHXCBw_hu_bb46b78655951724.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1KEG3uPMLbf8mXKkAHXCBw_hu_b52e61bf02ad26f4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;67&#34;
		data-flex-basis=&#34;162px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Here’s a new screenshot of the complete flow with collapsed boxes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1xF9V8IvU5ZFciYjH1fsqYg.png&#34;
	width=&#34;3158&#34;
	height=&#34;1242&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1xF9V8IvU5ZFciYjH1fsqYg_hu_e9dc00e1cbd2fb04.png 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/1xF9V8IvU5ZFciYjH1fsqYg_hu_1bc6b290d5e57cc4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;254&#34;
		data-flex-basis=&#34;610px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;changes-to-the-countrylookuptablejson&#34;&gt;Changes to the CountryLookupTable.json
&lt;/h3&gt;&lt;h4 id=&#34;add-more-preciseprefixes&#34;&gt;Add More Precise Prefixes
&lt;/h4&gt;&lt;p&gt;There are some countries which use the same phone prefix. If multiple matches are found, the function always uses the last match which might be wrong in many cases. To solve this, just edit the Json file yourself.&lt;/p&gt;
&lt;p&gt;For example, if you have Australian &lt;strong&gt;+61&lt;/strong&gt; numbers, but don’t have any numbers from Christmas Island or Cocos Islands (which also start with +61), just delete these entries from the Json.&lt;/p&gt;
&lt;p&gt;In case you have e.g. numbers from Canada and USA, which both start with &lt;strong&gt;+1,&lt;/strong&gt; you can also extend the prefix to include all digits which are common in all your number ranges from left to right.&lt;/p&gt;
&lt;p&gt;Original Entry&lt;/p&gt;
&lt;p&gt;{&lt;br&gt;
&amp;ldquo;Prefix&amp;rdquo;: &amp;ldquo;+1&amp;rdquo;,&lt;br&gt;
&amp;ldquo;CountryName&amp;rdquo;: &amp;ldquo;United States&amp;rdquo;,&lt;br&gt;
&amp;ldquo;Country&amp;rdquo;: &amp;ldquo;US&amp;rdquo;&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;Possible Entry Change&lt;/p&gt;
&lt;p&gt;{&lt;br&gt;
&amp;ldquo;Prefix&amp;rdquo;: &amp;ldquo;+1206&amp;rdquo;,&lt;br&gt;
&amp;ldquo;CountryName&amp;rdquo;: &amp;ldquo;United States&amp;rdquo;,&lt;br&gt;
&amp;ldquo;Country&amp;rdquo;: &amp;ldquo;US&amp;rdquo;&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;This example assumes that you have Canadian direct routing numbers starting with &lt;strong&gt;+1&lt;/strong&gt; and have US direct routing numbers which all start with &lt;strong&gt;+1206&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If you have more prefixes from the same country in your number ranges, just add more entries with different prefixes but with the same country.&lt;/p&gt;
&lt;p&gt;{&lt;br&gt;
&amp;ldquo;Prefix&amp;rdquo;: &amp;ldquo;+1206&amp;rdquo;,&lt;br&gt;
&amp;ldquo;CountryName&amp;rdquo;: &amp;ldquo;United States&amp;rdquo;,&lt;br&gt;
&amp;ldquo;Country&amp;rdquo;: &amp;ldquo;US&amp;rdquo;&lt;br&gt;
},&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;Prefix&amp;rdquo;: &amp;ldquo;+1323&amp;rdquo;,&lt;br&gt;
&amp;ldquo;CountryName&amp;rdquo;: &amp;ldquo;United States&amp;rdquo;,&lt;br&gt;
&amp;ldquo;Country&amp;rdquo;: &amp;ldquo;US&amp;rdquo;&lt;br&gt;
}&lt;/p&gt;
&lt;h4 id=&#34;add-voice-routing-policynames&#34;&gt;Add Voice Routing Policy Names
&lt;/h4&gt;&lt;p&gt;If you want to use the list for assignment of direct routing numbers, you’ll have to add the name of your voice routing policy for each country to the &lt;strong&gt;CountryLookupTable.json&lt;/strong&gt; file.&lt;/p&gt;
&lt;p&gt;{&lt;br&gt;
&amp;ldquo;Prefix&amp;rdquo;: &amp;ldquo;+41&amp;rdquo;,&lt;br&gt;
&amp;ldquo;CountryName&amp;rdquo;: &amp;ldquo;Switzerland&amp;rdquo;,&lt;br&gt;
&amp;ldquo;Country&amp;rdquo;: &amp;ldquo;CH&amp;rdquo;,&lt;br&gt;
&amp;ldquo;VoiceRoutingPolicy&amp;rdquo;: &amp;ldquo;Switzerland&amp;rdquo;&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;Currently, this solution only supports one voice routing policy per country entry in the CountryLookupTable.json file.&lt;/p&gt;
&lt;p&gt;If you have different voice routing policies for various locations within the same country, you’ll have to try to find a way to match them via their prefixes and add multiple entries in the Json.&lt;/p&gt;
&lt;p&gt;{&lt;br&gt;
&amp;ldquo;Prefix&amp;rdquo;: &amp;ldquo;+4144&amp;rdquo;,&lt;br&gt;
&amp;ldquo;CountryName&amp;rdquo;: &amp;ldquo;Switzerland&amp;rdquo;,&lt;br&gt;
&amp;ldquo;Country&amp;rdquo;: &amp;ldquo;CH&amp;rdquo;,&lt;br&gt;
&amp;ldquo;VoiceRoutingPolicy&amp;rdquo;: &amp;ldquo;Switzerland-Zurich&amp;rdquo;&lt;br&gt;
},&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;Prefix&amp;rdquo;: &amp;ldquo;+4131&amp;rdquo;,&lt;br&gt;
&amp;ldquo;CountryName&amp;rdquo;: &amp;ldquo;Switzerland&amp;rdquo;,&lt;br&gt;
&amp;ldquo;Country&amp;rdquo;: &amp;ldquo;CH&amp;rdquo;,&lt;br&gt;
&amp;ldquo;VoiceRoutingPolicy&amp;rdquo;: &amp;ldquo;Switzerland-Bern&amp;rdquo;&lt;br&gt;
}&lt;/p&gt;
&lt;h4 id=&#34;changes-to-teamsphonenumberoverviewps1&#34;&gt;Changes to TeamsPhoneNumberOverview.ps1
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Update 11.04.2023&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sorry, I totally forgot to mention that you’ll also need to specify the name of the SharePoint User Information List in your language.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;# Set your language or add it to the switch statement&lt;br&gt;
# To find the name of your user information list, go to:&lt;br&gt;
# https://&lt;your domain&gt;.sharepoint.com/sites/&lt;your site name&gt;/_catalogs/users/simple.aspx&lt;br&gt;
$spoLanguage = &amp;ldquo;German&amp;rdquo;&lt;/p&gt;
&lt;p&gt;switch ($spoLanguage) {&lt;br&gt;
German {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    $localizedUserInformationList = &amp;quot;Benutzerinformationsliste&amp;quot;  

}  
English {  

    $localizedUserInformationList = &amp;quot;User Information List&amp;quot;  

}  
Default {  

    $localizedUserInformationList = &amp;quot;User Information List&amp;quot;  

}  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;I hope that you like the &lt;strong&gt;V2&lt;/strong&gt; upgrade of my budget number management list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/0i9hHsRnLxMO42ePg.jpg&#34;
	width=&#34;1024&#34;
	height=&#34;1024&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/0i9hHsRnLxMO42ePg_hu_f0669dd6d37c9d5d.jpg 480w, https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a/0i9hHsRnLxMO42ePg_hu_38f1d0482eaa6fbe.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Manage Microsoft Teams Call Queues with PowerShell (Force-Sync)</title>
        <link>https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/</link>
        <pubDate>Tue, 04 Apr 2023 19:42:18 +0000</pubDate>
        
        <guid>https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/</guid>
        <description>&lt;p&gt;After my last article turned into a twenty-minute read, I want to write a short blog post today. At least I’ll try to. We are talking about managing Microsoft Teams Call Queues with PowerShell again.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/0cTgVlbyGhDlU8uu.jpg&#34;
	width=&#34;1024&#34;
	height=&#34;1024&#34;
	srcset=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/0cTgVlbyGhDlU8uu_hu_20db88508e318f28.jpg 480w, https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/0cTgVlbyGhDlU8uu_hu_72f8da88d38774d.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Pretty much about one year ago, I wrote an article explaining how to force sync a Call Queue which uses a group or a Microsoft Team as its source of agent list.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0&#34; &gt;Microsoft Teams Call Queue Agent Lists (And how to Force-Sync them) | by martin heusser | Medium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since then, I have refined the code a little bit to make it even easier. I wrote two functions which are available in a new &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Modules/TeamsPS.psm1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;PowerShell Module&lt;/strong&gt;&lt;/a&gt; which is available in my &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;TeamsPhoneAutomation&lt;/strong&gt;&lt;/a&gt; repository on GitHub.&lt;/p&gt;
&lt;p&gt;To import the module, simply run the following code after you have &lt;a class=&#34;link&#34; href=&#34;https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;cloned&lt;/a&gt; the repository.&lt;/p&gt;
&lt;p&gt;$localRepoPath = git rev-parse &amp;ndash;show-toplevel&lt;br&gt;
Import-Module &amp;ldquo;$localRepoPath/Modules/TeamsPS.psm1&amp;rdquo; -Force&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git rev-parse --show-toplevel&lt;/code&gt; will resolve the cloned repository’s root path to the absolute file path on your system. This is really helpful if different users clone the repo to different folders on their own machine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1gNxBkz6hW4pvFJjOSPniow.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1gNxBkz6hW4pvFJjOSPniow_hu_1d085ec536101309.png 480w, https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1gNxBkz6hW4pvFJjOSPniow_hu_20a6aa61280c8d3d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;There are two Call Queue related functions in the module:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Get-MZZCQAgents&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sync-MZZCQAgents&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s start with the &lt;strong&gt;Get&lt;/strong&gt; function.&lt;/p&gt;
&lt;h4 id=&#34;get-mzzcqagents&#34;&gt;Get-MZZCQAgents
&lt;/h4&gt;&lt;p&gt;This is essentially what &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer/blob/main/Functions/Get-CallQueueAgentsStatus.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this script&lt;/a&gt; mentioned in &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485&#34; &gt;this article&lt;/a&gt; does. However, this function doesn’t have exporting capabilities and the code has been adapted so it plays nice with the &lt;strong&gt;Sync&lt;/strong&gt; function.&lt;/p&gt;
&lt;p&gt;As we already know, when we check a Call Queues &lt;code&gt;.Agent&lt;/code&gt; property, we will only see GUIDs instead of User Principal Names. Thus, my function. It will search for the users by Id and output UPNs instead of Object Ids.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1pLYCkYoqD9HkTxl7bVetPw.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1pLYCkYoqD9HkTxl7bVetPw_hu_194447dcc8fa80a2.png 480w, https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1pLYCkYoqD9HkTxl7bVetPw_hu_67ad1370f68c1f36.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you run the function without parameters, you will be able to choose a Call Queue from a list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/10Zw03oQyVVr3Gp1LcOsQ.png&#34;
	width=&#34;1381&#34;
	height=&#34;659&#34;
	srcset=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/10Zw03oQyVVr3Gp1LcOsQ_hu_176b4c104dd06280.png 480w, https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/10Zw03oQyVVr3Gp1LcOsQ_hu_b44bf68cccf2e728.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;209&#34;
		data-flex-basis=&#34;502px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you already know the Id of your Call Queue, you can pass it via the &lt;code&gt;-CQIdentity&lt;/code&gt; parameter.&lt;/p&gt;
&lt;p&gt;Get-MZZCQAgents -CQIdentity fe77ecb3-f5a5-47ee-9519-cbb3a52d5771&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1C9HchRKUMR6oQBRLXMBfqg.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1C9HchRKUMR6oQBRLXMBfqg_hu_ae37f73038b9d154.png 480w, https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1C9HchRKUMR6oQBRLXMBfqg_hu_dff973ac220249ac.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;sync-mzzcqagents&#34;&gt;Sync-MZZCQAgents
&lt;/h4&gt;&lt;p&gt;This Call Queue uses a Microsoft Teams Team as Agent List, but this also applies to Agents which are assigned to a queue via Security or M365 Groups.&lt;/p&gt;
&lt;p&gt;Think about a scenario where a Team owner adds a new employee to a Team which should also start to receive calls to the queue. Without interaction of a Teams Administrator, it’s going to take some time until that’s the case. It will most likely take multiple hours for the change to become effective.&lt;/p&gt;
&lt;p&gt;If we want to speed up that process, we simply need to run &lt;code&gt;Sync-MZZCQAgents&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;It’s the same for this function, if you do not specify &lt;code&gt;-CQIdentity&lt;/code&gt; you will be asked to choose &lt;strong&gt;one&lt;/strong&gt; or &lt;strong&gt;multiple&lt;/strong&gt; queues from the list. To select multiple queues, just hold &lt;strong&gt;CTRL&lt;/strong&gt; while selecting list entries.&lt;/p&gt;
&lt;p&gt;Please note that &lt;code&gt;Get-MZZCQAgents&lt;/code&gt; only accepts one selection at a time but &lt;code&gt;Sync-MZZCQAgents&lt;/code&gt; can actually loop through multiple queues after each other if you want to force-sync all or some of your queues.&lt;/p&gt;
&lt;p&gt;The cool thing about this is that the &lt;strong&gt;Sync&lt;/strong&gt; function runs&lt;code&gt;Get-MZZCQAgents&lt;/code&gt; before and after the queue’s agent list has been synced. This way you can know if the new agent(s) have already been added.&lt;/p&gt;
&lt;p&gt;If you run the function too soon after the membership of a Team or an M365 Group has been updated, chances are that you will get the following output.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1lMTG7LBodcvUifKt7pZVCQ.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1lMTG7LBodcvUifKt7pZVCQ_hu_359e1fad4a3ac16d.png 480w, https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1lMTG7LBodcvUifKt7pZVCQ_hu_a9e88e6ea57acf6f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;First, let’s remove &lt;strong&gt;Mike&lt;/strong&gt;, who is also an agent of the queue as a member of the Team. We can now see that &lt;strong&gt;Mike&lt;/strong&gt; has been removed from the queue.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1XVULfBs8n282RhyFCWBNUw.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1XVULfBs8n282RhyFCWBNUw_hu_90504891a8460a62.png 480w, https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1XVULfBs8n282RhyFCWBNUw_hu_6d9a9db9221007c0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now let’s add &lt;strong&gt;Mike&lt;/strong&gt; back but remove &lt;strong&gt;Bobby.&lt;/strong&gt; You’ll get a nice overview of all the agents that were removed or added.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1Q6eapw6UeSnMblJv52ra5Q.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1Q6eapw6UeSnMblJv52ra5Q_hu_1f757111d4bed7f4.png 480w, https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552/1Q6eapw6UeSnMblJv52ra5Q_hu_6b7bd937630f553c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;There is no need to run &lt;code&gt;Connect-MicrosoftTeams&lt;/code&gt; before you run either of these two functions because a login mechanism, similar to the one the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;M365 Call Flow Visualizer&lt;/strong&gt;&lt;/a&gt; uses is already built into the function &lt;code&gt;Connect-MZZTeams&lt;/code&gt; which is also part of the module. If you’re not already logged in, you’ll be prompted to enter your Teams Admin Credentials.&lt;/p&gt;
&lt;p&gt;For now, it’s only these two or rather three functions (if you count the login function) which are part of this module. I’m sure that I’ll add more useful code over time, so stay tuned and follow me on &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p&#34; &gt;Medium&lt;/a&gt;, &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/mozzeph&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Twitter&lt;/a&gt; or &lt;a class=&#34;link&#34; href=&#34;https://www.linkedin.com/in/martin-heusser117/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;LinkedIn&lt;/a&gt;. And yes, the &lt;strong&gt;117&lt;/strong&gt; in my LinkedIn URL is a reference to Master Chief.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Teams Phone Number Management on a Budget</title>
        <link>https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/</link>
        <pubDate>Thu, 23 Mar 2023 13:05:11 +0000</pubDate>
        
        <guid>https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/0TNGGsjES22NTIbT.jpg&#34;
	width=&#34;1024&#34;
	height=&#34;1024&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/0TNGGsjES22NTIbT_hu_c6fd37b5c1ffc22.jpg 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/0TNGGsjES22NTIbT_hu_29351c288b401357.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 08.04.2023&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’ve updated this solution to V2 which includes the capability to assign, unassign and reserve phone numbers along with other improvements.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Please read &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/teams-phone-number-management-list-part-2-b5385e348a3a&#34; &gt;this article&lt;/a&gt; when you have finished reading this one.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;/Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Every Teams Voice Admin that has deployed Direct Routing knows the struggle. There’s no way to manage Direct Routing numbers in Teams Admin Center. This makes it hard for us to get a clear overview of which numbers are still unassigned/free or even to see all the numbers we have.&lt;/p&gt;
&lt;p&gt;Obviously, there’s a solution for anything. We can use PowerShell to export numbers and create our own lists in Excel or whatever. The challenge with that is to keep the list up to date, error free and make it centrally available for all people who need to work with it.&lt;/p&gt;
&lt;p&gt;There are also lots of vendors which offer Teams phone number management platforms. Here are some of them:&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://callroute.com/features/number-management/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Number Management for Microsoft Teams (callroute.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.codesoftware.net/clobba-rm/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Clobba Range Manager — DID Number Management — Code Software&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.pure-ip.com/number-connect&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Number Connect (pure-ip.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://teamsboss.com/app/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TeamsBoss&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;They all have powerful features — which come with a price. But what if we don’t need a full-fledged management solution and just want a simple overview which is dynamically updated?&lt;/p&gt;
&lt;p&gt;That’s exactly what I’ve been building in my spare time over the last few weeks.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1bJzySshLFfuKEkIhfsSCQ.png&#34;
	width=&#34;2789&#34;
	height=&#34;1101&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1bJzySshLFfuKEkIhfsSCQ_hu_231c96e2be9ae68c.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1bJzySshLFfuKEkIhfsSCQ_hu_477efd58af7f58ce.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;253&#34;
		data-flex-basis=&#34;607px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The final product is a SharePoint list which gets automatically updated by an Azure Automation Runbook every hour.&lt;/p&gt;
&lt;p&gt;This time around, I tried to automate everything I could. This means less work for you if you want to deploy it yourself. But before we get into the technical details of it, let’s look at the list.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you don’t care about the details and want to deploy straight away, you can grab the code from &lt;a class=&#34;link&#34; href=&#34;http://mozziemozz/TeamsPhoneAutomation:%20Automation%20Scripts%20for%20Microsoft%20Teams%20Phone%20%28github.com%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;the-list&#34;&gt;The List
&lt;/h3&gt;&lt;h4 id=&#34;the-columns&#34;&gt;The Columns
&lt;/h4&gt;&lt;p&gt;The list can be viewed in SharePoint Online, Microsoft Lists or directly in Teams through Lists. It consists of the following columns.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Title&lt;/strong&gt; = Phone Number&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Phone Extension&lt;/strong&gt; = Extension if there is one configured&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Status&lt;/strong&gt; = Assigned/Unassigned&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Number Type&lt;/strong&gt; = Direct Routing / Calling Plan / Operator Connect&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User Name&lt;/strong&gt; = Display Name of assigned account&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User Principal Name&lt;/strong&gt; = UPN of assigned account&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Account Type&lt;/strong&gt; = User Account / Resource Account / Conference Bridge&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Country&lt;/strong&gt; = The country a number belongs to&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UserId&lt;/strong&gt; = Object Id from Azure AD&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User Profile&lt;/strong&gt; = Profile Card&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Teams Admin Center&lt;/strong&gt; = Link to manage the user in TAC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This should cover most of the relevant information somebody might want to know about their phone numbers.&lt;/p&gt;
&lt;h4 id=&#34;filtering&#34;&gt;Filtering
&lt;/h4&gt;&lt;p&gt;Having all that information available allows us to easily filter numbers which meet certain criteria. In this example, I filtered the list for all unassigned numbers from the UK.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/14bBmRV7urUrZc22NiWUVDA.png&#34;
	width=&#34;2100&#34;
	height=&#34;272&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/14bBmRV7urUrZc22NiWUVDA_hu_2110504dc1ae7c21.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/14bBmRV7urUrZc22NiWUVDA_hu_3d44a68a14fabb6f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;772&#34;
		data-flex-basis=&#34;1852px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Because this number is unassigned and it could be assigned to a &lt;strong&gt;Resource Account&lt;/strong&gt; or a &lt;strong&gt;Conference Bridge&lt;/strong&gt;, both types are included in the list.&lt;/p&gt;
&lt;p&gt;If we compare that to an assigned service number, we can see that the &lt;strong&gt;Account Type&lt;/strong&gt; is shown as &lt;strong&gt;Resource Account&lt;/strong&gt; because the number is assigned to one.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1wZdcr9ASB2hnmRdFT5w.png&#34;
	width=&#34;2086&#34;
	height=&#34;269&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1wZdcr9ASB2hnmRdFT5w_hu_7a557cd109c4fffd.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1wZdcr9ASB2hnmRdFT5w_hu_1a65d2ef0b0682b0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;775&#34;
		data-flex-basis=&#34;1861px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The most common thing which people probably want to see at glance is which &lt;strong&gt;direct routing&lt;/strong&gt; numbers are unassigned from a specific country. This can also be achieved very easily.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1IUJX8fpDC3xi4wpcd5kfg.png&#34;
	width=&#34;2280&#34;
	height=&#34;520&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1IUJX8fpDC3xi4wpcd5kfg_hu_4ff2dcb2fb36f9f3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1IUJX8fpDC3xi4wpcd5kfg_hu_a3bf0e3c7030bbe1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;438&#34;
		data-flex-basis=&#34;1052px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I learned a lot during the development of this project, and I now want to share that with you. Let’s take a look at how the SharePoint list was built and how it automatically updates itself with the help of &lt;strong&gt;Azure Automation&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;deployment&#34;&gt;Deployment
&lt;/h3&gt;&lt;p&gt;There are very few manual tasks required to get this set up. I built a deployment script which will create all the required resources in Azure for you.&lt;/p&gt;
&lt;h4 id=&#34;clone-the-githubrepo&#34;&gt;Clone The GitHub Repo
&lt;/h4&gt;&lt;p&gt;Start by cloning or downloading the GitHub Repo.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;mozziemozz/TeamsPhoneAutomation: Automation Scripts for Microsoft Teams Phone (github.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you’ve never worked with GitHub before, I highly recommend trying it instead of just downloading the repository as a zip file. All you need to do is &lt;a class=&#34;link&#34; href=&#34;https://github.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;sign up&lt;/a&gt; for an account, install the &lt;a class=&#34;link&#34; href=&#34;https://desktop.github.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;desktop client&lt;/a&gt; and clone the repo.&lt;/p&gt;
&lt;p&gt;Once you have signed into GitHub Desktop, just head over to the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;repository URL&lt;/a&gt; and open it in GitHub Desktop.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1Id3QSS2WJGsTfGqGPJ55Q.png&#34;
	width=&#34;1390&#34;
	height=&#34;588&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1Id3QSS2WJGsTfGqGPJ55Q_hu_ba81dfa996dc53d6.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1Id3QSS2WJGsTfGqGPJ55Q_hu_ce5b19c4dfc3afec.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;236&#34;
		data-flex-basis=&#34;567px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Then choose your local folder and click on clone. Make sure to select a folder which isn’t synchronized to any kind of cloud Storage like OneDrive. The constant syncing of files would impair your performance dramatically.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1tqEoryFHlOYEPKCBQaED6Q.png&#34;
	width=&#34;736&#34;
	height=&#34;446&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1tqEoryFHlOYEPKCBQaED6Q_hu_36d447bccadaffc3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1tqEoryFHlOYEPKCBQaED6Q_hu_ca1c736a4e47ba53.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;165&#34;
		data-flex-basis=&#34;396px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The repo contains the following files and folders.&lt;/p&gt;
&lt;p&gt;C:\TEMP\GITHUB\TEAMSPHONEAUTOMATION&lt;br&gt;
│   .gitignore&lt;br&gt;
│   Deploy.ps1&lt;br&gt;
│   README.md&lt;br&gt;
│&lt;br&gt;
├───Functions&lt;br&gt;
│       Connect-MgGraphHTTP.ps1&lt;br&gt;
│       Connect-MsTeamsServicePrincipal.ps1&lt;br&gt;
│       Get-CountryFromPrefix.ps1&lt;br&gt;
│       Get-CsOnlineNumbers.ps1&lt;br&gt;
│&lt;br&gt;
├───Resources&lt;br&gt;
│       CountryLookupTable.json&lt;br&gt;
│       CreateList.json&lt;br&gt;
│       DirectRoutingNumbers.csv&lt;br&gt;
│       Environment.json&lt;br&gt;
│&lt;br&gt;
├───Scripts&lt;br&gt;
│       TeamsPhoneNumberOverview.ps1&lt;br&gt;
│&lt;br&gt;
└───Setup&lt;br&gt;
Setup.ps1&lt;br&gt;
UpdateDirectRoutingNumbers.ps1&lt;/p&gt;
&lt;h4 id=&#34;environmentjson&#34;&gt;Environment.json
&lt;/h4&gt;&lt;p&gt;Before we do anything, we need to define a few things and names. In &lt;code&gt;.\Resources&lt;/code&gt; open the &lt;code&gt;Environment.json&lt;/code&gt; file and fill in your own information.&lt;/p&gt;
&lt;p&gt;{&lt;br&gt;
&amp;ldquo;TenantId&amp;rdquo;: &amp;ldquo;4bffbf87-53a0-4fce-b58b-xxxxxxxxxxxx&amp;rdquo;,&lt;br&gt;
&amp;ldquo;GroupId&amp;rdquo;: &amp;ldquo;aff7d27f-878d-422c-83bd-xxxxxxxxxxxx&amp;rdquo;,&lt;br&gt;
&amp;ldquo;MSListName&amp;rdquo;: &amp;ldquo;Teams Phone Number Overview Demo&amp;rdquo;,&lt;br&gt;
&amp;ldquo;ResourceGroupName&amp;rdquo;: &amp;ldquo;mzz-rmg-001&amp;rdquo;,&lt;br&gt;
&amp;ldquo;AutomationAccountName&amp;rdquo;: &amp;ldquo;mzz-automation-account-001&amp;rdquo;,&lt;br&gt;
&amp;ldquo;AzLocation&amp;rdquo;: &amp;ldquo;West Europe&amp;rdquo;&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TenantId&lt;/strong&gt; is your Tenant Id.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GroupId&lt;/strong&gt; is the Object Id of the Microsoft Teams Team which hosts the SharePoint site where the list should be created.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MSListName&lt;/strong&gt; will be the name of your List in SharePoint.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ResourceGroupName&lt;/strong&gt; will be the name of the resource group which is created in Azure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AutomationAccountName&lt;/strong&gt; will be the name of the automation account which is created within the new resource group.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AzLocation&lt;/strong&gt; is the Azure region where you want to deploy the resources.&lt;/p&gt;
&lt;p&gt;You can find a list of all available regions and their names &lt;a class=&#34;link&#34; href=&#34;https://azure.microsoft.com/en-us/explore/global-infrastructure/geographies/#geographies&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Make sure you save the file once you’ve filled in all the information.&lt;/p&gt;
&lt;h4 id=&#34;directroutingnumberscsv&#34;&gt;DirectRoutingNumbers.csv
&lt;/h4&gt;&lt;p&gt;Next, we need a list which contains all your direct routing numbers. This file can only contain one column called &lt;strong&gt;PhoneNumber&lt;/strong&gt;. All the numbers must be in &lt;strong&gt;E.164&lt;/strong&gt; format but without the leading &lt;code&gt;+&lt;/code&gt; . The plus sign will be added by the script later. It just makes things easier in Excel if we don’t need to bother about the plus.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1nnwTg3pq3UCddPisob7HqA.png&#34;
	width=&#34;1461&#34;
	height=&#34;969&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1nnwTg3pq3UCddPisob7HqA_hu_93be95d2178a90ba.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1nnwTg3pq3UCddPisob7HqA_hu_a2b8f8df5136a28a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;361px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;That’s it for the preparation.&lt;/p&gt;
&lt;h4 id=&#34;deployps1&#34;&gt;Deploy.ps1
&lt;/h4&gt;&lt;p&gt;Disclaimer: The script has been tested on a vanilla Windows 11 virtual machine where &lt;strong&gt;Windows Terminal&lt;/strong&gt; is configured as default console host and sessions start in the parent process directory. No PowerShell modules were installed before the script was first executed on this system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;You will need an account with Global Administrator rights to successfully run this script. You also need local admin rights and need to make sure that running scripts is allowed on your machine.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In an elevated terminal, run the following code and close the terminal session once you have done so.&lt;/p&gt;
&lt;p&gt;Set-ExecutionPolicy Bypass&lt;/p&gt;
&lt;p&gt;To start the deployment, you need to run the &lt;code&gt;Deploy.ps1&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1WKugBxPGMHPFT71q8WUN1g.png&#34;
	width=&#34;618&#34;
	height=&#34;582&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1WKugBxPGMHPFT71q8WUN1g_hu_3857949ff8d0a6d7.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1WKugBxPGMHPFT71q8WUN1g_hu_d9a7c092679f0087.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;106&#34;
		data-flex-basis=&#34;254px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This will just call the &lt;code&gt;.\Setup\Setup.ps1&lt;/code&gt; script which is the real deal.&lt;/p&gt;
&lt;h4 id=&#34;setupps1&#34;&gt;Setup.ps1
&lt;/h4&gt;&lt;p&gt;After all the module and components checks have been completed or the missing components have been installed, you will be prompted to sign into the &lt;a class=&#34;link&#34; href=&#34;https://pnp.github.io/cli-microsoft365/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;M365 CLI&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ZuLzxPnboF940mSkOnUFqA.png&#34;
	width=&#34;2430&#34;
	height=&#34;1392&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ZuLzxPnboF940mSkOnUFqA_hu_d324a6bf7b2995f5.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ZuLzxPnboF940mSkOnUFqA_hu_5fa45eb41453e037.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;174&#34;
		data-flex-basis=&#34;418px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Let me explain what’s going on in the script. Our end goal is to have a SharePoint list. Since we need a script to automatically update the list anyway, we might as well just create the list through PowerShell and Microsoft Graph instead of creating it manually.&lt;/p&gt;
&lt;p&gt;To provision all this stuff, we need a couple of &lt;strong&gt;Az.*&lt;/strong&gt; PowerShell modules. We also need &lt;strong&gt;Node.JS&lt;/strong&gt; so we can install the &lt;strong&gt;CLI for Microsoft 365&lt;/strong&gt; through &lt;strong&gt;NPM&lt;/strong&gt; (Node Package Manager). If you miss any of the components on your machine, they will automatically be installed, if you can provide local admin rights.&lt;/p&gt;
&lt;h4 id=&#34;azure-ad-app-registration--service-principal&#34;&gt;Azure AD App Registration &amp;amp; Service Principal
&lt;/h4&gt;&lt;p&gt;The M365 CLI will create a new Azure AD App Registration and a Service Principal. It will also assign the Microsoft Graph permission scopes we need to create and modify SharePoint lists and manage Microsoft Teams to the Service Principal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1PKYwJDYOIAvgJi8us8uUMQ.png&#34;
	width=&#34;1928&#34;
	height=&#34;1395&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1PKYwJDYOIAvgJi8us8uUMQ_hu_a5f70cca8aacd39a.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1PKYwJDYOIAvgJi8us8uUMQ_hu_9637ae38be7cd0e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;138&#34;
		data-flex-basis=&#34;331px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1EvALgsWAXkRfjYM5WjZMGQ.png&#34;
	width=&#34;2616&#34;
	height=&#34;1297&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1EvALgsWAXkRfjYM5WjZMGQ_hu_b111f7b97325c4f9.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1EvALgsWAXkRfjYM5WjZMGQ_hu_42f74ca18f69e5ca.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;201&#34;
		data-flex-basis=&#34;484px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Both the App Registration and the Service Principal will use the name of the Automation Account. This way it’s easy to know where the assigned permissions are used within Azure.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1BFgrZUU3EnaOZDB1SutpQ.png&#34;
	width=&#34;1303&#34;
	height=&#34;115&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1BFgrZUU3EnaOZDB1SutpQ_hu_9d3563b73e82fade.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1BFgrZUU3EnaOZDB1SutpQ_hu_10971712106d607a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1133&#34;
		data-flex-basis=&#34;2719px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The script also creates a new client secret for the App Registration.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1a2XyZpLjkpZ0HOfLCL32PA.png&#34;
	width=&#34;1950&#34;
	height=&#34;778&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1a2XyZpLjkpZ0HOfLCL32PA_hu_f0e3c354b8cdd719.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1a2XyZpLjkpZ0HOfLCL32PA_hu_ea8218146b7a5cb8.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;250&#34;
		data-flex-basis=&#34;601px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Remember, a client secret can only be viewed once, after it has been created in the portal. Because we used the CLI to create it, we can’t view it in the portal anymore. The secret is received by the script and saved in an encrypted state though. You’ll also be prompted if you want to view it in case you want to copy and store it in a safe place.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1zitK266ZKs6EST13zGeKCA.png&#34;
	width=&#34;2207&#34;
	height=&#34;120&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1zitK266ZKs6EST13zGeKCA_hu_89c391ed06643dd3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1zitK266ZKs6EST13zGeKCA_hu_5f15aaa392cee6cf.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1839&#34;
		data-flex-basis=&#34;4414px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;You don’t have to do this if you don’t want to. You can always decrypt it again, as long as you&amp;rsquo;re using the same machine and user account which encrypted it. The secret is saved to &lt;code&gt;.\.local\AppSecret.txt&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1tWTZ8tk39JcYjIvwgY5xeA.png&#34;
	width=&#34;1891&#34;
	height=&#34;825&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1tWTZ8tk39JcYjIvwgY5xeA_hu_d67c07e54af6d7bf.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1tWTZ8tk39JcYjIvwgY5xeA_hu_92cebef4ba0c4f12.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;229&#34;
		data-flex-basis=&#34;550px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you want to manually decrypt it later, you can use the following code.&lt;/p&gt;
&lt;p&gt;$AppSecret = [Runtime.InteropServices.Marshal]::PtrToStringAuto([Runtime.InteropServices.Marshal]::SecureStringToBSTR((Get-Content -Path .\.local\AppSecret.txt | ConvertTo-SecureString))) | Out-String&lt;/p&gt;
&lt;p&gt;Again, you don’t have to if you don’t want to. The script will be able to decrypt the secret and upload it to the Azure Automation Account once it’s needed.&lt;/p&gt;
&lt;p&gt;Once the permissions have been assigned to the Service Principal, the script uses the same Service Principal to connect to Microsoft Graph and assign the &lt;strong&gt;Skype for Business Administrator&lt;/strong&gt; role to itself.&lt;/p&gt;
&lt;p&gt;This is possible because the M365 CLI previously assigned the scope &lt;strong&gt;RoleManagement.ReadWrite.Directory&lt;/strong&gt; to the Service Principal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1dprD8JGRDPs2yAJnvlPlwQ.png&#34;
	width=&#34;1927&#34;
	height=&#34;594&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1dprD8JGRDPs2yAJnvlPlwQ_hu_592ef12e7633983.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1dprD8JGRDPs2yAJnvlPlwQ_hu_387a035ee51841cd.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;324&#34;
		data-flex-basis=&#34;778px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The role is needed for the SP to be able to manage Microsoft Teams via PowerShell. I learned this from Christian Frohn’s excellent &lt;a class=&#34;link&#34; href=&#34;https://www.christianfrohn.dk/2022/11/13/connect-to-microsoft-teams-powershell-using-azure-app-reg-service-principal/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;blog article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In case you’re wondering why no &lt;strong&gt;Microsoft.Graph&lt;/strong&gt; modules are required; this is because I chose to work with PowerShell native &lt;code&gt;Invoke-RestMethod&lt;/code&gt; commands instead of the &lt;code&gt;*Mg*&lt;/code&gt; Cmdlets.&lt;/p&gt;
&lt;h4 id=&#34;provisioning-the-azure-resources&#34;&gt;Provisioning the Azure Resources
&lt;/h4&gt;&lt;p&gt;The previous steps complete rather fast. The next steps are going to take a bit longer. First you need to sign in with an Account which has the appropriate permissions to create Azure resources within your subscription.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1pOaJ1YELOvcHWdcLOuFeGQ.png&#34;
	width=&#34;855&#34;
	height=&#34;1173&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1pOaJ1YELOvcHWdcLOuFeGQ_hu_656b2f14217c3971.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1pOaJ1YELOvcHWdcLOuFeGQ_hu_d1633900ebee858f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;72&#34;
		data-flex-basis=&#34;174px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I guess it would have been possible to also assign some RBAC roles to the Service Principal which would allow us to use it to sign into Azure as well. Since the script is run locally on demand, I see no problem with using a normal user account for this part. It actually gives us time to review the created App Registration and Service Principal before the script starts to deploy any resources to Azure. Furthermore, we don’t need to worry about being aware of yet another Service Principal which has permissions to deploy or remove Azure Resources.&lt;/p&gt;
&lt;p&gt;The script will create a Resource Group with the name and location defined in &lt;strong&gt;Environment.json.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ZZGYVP7g2uj2hi3O08RlzA.png&#34;
	width=&#34;1536&#34;
	height=&#34;469&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ZZGYVP7g2uj2hi3O08RlzA_hu_cc9819622a028c5c.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ZZGYVP7g2uj2hi3O08RlzA_hu_d0a421792d944e25.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;327&#34;
		data-flex-basis=&#34;786px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It will also create a new Automation Account within the Resource Group, also in the same region.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1RvDl30FW8xOAHs3EUA3Q.png&#34;
	width=&#34;1508&#34;
	height=&#34;889&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1RvDl30FW8xOAHs3EUA3Q_hu_51ccdc4ed37c97fa.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1RvDl30FW8xOAHs3EUA3Q_hu_539d4ddfd309dc04.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;169&#34;
		data-flex-basis=&#34;407px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;automation-account&#34;&gt;Automation Account
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Modules&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;MicrosoftTeams&lt;/strong&gt; Module is not added to Automation Accounts by default. Thus, the script needs to add it. This usually takes a couple of Minutes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1RnQgpNQ3dOLfk0aDigurUQ.png&#34;
	width=&#34;1032&#34;
	height=&#34;427&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1RnQgpNQ3dOLfk0aDigurUQ_hu_7d7c61a03f3a16e4.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1RnQgpNQ3dOLfk0aDigurUQ_hu_91177aacfe9cd132.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;241&#34;
		data-flex-basis=&#34;580px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Once the module has finished importing, the script will continue.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1msSR1JykOc4mieC9hExE2g.png&#34;
	width=&#34;1922&#34;
	height=&#34;409&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1msSR1JykOc4mieC9hExE2g_hu_ab7e8314b060bc67.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1msSR1JykOc4mieC9hExE2g_hu_81ed07256b4f7475.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;469&#34;
		data-flex-basis=&#34;1127px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Variables&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The main script which will create/update our SharePoint List needs access to all the data we initially defined in &lt;strong&gt;Environment.josn&lt;/strong&gt;. This information is stored in &lt;strong&gt;Automation Variables&lt;/strong&gt; which can be accessed through Azure Runbooks.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1DBUuoXrqsTiu4XcayfA.png&#34;
	width=&#34;2456&#34;
	height=&#34;692&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1DBUuoXrqsTiu4XcayfA_hu_cd935a30445c9f6e.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1DBUuoXrqsTiu4XcayfA_hu_63b9f76fdab62d2e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;354&#34;
		data-flex-basis=&#34;851px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The client secret is stored as an encrypted variable and cannot be viewed or edited. Its content can only be accessed by using the internal Cmdlet &lt;code&gt;Get-AutomationVariable&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;We can also see that we have a variable called &lt;strong&gt;TeamsPhoneNumberOverview_DirectRoutingNumbers.&lt;/strong&gt; This variable stores all Direct Routing numbers in &lt;strong&gt;Json&lt;/strong&gt; format. Because I ran into some issues with storing the Json content as a string, I needed to get creative and enclose it in single quotes: &lt;code&gt;&#39;{&amp;quot;Json&amp;quot;: &amp;quot;Example&amp;quot;}&#39;&lt;/code&gt; . These get removed when the variable is imported through the Runbook so that the Json can be converted to a PowerShell object.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TeamsPhoneNumberOverview_CountryLookupTable&lt;/strong&gt; contains a list with all countries and prefixes to determine the country of Direct Routing Numbers. To be consistent, this is also applied to Calling Plan and Operator Connect numbers, even though this information would be available through &lt;code&gt;Get-CsPhoneNumberAssignment&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;If you would like to learn more about these internal Cmdlets for Automation Variables or Azure Runbooks in general, I recommend this &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242&#34; &gt;article&lt;/a&gt; of mine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Runbooks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We also have a couple of Runbooks which were deployed by the &lt;strong&gt;Setup.ps1&lt;/strong&gt; script. The main script logic sits in &lt;strong&gt;TeamsPhoneNumberOverview&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1cqbLWUjMSR1NhjCXqoCIg.png&#34;
	width=&#34;1901&#34;
	height=&#34;609&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1cqbLWUjMSR1NhjCXqoCIg_hu_d81eb0ebdc6165dc.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1cqbLWUjMSR1NhjCXqoCIg_hu_8bb6c09d03afc8cc.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;312&#34;
		data-flex-basis=&#34;749px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;To make the solution more modular some functions, like &lt;strong&gt;Connect-MgGraphHTTP&lt;/strong&gt; or &lt;strong&gt;Connect-MsTeamsServicePrincipal&lt;/strong&gt; are stored in separate Runbooks. This makes it easier to reuse them and means less work if we want to extend the Automation Account with other scripts.&lt;/p&gt;
&lt;p&gt;For example, if you have another Runbook in the same Automation Account which needs to connect to MicrosoftTeams PowerShell as well, you can just use the following code.&lt;/p&gt;
&lt;p&gt;. .\Connect-MsTeamsServicePrincipal.ps1&lt;/p&gt;
&lt;p&gt;$TenantId = Get-AutomationVariable -Name &amp;ldquo;TeamsPhoneNumberOverview_TenantId&amp;rdquo;&lt;br&gt;
$AppId = Get-AutomationVariable -Name &amp;ldquo;TeamsPhoneNumberOverview_AppId&amp;rdquo;&lt;br&gt;
$AppSecret = Get-AutomationVariable -Name &amp;ldquo;TeamsPhoneNumberOverview_AppSecret&amp;rdquo;&lt;/p&gt;
&lt;p&gt;. Connect-MsTeamsServicePrincipal -TenantId $TenantId -AppId $AppId -AppSecret $AppSecret&lt;/p&gt;
&lt;p&gt;And if you ever need to adjust something in the login function, you only need to change it in one script (Connect-MsTeamsServicePrincipal) and not in all your Runbooks.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Script Logic&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The code for the main script logic can be found here.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Scripts/TeamsPhoneNumberOverview.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TeamsPhoneAutomation/TeamsPhoneNumberOverview.ps1 at main · mozziemozz/TeamsPhoneAutomation (github.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I asked ChatGPT to explain what the script does. The result is astonishing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This PowerShell script is designed to gather information about Microsoft Teams users who have phone numbers assigned to them, and store this information in a SharePoint list.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The script starts by importing four external functions, which are used later in the script. It then sets some variables by retrieving values from Azure Automation variables. These variables include the name of the SharePoint list where the data will be stored, as well as the credentials needed to connect to the Microsoft Teams and Graph APIs.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Next, the script imports Direct Routing numbers and adds a leading plus sign to all of them. It also retrieves a list of existing SharePoint lists for a specific group ID, and checks if the desired SharePoint list already exists. If it does, the script retrieves its ID. If not, a new SharePoint list is created and its ID is retrieved.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The script then retrieves information about all Teams users who have a phone number assigned to them. For each user, the script determines if they are a user or resource account, and then extracts details about their phone number, such as the phone number itself, any extension, and the country associated with the number. The script also checks if the phone number is a Direct Routing number or a CsOnline number. Finally, it creates an object containing all of this information for each user, and adds this object to an array.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Once all of the user information has been gathered, the script writes it to the SharePoint list. Each object in the array is written to a new row in the list.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The only thing I would have added is to mention that the script only adds new entries to the list, only updates changed entries with the new values and removes entries from the list which no longer exist.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Schedules&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The setup script has also created a recurring schedule which runs every hour. The schedule is automatically linked to the &lt;strong&gt;TeamsPhoneNumberOverview&lt;/strong&gt; Runbook by the script. This will result in the SharePoint list being updated once an hour.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1Iemob3BqBPX6OWWHvggsQ.png&#34;
	width=&#34;2217&#34;
	height=&#34;1137&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1Iemob3BqBPX6OWWHvggsQ_hu_a89080f523f91e17.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1Iemob3BqBPX6OWWHvggsQ_hu_82d9977c70ebe959.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;194&#34;
		data-flex-basis=&#34;467px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;That’s it. These are all the resources and components we need to create and update the SharePoint List.&lt;/p&gt;
&lt;h4 id=&#34;running-therunbook&#34;&gt;Running the Runbook
&lt;/h4&gt;&lt;p&gt;The Runbook schedule is configured in UTC. The first start time needs to be at least 5 minutes after the schedule’s creation time. To be sure, I set the schedule to run at the next full hour + 2 hours. In case this does not work for you in your local time zone, please let me know.&lt;/p&gt;
&lt;p&gt;This means that the SharePoint List won’t be created straight away. If you want to manually run the Runbook before the first scheduled start, just click on &lt;strong&gt;Start.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1qROsEUEs8dXdkq8CwSOaxQ.png&#34;
	width=&#34;1597&#34;
	height=&#34;193&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1qROsEUEs8dXdkq8CwSOaxQ_hu_30461f537b0de432.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1qROsEUEs8dXdkq8CwSOaxQ_hu_be9dfc7547ca006b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;827&#34;
		data-flex-basis=&#34;1985px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The job will just take a couple of minutes to complete.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1mp22izPK5jCc85FUtfZAkQ.png&#34;
	width=&#34;1120&#34;
	height=&#34;188&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1mp22izPK5jCc85FUtfZAkQ_hu_298e803a602c3ad8.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1mp22izPK5jCc85FUtfZAkQ_hu_417753c9bf6b164c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;595&#34;
		data-flex-basis=&#34;1429px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;You should then see the newly created List in SharePoint or Microsoft Lists.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ER7l4q30cUIBaDndrjJfIQ.png&#34;
	width=&#34;2846&#34;
	height=&#34;1476&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ER7l4q30cUIBaDndrjJfIQ_hu_82e1468fb2f35257.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ER7l4q30cUIBaDndrjJfIQ_hu_7e82544d89b706f7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;462px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;finishing-touches&#34;&gt;Finishing Touches
&lt;/h3&gt;&lt;p&gt;Unfortunately, the Graph API has some limitations in terms of what types of fields can be added or updated in a list. I wanted to perfect my solution by also having a User Profile column and a link to Teams Admin Center for all assigned user numbers. These types can only be added manually.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Important:&lt;/strong&gt; For this and the next part, it’s extremely important to follow my instructions very carefully. If the column names don’t match up with the Flow it will not work.&lt;/p&gt;
&lt;h4 id=&#34;add-two-additional-columns&#34;&gt;Add Two Additional Columns
&lt;/h4&gt;&lt;p&gt;Click on &lt;strong&gt;+ Add column&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1KBxfdw50SMnsnhVzMCx5A.png&#34;
	width=&#34;831&#34;
	height=&#34;634&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1KBxfdw50SMnsnhVzMCx5A_hu_2be62200ecc6985d.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1KBxfdw50SMnsnhVzMCx5A_hu_dc090fd4aad9601a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;131&#34;
		data-flex-basis=&#34;314px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Name the column &lt;strong&gt;User Profile&lt;/strong&gt; and toggle &lt;strong&gt;Show profile photos&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1nYyOkp3UFJxGdomb1w4bDg.png&#34;
	width=&#34;477&#34;
	height=&#34;678&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1nYyOkp3UFJxGdomb1w4bDg_hu_c0fd6e6208ab6ace.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1nYyOkp3UFJxGdomb1w4bDg_hu_18309ecfb161f25.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;70&#34;
		data-flex-basis=&#34;168px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Repeat the steps and choose &lt;strong&gt;Hyperlink&lt;/strong&gt; this time.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1zQUl6GTYbNQymUbAQ9IU1g.png&#34;
	width=&#34;835&#34;
	height=&#34;634&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1zQUl6GTYbNQymUbAQ9IU1g_hu_94bd5f690d2d31ca.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1zQUl6GTYbNQymUbAQ9IU1g_hu_5caa26b8eb757bb1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;131&#34;
		data-flex-basis=&#34;316px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Name this column &lt;strong&gt;Teams Admin Center.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now let’s create the final part of our Number Overview Solution: A Power Automate Flow.&lt;/p&gt;
&lt;h4 id=&#34;create-theflow&#34;&gt;&lt;strong&gt;Create The Flow&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;Head over to &lt;a class=&#34;link&#34; href=&#34;https://make.powerautomate.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Microsoft Power Automate&lt;/a&gt; and create a new &lt;strong&gt;Automated Cloud Flow&lt;/strong&gt;. Name your flow and select &lt;strong&gt;When an item is created or modified&lt;/strong&gt; (SharePoint) as the trigger.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1eMzuzJ4sgXqtppTIWtTLbw.png&#34;
	width=&#34;1334&#34;
	height=&#34;841&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1eMzuzJ4sgXqtppTIWtTLbw_hu_5d68934f4dbba0c3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1eMzuzJ4sgXqtppTIWtTLbw_hu_ec82539f2a1bb36a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;158&#34;
		data-flex-basis=&#34;380px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Select the Site/Team where your list has been created from the drop-down menu in &lt;strong&gt;Site Address.&lt;/strong&gt; Then choose your list from the drop-down.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ruBvckSCFoyJbi3abfZbCQ.png&#34;
	width=&#34;929&#34;
	height=&#34;320&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ruBvckSCFoyJbi3abfZbCQ_hu_4da5f0b01ac17af6.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ruBvckSCFoyJbi3abfZbCQ_hu_74f47b9c05e3b20c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;290&#34;
		data-flex-basis=&#34;696px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Next, click on the three dots and select &lt;strong&gt;Settings.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1Kq7ExjGCW7nsIjO5gPMw.png&#34;
	width=&#34;1347&#34;
	height=&#34;742&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1Kq7ExjGCW7nsIjO5gPMw_hu_ca0eff5024be05a2.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1Kq7ExjGCW7nsIjO5gPMw_hu_1c7748595836c798.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;435px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Add a &lt;strong&gt;Trigger Condition&lt;/strong&gt; and add the following code exactly as it is.&lt;/p&gt;
&lt;p&gt;@or(and(not(equals(triggerOutputs()?[&amp;lsquo;body/User_x0020_Principal_x0020_Name&amp;rsquo;], &amp;lsquo;Unassigned&amp;rsquo;)),not(contains(triggerBody(), &amp;lsquo;UserProfile&amp;rsquo;))),not(equals(triggerOutputs()?[&amp;lsquo;body/User_x0020_Principal_x0020_Name&amp;rsquo;],triggerOutputs()?[&amp;lsquo;body/UserProfile&amp;rsquo;][&amp;lsquo;Email&amp;rsquo;])))&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1mC9t4BUoxiJfqTSIonWsA.png&#34;
	width=&#34;920&#34;
	height=&#34;1358&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1mC9t4BUoxiJfqTSIonWsA_hu_4c06dfb6e979b45f.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1mC9t4BUoxiJfqTSIonWsA_hu_fa3d2e5badabf1c6.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;67&#34;
		data-flex-basis=&#34;162px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This is the most crucial step. Without a trigger condition, we would create an infinite trigger loop since we use &lt;strong&gt;When an item is created or modified&lt;/strong&gt; as trigger and our final action will be &lt;strong&gt;Update item&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Add a &lt;strong&gt;Condition&lt;/strong&gt; where it checks if the &lt;strong&gt;User Principal Name&lt;/strong&gt; is equal to &lt;strong&gt;Unassigned.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ynIuEDsOPU7mh4mGx7VQw.png&#34;
	width=&#34;945&#34;
	height=&#34;331&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ynIuEDsOPU7mh4mGx7VQw_hu_d39a7bc9bf35e38d.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1ynIuEDsOPU7mh4mGx7VQw_hu_f318cf3a6611faa1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;285&#34;
		data-flex-basis=&#34;685px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If the condition is &lt;strong&gt;True&lt;/strong&gt; or in other words, if the value of the &lt;strong&gt;User Principal Name&lt;/strong&gt; field is unassigned, we want to delete the list item.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1t4gRY6Gv6nOZqhgCQ9IF7w.png&#34;
	width=&#34;970&#34;
	height=&#34;609&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1t4gRY6Gv6nOZqhgCQ9IF7w_hu_74b99cbb77fbe98f.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1t4gRY6Gv6nOZqhgCQ9IF7w_hu_36f3a1dc78099f22.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;159&#34;
		data-flex-basis=&#34;382px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Keep in mind that the flow is only triggered if our trigger condition is met. It took me quite some time and a lot of binging to figure out a working trigger condition for this scenario. (Yes, I really found the answer on Bing without any googling!).&lt;/p&gt;
&lt;p&gt;The condition consists of an &lt;strong&gt;and&lt;/strong&gt; operator and an &lt;strong&gt;or&lt;/strong&gt; operator. In English, it checks for the following:&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;User Principal Name&lt;/strong&gt; is not &lt;strong&gt;Unassigned&lt;/strong&gt; and the &lt;strong&gt;User Profile&lt;/strong&gt; is empty.&lt;/p&gt;
&lt;p&gt;This means that the flow will trigger if the number is assigned to a user, but the &lt;strong&gt;User Profile&lt;/strong&gt; is not populated yet.&lt;/p&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;User Principal Name&lt;/strong&gt; is not the same as the &lt;strong&gt;User Profile.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The flow also triggers if the &lt;strong&gt;User Profile&lt;/strong&gt; is already populated but it doesn’t match the &lt;strong&gt;User Principal Name&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I didn’t find a way to delete the &lt;strong&gt;User Profile&lt;/strong&gt; if any given number changes from &lt;strong&gt;Assigned&lt;/strong&gt; to &lt;strong&gt;Unassigned.&lt;/strong&gt; Unfortunately, setting the filed to &lt;code&gt;null&lt;/code&gt; via the flow did not work. Because of that we just delete the list item using &lt;strong&gt;Delete item&lt;/strong&gt;. The number will be added back to the list with its up to date information as soon as the Runbook runs again.&lt;/p&gt;
&lt;p&gt;In the &lt;strong&gt;If no&lt;/strong&gt; action of the condition, we need to add another condition. This time, we want to check if the &lt;strong&gt;Account Type&lt;/strong&gt; is equal to &lt;strong&gt;User Account&lt;/strong&gt;. We only want to include a link to Teams Admin Center if it’s a user account.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1KSugJSu7Fc1kD6QiBAKPg.png&#34;
	width=&#34;1966&#34;
	height=&#34;413&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1KSugJSu7Fc1kD6QiBAKPg_hu_e476a433ba0f8d1e.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1KSugJSu7Fc1kD6QiBAKPg_hu_fd6bdbef5f7541d2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;476&#34;
		data-flex-basis=&#34;1142px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In this condition, we only configure actions if it’s &lt;strong&gt;True&lt;/strong&gt;. First, we update the list item. Select your &lt;strong&gt;Site Address&lt;/strong&gt; and &lt;strong&gt;List Name&lt;/strong&gt; again. Then fill in the &lt;strong&gt;ID&lt;/strong&gt; and &lt;strong&gt;Title&lt;/strong&gt; from dynamic content. And finally, in &lt;strong&gt;User Profile Claims&lt;/strong&gt; select &lt;strong&gt;Enter custom value&lt;/strong&gt; and choose &lt;strong&gt;User Principal Name&lt;/strong&gt; from dynamic content. Leave all the other fields blank.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1THXkqvbzDa3lKzVmDmqHww.png&#34;
	width=&#34;967&#34;
	height=&#34;1245&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1THXkqvbzDa3lKzVmDmqHww_hu_774367a7f43c4fb0.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1THXkqvbzDa3lKzVmDmqHww_hu_feb4ed790a01116c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;77&#34;
		data-flex-basis=&#34;186px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Add another action and choose &lt;strong&gt;Send an HTTP request to SharePoint&lt;/strong&gt;. The &lt;strong&gt;Update item&lt;/strong&gt; action only supports hyperlinks without a description so it would show the entire URL instead of a friendly name in the list. Although it’s more complicated, we can add a hyperlink with a friendly name using &lt;strong&gt;Send an HTTP request to SharePoint&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Fill in your &lt;strong&gt;Site Address&lt;/strong&gt; again and set the &lt;strong&gt;Method&lt;/strong&gt; to &lt;strong&gt;POST.&lt;/strong&gt; The &lt;strong&gt;Uri&lt;/strong&gt; must look like this:&lt;/p&gt;
&lt;p&gt;_api/web/lists/GetByTitle(&amp;lsquo;Teams Phone Number Overview Demo 10&amp;rsquo;)/items(@{triggerOutputs()?[&amp;lsquo;body/ID&amp;rsquo;]})&lt;/p&gt;
&lt;p&gt;Make sure to adjust the list name in case your list is named differently. Spaces inside the single quotes are supported in this field.&lt;/p&gt;
&lt;p&gt;Click the little icon next to the &lt;strong&gt;Headers&lt;/strong&gt; field to engage &lt;strong&gt;Switch Headers to text mode&lt;/strong&gt; and paste the following Json:&lt;/p&gt;
&lt;p&gt;{&lt;br&gt;
&amp;ldquo;Content-Type&amp;rdquo;: &amp;ldquo;application/json;odata=verbose&amp;rdquo;,&lt;br&gt;
&amp;ldquo;X-HTTP-Method&amp;rdquo;: &amp;ldquo;MERGE&amp;rdquo;,&lt;br&gt;
&amp;ldquo;IF-MATCH&amp;rdquo;: &amp;ldquo;*&amp;rdquo;&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;Then paste the following Json content in the &lt;strong&gt;Body&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;{&lt;br&gt;
&amp;ldquo;__metadata&amp;rdquo;: {&lt;br&gt;
&amp;ldquo;type&amp;rdquo;: &amp;ldquo;SP.Data.Teams_x0020_Phone_x0020_Number_x0020_Demo_x0020_10ListItem&amp;rdquo;&lt;br&gt;
},&lt;br&gt;
&amp;ldquo;TeamsAdminCenter&amp;rdquo;: {&lt;br&gt;
&amp;ldquo;Description&amp;rdquo;: &amp;ldquo;Teams Admin Center&amp;rdquo;,&lt;br&gt;
&amp;ldquo;Url&amp;rdquo;: &amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;https://admin.teams.microsoft.com/users/@%7btriggerOutputs%28%29&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://admin.teams.microsoft.com/users/@{triggerOutputs()&lt;/a&gt;?[&amp;lsquo;body/UserId&amp;rsquo;]}/account&amp;rdquo;&lt;br&gt;
}&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;Again, make sure to adjust the list name to your own. There is no space or any other character between the end of the list name and &lt;code&gt;ListItem&lt;/code&gt; . All spaces in the list name must be replaced by &lt;code&gt;_x0020_&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1cfiipG861HDIM3jYlRBIVA.png&#34;
	width=&#34;964&#34;
	height=&#34;1381&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1cfiipG861HDIM3jYlRBIVA_hu_ee6448debccf2de8.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1cfiipG861HDIM3jYlRBIVA_hu_4a95096f07331ad2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;69&#34;
		data-flex-basis=&#34;167px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you look at the trigger condition again, you might have noticed that the field names like &lt;strong&gt;User Principal Name&lt;/strong&gt; are all written like this: &lt;strong&gt;User_x0020_Principal_x0020_Name.&lt;/strong&gt; I noticed that all columns which contain spaces and have been created via the Graph API are named this way. &lt;strong&gt;Teams Admin Center&lt;/strong&gt; on the other hand has been created manually via SharePoint Online. This column&amp;rsquo;s reference name is now &lt;strong&gt;TeamsAdminCenter&lt;/strong&gt; as you can see in the screenshot above.&lt;/p&gt;
&lt;p&gt;That’s it, we finished building our flow. For reference, here’s the complete layout of the flow without expanded actions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/131pEBoBjwrnmLnXAWpI1fw.png&#34;
	width=&#34;3004&#34;
	height=&#34;1558&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/131pEBoBjwrnmLnXAWpI1fw_hu_628e3e9f0038b731.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/131pEBoBjwrnmLnXAWpI1fw_hu_8c232f68be2f5294.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;462px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;force-sync-thelist&#34;&gt;Force Sync the List
&lt;/h3&gt;&lt;p&gt;The only problem now is that it won’t be triggered unless the &lt;strong&gt;User Principal Name&lt;/strong&gt; field changes on any of the list entries. The easiest way to get these fields populated is to just delete all list entries of assigned user numbers and re-run the Runbook.&lt;/p&gt;
&lt;p&gt;Filter the list by &lt;strong&gt;Assigned&lt;/strong&gt; numbers and Account Type: &lt;strong&gt;User Account&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1oy8uFABozWsg4AIlK3vuaA.png&#34;
	width=&#34;2748&#34;
	height=&#34;410&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1oy8uFABozWsg4AIlK3vuaA_hu_164cad1b81ac35.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1oy8uFABozWsg4AIlK3vuaA_hu_76a14c0f2ca543ce.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;670&#34;
		data-flex-basis=&#34;1608px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Then delete all the entries and wait for the action to complete.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1MlCWdIO1Y8DSyWObydkRFw.png&#34;
	width=&#34;955&#34;
	height=&#34;530&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1MlCWdIO1Y8DSyWObydkRFw_hu_92ea612c6b8ee6c5.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1MlCWdIO1Y8DSyWObydkRFw_hu_8ddddc888b6cbbcd.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;180&#34;
		data-flex-basis=&#34;432px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now start the Runbook again or wait for the next scheduled job. Once the job has completed, wait another few minutes for the flow to be triggered.&lt;/p&gt;
&lt;p&gt;In the flow’s run history, you should then be able to see a couple of successful flow runs. One for each assigned user number which was previously deleted from the list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1f5SBjLNb00UmmWwtZCQ.png&#34;
	width=&#34;1604&#34;
	height=&#34;360&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1f5SBjLNb00UmmWwtZCQ_hu_18347b99fb048ca8.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1f5SBjLNb00UmmWwtZCQ_hu_81d5f5d23948e80b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;445&#34;
		data-flex-basis=&#34;1069px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In the details of the flow run, we can see that both the item was updated, and that the HTTP request was made to SharePoint.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1Gf3bQf6h3rT6dZtQNarGw.png&#34;
	width=&#34;2995&#34;
	height=&#34;1322&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1Gf3bQf6h3rT6dZtQNarGw_hu_22b20a70985d8af.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1Gf3bQf6h3rT6dZtQNarGw_hu_f6cf1ed18cf5c18f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;226&#34;
		data-flex-basis=&#34;543px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In our SharePoint List, we can now see that both the &lt;strong&gt;User Profile&lt;/strong&gt; and the link to &lt;strong&gt;Teams Admin Center&lt;/strong&gt; have been populated.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1cBT73cmZmnoEZNRofNOWaQ.png&#34;
	width=&#34;2750&#34;
	height=&#34;393&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1cBT73cmZmnoEZNRofNOWaQ_hu_fd94c5f4e9da41c4.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1cBT73cmZmnoEZNRofNOWaQ_hu_e98b0993faf5cc63.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;699&#34;
		data-flex-basis=&#34;1679px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;updating-the-direct-routing-numbers-inazure&#34;&gt;Updating the Direct Routing Numbers in Azure
&lt;/h4&gt;&lt;p&gt;Chances are that you’re going to have more/new Direct Routing numbers at some point. For that scenario, I created another script in &lt;code&gt;.\Setup\UpdateDirectRoutingNumbers.ps1&lt;/code&gt; . This script will compare the contents of the local &lt;strong&gt;DirectRoutingNumbers.csv&lt;/strong&gt; with what’s stored in the Azure Automation Variable. If the content is not the same, the script will &lt;strong&gt;overwrite&lt;/strong&gt; the content of the Automation Variable with your new local source list. This means that you will always need to include all your Direct Routing numbers in the local CSV file, not just new numbers. If you remove numbers from the local source, they will also be removed from the Automation Variable. Hopefully, you won’t have to do this too often.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/TeamsPhoneAutomation/blob/main/Setup/UpdateDirectRoutingNumbers.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TeamsPhoneAutomation/UpdateDirectRoutingNumbers.ps1 at main · mozziemozz/TeamsPhoneAutomation (github.com)&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h3&gt;&lt;p&gt;While this may be a read-only solution and it doesn’t have any management capabilities such as assigning or unassigning phone numbers, I still believe that there’s tremendous value in this. I think that this could be an interesting approach for smaller companies or non-profit organizations which might not have the cash to purchase an expensive number management solution. The costs for running a Runbook job every now and then should be fairly low. According to &lt;a class=&#34;link&#34; href=&#34;https://azure.microsoft.com/en-us/pricing/details/automation/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this website&lt;/a&gt; 500 minutes of Job run time is free every month.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/109Skrvola5ZGSYdJONlA.png&#34;
	width=&#34;1952&#34;
	height=&#34;656&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/109Skrvola5ZGSYdJONlA_hu_e27289196e613dd3.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/109Skrvola5ZGSYdJONlA_hu_4dd92e0ddb1a0644.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;297&#34;
		data-flex-basis=&#34;714px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Of course, this depends on the amount of numbers you have. The more numbers you have, the longer it will take for a job to complete. If we assume that each job requires 5 minutes to run, that would be about $ 6.5 per month if the job runs every hour every day of a month.&lt;/p&gt;
&lt;p&gt;With this, we can finally have a complete, dynamically updated list of all our phone numbers and their state regarding their type. On top of that, we can make it accessible easily for all users or admins who need to work with this kind of information. For example, we could also add the list as a Tab in a Microsoft Teams Channel.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1pmmbdHeT9HfnoslqhEkrQ.png&#34;
	width=&#34;3454&#34;
	height=&#34;1117&#34;
	srcset=&#34;https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1pmmbdHeT9HfnoslqhEkrQ_hu_acb2017dc2527324.png 480w, https://heusser.pro/p/teams-phone-number-management-on-a-budget-e25d53f65caf/1pmmbdHeT9HfnoslqhEkrQ_hu_50d2d78ed683570b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;309&#34;
		data-flex-basis=&#34;742px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;final-notes&#34;&gt;Final Notes
&lt;/h4&gt;&lt;p&gt;I invested a lot of time to perfect this project and I’m incredibly happy to be finally able to share it with the community and my readers on Medium. I tested both the deployment to Azure and the Runbook logic quite a few times so I’m fairly confident that this should work in other Tenants as well. Since I don’t have any Operator Connect numbers available, I couldn’t test that yet. If you are an Operator Connect customer and want to try this solution, feel free to let me know if it worked for you.&lt;/p&gt;
&lt;p&gt;I mainly tested populating and updating the list with about forty numbers of mixed types. I did make some quick tests (and adjustments) with a list of about 1000 Direct Routing numbers and that has worked well for me so far. If you manage a lot of phone numbers and want to try the solution yourself, I’m also happy if you can provide feedback on how it performs with even more numbers.&lt;/p&gt;
&lt;p&gt;As always, I hope you like what I’ve been up to!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Fix UTF-8 Encoding When Calling Azure Child Runbooks Inline</title>
        <link>https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/</link>
        <pubDate>Fri, 03 Mar 2023 10:03:56 +0000</pubDate>
        
        <guid>https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/</guid>
        <description>&lt;p&gt;I recently came across a very strange issue with Azure Runbooks and UTF-8 encoding. For most IT folks, it’s no issue if everything is in English but if you work with German speaking users, chances are that you’re going to run into encoding issues with &lt;strong&gt;Umlaute&lt;/strong&gt; or other special characters eventually. For those who have no idea what I’m talking about, Umlaute are special characters like “ä”, “ö” and “ü” which are used very frequently in German.&lt;/p&gt;
&lt;p&gt;The scenario is the following: I have a very simple Azure Runbook which sends a message card to a Teams channel.&lt;/p&gt;
&lt;p&gt;$uri = &amp;ldquo;YourWebhookUrl&amp;rdquo;&lt;/p&gt;
&lt;p&gt;$body = @&amp;rsquo;&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;@context&amp;rdquo;: &amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;https://schema.org/extensions%22&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://schema.org/extensions&#34;&lt;/a&gt;,&lt;br&gt;
&amp;ldquo;@type&amp;rdquo;: &amp;ldquo;MessageCard&amp;rdquo;,&lt;br&gt;
&amp;ldquo;themeColor&amp;rdquo;: &amp;ldquo;00A4EF&amp;rdquo;,&lt;br&gt;
&amp;ldquo;title&amp;rdquo;: &amp;ldquo;UTF8 Test&amp;rdquo;,&lt;br&gt;
&amp;ldquo;text&amp;rdquo;: &amp;ldquo;Hello Wörld!&amp;rdquo;&lt;br&gt;
}&lt;br&gt;
&amp;lsquo;@&lt;/p&gt;
&lt;p&gt;Invoke-RestMethod -uri $uri -Method Post -body $body -ContentType &amp;lsquo;application/json; charset=UTF-8&amp;rsquo;&lt;/p&gt;
&lt;p&gt;As you can see, I purposely wrote &lt;strong&gt;“Hello Wörld”&lt;/strong&gt; instead of &lt;strong&gt;“Hello World”&lt;/strong&gt; to demonstrate this. If the runbook is run directly (meaning, there’s no child runbook involved), there’s no issue at all and the card is sent to Teams using the correct encoding.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1Fjfq1GaXyavb7ynoRqqpg.png&#34;
	width=&#34;1209&#34;
	height=&#34;242&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1Fjfq1GaXyavb7ynoRqqpg_hu_79d5dbf42022d1db.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1Fjfq1GaXyavb7ynoRqqpg_hu_ca67f2b3b3e76880.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;499&#34;
		data-flex-basis=&#34;1199px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;working-with-childrunbooks&#34;&gt;Working With Child Runbooks
&lt;/h4&gt;&lt;p&gt;So far so good. In more complex scenarios, you might want to build modular runbooks. An example of that would be where you have some code and some parameters in one runbook (let’s call that &lt;strong&gt;main runbook&lt;/strong&gt; or &lt;strong&gt;child runbook&lt;/strong&gt;) and have a couple of other runbooks which call your main runbook inline. Let’s call these &lt;strong&gt;runner scripts&lt;/strong&gt; because they’re only used to run the main runbook.&lt;/p&gt;
&lt;p&gt;The advantage of such a setup is that you only need to change the code in one place if you need to update it. For example, if the URL of the webhook changes, we only need to edit the main runbook instead of all the other runbooks as well. You can also read more about that concept in this official Microsoft &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/azure/automation/automation-child-runbooks#call-a-child-runbook-by-using-inline-execution&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Learn article&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;wrong-encoding-in-childrunbooks&#34;&gt;Wrong Encoding in Child Runbooks
&lt;/h4&gt;&lt;p&gt;However, I have found that somehow the encoding gets messed up and special characters are sent to Teams in the wrong format if a child runbook is called inline from another runbook which runs in front of it.&lt;/p&gt;
&lt;p&gt;If you want to call another runbook from any runbook in the same automation account, you can just reference it by its name. All that’s needed is the following code which really just points to another script. Note that you do need to add &lt;code&gt;.ps1&lt;/code&gt; at the end of your runbook name.&lt;/p&gt;
&lt;p&gt;. .\SendMessageCardMain.ps1&lt;/p&gt;
&lt;p&gt;It doesn’t make any difference if &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/scripting/learn/ps101/10-script-modules?view=powershell-7.3&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;dot sourcing&lt;/a&gt; is used or not. The encoding will be wrong in either case.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1RIQJDWuX87n08U80GxZBlw.png&#34;
	width=&#34;1213&#34;
	height=&#34;241&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1RIQJDWuX87n08U80GxZBlw_hu_208c308d65b02cc.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1RIQJDWuX87n08U80GxZBlw_hu_7f0d0f4945268ae5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;503&#34;
		data-flex-basis=&#34;1207px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This isn’t just about the message which is sent to Teams through a web request. The encoding is wrong in general and thus when using &lt;code&gt;Write-Output&lt;/code&gt; as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1RxMMGmOGbr82SmAmzuh3cg.png&#34;
	width=&#34;1414&#34;
	height=&#34;493&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1RxMMGmOGbr82SmAmzuh3cg_hu_8592dd9b790d6def.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1RxMMGmOGbr82SmAmzuh3cg_hu_7e0db4ecb34d250.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;286&#34;
		data-flex-basis=&#34;688px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;workaround&#34;&gt;Workaround
&lt;/h4&gt;&lt;p&gt;The trick is to store the special characters inside a variable which is already known to the runner script (the one which will be submitted to the worker), and then calls the child runbook.&lt;/p&gt;
&lt;p&gt;$externalText = &amp;ldquo;Wörld&amp;rdquo;&lt;/p&gt;
&lt;p&gt;. .\SendMessageCardMain.ps1&lt;/p&gt;
&lt;p&gt;The word which contains the special character is replaced by the variable in the main script (child runbook).&lt;/p&gt;
&lt;p&gt;$uri = &amp;ldquo;YourWebhookUrl&amp;rdquo;&lt;/p&gt;
&lt;p&gt;$body = @&amp;rdquo;&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;@context&amp;rdquo;: &amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;https://schema.org/extensions%22&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://schema.org/extensions&#34;&lt;/a&gt;,&lt;br&gt;
&amp;ldquo;@type&amp;rdquo;: &amp;ldquo;MessageCard&amp;rdquo;,&lt;br&gt;
&amp;ldquo;themeColor&amp;rdquo;: &amp;ldquo;00A4EF&amp;rdquo;,&lt;br&gt;
&amp;ldquo;title&amp;rdquo;: &amp;ldquo;UTF8 Test&amp;rdquo;,&lt;br&gt;
&amp;ldquo;text&amp;rdquo;: &amp;ldquo;Hello $externalText!&amp;rdquo;&lt;br&gt;
}&lt;br&gt;
&amp;ldquo;@&lt;/p&gt;
&lt;p&gt;Invoke-RestMethod -uri $uri -Method Post -body $body -ContentType &amp;lsquo;application/json; charset=UTF-8&amp;rsquo;&lt;/p&gt;
&lt;p&gt;This way, the first runbook already knows the correct encoding and it works, just like it did in the first example where we only had one runbook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1SrfMmL5MqVyJJMuygMjA.png&#34;
	width=&#34;1211&#34;
	height=&#34;240&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1SrfMmL5MqVyJJMuygMjA_hu_aa94cdfcbb92053d.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1SrfMmL5MqVyJJMuygMjA_hu_227613bf680279a8.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;504&#34;
		data-flex-basis=&#34;1211px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Let’s assume that we have one main runbook which will just send Message Cards to Teams, but we also have many different runner scripts which will send different kind of messages to Teams.&lt;/p&gt;
&lt;p&gt;This would make the code quite hard to maintain. Imagine if we want to replace the word “Wörld” with “Zürich” for example. We’d have to do this for each runner script if the variable is stored inside each runner script.&lt;/p&gt;
&lt;h4 id=&#34;optimized-workaround-1-using-automation-variables&#34;&gt;Optimized Workaround 1 (Using Automation Variables)
&lt;/h4&gt;&lt;p&gt;Instead, we can just put the code into an Automation Variable as a string. Automation Variables are saved inside the Automation Account but outside of all the runbooks. This effectively gives us a location to store the code once but all runbooks inside that Automation Account will be able to access it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1MUKW9TSOMNz1gnnQcKeQyA.png&#34;
	width=&#34;1681&#34;
	height=&#34;597&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1MUKW9TSOMNz1gnnQcKeQyA_hu_6eaf03aa5d9cf53a.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1MUKW9TSOMNz1gnnQcKeQyA_hu_d0c1f0ebdd1806df.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;281&#34;
		data-flex-basis=&#34;675px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In the runner script, we import the Automation Variable using the &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/azure/automation/shared-resources/variables?tabs=azure-powershell#internal-cmdlets-to-access-variables&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;internal Cmdlet&lt;/a&gt;. This is only available in Azure Runbooks and does not require additional authentication.&lt;/p&gt;
&lt;p&gt;$AutomationVariableCode = Get-AutomationVariable -Name &amp;ldquo;AutomationVariableCode&amp;rdquo; | Out-String&lt;br&gt;
Invoke-Expression $AutomationVariableCode&lt;/p&gt;
&lt;p&gt;. .\SendMessageCardMain.ps1&lt;/p&gt;
&lt;p&gt;There’s no mention of &lt;code&gt;$externalText&lt;/code&gt; inside the runbook but it’s set by &lt;code&gt;Invoke-Expression&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;This allows us to change the value of the variable without touching any of our runner scripts which makes it a lot more scalable and easier to maintain while keeping the correct encoding.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1SRNRxJrIZunrddwFIRVKRg.png&#34;
	width=&#34;1214&#34;
	height=&#34;241&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1SRNRxJrIZunrddwFIRVKRg_hu_c9ce5c53b80a50ca.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1SRNRxJrIZunrddwFIRVKRg_hu_b0eda817e0e82efa.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;503&#34;
		data-flex-basis=&#34;1208px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Of course, the Automation Variable could also contain more complex code like a switch statement to define different messages or contain the same message in different language. For demonstration purposes, I kept it simple by just using a single value variable.&lt;/p&gt;
&lt;p&gt;On the downside, this makes editing the code complicated and error prone, since it’s just a string stored inside a variable without any kind of syntax checking. To tackle that issue, one would need to copy it to a local IDE (e.g. VS Code) each time the code is updated and paste it back into the Automation Variable once it’s done.&lt;/p&gt;
&lt;h4 id=&#34;optimized-workaround-2-using-powershell-runbooks&#34;&gt;Optimized Workaround 2 (Using PowerShell Runbooks)
&lt;/h4&gt;&lt;p&gt;What about storing the code in yet another runbook? This would allow for easier editing and testing right in the browser. But is it possible&amp;hellip;? As it turns out, it is!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1KEZF0gbmFG0gzNvtYMRrg.png&#34;
	width=&#34;2017&#34;
	height=&#34;351&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1KEZF0gbmFG0gzNvtYMRrg_hu_b5eb104678cb48b7.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1KEZF0gbmFG0gzNvtYMRrg_hu_e6842afd2d601365.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;574&#34;
		data-flex-basis=&#34;1379px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1wqc76iVn3V2GHxNTOx8w.png&#34;
	width=&#34;884&#34;
	height=&#34;322&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1wqc76iVn3V2GHxNTOx8w_hu_4f34aeb95cb42c26.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1wqc76iVn3V2GHxNTOx8w_hu_d541a687568ccca5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;274&#34;
		data-flex-basis=&#34;658px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;To be able to get the contents/code of what I call the &lt;strong&gt;content runbook&lt;/strong&gt; we need to make sure that the modules &lt;strong&gt;Az.Accounts&lt;/strong&gt; and &lt;strong&gt;Az.Automation&lt;/strong&gt; are installed in our Automation Account.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1azPWChNsXyf25OJAqcoOgQ.png&#34;
	width=&#34;2792&#34;
	height=&#34;387&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1azPWChNsXyf25OJAqcoOgQ_hu_5c8890c92659e12a.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1azPWChNsXyf25OJAqcoOgQ_hu_c9f36f3cf4d9663e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;721&#34;
		data-flex-basis=&#34;1731px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1sZzUKlvhywLqZQhTFgIQwg.png&#34;
	width=&#34;3195&#34;
	height=&#34;390&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1sZzUKlvhywLqZQhTFgIQwg_hu_51cafa52b2acb198.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1sZzUKlvhywLqZQhTFgIQwg_hu_be081c597cb52555.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;819&#34;
		data-flex-basis=&#34;1966px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;We also need a &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Managed Identity&lt;/a&gt; to connect to Azure since we’ll be using regular&lt;code&gt;Az*&lt;/code&gt; Cmdlets and not internal ones this time around.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1mXMuUMBFEAyxBk9gH7Ad5A.png&#34;
	width=&#34;2304&#34;
	height=&#34;1296&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1mXMuUMBFEAyxBk9gH7Ad5A_hu_a9bfac259f1841f0.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1mXMuUMBFEAyxBk9gH7Ad5A_hu_749bab24f4570d2e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Let’s add a little more code to our runner script. My Tenant Id is also stored inside an Automation Variable, thus it’s not visible in the code.&lt;/p&gt;
&lt;p&gt;$tenantId = Get-AutomationVariable -Name &amp;ldquo;tenantId&amp;rdquo;&lt;br&gt;
$azAccount = Connect-AzAccount -Identity -TenantId $tenantId&lt;/p&gt;
&lt;p&gt;$exportRb = Export-AzAutomationRunbook -AutomationAccountName &amp;ldquo;mzz-automation-account-001&amp;rdquo; -ResourceGroupName &amp;ldquo;mzz-rmg-001&amp;rdquo; -Name &amp;ldquo;SendMessageCardContent&amp;rdquo; -OutputFolder $env:temp&lt;/p&gt;
&lt;p&gt;Get-Content -Path $env:temp\$exportRb -Encoding UTF8 | Out-String | Invoke-Expression&lt;/p&gt;
&lt;p&gt;. .\SendMessageCardMain.ps1&lt;/p&gt;
&lt;p&gt;With a Managed Identity, we don’t need to provide any kind of additional authentication. Everything is handled by the Automation Account using the Managed Identity automatically. We only need to provide &lt;code&gt;Connect-AzAccount -Identity -TenantId $tenantId&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;We then export the runbook using &lt;code&gt;Export-AzAutomationRunbook&lt;/code&gt; to &lt;code&gt;$env:temp&lt;/code&gt;. Finally, we import the runbook’s content by using &lt;code&gt;Get-Content&lt;/code&gt; and execute its code by piping it through to &lt;code&gt;Invoke-Expression&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;In case I have lost you at this point, let’s recap very briefly.&lt;/p&gt;
&lt;p&gt;By using &lt;code&gt;Invoke-Expression&lt;/code&gt; instead of calling the runbook inline, we make sure that the externally stored code is running in the scope of the runner script and not the child runbook, which will keep the encoding intact.&lt;/p&gt;
&lt;p&gt;And we’re jumping through hoops here by storing the values of the variables in another runbook so that they can be updated without touching each of our runner scripts. If it helps, you can also think about a scenario where you’re hosting some kind of monitoring or reporting solution for different customers inside your own Tenant/Automation Account. Each customer has its own runner script with their own parameters but there’s only one main runbook which contains all the code.&lt;/p&gt;
&lt;p&gt;If we need to update the script logic, only the main runbook needs to be updated. If we need to make changes to the content of the messages, only the runbook storing these values needs to be updated.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1mg0Nja4e5HPo9HbQPgQnA.png&#34;
	width=&#34;1219&#34;
	height=&#34;244&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1mg0Nja4e5HPo9HbQPgQnA_hu_d4cb97119c5f860.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1mg0Nja4e5HPo9HbQPgQnA_hu_95deeea0b238b3b0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;499&#34;
		data-flex-basis=&#34;1199px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now let’s change the word inside the runbook to something else. Instead of editing an Automation Variable, we can just edit the runbook, which is a lot more user friendly.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1NTgYp7gxGHjy3GN4wNJwMA.png&#34;
	width=&#34;2019&#34;
	height=&#34;345&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1NTgYp7gxGHjy3GN4wNJwMA_hu_5876828ffd06a34d.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1NTgYp7gxGHjy3GN4wNJwMA_hu_2f9c93a79433eef4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;585&#34;
		data-flex-basis=&#34;1404px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Don’t forget to publish the runbook. Otherwise, the values won’t be updated. As expected, this works like a charm.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1jYFSVZTopjDmtqdrmufrQ.png&#34;
	width=&#34;1217&#34;
	height=&#34;240&#34;
	srcset=&#34;https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1jYFSVZTopjDmtqdrmufrQ_hu_7ede295ae2176db2.png 480w, https://heusser.pro/p/fix-utf-8-encoding-when-calling-azure-child-runbooks-inline-78644e6af242/1jYFSVZTopjDmtqdrmufrQ_hu_a4171da2cb4ca1fa.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;507&#34;
		data-flex-basis=&#34;1217px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If for some reason you don’t want to read your variables into memory in the runner script and do it in the child runbook instead, you can also use the &lt;code&gt;Invoke-Expression&lt;/code&gt; method from there. This works as well, even if the child runbook is called inline by another runbook and the runner script doesn’t have any reference to the special character variables at all.&lt;/p&gt;
&lt;p&gt;I have no idea why it doesn’t work if special characters are included explicitly in child runbooks though. And it took me quite some time to figure out a workaround for this. I hope that this article is useful to you, if you’ve been struggling with modular runbooks and encoding issues as well.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Bulk Deploy Microsoft Teams Call Flows with PowerShell in Minutes</title>
        <link>https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/</link>
        <pubDate>Sat, 18 Feb 2023 17:24:32 +0000</pubDate>
        
        <guid>https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/</guid>
        <description>&lt;p&gt;The M365 Call Flow Visualizer focuses on retrieving configurations of Teams Auto Attendants and Call Queues which have already been built. And it does so by using PowerShell.&lt;/p&gt;
&lt;p&gt;But what about the opposite? Can we use PowerShell to create a new call flow from scratch in just a few minutes as well?&lt;/p&gt;
&lt;p&gt;In this article, I’m going to show you how you can create a basic, yet fully functional call flow with PowerShell. The only thing you’ll need to do yourself in the end is to add users to the Team.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is Needed to Build a Call Flow?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Before we get into the script, let’s look at what steps we need to take to build a call flow.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create resource accounts&lt;/li&gt;
&lt;li&gt;License resource accounts (and set Usage Location)&lt;/li&gt;
&lt;li&gt;Assign a phone number (and voice routing policy if it’s a Direct Routing number) to the resource accounts&lt;/li&gt;
&lt;li&gt;Create a Microsoft 365 Group with a Team (For voice enabled channel and shared voicemail)&lt;/li&gt;
&lt;li&gt;Configure M365 Group for Follow in Inbox and Show in Outlook&lt;/li&gt;
&lt;li&gt;Create and configure the Call Queue&lt;/li&gt;
&lt;li&gt;Assign the Resource Account to the Call Queue&lt;/li&gt;
&lt;li&gt;Create the Auto Attendant and configure forwarding to the queue during business hours&lt;/li&gt;
&lt;li&gt;Assign the Resource Account to the Auto Attendant&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These are quite a few steps to conclude but the hardest part about this is remembering the correct order of all the steps so you can do it as fast as possible. For example, if you forget to set the Usage Location to the same country as the phone number you want to assign, you will have to go back and wait for the change to be propagated.&lt;/p&gt;
&lt;p&gt;Another example is that you should always start at the back of your call flow. You can’t fully configure a Call Queue if you don’t have the Team or the M365 Group for shared voicemail yet. And you can’t finish configuring your Auto Attendant if you haven’t built the queue before.&lt;/p&gt;
&lt;p&gt;If you want to learn more about resource accounts or shared voicemail, I suggest the following articles of mine.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489&#34; &gt;Everything You Ever Wanted to Know About Teams Resource Accounts | by martin heusser | Medium&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24&#34; &gt;Everything you ever wanted to know about Microsoft Teams Phone and Shared Voicemail | by martin heusser | Medium&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;some-notes-about-thisscript&#34;&gt;Some Notes About This Script
&lt;/h4&gt;&lt;p&gt;The script follows my personal best practices when building call flows and considers all the aforementioned examples of steppingstones for maximum efficiency.&lt;/p&gt;
&lt;p&gt;This is not intended to build super complex call flows. Instead, it is just an example of how one can write a deployment script, which does everything from A-Z in an efficient order. It can, however, build multiple call flows in a row.&lt;/p&gt;
&lt;p&gt;While it would be possible to make it even more efficient by, for example, creating and licensing all the resource accounts from the CSV entries first, then create all the Call Queues and at last all the Auto Attendants, I decided not to pursue this road for the sake of simplicity. Instead, the script will create each call flow after the other, which probably takes slightly longer to complete.&lt;/p&gt;
&lt;p&gt;There are some steps where we need to wait for the previous steps to complete. For example, when a Resource Account is created, it usually takes a few seconds for the corresponding User Object in Teams to be created as well. Rest assured though; the script will handle all of that on its own. So don’t get spooked if you see some red error messages in PowerShell. These are just standard error messages, where the script tries to query a user which couldn’t be found yet.&lt;/p&gt;
&lt;p&gt;Because we’re also querying a tenant’s domain names and modify licenses this script requires some additional scopes for Microsoft Graph. So be sure to have a Global Admin account ready to consent to these scopes.&lt;/p&gt;
&lt;p&gt;Connect-MgGraph -Scopes &amp;ldquo;User.ReadWrite.All&amp;rdquo;, `&lt;br&gt;
&amp;ldquo;Group.ReadWrite.All&amp;rdquo;, `&lt;br&gt;
&amp;ldquo;Domain.ReadWrite.All&amp;rdquo;, `&lt;br&gt;
&amp;ldquo;Organization.ReadWrite.All&amp;rdquo;, `&lt;br&gt;
&amp;ldquo;Directory.ReadWrite.All&amp;rdquo;&lt;/p&gt;
&lt;p&gt;To configure the Microsoft 365 Group the script requires the &lt;strong&gt;ExchangeOnlineManagement&lt;/strong&gt; PowerShell Module in addition to MicrosoftTeams and Microsoft.Graph**.** If you don’t have it already, you can use the following command to install it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Install-Module ExchangeOnlineManagement&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;how-does-itwork&#34;&gt;How Does it Work?
&lt;/h4&gt;&lt;p&gt;In my &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer/tree/main/Deployment&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub Repository&lt;/a&gt;, you will find a sample file called “VoiceAppList.csv”. All you need to do is to fill in your information there. And run the script.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1l6dmaJHs10JUjUNsetrVnA.png&#34;
	width=&#34;1734&#34;
	height=&#34;957&#34;
	srcset=&#34;https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1l6dmaJHs10JUjUNsetrVnA_hu_730d5432800ea51e.png 480w, https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1l6dmaJHs10JUjUNsetrVnA_hu_f4af86a310a36e69.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;These are the details which can be passed from the CSV file to the script.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DepartmentName&lt;br&gt;
This name of the queue or Team. It will be added to all elements in the call flow: Team, Channel, Resource Accounts, Auto Attendant, Call Queue. For example, if you set “Marketing” as your DepartmentName, your queue will be called “Marketing CQ”.&lt;/li&gt;
&lt;li&gt;TopLevelNumber&lt;br&gt;
The number which is called by customers and assigned to the Auto Attendant. It must be an E.164 number. See &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/teams/set-csphonenumberassignment?view=teams-ps#-phonenumber&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; for more information.&lt;/li&gt;
&lt;li&gt;NumberType&lt;br&gt;
This is required for the phone number assignment. Valid values: CallingPlan, OperatorConnect, DirectRouting, &lt;code&gt;$null&lt;/code&gt; . Leave the field empty in the CSV if you don’t want to assign a number just yet.&lt;/li&gt;
&lt;li&gt;VoiceRoutingPolicyName&lt;br&gt;
This is only required if you want to assign a Direct Routing number. It’s only needed if the AA should be capable of external transfers later on. It’s only added as a precaution. You can read how to get the name of your voice routing policies &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/get-csonlinevoiceroutingpolicy?view=skype-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;UsageLocation&lt;br&gt;
This must be the same as the Phone Number if your’re using Calling Plans. E.g. “CH” or “GB”.&lt;/li&gt;
&lt;li&gt;AgentAlertTime&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/set-cscallqueue?view=skype-ps#-agentalerttime&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Set-CsCallQueue (SkypeForBusiness) | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TimeoutThreshold&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/set-cscallqueue?view=skype-ps#-timeoutthreshold&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Set-CsCallQueue (SkypeForBusiness) | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PromptLanguage&lt;br&gt;
This is the language of the text to speech prompt. See &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/fr-fr/powershell/module/skype/get-csautoattendantsupportedlanguage?view=skype-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; MS Learn article for more information. You will be prompted by &lt;code&gt;Out-GridView&lt;/code&gt; if you specify an invalid language Id.&lt;/li&gt;
&lt;li&gt;TimeoutSharedVoicemailPrompt&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/set-cscallqueue?view=skype-ps#-timeoutsharedvoicemailtexttospeechprompt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Set-CsCallQueue (SkypeForBusiness) | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;AfterHoursDisconnectPrompt&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/new-csautoattendantprompt?view=skype-ps#-texttospeechprompt&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;New-CsAutoAttendantPrompt (SkypeForBusiness) | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;TimeZone&lt;br&gt;
The time zone of the Auto Attendant. See &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/get-csautoattendantsupportedtimezone?view=skype-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; MS Learn article for more information. You will be prompted by &lt;code&gt;Out-GridView&lt;/code&gt;if you specify an invalid time zone Id.&lt;/li&gt;
&lt;li&gt;BusinessHoursStart1&lt;br&gt;
If none of the business hours fields are populated, the script won’t create an after hours call flow for the Auto Attendant. If only &lt;strong&gt;BusinessHoursStart1&lt;/strong&gt; and &lt;strong&gt;BusinessHoursEnd1&lt;/strong&gt; are populated, the AA will only have one time slot. If &lt;strong&gt;BusinessHoursStart2&lt;/strong&gt; and &lt;strong&gt;BusinessHoursEnd2&lt;/strong&gt; are populated as well, the AA will have two time slots, e.g. lunch break.&lt;br&gt;
E.g. &lt;code&gt;08:00&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;BusinessHoursEnd1&lt;br&gt;
E.g. &lt;code&gt;12:15&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;BusinessHoursStart2&lt;br&gt;
E.g. &lt;code&gt;13:30&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;BusinessHoursEnd2&lt;br&gt;
E.g. &lt;code&gt;17:45&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;DomainSuffix&lt;br&gt;
By default, the script will use your tenant’s default domain for resource account UPNs or MailNicknames. If you want to change that, you can specify and domain that’s available in your tenant as &lt;code&gt;-DomainSuffix&lt;/code&gt; . E.g. “example.onmicrosoft.com”.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Running the script will deploy a simple call flow with an Auto Attendant, business hours and one Call Queue which uses a Voice Enabled Channel for each line in the CSV file. Outside of business hours, the Auto Attendants will play a message and disconnect the call.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1XEyqntZvtv72Qxuzf1aNw.png&#34;
	width=&#34;1073&#34;
	height=&#34;2737&#34;
	srcset=&#34;https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1XEyqntZvtv72Qxuzf1aNw_hu_391dca93c842c9da.png 480w, https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1XEyqntZvtv72Qxuzf1aNw_hu_801189ef241996e8.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;39&#34;
		data-flex-basis=&#34;94px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The Call Queues will time out after the amount of seconds which is defined in &lt;code&gt;-TimeoutThreshold&lt;/code&gt; and then forward the call to shared voicemail once the greeting has been played back.&lt;/p&gt;
&lt;p&gt;The script automatically creates a new Team and a Channel for the Queue as well. I prefer to use dedicated over existing Teams and Channels because not all team members of an existing team are potentially going to answer calls.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1XIhvE9DOsrXKapeR0L3zbA.png&#34;
	width=&#34;982&#34;
	height=&#34;398&#34;
	srcset=&#34;https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1XIhvE9DOsrXKapeR0L3zbA_hu_d9f379042a6a8fef.png 480w, https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1XIhvE9DOsrXKapeR0L3zbA_hu_12bfad10f9e98e75.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;246&#34;
		data-flex-basis=&#34;592px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When a new Team is created and the Microsoft 365 Group has not existed before, the group is by default hidden from Outlook Clients. Because we want the agents of the queue to have access to the group mailbox in Outlook, the script will automatically enable the Follow in Inbox feature and unhide the group from Outlook Clients.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1RQyp3fLFRTkxE2XWTu8Ng.png&#34;
	width=&#34;900&#34;
	height=&#34;671&#34;
	srcset=&#34;https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1RQyp3fLFRTkxE2XWTu8Ng_hu_3e4494ce28775449.png 480w, https://heusser.pro/p/bulk-deploy-microsoft-teams-call-flows-with-powershell-in-minutes-1a78099fe94f/1RQyp3fLFRTkxE2XWTu8Ng_hu_8243c24c6047d723.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;134&#34;
		data-flex-basis=&#34;321px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Shared voicemail is another reason I like to use dedicated groups. With a new group, we can make sure that the only kind of emails received in this group&amp;rsquo;s inbox are voicemails, and we can enable Follow in Inbox without any concern of potentially spamming dozens of other team members by sending all group emails to their personal inboxes.&lt;/p&gt;
&lt;h4 id=&#34;the-script&#34;&gt;The Script
&lt;/h4&gt;&lt;script src=&#34;https://gist.github.com/mozziemozz/8b4640590b85da1e1f296b9ef599ae9a.js&#34;&gt;&lt;/script&gt;

&lt;h4 id=&#34;finishing-up&#34;&gt;Finishing Up
&lt;/h4&gt;&lt;p&gt;While the call flow is technically already able to receive calls after it has been deployed by the script, you’ll still need to add members to the queue. Otherwise, the calls will never be signaled to any agent.&lt;/p&gt;
&lt;p&gt;Remember that only members of the Team who are also Enterprise Voice Enabled will be added to the queue’s agent list. If you don’t want to wait a few hours for the agent list to update after you have added the members, you might want to check out &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0&#34; &gt;this&lt;/a&gt; article. It explains how to force sync an agent list of Call Queues.&lt;/p&gt;
&lt;p&gt;As mentioned before, this is a mere example of a very simple call flow. However, if most of your call flows only consist of an Auto Attendant forwarding calls to a Call Queue (Like it’s common in many small businesses), PowerShell can still be immensely helpful to lay the ground works.&lt;/p&gt;
&lt;p&gt;Naturally, you can still go into TAC and adjust everything to your needs after the script has built your scaffolding. You just won’t have to bother adding resources accounts and associating them with your voice apps etc.&lt;/p&gt;
&lt;p&gt;Creating Auto Attendants with PowerShell is quite a complex process compared to Call Queues or other Microsoft resources. If you want to adjust my script to your specific needs, a good place to start is the official documentation from Microsoft. As far as I can tell, they recently added updated example scripts which might be helpful.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/new-csautoattendant?view=skype-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;New-CsAutoAttendant (SkypeForBusiness) | Microsoft Learn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/set-csautoattendant?view=skype-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Set-CsAutoAttendant (SkypeForBusiness) | Microsoft Learn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now go ask ChatGPT to write you a script that does the same.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>The Easiest Way to Convert HEIC Images to JPG (on Windows 11)</title>
        <link>https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/</link>
        <pubDate>Fri, 10 Feb 2023 21:10:34 +0000</pubDate>
        
        <guid>https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1zjYShjgSdDz1plzaJGZAdg.png&#34;
	width=&#34;1356&#34;
	height=&#34;1125&#34;
	srcset=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1zjYShjgSdDz1plzaJGZAdg_hu_25ab23cf70ce0656.png 480w, https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1zjYShjgSdDz1plzaJGZAdg_hu_5074657eaf871f95.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;120&#34;
		data-flex-basis=&#34;289px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;By now, most people should have heard about HEIC (or HEIF) and HEVC. HEVC — High Efficiency Video Codec is a video codec optimized for 4K content and HEIC is the file name extension for images saved with the High Efficiency Image File Format. Apple iPhones have supported these formats for quite some time now. However, they are mutually exclusive options to each other. Meaning, we can’t use HEVC for videos and JPG for photos. We can only choose if we want to use the new or the legacy formats in iOS.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/12I41bLPo3IZokvwTQrI6Bw.png&#34;
	width=&#34;750&#34;
	height=&#34;429&#34;
	srcset=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/12I41bLPo3IZokvwTQrI6Bw_hu_6ea776a1894892b6.png 480w, https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/12I41bLPo3IZokvwTQrI6Bw_hu_448fcdf3abd74614.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;174&#34;
		data-flex-basis=&#34;419px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I back up / sync all my photos from my iPhone to OneDrive. Often, these are not just vacation pictures but also photos which I might need to share with others. While most modern systems can display and work with HEIF photos without issues, there are still some scenarios for which a JPG is simply better suited.&lt;/p&gt;
&lt;p&gt;![](*.HEIC image, chances are that the corporate IT department of some companies are lagging behind and might have blocked these AppDownloads. The only solution was to convert the images and send them again.)&lt;/p&gt;
&lt;p&gt;If you bing “HEIC Converter” you’ll be overwhelmed with the number of websites which claim to offer the best HEIC converter. However, I was looking for a much simpler way. All I want to do is to right click any HEIC image and have it converted to JPG.&lt;/p&gt;
&lt;p&gt;In this &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/launch-windows-terminal-as-admin-from-windows-11-context-menu-8eb2abe7b28b&#34; &gt;post&lt;/a&gt;, I explained how the App &lt;a class=&#34;link&#34; href=&#34;https://www.microsoft.com/store/productId/9PC7BZZ28G0X&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;Custom Context Menu&lt;/strong&gt;&lt;/a&gt; can be used to create your own context menu entries in Windows 11.&lt;/p&gt;
&lt;p&gt;Before we create a custom context menu entry for that, we need to install &lt;a class=&#34;link&#34; href=&#34;https://imagemagick.org/script/download.php#windows&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ImageMagick&lt;/a&gt;. This is a command line tool which lets you do all kinds of image conversion operations.&lt;/p&gt;
&lt;p&gt;Once that is installed, create a new custom context menu entry like in this example.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/17irVXYoTCRb4ec79DqMKZA.png&#34;
	width=&#34;1805&#34;
	height=&#34;1401&#34;
	srcset=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/17irVXYoTCRb4ec79DqMKZA_hu_9abc170864d70968.png 480w, https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/17irVXYoTCRb4ec79DqMKZA_hu_a6df2dd7b81f2ab9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;128&#34;
		data-flex-basis=&#34;309px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Param:&lt;/p&gt;
&lt;p&gt;&amp;ldquo;cmd /c &amp;ldquo;magick &amp;ldquo;{path}&amp;rdquo; &amp;ldquo;{parent}&amp;rdquo;\{name}.jpg&amp;rdquo;&amp;rdquo;&lt;/p&gt;
&lt;p&gt;If you like, you can also create a second one which will remove the original HEIC files after they have been converted to JPG.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1Nm5hmCJ7bnkCXwU8ksqtQ.png&#34;
	width=&#34;1805&#34;
	height=&#34;1401&#34;
	srcset=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1Nm5hmCJ7bnkCXwU8ksqtQ_hu_7d341205afc34e5e.png 480w, https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1Nm5hmCJ7bnkCXwU8ksqtQ_hu_4a154fbccacdda7e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;128&#34;
		data-flex-basis=&#34;309px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Param:&lt;/p&gt;
&lt;p&gt;&amp;ldquo;cmd /c &amp;ldquo;magick &amp;ldquo;{path}&amp;rdquo; &amp;ldquo;{parent}&amp;rdquo;\{name}.jpg &amp;amp; del &amp;ldquo;{path}&amp;rdquo;&amp;rdquo;&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Make sure to copy the params exactly as they are as the double quotes are important.&lt;/p&gt;
&lt;p&gt;Or alternatively, open your custom context menu folder by clicking the folder icon in the upper left corner and create a new *.json file for both the examples.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1uG8cJdskk9ECyaUlIji2g.png&#34;
	width=&#34;1810&#34;
	height=&#34;131&#34;
	srcset=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1uG8cJdskk9ECyaUlIji2g_hu_aaf17301fe2bfaf2.png 480w, https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1uG8cJdskk9ECyaUlIji2g_hu_fc42ca4557127032.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1381&#34;
		data-flex-basis=&#34;3316px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Example: Keep Original Files&lt;/p&gt;
&lt;p&gt;{&lt;br&gt;
&amp;ldquo;title&amp;rdquo;: &amp;ldquo;HEIC to JPG (Keep Original Files)&amp;rdquo;,&lt;br&gt;
&amp;ldquo;exe&amp;rdquo;: &amp;ldquo;\&amp;ldquo;C:\\Windows\\System32\\cmd.exe\&amp;rdquo;&amp;rdquo;,&lt;br&gt;
&amp;ldquo;param&amp;rdquo;: &amp;ldquo;\&amp;ldquo;cmd /c \&amp;ldquo;magick \&amp;quot;{path}\&amp;rdquo; \&amp;quot;{parent}\&amp;rdquo;\\{name}.jpg\&amp;rdquo;\&amp;quot;&amp;quot;,&lt;br&gt;
&amp;ldquo;icon&amp;rdquo;: &amp;ldquo;\&amp;ldquo;C:\\Users\\marti\\OneDrive\\Bilder\\Icons\\Apps\\Gallery.ico\&amp;rdquo;&amp;rdquo;,&lt;br&gt;
&amp;ldquo;acceptExts&amp;rdquo;: &amp;ldquo;.heic .heif&amp;rdquo;,&lt;br&gt;
&amp;ldquo;acceptDirectory&amp;rdquo;: false,&lt;br&gt;
&amp;ldquo;acceptFile&amp;rdquo;: true,&lt;br&gt;
&amp;ldquo;acceptMultipleFilesFlag&amp;rdquo;: 1,&lt;br&gt;
&amp;ldquo;pathDelimiter&amp;rdquo;: &amp;ldquo;&amp;rdquo;,&lt;br&gt;
&amp;ldquo;paramForMultipleFiles&amp;rdquo;: &amp;ldquo;&amp;rdquo;,&lt;br&gt;
&amp;ldquo;index&amp;rdquo;: 1&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;Example: Remove Original Files&lt;/p&gt;
&lt;p&gt;{&lt;br&gt;
&amp;ldquo;title&amp;rdquo;: &amp;ldquo;HEIC to JPG (Remove Original Files)&amp;rdquo;,&lt;br&gt;
&amp;ldquo;exe&amp;rdquo;: &amp;ldquo;\&amp;ldquo;C:\\Windows\\System32\\cmd.exe\&amp;rdquo;&amp;rdquo;,&lt;br&gt;
&amp;ldquo;param&amp;rdquo;: &amp;ldquo;\&amp;ldquo;cmd /c \&amp;ldquo;magick \&amp;quot;{path}\&amp;rdquo; \&amp;quot;{parent}\&amp;rdquo;\\{name}.jpg &amp;amp; del \&amp;quot;{path}\&amp;rdquo;\&amp;quot;\&amp;quot;&amp;quot;,&lt;br&gt;
&amp;ldquo;icon&amp;rdquo;: &amp;ldquo;\&amp;ldquo;C:\\Users\\marti\\OneDrive\\Bilder\\Icons\\Apps\\Gallery.ico\&amp;rdquo;&amp;rdquo;,&lt;br&gt;
&amp;ldquo;acceptExts&amp;rdquo;: &amp;ldquo;.heic .heif&amp;rdquo;,&lt;br&gt;
&amp;ldquo;acceptDirectory&amp;rdquo;: false,&lt;br&gt;
&amp;ldquo;acceptFile&amp;rdquo;: true,&lt;br&gt;
&amp;ldquo;acceptMultipleFilesFlag&amp;rdquo;: 1,&lt;br&gt;
&amp;ldquo;pathDelimiter&amp;rdquo;: &amp;ldquo;&amp;rdquo;,&lt;br&gt;
&amp;ldquo;paramForMultipleFiles&amp;rdquo;: &amp;ldquo;&amp;rdquo;,&lt;br&gt;
&amp;ldquo;index&amp;rdquo;: 2&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;Save and restart your PC.&lt;/p&gt;
&lt;p&gt;The next time you need to quickly convert a HEIC file to JPG, simply right click the file (or files) and select one of the options from your custom context menu.&lt;/p&gt;
&lt;p&gt;Here’s a short demo of both actions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1XWJSmwZXC8KyVyZkhMlEQ.gif&#34;
	width=&#34;2136&#34;
	height=&#34;1371&#34;
	srcset=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1XWJSmwZXC8KyVyZkhMlEQ_hu_bb18e76d284eecd.gif 480w, https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1XWJSmwZXC8KyVyZkhMlEQ_hu_82a170f68f1743e2.gif 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;373px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1AYTYRznK6xZ8S4vy8ScayA.gif&#34;
	width=&#34;2137&#34;
	height=&#34;1371&#34;
	srcset=&#34;https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1AYTYRznK6xZ8S4vy8ScayA_hu_44fe4c063e973079.gif 480w, https://heusser.pro/p/the-easiest-way-to-convert-heic-images-to-jpg-on-windows-11-44fad1179e98/1AYTYRznK6xZ8S4vy8ScayA_hu_f2e877c57bbb5696.gif 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;155&#34;
		data-flex-basis=&#34;374px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Even though it requires some steps to set up, this is by far the easiest and most convenient way to convert HEIC to JPG. There’s no need to install any annoying shareware or let alone pay for one.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Teams Auto Attendant and Call Queue Spring-Cleaning</title>
        <link>https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/</link>
        <pubDate>Wed, 01 Feb 2023 20:43:08 +0000</pubDate>
        
        <guid>https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/</guid>
        <description>&lt;p&gt;Are your Teams Auto Attendants, Call Queues and Resource Accounts a mess? Or have you lost track of who created which accounts or Voice Apps? You know what they say…&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Too Many Cooks Spoil the Broth.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1eRzA7AqlES8kea2hT4qYQ.png&#34;
	width=&#34;1800&#34;
	height=&#34;813&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1eRzA7AqlES8kea2hT4qYQ_hu_d03ae5e518582de5.png 480w, https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1eRzA7AqlES8kea2hT4qYQ_hu_46de92bbc0e4195.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;221&#34;
		data-flex-basis=&#34;531px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It’s not really spring yet but who cares? Cleaning up your environment is always a good thing. Today we’re talking Teams Phone reporting again. In case you’ve missed some of my previous articles, here’s an overview of what handy scripts I already released last year.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485&#34; &gt;Report on Teams Call Queue Opt In Status and Assignment Paths&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/find-all-auto-attendants-and-call-queues-a-user-is-associated-with-16710c3adf01&#34; &gt;Find All Auto Attendants and Call Queues a User is Associated with&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154&#34; &gt;Automatically render Microsoft Teams Call Flow Diagrams&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/how-to-export-a-teams-call-flow-to-png-4d38a8c4f183&#34; &gt;How To Export a Teams Call Flow to PNG&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I remember that somebody on social media asked me if it was possible to get a list of all Resource Accounts which are not assigned to any Auto Attendant or Call Queue. That’s why I wrote this script in December 2022.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer/blob/main/FindUnassignedResourceAccounts.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;M365CallFlowVisualizer/FindUnassignedResourceAccounts.ps1 at main · mozziemozz/M365CallFlowVisualizer (github.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This time, I’ve taken it even further and used the M365 Call Flow Visualizer to not only find unused Resource Accounts but also Call Queues and Auto Attendants which are not in use.&lt;/p&gt;
&lt;h4 id=&#34;what-qualifies-as-not-inuse&#34;&gt;What Qualifies as Not in Use?
&lt;/h4&gt;&lt;p&gt;First of all, any Attendant or any Queue which does not have a Resource Account assigned, can’t be called, or transferred to. They exist, but they’re useless until a Resource Account is linked. This means that all Queues and Attendants which do not have a Resource Account assigned, will be included in the report.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1CV5FzZbrRUB99oY2E3hSdg.png&#34;
	width=&#34;1775&#34;
	height=&#34;203&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1CV5FzZbrRUB99oY2E3hSdg_hu_d1e9fdca021b967b.png 480w, https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1CV5FzZbrRUB99oY2E3hSdg_hu_c3555177210a6fa4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;874&#34;
		data-flex-basis=&#34;2098px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The concept of how Resource Accounts work in combination with Queues and Attendants is explained in detail in the article linked below.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489&#34; &gt;Everything You Ever Wanted to Know About Teams Resource Accounts&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Next, the script checks for all Auto Attendants and Call Queues which have a Resource Account without Phone Number assigned. Of course, these are often nested behind top-level Voice Apps and thus can be called without issues. My new script runs the Visualizer (without creating any diagrams) for all top-level Voice Apps (Attendants and Queues with phone numbers) to create a list of all their nested Voice Apps.&lt;/p&gt;
&lt;p&gt;Because the Visualizer is also able to read and process user calling settings, it will even detect if a Voice App is set as a user’s forwarding or unanswered target and thus also add it to the list of all nested Voice Apps.&lt;/p&gt;
&lt;p&gt;If this list does not contain the current Voice App, it will be included in the report as well. In complex environments, this will save you a lot of time since you don’t need to click through all your Voice Apps manually to check them.&lt;/p&gt;
&lt;p&gt;Last but not least, it uses the same code bits from the original “FindUnassignedResourceAccounts.ps1” script to add any Resource Account which is not associated with any Voice App to the report.&lt;/p&gt;
&lt;h4 id=&#34;caveats&#34;&gt;Caveats
&lt;/h4&gt;&lt;p&gt;There’s one caveat though. In theory, you could have a Voice App (or multiple) which are only called internally by their SIP Address. In this case, the Voice App doesn’t need to be nested anywhere and it doesn’t need a phone number either. All it needs is to have a Resource Account assigned. These Apps will be included in the report as well, so make sure to be extra careful before you actually delete anything.&lt;/p&gt;
&lt;h4 id=&#34;under-thehood&#34;&gt;Under the Hood
&lt;/h4&gt;&lt;p&gt;During testing, I noticed that Voice Apps which are nested inside a Holiday Call Handling were not detected by the script either. I’ve updated my M365 Call Flow Visualizer so that it will now also expand Auto Attendants and Call Queues which are part of a Holiday transfer action.&lt;/p&gt;
&lt;p&gt;Initially, I thought I’d only be able to do this for transfers to Call Queues and Auto Attendants. But with some persistence I was able to also display IVRs which are configured as part of a Holiday Call Handling! Yes, really! This means that the Visualizer can now render every possible call flow which can be configured. At least to my knowledge.&lt;/p&gt;
&lt;p&gt;Here’s an example of the new functionality. We can see that the Call Handling for &lt;strong&gt;National Swiss Holiday&lt;/strong&gt; forwards to the Call Queue &lt;strong&gt;Ext Pstn Fwd Test&lt;/strong&gt; inside the Holiday table. Unfortunately, linking both CQ Nodes together, would have messed up the left-right direction of the subgraph and instead made it a top-down one. Therefore, I had to get creative and just link the call flow of the Voice App to the Holiday Subgraph. As an exception, there are now two nodes for the &lt;strong&gt;Call Queue&lt;/strong&gt; &lt;strong&gt;Ext Pstn Fwd Test&lt;/strong&gt;. One is inside the Holiday table, and one is placed in the main diagram.&lt;/p&gt;
&lt;p&gt;It’s basically the same for Holiday IVRs (Voice Menus). They include the name of the Holiday Call Handling in which they are configured. This makes it a little easier to spot the corresponding node in the main diagram.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/158SyiEyoyXEYRfJ7qCgaw.png&#34;
	width=&#34;2034&#34;
	height=&#34;1696&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/158SyiEyoyXEYRfJ7qCgaw_hu_69e4c6930acba2ef.png 480w, https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/158SyiEyoyXEYRfJ7qCgaw_hu_8dcb814b266c66aa.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;119&#34;
		data-flex-basis=&#34;287px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you want to try this for yourself, you need to add the following parameters when you call the script.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-ShowNestedHolidayCallFlows $true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-ShowNestedHolidayIVRs $true&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you’re interested in learning more about how Holidays work in Teams, consider giving this article a read.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743&#34; &gt;Everything You Ever Wanted to Know About Teams Holidays&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;example-output&#34;&gt;Example Output
&lt;/h4&gt;&lt;p&gt;The script will generate a CSV file containing all unused components including the reason as to why they’re not in use.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1bhf0biV7bVukIdpxKpnfA.png&#34;
	width=&#34;1619&#34;
	height=&#34;618&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1bhf0biV7bVukIdpxKpnfA_hu_a37a2c6497c21cfc.png 480w, https://heusser.pro/p/teams-auto-attendant-and-call-queue-spring-cleaning-5e7e6d54b9ca/1bhf0biV7bVukIdpxKpnfA_hu_6ba4b255c43bf962.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;261&#34;
		data-flex-basis=&#34;628px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I struggled a bit to find a perfect naming for all the columns. The column “Association” tells you whether the Voice App has a Resource Account assigned or if the Resource Account is assigned to a Voice App. The other ones should be self-explanatory.&lt;/p&gt;
&lt;h4 id=&#34;free-download&#34;&gt;Free Download
&lt;/h4&gt;&lt;p&gt;The script is available for free in my &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub Repo&lt;/a&gt; of the M365 Call Flow Visualizer. Make sure that you clone it or download the whole repository as Zip file since there are dependencies.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer/blob/main/FindUnusedVoiceAppsAndResourceAccounts.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;M365CallFlowVisualizer/FindUnusedVoiceAppsAndResourceAccounts.ps1 at main · mozziemozz/M365CallFlowVisualizer (github.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Please use this script at your own risk, even though the script does not change or delete anything in your environment. (It only uses &lt;code&gt;Get-*&lt;/code&gt; Cmdlets). Just promise to make sure that you verify that any Auto Attendant or Call Queues are indeed not needed anymore before you hit that delete button. Even if you still have to manually confirm and delete unused Voice Apps, I still hope that the output of the script makes it easier for you to identify them at scale.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Microsoft Teams Shared Voicemail Now Supports Distribution Lists and Mail Enabled Security Groups</title>
        <link>https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/</link>
        <pubDate>Fri, 27 Jan 2023 21:57:19 +0000</pubDate>
        
        <guid>https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/</guid>
        <description>&lt;p&gt;Today I discovered that there has been an update to Microsoft Teams Auto Attendants and Call Queues Shared Voicemail. In the past it was only possible to configure a Microsoft 365 Group as the transfer target of shared voicemail, as it’s described in &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24&#34; &gt;this&lt;/a&gt; article.&lt;/p&gt;
&lt;p&gt;Now the search box in Auto Attendant or Call Queue Wizards also return Distribution Lists and Mail Enabled Security Groups.&lt;/p&gt;
&lt;p&gt;I don’t know when this change was implemented but there’s evidence out there that it has been around for at least some time or even since shared voicemail has been rolled out.&lt;/p&gt;
&lt;p&gt;Since all the official Microsoft documentation I could find (then and now) only mentioned Microsoft 365 Groups, I honestly never even tried to search for another group type.&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;I feel like it’s been like this for a bit but I couldn’t tell you when.&lt;/p&gt;&amp;mdash; Robert Schoneman (@rschoneman) &lt;a href=&#34;https://twitter.com/rschoneman/status/1618980759829905408?ref_src=twsrc%5Etfw&#34;&gt;January 27, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;A customer insisted on trying it 2 years ago and to my surprise it worked&lt;/p&gt;&amp;mdash; Dario Woitasen 🇦🇷🇮🇹🇪🇸 (@dariomws) &lt;a href=&#34;https://twitter.com/dariomws/status/1619090730412118017?ref_src=twsrc%5Etfw&#34;&gt;January 27, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Has always worked since shared voicemail was an option, could never understand why one would create a m365 group to route voicemail. The search exposed it the first time I went to set it.&lt;/p&gt;&amp;mdash; Michael LaMontagne (@RealTimeUC) &lt;a href=&#34;https://twitter.com/RealTimeUC/status/1619202283383980033?ref_src=twsrc%5Etfw&#34;&gt;January 28, 2023&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;


&lt;p&gt;The &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/set-cscallqueue?view=skype-ps#-overflowactiontarget&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;documentation&lt;/a&gt; is not updated yet. Better yet, it still says Office 365 instead of Microsoft 365 group.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The OverflowActionTarget parameter represents the target of the overflow action. If the OverFlowAction is set to Forward, this parameter must be set to a Guid or a telephone number with a mandatory ‘tel:’ prefix. If the OverflowAction is set to SharedVoicemail, this parameter must be set to an Office 365 Group ID. Otherwise, this parameter is optional.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The description in the Auto Attendant and Call Queue Wizard also still references Microsoft 365 Groups only. But it does return Distribution Lists and Mail Enabled Security Groups when we search for them.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/13YB1Og9yfkOkiNZKbDKg.png&#34;
	width=&#34;876&#34;
	height=&#34;616&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/13YB1Og9yfkOkiNZKbDKg_hu_64c175cd1f9efd75.png 480w, https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/13YB1Og9yfkOkiNZKbDKg_hu_85a68d61ac363012.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;341px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It does not find security groups, which makes sense, since they’re not capable of receiving emails.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1M5usMrSDeoKiOqNGRlgNGw.png&#34;
	width=&#34;951&#34;
	height=&#34;357&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1M5usMrSDeoKiOqNGRlgNGw_hu_7867e2c18dcabac8.png 480w, https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1M5usMrSDeoKiOqNGRlgNGw_hu_b55af706446d2c57.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;266&#34;
		data-flex-basis=&#34;639px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;testing&#34;&gt;Testing
&lt;/h3&gt;&lt;p&gt;This begs the question: is it only possible to choose these new group types or are shared voicemails actually delivered to Distribution Lists too?&lt;/p&gt;
&lt;p&gt;Let’s find out…&lt;/p&gt;
&lt;p&gt;It seems to be working just fine. Here’s a screenshot of the email received in Outlook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1ZLo1CQSHUDNCnguoMCCP2w.png&#34;
	width=&#34;701&#34;
	height=&#34;323&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1ZLo1CQSHUDNCnguoMCCP2w_hu_d127f423812f4cfd.png 480w, https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1ZLo1CQSHUDNCnguoMCCP2w_hu_7421d2e082e9803b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;217&#34;
		data-flex-basis=&#34;520px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When hovering over the recipient&amp;rsquo;s address, we can see what type of group it is.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1TPAYZAcYUwiaSscVCws4A.png&#34;
	width=&#34;756&#34;
	height=&#34;371&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1TPAYZAcYUwiaSscVCws4A_hu_f7fb613390a8df4e.png 480w, https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1TPAYZAcYUwiaSscVCws4A_hu_e9c2e6d486ce7ffe.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;203&#34;
		data-flex-basis=&#34;489px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1PzGe2QO2fRKCMmnwmYOOjw.png&#34;
	width=&#34;728&#34;
	height=&#34;367&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1PzGe2QO2fRKCMmnwmYOOjw_hu_bb950a693427838d.png 480w, https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1PzGe2QO2fRKCMmnwmYOOjw_hu_47e7106a0f92db91.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;198&#34;
		data-flex-basis=&#34;476px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Note that shared voicemail emails to Distribution Lists and Mail Enabled Security Groups look exactly the same in Outlook. Both are labeled as “Distribution list”, even though they are technically of different group types.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/14C4zaaKVkpfl2CXVpnoRw.png&#34;
	width=&#34;945&#34;
	height=&#34;144&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/14C4zaaKVkpfl2CXVpnoRw_hu_c79595d64da3e7ad.png 480w, https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/14C4zaaKVkpfl2CXVpnoRw_hu_ba572070857c9074.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;656&#34;
		data-flex-basis=&#34;1575px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1myvn5NVYxFzjQVDYpzKzGA.png&#34;
	width=&#34;927&#34;
	height=&#34;132&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1myvn5NVYxFzjQVDYpzKzGA_hu_d34f2d7d677b1bf1.png 480w, https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1myvn5NVYxFzjQVDYpzKzGA_hu_bfcbfef0ed94a875.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;702&#34;
		data-flex-basis=&#34;1685px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;powershell&#34;&gt;PowerShell
&lt;/h4&gt;&lt;p&gt;Nothing has changed on the PowerShell side of things. The &lt;code&gt;OverflowAction&lt;/code&gt; is still called &lt;strong&gt;“SharedVoicemail”&lt;/strong&gt; and the &lt;code&gt;OverflowActionTarget.Type&lt;/code&gt; is still &lt;strong&gt;“Mailbox”&lt;/strong&gt; while &lt;code&gt;OverflowActionTarget.Id&lt;/code&gt; remains the group’s Object Id.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PS V:\GitHub\M365CallFlowVisualizer&amp;gt; $cq.OverflowAction                                        
SharedVoicemail

PS V:\GitHub\M365CallFlowVisualizer&amp;gt; $cq.OverflowActionTarget  
  
Id                                   Type  
--                                   ----  
413a7c2e-e359-4424-b2f7-xxxxxxxxxxxx MailBox
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The Auto Attendant properties also remain unchanged.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PS V:\GitHub\\M365CallFlowVisualizer&amp;gt; $aa.DefaultCallFlow.Menu.MenuOptions  
  
  
Action         : TransferCallToTarget  
DtmfResponse   : Automatic  
VoiceResponses : {}  
CallTarget     : Type = SharedVoicemail  
                 Id = 413a7c2e-e359-4424-b2f7-xxxxxxxxxxxx  
Prompt         :  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Luckily, this means that I don’t have to update the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;M365 Call Flow Visualizer&lt;/a&gt; and everything continues to work like it did before.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1NuirKnHyD9ADHTxl4nnAiw.png&#34;
	width=&#34;249&#34;
	height=&#34;768&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1NuirKnHyD9ADHTxl4nnAiw_hu_c8a20f38ee36f645.png 480w, https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1NuirKnHyD9ADHTxl4nnAiw_hu_c02cb9fb461e85d4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;32&#34;
		data-flex-basis=&#34;77px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;configuring-via-powershell&#34;&gt;Configuring via PowerShell
&lt;/h4&gt;&lt;p&gt;What’s a bit worrisome is that I was able to set the Id of a Security Group as the Shared Voicemail Target for a Call Queue through PowerShell. It doesn’t look like PowerShell is evaluating the group type when the queue is saved.&lt;/p&gt;
&lt;p&gt;Once the queue has been updated through PowerShell, TAC will even display the name of the Security Group in the Wizard. As long as we don’t remove the Security group from the Shared Voicemail Target, it’s even possible to edit and save the queue through TAC. The invalid group remains.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1PwAoySn5n1VQ6glOIAmBrA.png&#34;
	width=&#34;755&#34;
	height=&#34;117&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1PwAoySn5n1VQ6glOIAmBrA_hu_dbac97c492b8f2e6.png 480w, https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1PwAoySn5n1VQ6glOIAmBrA_hu_58b9b8880f2a08a7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;645&#34;
		data-flex-basis=&#34;1548px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When I delete the group and search for it again, nothing is returned anymore, as it should be.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1ycvEqbDKWYKbNSDYQI8Q.png&#34;
	width=&#34;924&#34;
	height=&#34;198&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1ycvEqbDKWYKbNSDYQI8Q_hu_1d1668a67867a265.png 480w, https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1/1ycvEqbDKWYKbNSDYQI8Q_hu_517877306aa42f1e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;466&#34;
		data-flex-basis=&#34;1120px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;To test this, I made a call to the queue. In this case, my overflow threshold was set to zero, so the call failed immediately with a busy tone.&lt;/p&gt;
&lt;p&gt;I then did the same for the timeout action target and called the queue again. As soon as the timeout was reached, I could hear the transfer beep and then the call failed with a busy tone too.&lt;/p&gt;
&lt;p&gt;Luckily, it’s a different story with Auto Attendants. When I tried the same thing there, an error was returned, like I expected for Call Queues in the first place.&lt;/p&gt;
&lt;p&gt;Microsoft.Teams.ConfigAPI.Cmdlets.internal\Set-CsAutoAttendant :&lt;br&gt;
A mail-enabled group with Id (da027ae9-467b-4334-829c-xxxxxxxxxxxx)&lt;br&gt;
could not be found. Please give correct parameter value.&lt;/p&gt;
&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h4&gt;&lt;p&gt;While I wouldn’t implement this in a production environment until the official documentation is updated and we know for sure, that this is working as Microsoft intended, I think it’s a great feature update for Teams Phone. Only being able to just use Microsoft 365 Groups, also meant that we always had to make sure that users are subscribed to receive all group emails or enabled the &lt;a class=&#34;link&#34; href=&#34;https://support.microsoft.com/en-us/office/follow-a-group-in-outlook-e147fc19-f548-4cd2-834f-80c6235b7c36&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Follow in Inbox&lt;/a&gt; feature for themselves.&lt;/p&gt;
&lt;p&gt;I will report the missing group type validation for &lt;code&gt;Set-CsCallQueue&lt;/code&gt; to Microsoft and hope that they fix it soon. In the mean time, make sure that you’re extra careful and only configure Group Ids of M365 Groups, Distribution Lists or Mail Enabled Security Groups.&lt;/p&gt;
&lt;p&gt;I’ll also see if I can update the Visualizer to include group type for shared voicemail in the diagrams.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>What’s Up with Teams Auto Attendants Suddenly Using a Male Voice for TTS?</title>
        <link>https://heusser.pro/p/whats-up-with-teams-auto-attendants-suddenly-using-a-male-voice-for-tts-5c6f717d60a/</link>
        <pubDate>Sun, 22 Jan 2023 23:52:58 +0000</pubDate>
        
        <guid>https://heusser.pro/p/whats-up-with-teams-auto-attendants-suddenly-using-a-male-voice-for-tts-5c6f717d60a/</guid>
        <description>&lt;p&gt;If you’re reading this article; it probably means that you’re wondering why suddenly some of your auto attendants are using male voices in greetings. Just as I was. You might also have noticed, that Microsoft introduced a few new supported languages for Teams auto attendant and call queue text-to-speech (TTS) greetings a couple of months ago.&lt;/p&gt;
&lt;p&gt;Which is very nice — in theory. But in reality, they messed up, at least to some exent. All newly created or any existing auto attendant where you change the language will now default to a male voice in TTS greetings for many languages. Before that it was female for at least all the languages I had worked with in the past.&lt;/p&gt;
&lt;h4 id=&#34;why-is-that-aproblem&#34;&gt;Why Is That a Problem?
&lt;/h4&gt;&lt;p&gt;There’s no option to change the &lt;strong&gt;VoiceId&lt;/strong&gt; (female/male) from Teams Admin Center for either auto attendants or call queues. Call Queues still default to a female VoiceId while auto attendants now default to a male voice for most major languages. This means that if your call flow uses both, attendants and queues (like most call flows do), you will face a rather unpleasant inconsistency. In one part of the call flow, your callers will hear male voices and in other parts they will hear female voices in greetings and announcements. This is not a good user experience.&lt;/p&gt;
&lt;h4 id=&#34;what-about-powershell&#34;&gt;What About PowerShell?
&lt;/h4&gt;&lt;p&gt;While it’s possible to change the voice (female/male) on an auto attendant with PowerShell, it’s not possible to do the same for call queues.&lt;/p&gt;
&lt;p&gt;This means that greetings of call queues will always be synthesized by a female voice. There’s not even a &lt;strong&gt;VoiceId&lt;/strong&gt; property returned by PowerShell, only &lt;strong&gt;LanguageId&lt;/strong&gt;. The only way to verify this is to actually call the queue and listen to the announcements.&lt;/p&gt;
&lt;p&gt;I did just that. I created a new call queue with &lt;strong&gt;en-US&lt;/strong&gt; set as it’s language and configured a TTS welcome greeting. Once I called the number, I was indeed greeted by a female voice, like it’s always been.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-up-with-teams-auto-attendants-suddenly-using-a-male-voice-for-tts-5c6f717d60a/1Ru2MOHg0zn9BLAreKRV5PQ.png&#34;
	width=&#34;1719&#34;
	height=&#34;559&#34;
	srcset=&#34;https://heusser.pro/p/whats-up-with-teams-auto-attendants-suddenly-using-a-male-voice-for-tts-5c6f717d60a/1Ru2MOHg0zn9BLAreKRV5PQ_hu_da5a622e1a589c56.png 480w, https://heusser.pro/p/whats-up-with-teams-auto-attendants-suddenly-using-a-male-voice-for-tts-5c6f717d60a/1Ru2MOHg0zn9BLAreKRV5PQ_hu_cc80baf6de0666.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;307&#34;
		data-flex-basis=&#34;738px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Welcome greetings are not the only greetings a caller can hear when interacting with a call queue though. Other scenarios are shared voicemail on timeout or overflow. The funny thing with the welcome TTS greeting is that as of the time of drafting this article, there’s still no option to set or even view this property in PowerShell. Not even in Teams PowerShell 4.9.1.&lt;/p&gt;
&lt;p&gt;If you’re using TTS welcome greetings on your call queues in production, please read the following section very carefully. &lt;strong&gt;Because there’s no PowerShell support for TTS welcome greetings on call queues yet, any configured TTS welcome greeting will be deleted from your queues, every time you save a queue using PowerShell!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Don’t believe me? I’m going to show you. Notice how I only changed the overflow threshold. This doesn’t even remotely have anything to do with greetings or language settings.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-up-with-teams-auto-attendants-suddenly-using-a-male-voice-for-tts-5c6f717d60a/1XOkmcCdXA0ImkELMcYqjQ.gif&#34;
	width=&#34;3819&#34;
	height=&#34;1761&#34;
	srcset=&#34;https://heusser.pro/p/whats-up-with-teams-auto-attendants-suddenly-using-a-male-voice-for-tts-5c6f717d60a/1XOkmcCdXA0ImkELMcYqjQ_hu_c5fd0b705c2832ed.gif 480w, https://heusser.pro/p/whats-up-with-teams-auto-attendants-suddenly-using-a-male-voice-for-tts-5c6f717d60a/1XOkmcCdXA0ImkELMcYqjQ_hu_675f96abfd771b78.gif 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;216&#34;
		data-flex-basis=&#34;520px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;After the queue has been updated by PowerShell, the TTS welcome greeting is gone. For Teams Voice Admins, this means that we either can’t use TTS welcome greetings, if we frequently use PS to update our queues, we can only use TAC to update queues or that we have to think about setting the greeting in TAC again, every time a change was made via PowerShell. None of them are good options and the last of them certainly defeats the purpose of PowerShell entirely. The only real option here is to use an audio file as welcome greeting until Microsoft has fixed this.&lt;/p&gt;
&lt;h4 id=&#34;what-about-auto-attendants&#34;&gt;What About Auto Attendants?
&lt;/h4&gt;&lt;p&gt;So far, we’ve established that call queues always use a female voice for TTS greetings. On auto attendants it’s actually possible to change the VoiceId by PowerShell.&lt;/p&gt;
&lt;p&gt;Here’s a newly created auto attendant with en-US language.&lt;/p&gt;
&lt;p&gt;$aa =  Get-CsAutoAttendant -Identity 77b1706a-59a8-4832-9f49-f7ff80e0da97&lt;br&gt;
$aa&lt;/p&gt;
&lt;p&gt;Identity                 : 77b1706a-59a8-4832-9f49-f7ff80e0da97&lt;br&gt;
TenantId                 : 4bffbf87-53a0-4fce-b58b-4179cb3a3b7d&lt;br&gt;
Name                     : Test Voice&lt;br&gt;
LanguageId               : en-US&lt;br&gt;
VoiceId                  : Male&lt;br&gt;
DefaultCallFlow          : Test Voice Default call flow&lt;br&gt;
Operator                 :&lt;br&gt;
TimeZoneId               : W. Europe Standard Time&lt;br&gt;
VoiceResponseEnabled     : False&lt;br&gt;
CallFlows                : Test Voice After hours call flow&lt;br&gt;
Schedules                : After hours Test Voice&lt;br&gt;
CallHandlingAssociations : AfterHours(1)&lt;br&gt;
Status                   :&lt;br&gt;
DialByNameResourceId     :&lt;br&gt;
DirectoryLookupScope     :&lt;br&gt;
ApplicationInstances     : {}&lt;br&gt;
AuthorizedUsers          : {}&lt;/p&gt;
&lt;p&gt;To change the VoiceId we can use the following code.&lt;/p&gt;
&lt;p&gt;$aa.VoiceId = &amp;ldquo;Female&amp;rdquo;&lt;br&gt;
Set-CsAutoAttendant -Instance $aa&lt;/p&gt;
&lt;p&gt;This will return the following output. Notice how the VoiceId changed to Female.&lt;/p&gt;
&lt;p&gt;Identity                 : 77b1706a-59a8-4832-9f49-f7ff80e0da97&lt;br&gt;
TenantId                 : 4bffbf87-53a0-4fce-b58b-4179cb3a3b7d&lt;br&gt;
Name                     : Test Voice&lt;br&gt;
LanguageId               : en-US&lt;br&gt;
VoiceId                  : Female&lt;br&gt;
DefaultCallFlow          : Test Voice Default call flow&lt;br&gt;
Operator                 :&lt;br&gt;
TimeZoneId               : W. Europe Standard Time&lt;br&gt;
VoiceResponseEnabled     : False&lt;br&gt;
CallFlows                : Test Voice After hours call flow&lt;br&gt;
Schedules                : After hours Test Voice&lt;br&gt;
CallHandlingAssociations : AfterHours(1)&lt;br&gt;
Status                   :&lt;br&gt;
DialByNameResourceId     :&lt;br&gt;
DirectoryLookupScope     :&lt;br&gt;
ApplicationInstances     : {}&lt;br&gt;
AuthorizedUsers          : {}&lt;/p&gt;
&lt;p&gt;When I initially discovered this a couple of months ago, I could have sworn that every time I changed something in TAC, that the VoiceId was reset to male. While writing this article I did some further tests, and I was not able to reproduce this 100% or recognize a pattern anymore. Sometimes, it defaulted back to male, sometimes it stayed on female, no matter which setting I changed in TAC. Therefore, I’m going to leave it like that and just tell you to be extra careful, when updating auto attendants through TAC, if you want to keep a female voice. You definitely shouldn’t count on TAC preserving your configured VoiceId.&lt;/p&gt;
&lt;p&gt;One thing is for sure though, every time you change the language of an auto attendant through TAC, it will default to male for all the affected languages. We’re going to see which they are in a bit.&lt;/p&gt;
&lt;p&gt;Again, this is very bad news for Teams Voice Admins as this basically restricts us to either using TAC only (if we’re fine with male voices even though call queues use female voices) or using PowerShell only, if we want to make sure that we’re always using a female voice.&lt;/p&gt;
&lt;h4 id=&#34;why-has-this-happened&#34;&gt;Why Has This Happened?
&lt;/h4&gt;&lt;p&gt;Auto attendants and call queues use the Azure Cognitive Services TTS API, which is actually available to all Azure customers. You can try the different voices &lt;a class=&#34;link&#34; href=&#34;https://azure.microsoft.com/en-us/products/cognitive-services/text-to-speech/#features&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. Many of them are also used by Teams. Over time, some of these voices get imporved or some languages even get entirely new voices. I don’t know when it happend exactly, but Microsoft added support for new voices a couple of months ago. For example, there’s an option for my native language, Swiss German available now.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/whats-up-with-teams-auto-attendants-suddenly-using-a-male-voice-for-tts-5c6f717d60a/1QTgYIJQa3uUyIBBUwF0elA.png&#34;
	width=&#34;1125&#34;
	height=&#34;253&#34;
	srcset=&#34;https://heusser.pro/p/whats-up-with-teams-auto-attendants-suddenly-using-a-male-voice-for-tts-5c6f717d60a/1QTgYIJQa3uUyIBBUwF0elA_hu_ef1505d7a198bdf5.png 480w, https://heusser.pro/p/whats-up-with-teams-auto-attendants-suddenly-using-a-male-voice-for-tts-5c6f717d60a/1QTgYIJQa3uUyIBBUwF0elA_hu_b2493ac3c2964fa2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;444&#34;
		data-flex-basis=&#34;1067px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Available voices on Teams auto attendants are not particularly easy to find. There’s &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/new-csautoattendant?view=skype-ps#-voiceid&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; Learn article which has some info on it though.&lt;/p&gt;
&lt;p&gt;By using this code, we can get all the available voices for e.g., en-US.&lt;/p&gt;
&lt;p&gt;PS C:\Temp&amp;gt; (Get-CsAutoAttendantSupportedLanguage -Identity &amp;ldquo;en-US&amp;rdquo;).Voices&lt;/p&gt;
&lt;p&gt;Name : GuyNeural&lt;br&gt;
Id   : Male&lt;/p&gt;
&lt;p&gt;Name : JessaNeural&lt;br&gt;
Id   : Female&lt;/p&gt;
&lt;p&gt;Name : AriaNeural&lt;br&gt;
Id   : Female&lt;/p&gt;
&lt;p&gt;Name : JennyNeural&lt;br&gt;
Id   : Female&lt;/p&gt;
&lt;p&gt;Let’s do the same for Swiss German, which is a newly supported language.&lt;/p&gt;
&lt;p&gt;PS C:\Temp&amp;gt; (Get-CsAutoAttendantSupportedLanguage -Identity &amp;ldquo;de-CH&amp;rdquo;).Voices&lt;/p&gt;
&lt;p&gt;Name : JanNeural&lt;br&gt;
Id   : Male&lt;/p&gt;
&lt;p&gt;Name : LeniNeural&lt;br&gt;
Id   : Female&lt;/p&gt;
&lt;p&gt;The docs say that we can retrieve the default voice used for any language by using this code.&lt;/p&gt;
&lt;p&gt;PS C:\Temp&amp;gt; (Get-CsAutoAttendantSupportedLanguage -Identity &amp;ldquo;en-US&amp;rdquo;).Voices.Id[0]&lt;br&gt;
Male&lt;/p&gt;
&lt;p&gt;I can’t say for sure, but I’m fairly confident that TAC just reads the array of supported languages and uses whichever comes first as the default voice. That’s why en-US or de-CH now have male voices by default now.&lt;/p&gt;
&lt;p&gt;Here’s a little script I wrote to extract the default VoiceId for all the supported languages and export them to CSV.&lt;/p&gt;
&lt;p&gt;Connect-MicrosoftTeams&lt;/p&gt;
&lt;p&gt;$allLanguages = Get-CsAutoAttendantSupportedLanguage&lt;/p&gt;
&lt;p&gt;$languageVoiceTable = @()&lt;/p&gt;
&lt;p&gt;foreach ($language in $allLanguages) {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$currentLanguageVoice = New-Object -TypeName psobject  

$currentLanguageVoice | Add-Member -MemberType NoteProperty -Name &amp;quot;LanguageId&amp;quot; -Value $language.Id  
$currentLanguageVoice | Add-Member -MemberType NoteProperty -Name &amp;quot;LanguageName&amp;quot; -Value $language.DisplayName  
$currentLanguageVoice | Add-Member -MemberType NoteProperty -Name &amp;quot;VoiceId&amp;quot; -Value $language.Voices\[0\].Id  

$languageVoiceTable += $currentLanguageVoice  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;$languageVoiceTable | Export-Csv -Path C:\Temp\autoAttendantLanguageVoiceTable.csv -Delimiter &amp;ldquo;;&amp;rdquo; -NoTypeInformation -Encoding UTF8 -Force&lt;/p&gt;
&lt;p&gt;Here’s the full list which should help you identify if you’re using any affected languages.&lt;/p&gt;
&lt;p&gt;LanguageId LanguageName VoiceId&lt;br&gt;
ar-EG Arabic (Egypt) Female&lt;br&gt;
ar-SA Arabic (Saudi Arabia) Female&lt;br&gt;
bg-BG Bulgarian (Bulgaria) Female&lt;br&gt;
ca-ES Catalan (Spain) Female&lt;br&gt;
cs-CZ Czech (Czech) &lt;strong&gt;Male&lt;/strong&gt;&lt;br&gt;
cy-GB Welsh (United Kingdom) Female&lt;br&gt;
da-DK Danish (Denmark) Female&lt;br&gt;
de-AT German (Austria) Female&lt;br&gt;
de-CH German (Switzerland) &lt;strong&gt;Male&lt;/strong&gt;&lt;br&gt;
de-DE German (Germany) Female&lt;br&gt;
el-GR Greek (Greek) Female&lt;br&gt;
en-AU English (Australia) &lt;strong&gt;Male&lt;/strong&gt;&lt;br&gt;
en-CA English (Canada) &lt;strong&gt;Male&lt;/strong&gt;&lt;br&gt;
en-GB English (United Kingdom) &lt;strong&gt;Male&lt;/strong&gt;&lt;br&gt;
en-IE English (Ireland) &lt;strong&gt;Male&lt;/strong&gt;&lt;br&gt;
en-IN English (India) &lt;strong&gt;Male&lt;/strong&gt;&lt;br&gt;
en-PH English (Philippines) &lt;strong&gt;Male&lt;/strong&gt;&lt;br&gt;
en-US English (United States) &lt;strong&gt;Male&lt;/strong&gt;&lt;br&gt;
en-ZA English (South Africa) Female&lt;br&gt;
es-ES Spanish (Spain) Female&lt;br&gt;
es-MX Spanish (Mexico) Female&lt;br&gt;
et-EE Estonian (Estonia) Female&lt;br&gt;
fi-FI Finnish (Finland) Female&lt;br&gt;
fr-BE French (Belgium) Female&lt;br&gt;
fr-CA French (Canada) Female&lt;br&gt;
fr-CH French (Switzerland) Female&lt;br&gt;
fr-FR French (France) Female&lt;br&gt;
he-IL Hebrew (Israel) &lt;strong&gt;Male&lt;/strong&gt;&lt;br&gt;
hi-IN Hindi (India) Female&lt;br&gt;
hr-HR Croatian (Croatia) Female&lt;br&gt;
hu-HU Hungarian (Hungary) Female&lt;br&gt;
id-ID Indonesian (Indonesia) Female&lt;br&gt;
it-IT Italian (Italy) Female&lt;br&gt;
lt-LT Lithuanian (Lithuania) &lt;strong&gt;Male&lt;/strong&gt;&lt;br&gt;
lv-LV Latvian (Latvia) Female&lt;br&gt;
ja-JP Japanese (Japan) Female&lt;br&gt;
ko-KR Korean (Korea) Female&lt;br&gt;
nb-NO Norwegian, Bokmål (Norway) Female&lt;br&gt;
nl-BE Dutch (Belgium) Female&lt;br&gt;
nl-NL Dutch (Netherlands) Female&lt;br&gt;
pl-PL Polish (Poland) Female&lt;br&gt;
pt-BR Portuguese (Brazil) Female&lt;br&gt;
pt-PT Portuguese (Portugal) Female&lt;br&gt;
ro-RO Romanian (Romania) Female&lt;br&gt;
ru-RU Russian (Russia) Female&lt;br&gt;
sk-SK Slovak (Slovakia) &lt;strong&gt;Male&lt;/strong&gt;&lt;br&gt;
sl-SI Slovenian (Slovenia) Female&lt;br&gt;
sv-SE Swedish (Sweden) Female&lt;br&gt;
th-TH Thai (Thai) Female&lt;br&gt;
tr-TR Turkish (Turkey) Female&lt;br&gt;
vi-VN Vietnamese (Vietnam) Female&lt;br&gt;
zh-CN Chinese (Simplified, PRC) Female&lt;br&gt;
zh-HK Chinese (Traditional, Hong Kong S.A.R.) Female&lt;br&gt;
zh-TW Chinese (Traditional, Taiwan) Female&lt;/p&gt;
&lt;p&gt;You can use this one-liner to check if any of your existing auto attendants are currently using a male voice.&lt;/p&gt;
&lt;p&gt;Get-CsAutoAttendant -First 1000 | ft Name, LanguageId, VoiceId&lt;/p&gt;
&lt;p&gt;I really hope that Microsofts recognizes that this is a major annoyance and that they fix it rather sooner than later. In the meantime, I hope that I was able to provide you with some useful insight and hope that it helps you keeping the problem in check.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Launch Windows Terminal as Admin from Windows 11 Context Menu</title>
        <link>https://heusser.pro/p/launch-windows-terminal-as-admin-from-windows-11-context-menu-8eb2abe7b28b/</link>
        <pubDate>Fri, 06 Jan 2023 08:23:26 +0000</pubDate>
        
        <guid>https://heusser.pro/p/launch-windows-terminal-as-admin-from-windows-11-context-menu-8eb2abe7b28b/</guid>
        <description>&lt;p&gt;In the article “11 Must-Have Apps for Windows 11” I talked about how much I love Windows 11 despite its few shortcomings. One of those is particularly annoying for IT folks like you and me. There’s no way of launching PowerShell or rather Windows Terminal as Administrator directly from File Explorer.&lt;/p&gt;
&lt;p&gt;While looking for a plausible solution, I stumbled upon a Windows App called &lt;a class=&#34;link&#34; href=&#34;https://www.microsoft.com/store/productId/9PC7BZZ28G0X&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Custom Context Menu&lt;/a&gt;. Despite the app being listed for $1, there’s an unlimited free trial. But please consider buying the app if you want to support the Dev.&lt;/p&gt;
&lt;p&gt;This app allows you to create your own modern context menu entries for specific file types or folders. These are the settings which you need to add in order to add “Open in Windows Terminal (Admin)” to your Windows 11 Context Menu.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/launch-windows-terminal-as-admin-from-windows-11-context-menu-8eb2abe7b28b/image.png&#34;
	width=&#34;1400&#34;
	height=&#34;844&#34;
	srcset=&#34;https://heusser.pro/p/launch-windows-terminal-as-admin-from-windows-11-context-menu-8eb2abe7b28b/image_hu_f868e54a006cf9d4.png 480w, https://heusser.pro/p/launch-windows-terminal-as-admin-from-windows-11-context-menu-8eb2abe7b28b/image_hu_babb5ba4ad1f978e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;alt text&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;165&#34;
		data-flex-basis=&#34;398px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Choose &lt;code&gt;C:\Windows\System32\cmd.exe&lt;/code&gt; as your executable and use the following code as your Param. As with any syntax, the exact order and number of double quotes is extremely important here. It took me quite a few tries to get it right.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;cmd /c &amp;#34;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;cd &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;{path}&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;powershell&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Start-Process&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wt&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-verb&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;runas&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Enter a path for whatever icon you want under Icon and only toggle the Match Folder switch.&lt;/p&gt;
&lt;p&gt;Alternatively, you can also click on the folder icon located in the top left corner and just create a new JSON file with the following content.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Open in Windows Terminal (Admin)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;exe&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;\&amp;#34;C:\\Windows\\System32\\cmd.exe\&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;param&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;\&amp;#34;cmd /c \&amp;#34;cd \&amp;#34;{path}\&amp;#34; &amp;amp; powershell Start-Process wt -verb runas\&amp;#34;\&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;icon&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;\&amp;#34;C:\\Temp\\wtAdmin\\Terminal2.ico\&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;acceptExts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;acceptDirectory&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;acceptFile&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;acceptMultipleFilesFlag&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;pathDelimiter&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;paramForMultipleFiles&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;If you like, you can give your context menu entry a custom name by clicking the gear icon in the bottom right corner.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/launch-windows-terminal-as-admin-from-windows-11-context-menu-8eb2abe7b28b/image-1.png&#34;
	width=&#34;537&#34;
	height=&#34;290&#34;
	srcset=&#34;https://heusser.pro/p/launch-windows-terminal-as-admin-from-windows-11-context-menu-8eb2abe7b28b/image-1_hu_40c2c3193a5d10e7.png 480w, https://heusser.pro/p/launch-windows-terminal-as-admin-from-windows-11-context-menu-8eb2abe7b28b/image-1_hu_6e472f4ebfa53fe9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;There’s only one menu entry for all your custom entries.
&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;185&#34;
		data-flex-basis=&#34;444px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Click save and either restart explorer.exe or your PC. This is very important as the menu won’t load without a restart.&lt;/p&gt;
&lt;h2 id=&#34;how-it-looks-and-behaves&#34;&gt;How It Looks and Behaves
&lt;/h2&gt;&lt;p&gt;When you right click in any folder, you should see your custom context menu and choose “Open in Windows Terminal (Admin)” or whatever name you entered.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/launch-windows-terminal-as-admin-from-windows-11-context-menu-8eb2abe7b28b/image-2.png&#34;
	width=&#34;1378&#34;
	height=&#34;1060&#34;
	srcset=&#34;https://heusser.pro/p/launch-windows-terminal-as-admin-from-windows-11-context-menu-8eb2abe7b28b/image-2_hu_17ec4d2f09a7d499.png 480w, https://heusser.pro/p/launch-windows-terminal-as-admin-from-windows-11-context-menu-8eb2abe7b28b/image-2_hu_92e8527d5b1100a9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;This will launch CMD, which will prompt for UAC and finally open WT (PS) as admin in the current folder.
&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;130&#34;
		data-flex-basis=&#34;312px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/launch-windows-terminal-as-admin-from-windows-11-context-menu-8eb2abe7b28b/image-3.png&#34;
	width=&#34;1400&#34;
	height=&#34;773&#34;
	srcset=&#34;https://heusser.pro/p/launch-windows-terminal-as-admin-from-windows-11-context-menu-8eb2abe7b28b/image-3_hu_e5b5aaecfec18009.png 480w, https://heusser.pro/p/launch-windows-terminal-as-admin-from-windows-11-context-menu-8eb2abe7b28b/image-3_hu_fb814fe703509c71.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Once PowerShell is opened, the CMD window will close automatically.
&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Make sure that you’ve set the Starting directory of the PowerShell Profile in Windows Terminal to “Use parent process directory”. Otherwise, Windows Terminal will not start in the current folder where you right clicked in Explorer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/launch-windows-terminal-as-admin-from-windows-11-context-menu-8eb2abe7b28b/image-4.png&#34;
	width=&#34;1400&#34;
	height=&#34;773&#34;
	srcset=&#34;https://heusser.pro/p/launch-windows-terminal-as-admin-from-windows-11-context-menu-8eb2abe7b28b/image-4_hu_ea8c380f734e2dcb.png 480w, https://heusser.pro/p/launch-windows-terminal-as-admin-from-windows-11-context-menu-8eb2abe7b28b/image-4_hu_8f65389aa818af3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Windows Terminal Settings
&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;434px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;adding-more-entries&#34;&gt;Adding More Entries
&lt;/h2&gt;&lt;p&gt;If you also want to add “Open in VS Code” to the modern context menu in Windows 11, you can add a second entry using the following code or configuration.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Open with VS Code&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;exe&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;\&amp;#34;C:\\Users\\marti\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;param&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;\&amp;#34;{path}\&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;icon&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;\&amp;#34;C:\\Users\\marti\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\&amp;#34;,0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;acceptExts&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;.json .txt .ps1 .cmd .bat .py .yaml .md .html .js&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;acceptDirectory&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;acceptFile&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;acceptMultipleFilesFlag&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;pathDelimiter&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;paramForMultipleFiles&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nt&#34;&gt;&amp;#34;index&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/launch-windows-terminal-as-admin-from-windows-11-context-menu-8eb2abe7b28b/image-5.png&#34;
	width=&#34;1400&#34;
	height=&#34;905&#34;
	srcset=&#34;https://heusser.pro/p/launch-windows-terminal-as-admin-from-windows-11-context-menu-8eb2abe7b28b/image-5_hu_9202d97ef3e6d577.png 480w, https://heusser.pro/p/launch-windows-terminal-as-admin-from-windows-11-context-menu-8eb2abe7b28b/image-5_hu_e4c14537730190f3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;We can also use Match File here to bring up the custom menu for specific file types.
&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;154&#34;
		data-flex-basis=&#34;371px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I hope that the option to launch Windows Terminal as admin or any other app really, also helps you be more productive. Initially, I discovered this app because I was looking for an easy way to bulk convert HEIC or HEIF images to JPG. Once I realized the potential of this App, I just had to figure out the correct params to launch WT as admin. I will definitely write another blog post about how to convert HEIC images to JPG using the same app and &lt;a class=&#34;link&#34; href=&#34;https://imagemagick.org/script/command-line-processing.php&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ImageMagick CLI&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/launch-windows-terminal-as-admin-from-windows-11-context-menu-8eb2abe7b28b/image-6.png&#34;
	width=&#34;904&#34;
	height=&#34;114&#34;
	srcset=&#34;https://heusser.pro/p/launch-windows-terminal-as-admin-from-windows-11-context-menu-8eb2abe7b28b/image-6_hu_a355024c96de5665.png 480w, https://heusser.pro/p/launch-windows-terminal-as-admin-from-windows-11-context-menu-8eb2abe7b28b/image-6_hu_940b6ecdd1c04e1a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Sneak-Peak of HEIC to JPG conversion in Windows 11 Custom Context Menu
&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;792&#34;
		data-flex-basis=&#34;1903px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Teams Auto Attendant Stuff You Didn’t Know About</title>
        <link>https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/</link>
        <pubDate>Tue, 20 Dec 2022 11:04:41 +0000</pubDate>
        
        <guid>https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/</guid>
        <description>&lt;p&gt;Hello everybody. At the beginning of this year, I set myself a goal of writing at least one article per month. Since I will meet my goal with today’s article, I’ll make sure to take a break over the holidays and recharge.&lt;/p&gt;
&lt;p&gt;But before I do that, we’re going to talk about some lesser-known stuff about Teams Cloud PBX features. Over the years, auto attendants and call queues have gotten a lot of new or updated features. Did you know that there’s a dedicated &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/get-csautoattendanttenantinformation?view=skype-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Cmdlet&lt;/a&gt; to see what features are enabled for your tenant? Use the following code to get the complete list.&lt;/p&gt;
&lt;p&gt;(Get-CsAutoAttendantTenantInformation).FlightedFeatures&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 29.06.2023&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’ve written a Bot which sends any new entries in this list to a channel on my Discord Server. If you want to stay up to date, you can join my Server using &lt;a class=&#34;link&#34; href=&#34;https://discord.gg/wbdAfvwRwq&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; link. If you want to learn more about my Discord Server, check &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/discord.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; link.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;/Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;At the time of drafting this article, this is what’s returned by the Cmdlet. Unfortunately, many of these features were added without an MCP (Message Center Post) or a M355 Road Map entry. I’ll try to decipher it and explain what each of these entries mean.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BackupConfigInBvd&lt;br&gt;
NgcProvisioning&lt;br&gt;
UserValidationViaAdminService&lt;br&gt;
AutoAttendantSharedVoicemailEnabled&lt;br&gt;
AutoAttendantAnnouncementAsMenuOptionEnabled&lt;br&gt;
AuthorizedUsersEnabled&lt;br&gt;
CallQueueAllowPstnNumberAsTargetInCmdlets&lt;br&gt;
DirectorySearchByExtensionEnabled&lt;br&gt;
PstnTransferOutEnabled&lt;br&gt;
CallQueueSharedVoicemailEnabled&lt;br&gt;
CallQueueConferenceModeEnabled&lt;br&gt;
CallQueuePresenceAwareRoutingEnabled&lt;br&gt;
CallQueueLongestIdleRoutingEnabled&lt;br&gt;
GranularSchedulesEnabled&lt;br&gt;
AVSCallQueueZodiac&lt;br&gt;
CallQueueEnableResourceAccountsForOboV2&lt;br&gt;
EnableSharedVoicemailSystemPromptSuppression&lt;br&gt;
OboMobileFeatureEnabled&lt;br&gt;
AVSAdminEnableVerificationOfXMSUserIdHeader&lt;br&gt;
AVSEnableMenuOptionExpansion&lt;br&gt;
CallQueueEnableSharedVoicemailSystemPromptSuppression&lt;br&gt;
SupervisorDelegatedAdminPart1Enabled&lt;br&gt;
SupervisorDelegatedAdminPart2Enabled&lt;br&gt;
SupervisorDelegatedAdminPart3Enabled&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;autoattendantannouncementasmenuoptionenabled&#34;&gt;AutoAttendantAnnouncementAsMenuOptionEnabled
&lt;/h4&gt;&lt;p&gt;This feature added the possibility to choose either a Text-To-Speech or an audio file announcement as auto attendant menu options. Once the announcement has been played back, the caller will be returned to the initial IVR greeting (this will create a loop).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1SGMClnPKvA02S4gDAlpIIA.png&#34;
	width=&#34;1535&#34;
	height=&#34;303&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1SGMClnPKvA02S4gDAlpIIA_hu_fb1bdf5aa985cd6a.png 480w, https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1SGMClnPKvA02S4gDAlpIIA_hu_25af59c44525f178.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;506&#34;
		data-flex-basis=&#34;1215px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;authorizedusersenabled&#34;&gt;AuthorizedUsersEnabled
&lt;/h4&gt;&lt;p&gt;As far as I can tell, this feature is not yet enabled yet, even though it already shows in flighted features. I can only assume that this will allow admins to delegate certain admin tasks to non-admin users.&lt;/p&gt;
&lt;p&gt;There are also three other references which look related to this.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SupervisorDelegatedAdminPart1Enabled&lt;/li&gt;
&lt;li&gt;SupervisorDelegatedAdminPart2Enabled&lt;/li&gt;
&lt;li&gt;SupervisorDelegatedAdminPart3Enabled&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;callqueueallowpstnnumberastargetincmdlets&#34;&gt;CallQueueAllowPstnNumberAsTargetInCmdlets
&lt;/h4&gt;&lt;p&gt;I am not 100% sure with this one but the name kind of suggests that this added the possibility to set an external PSTN number as overflow or timeout target on call queues using PowerShell, after PSTN transfer had been rolled out for auto attendants.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1M9Ivkq0Or1ke6sWiSC8ioA.png&#34;
	width=&#34;1397&#34;
	height=&#34;347&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1M9Ivkq0Or1ke6sWiSC8ioA_hu_8e1dc34a4d1fcb6a.png 480w, https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1M9Ivkq0Or1ke6sWiSC8ioA_hu_145a071383d28327.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;402&#34;
		data-flex-basis=&#34;966px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;pstntransferoutenabled&#34;&gt;PstnTransferOutEnabled
&lt;/h4&gt;&lt;p&gt;If I remember correctly, transfer to PSTN was enabled for auto attendants before call queues. Thus, there’s another entry for that feature next to CallQueueAllowPstnNumberAsTargetInCmdlets.&lt;/p&gt;
&lt;h4 id=&#34;directorysearchbyextensionenabled&#34;&gt;DirectorySearchByExtensionEnabled
&lt;/h4&gt;&lt;p&gt;This feature allows inbound callers to reach people who have an extension through an auto attendant. The caller will enter a person&amp;rsquo;s extension followed by &lt;code&gt;#&lt;/code&gt;and the auto attendant will forward the call to the recipient. The extension must be configured in Azure AD (Phone Number) and not in Teams (LineURI) for it to work.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1CFmwLZaK7QF3YzC79tBNA.png&#34;
	width=&#34;831&#34;
	height=&#34;140&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1CFmwLZaK7QF3YzC79tBNA_hu_d2e4e6f6a94fe32b.png 480w, https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1CFmwLZaK7QF3YzC79tBNA_hu_714a45058dd573e0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;593&#34;
		data-flex-basis=&#34;1424px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the user does not have an extension set for it’s LineURI.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/12sqS0b4T9eEhvjCWOf2rw.png&#34;
	width=&#34;1135&#34;
	height=&#34;367&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/12sqS0b4T9eEhvjCWOf2rw_hu_5c6dcef16482e4ab.png 480w, https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/12sqS0b4T9eEhvjCWOf2rw_hu_2d1bd6e5b91666ea.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;309&#34;
		data-flex-basis=&#34;742px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;We do not need to set any dial keys if we only want Dial by extension without any other options.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1ufTy8uYSsF4oG2rDTDoKA.png&#34;
	width=&#34;1646&#34;
	height=&#34;1248&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1ufTy8uYSsF4oG2rDTDoKA_hu_8cf58d2a3be998a2.png 480w, https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1ufTy8uYSsF4oG2rDTDoKA_hu_7fe5f5306d3c70b5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;131&#34;
		data-flex-basis=&#34;316px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Any auto attendant can only be enabled for dial by extension or dial by name. If you want both to be available to your callers, you will need to follow the example on &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/microsoftteams/create-a-phone-system-auto-attendant?tabs=call-flow#directory-search&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Microsoft Learn&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you want to use both the Dial by name and Dial by extension features, you can assign a dial key on your main auto attendant to reach an auto attendant enabled for Dial by name. Within that auto attendant, you can assign the 1 key (which has no letters associated with it) to reach the Dial by extension auto attendant.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It’s also possible to limit the dial scope to certain groups.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/15bQzvIaG3Lrw9safocEBQ.png&#34;
	width=&#34;1553&#34;
	height=&#34;743&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/15bQzvIaG3Lrw9safocEBQ_hu_dda14e4d07271f5.png 480w, https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/15bQzvIaG3Lrw9safocEBQ_hu_36f2871839607dc9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;209&#34;
		data-flex-basis=&#34;501px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bonus Tip&lt;/strong&gt;: You can directly dial an extension from some phones by adding &lt;code&gt;,,&amp;lt;extension&amp;gt;#&lt;/code&gt; at the end of the number. At least an iPhone will dial the keys automatically once the announcement has been played back. This is the same technique which Microsoft uses for Calling Links in Teams Meetings which support audio conferencing.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1cKz4ArQJFvLhzpaYA6eOw.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1cKz4ArQJFvLhzpaYA6eOw_hu_6be967d8e926a037.png 480w, https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1cKz4ArQJFvLhzpaYA6eOw_hu_78c26892dee20c0b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;callqueuesharedvoicemailenabled&#34;&gt;CallQueueSharedVoicemailEnabled
&lt;/h4&gt;&lt;p&gt;This feature enabled the much-requested shared voicemail on call queues. Before that, we had to license users which would permanently forward to voicemail which was super painful because there’s still no way to upload an audio file for voicemail greetings on user accounts. The voicemail greeting needs to be recorded using the Teams client. If you want to know more about Teams shared voicemail, I recommend to check out &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24&#34; &gt;this&lt;/a&gt; very comprehensive article.&lt;/p&gt;
&lt;h4 id=&#34;autoattendantsharedvoicemailenabled&#34;&gt;AutoAttendantSharedVoicemailEnabled
&lt;/h4&gt;&lt;p&gt;This feature was also enabled for auto attendants after it has been enabled for call queues.&lt;/p&gt;
&lt;h4 id=&#34;callqueueconferencemodeenabled&#34;&gt;CallQueueConferenceModeEnabled
&lt;/h4&gt;&lt;p&gt;Conference mode will create a meeting when a call is connected to an agent which vastly improves the connection time. This means that agents will hear callers much sooner / without delays. The default value was changed from false to true in 2022. The docs were updated accordingly on August 15 2022 in &lt;a class=&#34;link&#34; href=&#34;https://github.com/MicrosoftDocs/office-docs-powershell/commit/27e8165f7af0d15a0377ff9c700e4af14a754c32&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; commit.&lt;/p&gt;
&lt;h4 id=&#34;callqueuepresenceawareroutingenabled&#34;&gt;CallQueuePresenceAwareRoutingEnabled
&lt;/h4&gt;&lt;p&gt;The default value for Presence based routing was also changed from false to true in the same commit linked above.&lt;/p&gt;
&lt;h4 id=&#34;callqueuelongestidleroutingenabled&#34;&gt;CallQueueLongestIdleRoutingEnabled
&lt;/h4&gt;&lt;p&gt;I think that these names are sometimes a little misleading. While I assume that CallQueueConferenceModeEnabled and CallQueuePresenceAwareRoutingEnabled refer to the new default values, this one can’t since it’s not a boolean value. Here’s the description from &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/new-cscallqueue?view=skype-ps#-routingmethod&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Microsoft Learn&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The RoutingMethod defines how agents will be called in a Call Queue. If the routing method is set to Serial, then agents will be called one at a time. If the routing method is set to Attendant, then agents will be called in parallel. If routing method is set to RoundRobin, the agents will be called using Round Robin strategy so that all agents share the call-load equally. If routing method is set to LongestIdle, the agents will be called based on their idle time, i.e., the agent that has been idle for the longest period will be called.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I can’t remember if Longest Idle was always there or if it was added later on. But since there’s an entry in flighted features, I assume it was added at some point.&lt;/p&gt;
&lt;h4 id=&#34;granularschedulesenabled&#34;&gt;GranularSchedulesEnabled
&lt;/h4&gt;&lt;p&gt;I’ve been working with Teams Voice since the beginning, when we still had to use Skype for Business Online Admin Center to configure auto attendants and call queues (v1). From there, it was super easy to select business hours from a timetable. This only supported 30 minutes increments though.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1Ao8BKZuMaZlUtWDtqScEsg.png&#34;
	width=&#34;770&#34;
	height=&#34;1017&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1Ao8BKZuMaZlUtWDtqScEsg_hu_1a4c1eae83bcffb1.png 480w, https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1Ao8BKZuMaZlUtWDtqScEsg_hu_d20ffd1bde9a880b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;75&#34;
		data-flex-basis=&#34;181px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When auto attendants were moved to TAC, they only supported 30 minutes increments at first too. 15 minutes increments were added quite early on though.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1IRUMV9um1nnepnOQlMkcjQ.png&#34;
	width=&#34;928&#34;
	height=&#34;136&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1IRUMV9um1nnepnOQlMkcjQ_hu_4d6959f1013d3eae.png 480w, https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1IRUMV9um1nnepnOQlMkcjQ_hu_45d19b4f0eef0fbe.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;682&#34;
		data-flex-basis=&#34;1637px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Because business hours now support 15 minutes increments, the drop-down list is awfully long which makes it kind of time intensive to configure. I’ve published an article and an accompanying PowerShell script to combat this &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2&#34; &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;avscallqueuezodiac&#34;&gt;AVSCallQueueZodiac
&lt;/h4&gt;&lt;p&gt;Zodiac was the code name for Voice Enabled Channels which is also known as Collaborative Calling. I don’t know how this name made it into production. 🙃&lt;/p&gt;
&lt;p&gt;This update was mentioned rather briefly in &lt;a class=&#34;link&#34; href=&#34;https://techcommunity.microsoft.com/t5/microsoft-teams-blog/what-s-new-in-microsoft-teams-february-and-march-2021/ba-p/2245944&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; TechNet blog post under calling.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Voice-enabled channels&lt;/strong&gt;&lt;br&gt;
Voice-enabled channels allow connecting a call queue to a channel in Microsoft Teams. Users can collaborate and share information within the channel while taking calls in the queue. This feature is ideal for scenarios such an IT help desk or HR hotline. IT admins can quickly connect call queues to specific channels, and team owners can manage the settings.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h4 id=&#34;callqueueenableresourceaccountsforobov2&#34;&gt;CallQueueEnableResourceAccountsForOboV2
&lt;/h4&gt;&lt;p&gt;With Voice Enabled Channles, it was finally possible to make outbound calls using a number of a resource account. This only worked if you used the dialer located in the channel but not standard dialer from the Calls app at first. I’m guessing “Obo” stands for Outbound something and V2 also enabled this feature in the Calls App dialer. This was mentioned in Roadmap entry &lt;a class=&#34;link&#34; href=&#34;https://www.microsoft.com/en-us/microsoft-365/roadmap?filters=Microsoft%20Teams&amp;amp;searchterms=86992&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;86992&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 03.06.2023&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’m now fairly confident that &lt;strong&gt;Obo&lt;/strong&gt; stands for &lt;strong&gt;On behalf of&lt;/strong&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;/Update&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;enablesharedvoicemailsystempromptsuppression&#34;&gt;EnableSharedVoicemailSystemPromptSuppression
&lt;/h4&gt;&lt;p&gt;When a call goes to voicemail on an auto attendant, a so-called system greeting is being played back by default. In English it sounds like this.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Please leave a message after the tone. When you have finished, please hang up.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Since many companies use professionally recorded audio files for their announcements, it can be disturbing that a custom greeting is followed by the system greeting which will be Text-To-Speech. Because of that, Microsoft has added the ability to suppress it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1n6mmIzdyHlToybU63o4r9g.png&#34;
	width=&#34;1610&#34;
	height=&#34;460&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1n6mmIzdyHlToybU63o4r9g_hu_4bd4005e7ea9afe0.png 480w, https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1n6mmIzdyHlToybU63o4r9g_hu_c44ae2f3841e1eeb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;350&#34;
		data-flex-basis=&#34;840px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When suppressing the system greeting on an auto attendant, you have to be careful though. There will be two different beep tones because the auto attendant forwards the call to shared voicemail, which will play back the first beep and then play onther (different sounding) one as a “ready to leave a message” indicator. I’ve also covered that in more detail under “One Last Caveat” &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24&#34; &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;callqueueenablesharedvoicemailsystempromptsuppression&#34;&gt;CallQueueEnableSharedVoicemailSystemPromptSuppression
&lt;/h4&gt;&lt;p&gt;When you read the article linked above, you will find the following paragraph.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For call queues, this is slightly different. There is no option to suppress the system greeting. A call queue’s primary purpose is to route calls to agents so there are only routing options for overflow or timeout scenarios. This also means that there’s no option to configure a greeting inside the scope of an overflow or a timeout action.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;When you upload your own audio file, the system greeting is automatically suppressed by the call queue. There’s no option to enable it. (Why would you anyway?)&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;At the time of writing, this was true. But now Microsoft has added the option to suppress the system message for TTS greetings and not suppress it for audio files on call queues as well. Remember that you can always use my &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;M365 Call Flow Visualizer&lt;/a&gt; to see exactly which greetings are configured on any call flow.&lt;/p&gt;
&lt;h4 id=&#34;obomobilefeatureenabled&#34;&gt;OboMobileFeatureEnabled
&lt;/h4&gt;&lt;p&gt;I’d be lying if I said that I knew what this references to. My best guess is that it’s related to &lt;a class=&#34;link&#34; href=&#34;https://techcommunity.microsoft.com/t5/microsoft-teams-blog/announcing-operator-connect-mobile-delivering-mobile-first/ba-p/3252902#:~:text=Single-number%20simplicity%20and%20the%20flexibility%20to%20work%20from,devices%20and%20hardware%20to%20purchase%2C%20manage%2C%20and%20support.&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Operator Connect Mobile&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;avsenablemenuoptionexpansion&#34;&gt;AVSEnableMenuOptionExpansion
&lt;/h4&gt;&lt;p&gt;I have no idea what that is. It would be a lot easier if we would see at which dates these entries have been added. The only thing I can think of is support for pound and asterisk key on auto attendant menu options.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1z737i841L01TVQILLF1MKA.png&#34;
	width=&#34;1594&#34;
	height=&#34;398&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1z737i841L01TVQILLF1MKA_hu_cb27abc0809b6276.png 480w, https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1z737i841L01TVQILLF1MKA_hu_48ceb6fbfaf0df1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;400&#34;
		data-flex-basis=&#34;961px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;backupconfiginbvd&#34;&gt;BackupConfigInBvd
&lt;/h4&gt;&lt;p&gt;As far as I know, BVD stands for Business Voice Directory and it is an internal Microsoft system. This is most likely an internal service update which has no impact on admin exposed settings.&lt;/p&gt;
&lt;h4 id=&#34;other-entries&#34;&gt;Other Entries
&lt;/h4&gt;&lt;p&gt;There are a couple of entries where I really don’t have the slightest idea what they could mean.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;NgcProvisioning&lt;/li&gt;
&lt;li&gt;UserValidationViaAdminService&lt;/li&gt;
&lt;li&gt;AVSAdminEnableVerificationOfXMSUserIdHeader&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Get-CsAutoAttendantTenantInformation&lt;/code&gt; allows us to get a vague overview of which features have been added or might be added soon. It won’t help you configure or unlock anything, but I still hope that I was able to explain some things which you might not have known before.&lt;/p&gt;
&lt;p&gt;I wish you all happy holidays. See you next year!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1tpVtUXleSztgTqWH64g.png&#34;
	width=&#34;1485&#34;
	height=&#34;866&#34;
	srcset=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1tpVtUXleSztgTqWH64g_hu_3b150576baba573e.png 480w, https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb/1tpVtUXleSztgTqWH64g_hu_4414dc0182b5b9b8.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;171&#34;
		data-flex-basis=&#34;411px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Forward SMS Verification Codes From iPhone To a Windows PC</title>
        <link>https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/</link>
        <pubDate>Sun, 27 Nov 2022 12:46:25 +0000</pubDate>
        
        <guid>https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/</guid>
        <description>&lt;p&gt;A few days ago, I wrote “&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6&#34; &gt;How To Handle Password and 2FA Madness Like a Pro&lt;/a&gt;”. In this article I explained why I think it’s better to use a full-fledged password manager instead of a basic Authenticator App such as Microsoft or Google Authenticator to handle your 2FA codes.&lt;/p&gt;
&lt;p&gt;These types of apps work well when the service for which you want to enable 2FA allows you to add a secret key to your authenticator app. But what about services which don’t support such apps and instead only send you an SMS with a verification code? Unfortunately, there are still some services which will only allow one-time codes sent by SMS.&lt;/p&gt;
&lt;p&gt;If you’re using an iPhone and a MAC for example, this shouldn’t be too big of an issue since you can seamlessly sync your clipboard across devices (at least that’s what I’ve heard).&lt;/p&gt;
&lt;p&gt;If you’re using an Android phone together with Phone Link on Windows, you can easily access your SMS from there. But if you use an iPhone and a Windows PC, there’s no way to seamlessly transfer a code received by SMS on your iPhone to your PC.&lt;/p&gt;
&lt;p&gt;In &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/&#34; &gt;11 Must-Have Apps for Windows 11&lt;/a&gt; I wrote about Clipt which allows you to transfer content between an iPhone and a Windows PC through their Chromium extension.&lt;/p&gt;
&lt;p&gt;When you use this method, you must open the message containing the verification code and manually select and copy it. Once the code is in your iPhone&amp;rsquo;s clipboard, you need to open Clipt and click Send. The copied content will be added to your PCs clipboard automatically and you’re ready to paste it.&lt;/p&gt;
&lt;p&gt;I didn’t quite like the manual steps involved on the iPhone. So I thought why not tinker around with Siri Shortcuts again, like I did in &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/use-siri-shortcuts-to-make-microsoft-graph-requests-3804f80adbfa&#34; &gt;this&lt;/a&gt; article.&lt;/p&gt;
&lt;h3 id=&#34;siri-automation&#34;&gt;Siri Automation
&lt;/h3&gt;&lt;h4 id=&#34;building-the-automation&#34;&gt;Building the Automation
&lt;/h4&gt;&lt;p&gt;The good thing is that there is a trigger for &lt;em&gt;“When I get a message containing &lt;keyword&gt;”.&lt;/em&gt; The bad thing is that there’s no way of running it truly automated. You will still need to confirm running the automation each time it’s triggered.&lt;/p&gt;
&lt;p&gt;But that’s only one manual interaction on the iPhone compared to four with Clipt (Open messages, copy code, open clipt, send content).&lt;/p&gt;
&lt;p&gt;I set the trigger to match all messages which contain the string &lt;strong&gt;“verification code”&lt;/strong&gt;. If that should not work for the messages you receive, you can adjust it to your liking or create multiple automations with different words.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1hvOkUTfWoJtXfbbsied89g.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1hvOkUTfWoJtXfbbsied89g_hu_2d3b82805d8368d6.png 480w, https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1hvOkUTfWoJtXfbbsied89g_hu_cf99e3b124afba09.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Let’s take a look at the actions. First, we’re going to use the regular expression &lt;code&gt;\d{6,}&lt;/code&gt; to match all strings which consist of only numbers and are at least six digits long.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1FUqHjHbQq1UXAqH7gkHug.png&#34;
	width=&#34;1361&#34;
	height=&#34;263&#34;
	srcset=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1FUqHjHbQq1UXAqH7gkHug_hu_6ff2be61f073fb62.png 480w, https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1FUqHjHbQq1UXAqH7gkHug_hu_cb3a1ba44a67b79d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;517&#34;
		data-flex-basis=&#34;1241px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Then we’re going to create a note in Apple Notes with the extracted verification code. After 60 seconds, we’re going to delete the note.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1KUBIIWC2Zk7hIm6K29sD2A.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1KUBIIWC2Zk7hIm6K29sD2A_hu_5483008a953500fb.png 480w, https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1KUBIIWC2Zk7hIm6K29sD2A_hu_fe37ea6ef61e7083.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;configuring-ios&#34;&gt;Configuring iOS
&lt;/h4&gt;&lt;p&gt;You might ask yourself what good does it do if the verification code is stored in Apple Notes when I want to access it on my PC?&lt;/p&gt;
&lt;p&gt;If you configure your Outlook.com or work or school account as the default account for Notes in iOS settings, your notes will automatically synchronize with Microsoft Sticky Notes. Of course, I’m assuming that you’ve already added a Microsoft Account to iOS at this point.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1eK5EzyD2ps2osajFS6Zmw.png&#34;
	width=&#34;1125&#34;
	height=&#34;2436&#34;
	srcset=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1eK5EzyD2ps2osajFS6Zmw_hu_4cf78c58ebabd855.png 480w, https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1eK5EzyD2ps2osajFS6Zmw_hu_e42466a8ee32fb44.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;demo-of-the-automation-inaction&#34;&gt;Demo of the Automation in Action
&lt;/h4&gt;&lt;p&gt;To show off the automation, I just sent myself an SMS from Skype to my mobile number containing the following text.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Here’s your verification code: 456789. Thanks for using it.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I added the code between other text and added a full stop right after the code to demonstrate how powerful regular expressions are.&lt;/p&gt;
&lt;p&gt;This is what it looks like on an iPhone. First there will be a notification for the new message. Shortly after, the automation will be triggered, and we’ll need to click it, and then click &lt;em&gt;“Ausführen”&lt;/em&gt; (German for &lt;em&gt;“Run”&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1Cd58DqlhiHJsmyJ43qnR1Q.gif&#34;
	width=&#34;886&#34;
	height=&#34;1920&#34;
	srcset=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1Cd58DqlhiHJsmyJ43qnR1Q_hu_1b64ad0f688fb38f.gif 480w, https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1Cd58DqlhiHJsmyJ43qnR1Q_hu_a685a22f18673918.gif 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;110px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;accessing-copied-codes-onwindows&#34;&gt;Accessing Copied Codes on Windows
&lt;/h4&gt;&lt;p&gt;There are many Apps from which you access to your Sticky Notes on Windows.&lt;/p&gt;
&lt;p&gt;The most obvious one is &lt;strong&gt;Sticky Notes&lt;/strong&gt; of course.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1gj6ozy5v4BuGa4RWlxETNw.png&#34;
	width=&#34;648&#34;
	height=&#34;1035&#34;
	srcset=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1gj6ozy5v4BuGa4RWlxETNw_hu_4a3b4d205cfbe0d5.png 480w, https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1gj6ozy5v4BuGa4RWlxETNw_hu_3b81f501717a1b9c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;62&#34;
		data-flex-basis=&#34;150px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;You can also access them in &lt;strong&gt;Outlook&lt;/strong&gt; or &lt;strong&gt;Outlook on the Web&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1UOcsgxeQRRwdEEur32BwRg.png&#34;
	width=&#34;1684&#34;
	height=&#34;873&#34;
	srcset=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1UOcsgxeQRRwdEEur32BwRg_hu_2a9c910007c55137.png 480w, https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1UOcsgxeQRRwdEEur32BwRg_hu_9583e154b3ef9913.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;192&#34;
		data-flex-basis=&#34;462px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;And finally, they’re also available in your &lt;strong&gt;OneNote&lt;/strong&gt; Feed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1MYZQMg0ggzjHrsx6lBk0w.png&#34;
	width=&#34;471&#34;
	height=&#34;1103&#34;
	srcset=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1MYZQMg0ggzjHrsx6lBk0w_hu_3360fffe8c5abb41.png 480w, https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1MYZQMg0ggzjHrsx6lBk0w_hu_3aeec37f1b64e249.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;42&#34;
		data-flex-basis=&#34;102px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;copying-the-verification-code&#34;&gt;Copying the Verification Code
&lt;/h4&gt;&lt;p&gt;Unfortunately, Stick Notes does not support copying the contents of a note from a right-click.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1T3wMGAbPW9enWGJClr1Q.png&#34;
	width=&#34;697&#34;
	height=&#34;489&#34;
	srcset=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1T3wMGAbPW9enWGJClr1Q_hu_b03123b41fea6216.png 480w, https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1T3wMGAbPW9enWGJClr1Q_hu_2d21adad88458b6c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;342px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;We need to open the note, select the text, and then copy it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1vrDPnDLy9MS7pR4ynTxCEw.png&#34;
	width=&#34;462&#34;
	height=&#34;471&#34;
	srcset=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1vrDPnDLy9MS7pR4ynTxCEw_hu_d09fc54fdc7d9ae5.png 480w, https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1vrDPnDLy9MS7pR4ynTxCEw_hu_66c018ef487da2b9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;98&#34;
		data-flex-basis=&#34;235px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a class=&#34;link&#34; href=&#34;https://apps.microsoft.com/store/detail/outlook-for-windows/9NRX63209R7B&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;new Outlook&lt;/a&gt; or Outlook on the Web or OneNote allow you to copy the contents of the note using a right-click though.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1w0YaPyh8JvP8zGVeXsMag.png&#34;
	width=&#34;620&#34;
	height=&#34;620&#34;
	srcset=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1w0YaPyh8JvP8zGVeXsMag_hu_e82a42ac7834e670.png 480w, https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1w0YaPyh8JvP8zGVeXsMag_hu_787f2755e0c01937.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This also works well in the OneNote (for Windows 10) Feed. While it does work in the new, &lt;a class=&#34;link&#34; href=&#34;https://techcommunity.microsoft.com/t5/microsoft-365-blog/refreshing-the-onenote-app-on-windows/ba-p/3401914&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;refreshed version of OneNote&lt;/a&gt;, it was quite buggy and sluggish for me. I’ll let that slide since that’s an Insider Build.&lt;/p&gt;
&lt;p&gt;OneNote for Windows 10 is not listed in Microsoft Store Search anymore, but you can still get it from &lt;a class=&#34;link&#34; href=&#34;https://www.microsoft.com/store/productId/9WZDNCRFHVJL&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; link. I will keep using OneNote for Windows 10 until the new OneNote also supports vertical sections in &lt;a class=&#34;link&#34; href=&#34;https://www.microsoft.com/en-us/microsoft-365/roadmap?filters=&amp;amp;searchterms=100492&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;March 2023&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1FhUKm1MGidjVrNEd74YA.png&#34;
	width=&#34;463&#34;
	height=&#34;746&#34;
	srcset=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1FhUKm1MGidjVrNEd74YA_hu_89b1522215d5c61a.png 480w, https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1FhUKm1MGidjVrNEd74YA_hu_c7df97196ada57b6.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;62&#34;
		data-flex-basis=&#34;148px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Once the code has been copied from Outlook or OneNote for Windows 10, it will be in your clipboard as plain text without any trailing whitespaces or line breaks so that you’re ready to paste it wherever you need it.&lt;/p&gt;
&lt;p&gt;This was not the case with the new OneNote App. In this case there were two line breaks before the code and one after.&lt;/p&gt;
&lt;p&gt;While it’s theoretically possible to also copy the code from the classic Outlook App, the experience is not the same as with the modern Outlook or OWA.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1HXrJSz8Q8JxGFYiZ0kGvCw.png&#34;
	width=&#34;1007&#34;
	height=&#34;308&#34;
	srcset=&#34;https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1HXrJSz8Q8JxGFYiZ0kGvCw_hu_dd662b68786d11a9.png 480w, https://heusser.pro/p/forward-verification-codes-from-iphone-to-a-windows-pc-2c2b5eb762f5/1HXrJSz8Q8JxGFYiZ0kGvCw_hu_aa0d53d8d3bfbff1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;326&#34;
		data-flex-basis=&#34;784px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When you copy the code from there, it will include additional, unwanted metadata such as the subject and date created.&lt;/p&gt;
&lt;p&gt;Subject Created Categories&lt;/p&gt;
&lt;p&gt;456789 So 27.11.2022 11:59&lt;/p&gt;
&lt;p&gt;I like the experience of copying the verification code from the modern Outlook or OWA the best. It will only show Sticky Notes and allows me to copy the raw code by a right-click. I usually have Outlook open all day anyway so it’s very convenient to just switch from inbox to notes to copy a new verification code.&lt;/p&gt;
&lt;p&gt;Because the note is only used to store a temporary verification code and we want to avoid clutter, the Automation will remove the note 60 seconds after it has been created. This should give you plenty of time to copy it from your notes.&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h3&gt;&lt;p&gt;Both methods, Clipt and Automation + Sticky Notes require manual user interaction, so none of them are perfect. Clipt requires you to do more manual tasks on the phone and Sticky Notes needs more actions on Windows. I like using the Automation + Sticky Notes more because I believe that working on a Desktop with mouse and keyboard is still king in terms of how fast things can get done. I also like that no additional apps or services are required, especially that no Chromium Extension which runs in the background, even when the browser is closed is needed.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>How To Handle Password and 2FA Madness Like a Pro</title>
        <link>https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/</link>
        <pubDate>Sat, 26 Nov 2022 03:04:56 +0000</pubDate>
        
        <guid>https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/</guid>
        <description>&lt;p&gt;Every once in a while, I come across a random Twitter conversation where people share their struggles and frustrations about the current state of 2FA apps and migrating those codes to a new phone.&lt;/p&gt;
&lt;p&gt;This sparked a private discussion between &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/AndresGorzelany&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Andrés Gorzelany&lt;/a&gt; and me where he asked me if I had written a blog post about this already. I hadn’t, so here we are.&lt;/p&gt;
&lt;p&gt;First, let’s cover some of the abbreviations which I’m going to use in this article.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2FA&lt;/strong&gt; = Second Factor Authentication &lt;br&gt;
&lt;em&gt;(Password is not enough, you need to either enter a one time code or verify a login in a mobile app)&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;MFA&lt;/strong&gt; = Multi Factor Authentication &lt;br&gt;
&lt;em&gt;(Pretty much the same as 2FA, the term is primarily used by Microsoft)&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;OTP&lt;/strong&gt; = One Time Password&lt;br&gt;
_(Usually, a 6 to 8 digit long code received by email or SMS which can only be used once)&lt;br&gt;
_&lt;strong&gt;TOTP&lt;/strong&gt; = Time Based One Time Password&lt;br&gt;
&lt;em&gt;(Usually, a 6 to 8 digit long code which gets generated (and hashed against the current time) by an app. Usually, every code is only valid for 30 seconds)&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;microsoft-authenticator&#34;&gt;Microsoft Authenticator
&lt;/h3&gt;&lt;p&gt;I’m sure that many IT Pros use &lt;a class=&#34;link&#34; href=&#34;https://apps.apple.com/us/app/microsoft-authenticator/id983156458&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Microsoft Authenticator&lt;/a&gt; for all or most of their 2FA codes because that’s what they first used, when MFA was initially required by the company they work for. As of drafting this article, the app currently sits on #7 in Productivity on Apple’s App Store, so I assume it’s quite popular.&lt;/p&gt;
&lt;h4 id=&#34;account-setup&#34;&gt;Account Setup
&lt;/h4&gt;&lt;p&gt;If you head over to &lt;a class=&#34;link&#34; href=&#34;https://mysignins.microsoft.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mysignins.microsoft.com/&lt;/a&gt; you will be able to add or edit your MFA methods for a Microsoft work or school account.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1cklX2PhJurEPz0XDmzqvQw.png&#34;
	width=&#34;1542&#34;
	height=&#34;365&#34;
	srcset=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1cklX2PhJurEPz0XDmzqvQw_hu_c912f0beade3a83a.png 480w, https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1cklX2PhJurEPz0XDmzqvQw_hu_e7eab10c00af119d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;422&#34;
		data-flex-basis=&#34;1013px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1gWZ6lvVge9MxPPIZ3jNag.png&#34;
	width=&#34;710&#34;
	height=&#34;312&#34;
	srcset=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1gWZ6lvVge9MxPPIZ3jNag_hu_90cb0cac69db1375.png 480w, https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1gWZ6lvVge9MxPPIZ3jNag_hu_214a7b66c87e4e78.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;227&#34;
		data-flex-basis=&#34;546px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1oTRkXMubTJO3zz66gTBdSg.png&#34;
	width=&#34;1068&#34;
	height=&#34;386&#34;
	srcset=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1oTRkXMubTJO3zz66gTBdSg_hu_ee55f5485fc7f010.png 480w, https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1oTRkXMubTJO3zz66gTBdSg_hu_1cbe24750f3f20c7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;276&#34;
		data-flex-basis=&#34;664px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you click on &lt;em&gt;Next&lt;/em&gt;, your account will be added using the “Microsoft Authenticator” method. If you click on &lt;em&gt;I want to use a different authenticator app&lt;/em&gt; your account will be added as a “different authenticator app”.&lt;/p&gt;
&lt;p&gt;Let’s take a look at Microsoft Authenticator first.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1iwc5ewsVqKxfrJZpyGZNKQ.png&#34;
	width=&#34;1045&#34;
	height=&#34;645&#34;
	srcset=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1iwc5ewsVqKxfrJZpyGZNKQ_hu_df45f1636e897bdb.png 480w, https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1iwc5ewsVqKxfrJZpyGZNKQ_hu_693f213f27c78655.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;162&#34;
		data-flex-basis=&#34;388px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you just scan the QR code, you won’t notice any difference between the two options. The account will just be added.&lt;/p&gt;
&lt;p&gt;However, if you click on &lt;em&gt;Can’t scan image?&lt;/em&gt; More information will be revealed. Notice how there’s a code and an URL which also includes a code.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1MM5qGsmVCoTlFfz6hqw.png&#34;
	width=&#34;1014&#34;
	height=&#34;246&#34;
	srcset=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1MM5qGsmVCoTlFfz6hqw_hu_3db4e04d70824238.png 480w, https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1MM5qGsmVCoTlFfz6hqw_hu_b100269f125f3102.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;412&#34;
		data-flex-basis=&#34;989px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;After adding the account, this sign in method will show as &lt;strong&gt;Microsoft Authenticator&lt;/strong&gt; under Security info.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1vUw5bgZWn5i3AHHS1cq2A.png&#34;
	width=&#34;1533&#34;
	height=&#34;355&#34;
	srcset=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1vUw5bgZWn5i3AHHS1cq2A_hu_bdb22273eb3d41f4.png 480w, https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1vUw5bgZWn5i3AHHS1cq2A_hu_915eb3433e381a34.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;431&#34;
		data-flex-basis=&#34;1036px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If we do the same thing again but choose &lt;em&gt;different authenticator app&lt;/em&gt; this time, we can see that there’s just a &lt;strong&gt;Secret key&lt;/strong&gt; but no URL anymore.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1gxdJiEm3V5bY9UWSWMW9zw.png&#34;
	width=&#34;1001&#34;
	height=&#34;189&#34;
	srcset=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1gxdJiEm3V5bY9UWSWMW9zw_hu_e321952177998b33.png 480w, https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1gxdJiEm3V5bY9UWSWMW9zw_hu_cf80ed74fa1ea454.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;529&#34;
		data-flex-basis=&#34;1271px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If we look at the sign in methods again, we can see that the second one is called &lt;strong&gt;Authenticator App&lt;/strong&gt; even though we also added it to the Microsoft Authenticator App.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1mG8IBsBGe6qAhWgPgyH5bA.png&#34;
	width=&#34;1524&#34;
	height=&#34;427&#34;
	srcset=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1mG8IBsBGe6qAhWgPgyH5bA_hu_63a224da89493042.png 480w, https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1mG8IBsBGe6qAhWgPgyH5bA_hu_2945362e69d33465.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;356&#34;
		data-flex-basis=&#34;856px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When we look at the mobile app itself, we can also see some differences between these two accounts. The App knows that the first one is a Microsoft work or school account. But it has absolutely no idea that the second one is in fact also a work or school account or even that it’s the same account.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1h5rb2kwBLtxLfgZjmxYTw.png&#34;
	width=&#34;750&#34;
	height=&#34;1334&#34;
	srcset=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1h5rb2kwBLtxLfgZjmxYTw_hu_64ead55d9a8cd01c.png 480w, https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1h5rb2kwBLtxLfgZjmxYTw_hu_f739d82f21e31a4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;56&#34;
		data-flex-basis=&#34;134px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It’s even clearer on the details page of each account. And because both accounts were added using different secrets, they also generate different codes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1UB42dCXf3Ct533AiYGOBQ.png&#34;
	width=&#34;1498&#34;
	height=&#34;1067&#34;
	srcset=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1UB42dCXf3Ct533AiYGOBQ_hu_4c47dc3e9ad4a46b.png 480w, https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1UB42dCXf3Ct533AiYGOBQ_hu_5d0a7e17d43631f2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;140&#34;
		data-flex-basis=&#34;336px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;backing-up-our-authenticator-app&#34;&gt;Backing up our Authenticator App
&lt;/h4&gt;&lt;p&gt;Switching phones has become increasingly complicated since 2FA has gotten so popular (where 2FA becoming a standard is a good thing).&lt;/p&gt;
&lt;p&gt;Backing up Microsoft Authenticator Data requires a personal Microsoft Account (outlook.com/live.com/hotmail.com).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1loZR0pS5OVVtT78aPpRrDA.png&#34;
	width=&#34;750&#34;
	height=&#34;1334&#34;
	srcset=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1loZR0pS5OVVtT78aPpRrDA_hu_30e3981d946f535a.png 480w, https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1loZR0pS5OVVtT78aPpRrDA_hu_b2161c20009af44c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;56&#34;
		data-flex-basis=&#34;134px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1oI230pk3tWEcv7Qmi2fow.png&#34;
	width=&#34;1497&#34;
	height=&#34;795&#34;
	srcset=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1oI230pk3tWEcv7Qmi2fow_hu_951c016827688b67.png 480w, https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1oI230pk3tWEcv7Qmi2fow_hu_7e51971658c8e7bf.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;188&#34;
		data-flex-basis=&#34;451px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;restoring-microsoft-authenticator&#34;&gt;&lt;strong&gt;Restoring Microsoft Authenticator&lt;/strong&gt;
&lt;/h4&gt;&lt;p&gt;If the app is deleted or if you switch phones, you can restore from your backup.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1I4VPjVxbWbjEHstl1WeZg.png&#34;
	width=&#34;1489&#34;
	height=&#34;1332&#34;
	srcset=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1I4VPjVxbWbjEHstl1WeZg_hu_e22adc21d797068d.png 480w, https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1I4VPjVxbWbjEHstl1WeZg_hu_603207f315fa6267.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;111&#34;
		data-flex-basis=&#34;268px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;And there it is: a big red warning appears for the work or school account we added using the Microsoft Authenticator method. The generic code was restored just fine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/12xH4t91wnijwWl0r6Xfw.png&#34;
	width=&#34;750&#34;
	height=&#34;1334&#34;
	srcset=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/12xH4t91wnijwWl0r6Xfw_hu_5c19ae5b182cc3f3.png 480w, https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/12xH4t91wnijwWl0r6Xfw_hu_3a0eba0a244dfcf7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;56&#34;
		data-flex-basis=&#34;134px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;From what I could observe online, many people seemed annoyed (understandably) that there’s an action required for each work or school account which was added using the Microsoft Authenticator method.&lt;/p&gt;
&lt;p&gt;To be honest, I don’t know if there’s a specific QR code to recover the account. To me it seems more like that the backup only stores your email address and that you need to go through the setup again on a new device.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1ZHcT91WwAGsIFVT5foO31w.png&#34;
	width=&#34;750&#34;
	height=&#34;1334&#34;
	srcset=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1ZHcT91WwAGsIFVT5foO31w_hu_7e6337985bdbef70.png 480w, https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1ZHcT91WwAGsIFVT5foO31w_hu_62df1dff04bab7c2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;56&#34;
		data-flex-basis=&#34;134px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;To restore it, go back to the My-Sign-Ins page and add the Microsoft Authenticator App again.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/10O59nIbYIkqQvOtrLMoGvg.png&#34;
	width=&#34;1526&#34;
	height=&#34;501&#34;
	srcset=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/10O59nIbYIkqQvOtrLMoGvg_hu_55fa3d3e664e96dc.png 480w, https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/10O59nIbYIkqQvOtrLMoGvg_hu_219ca82c3bbca220.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;304&#34;
		data-flex-basis=&#34;731px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The same is also possible from this website: &lt;a class=&#34;link&#34; href=&#34;https://aka.ms/mfasetup&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://aka.ms/mfasetup&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1baOzZjJDNtR5vt8cDPUnNA.png&#34;
	width=&#34;1404&#34;
	height=&#34;1270&#34;
	srcset=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1baOzZjJDNtR5vt8cDPUnNA_hu_bdc7726a4fed7838.png 480w, https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1baOzZjJDNtR5vt8cDPUnNA_hu_788b962094b086fb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;110&#34;
		data-flex-basis=&#34;265px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;Restore&lt;/em&gt; button at the bottom of this page didn’t do anything for me. Since it’s a new device, you need to add it again.&lt;/p&gt;
&lt;p&gt;If you deleted the app on your current phone and restore the backup to the same device, the old registration will stop working. In this case, both Authenticator apps will have the same description in the portal. Delete the one which is sorted last in the list. If you got a new phone and don’t use your old phone anymore or if you’ve lost it, you can delete it from the sign-in methods.&lt;/p&gt;
&lt;p&gt;If MFA is enforced by your organization, and if you’re not currently excluded from MFA prompts like you maybe would be in an office building/network you may need to provide an alternative 2FA method like an OTP received by SMS or email if you’re not already logged in on your desktop. If you still have your old phone at hand, you can also use the Microsoft Authenticator from there to approve the sign in.&lt;/p&gt;
&lt;p&gt;This example just shows one work or school account for demonstration purposes. Just imagine that you work for dozens of companies as a consultant or freelancer… In this case, you would need to repeat these steps in all of their tenants in order to recover your accounts.&lt;/p&gt;
&lt;p&gt;Microsoft Authenticator only backs up 2FA codes for generic accounts and your personal Microsoft Account. All work or school accounts that were added using the Microsoft Authenticator method require that you go through the setup again. Basically, only the account name, tenant name and user principal name will be restored but not the trust relationship itself.&lt;/p&gt;
&lt;h4 id=&#34;2fa-codes-from-otherservices&#34;&gt;2FA Codes From Other Services
&lt;/h4&gt;&lt;p&gt;2FA is without doubt a great mechanism for securing your accounts and online identities. It should be used wherever possible. Without exceptions.&lt;/p&gt;
&lt;p&gt;Microsoft even advertises their Authenticator App as an App in which you can store all your 2FA codes on the App Store.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1nVlZbzfDSWyem4SdQhpqxQ.png&#34;
	width=&#34;1494&#34;
	height=&#34;757&#34;
	srcset=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1nVlZbzfDSWyem4SdQhpqxQ_hu_8f185811a37a8432.png 480w, https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1nVlZbzfDSWyem4SdQhpqxQ_hu_6a5935cae9084765.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;197&#34;
		data-flex-basis=&#34;473px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you’re going all-in on 2FA and want to potentially store hundreds of 2FA codes, you should seriously consider not using Microsoft Authenticator for that.&lt;/p&gt;
&lt;p&gt;Can you believe it? A statement like that from a Microsoft fan as big as me? The first thing you need to think about is that you will either need to read the code from the app and type it on your PC or you need to copy it from the app. Either way you need to find it in the app. Although Microsoft has recently added a search function to the app (which was long overdue to be honest) there’s still no option to create folders to better manage your accounts.&lt;/p&gt;
&lt;p&gt;The second thing you should consider is lock-in. Once you’ve added all your 2FA codes to Microsoft Authenticator, you can only restore them to another Microsoft Authenticator app. Unless you explicitly save the secret key to a safe place every time you add an account, you won’t be able to extract those secrets again after they’ve been added to Microsoft Authenticator. If you didn’t do that and you want to move them to another app, for example to &lt;a class=&#34;link&#34; href=&#34;https://apps.apple.com/us/app/google-authenticator/id388497605&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Google Authenticator&lt;/a&gt; or &lt;a class=&#34;link&#34; href=&#34;https://apps.apple.com/us/app/twilio-authy/id494168017&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Twilio Authy&lt;/a&gt;, you will need to log into each service and setup 2FA again for the new app. Much like we need to do if we want to move a Microsoft work or school account to a new device.&lt;/p&gt;
&lt;p&gt;On top of all that, finding and copying or typing 2FA codes is not a good user experience. Some services even force their users to use their specific authenticator app. In these cases, apps like these often support push notifications like Microsoft Authenticator does. While just tapping a button on the phone to verify a login is certainly a better experience than searching for a code and then typing it on your PC, having dozens of service-specific authenticator apps is not a viable solution either.&lt;/p&gt;
&lt;p&gt;On the plus side, it’s great that Microsoft Authenticator offers a backup capability. Google Authenticator for example still doesn’t support backups. It only supports exporting your data via a QR code to another Google Authenticator App. The problem with that is that your codes will be lost if you lose your device.&lt;/p&gt;
&lt;p&gt;Authy also offers backing up your 2FA codes. While Microsoft Authenticator requires a personal Microsoft Account to back up your data, Authy uses a separate password to protect your backup. But the lock-in problem remains. Since you can’t retrieve the secret keys from all these Authenticator Apps, your only option of migrating to another app is to go through the 2FA setup for each account again.&lt;/p&gt;
&lt;p&gt;I think not exposing the secret keys after an account has been added makes sense for most users since secret keys need to be handled with absolute caution. If a secret key gets into the wrong hands, a malicious actor could generate the same TOTPs as you without you even knowing.&lt;/p&gt;
&lt;p&gt;Here I’ve used the same secret/QR code to add an account to both Microsoft and Google Authenticator.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1ecWsxhP48aEhfo2vGa0VUg.png&#34;
	width=&#34;1494&#34;
	height=&#34;702&#34;
	srcset=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1ecWsxhP48aEhfo2vGa0VUg_hu_fb97bcfb645fc1aa.png 480w, https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1ecWsxhP48aEhfo2vGa0VUg_hu_434e8a86308ed774.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;212&#34;
		data-flex-basis=&#34;510px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;upping-your-2fagame&#34;&gt;Upping Your 2FA Game
&lt;/h3&gt;&lt;p&gt;So far, we’ve established that using 2FA is a good thing. But we’ve also seen that it can come at the cost of convenience which might put a lot of users off from using it. Weighing security against convenience is an extremely hard decision. But I have found a way wich works well for me and I’m confident that it will work well for others too.&lt;/p&gt;
&lt;p&gt;I know Microsoft, 1Password and other industry leaders are all talking about getting rid of passwords entirely but in reality, we’re just not there yet.&lt;/p&gt;
&lt;p&gt;Another advantage of Microsoft Authenticator compared to other authenticator apps is that it now also offers password synchronization from Edge and auto-fill capabilities on mobile devices. While this is a good feature for many non tech savvy users, it’s still way worse than what a full-fledged password manager can offer. And by that, I mean &lt;a class=&#34;link&#34; href=&#34;https://bitwarden.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Bitwarden&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;bitwarden&#34;&gt;Bitwarden
&lt;/h4&gt;&lt;p&gt;Bitwarden differentiates itself quite a bit from competing services. First of all, it’s completely open source but still backed by a commercial company. While password managers like 1 Password, Dashlane or LastPass are all running on AWS Bitwarden runs on &lt;a class=&#34;link&#34; href=&#34;https://bitwarden.com/help/is-bitwarden-audited/#cloud-hosting&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Azure&lt;/a&gt;. But most importantly, Bitwarden allows self-hosting for those who wish to do so. This means that you can be in control of your own vault data but won’t miss out on any of the awesome features like access and sync from anywhere, awesome mobile apps or browser extensions including auto-fill or even Windows Hello and Touch/FaceID support.&lt;/p&gt;
&lt;p&gt;And then there’s the super fair &lt;a class=&#34;link&#34; href=&#34;https://bitwarden.com/pricing/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;pricing options&lt;/a&gt;. Unlike many other password managers, their free tier supports unlimited passwords and devices and will stay free forever. It even supports vault sharing with one other user. This is because Bitwarden simply believes that anybody should be able to store their passwords securely and freely.&lt;/p&gt;
&lt;p&gt;Their premium tier which also supports storing and generating 2FA codes only costs 10$ per year. By the way, I’m not sponsored by them in any way, but I’d gladly pay the 10$ per year even if the free version also included advanced 2FA features just to support their cause.&lt;/p&gt;
&lt;h4 id=&#34;putting-all-your-eggs-in-onebasket&#34;&gt;Putting All Your Eggs in One Basket
&lt;/h4&gt;&lt;p&gt;Let’s get to the technical part. Using a password manager means that you will be storing all your passwords in the same place. People often refer to this as putting all your eggs in one basket. It’s a risk for sure but remembering hundreds of complex passwords is definitely not an option. And using more or less the same password for each website isn’t either.&lt;/p&gt;
&lt;p&gt;I’ve had arguments about this where people claimed that there’s no real difference between using a master password to protect all your passwords or using the same password for each website. This not the case at all. Imagine if you use the same password for each website and one of those sites gets hacked and your password gets leaked on the internet. The chance of a password being compromised by a random website you signed up for is much higher than the chance of someone getting a hold of your master password.&lt;/p&gt;
&lt;p&gt;Besides, the master password is not the only thing needed to get into the vault of any sane person. You also need a 2FA code or a physical security key to access the vault. I think it was on Reddit where someone said that they call this &lt;strong&gt;“Staged 2FA”.&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;using-a-password-manager-as-an-authenticator-app&#34;&gt;Using a Password Manager as an Authenticator App
&lt;/h4&gt;&lt;p&gt;Maybe you think that I must be crazy for not only storing all my passwords but almost all of my 2FA codes in the same place as well. Bear with me and let me explain why I think that this is a good idea.&lt;/p&gt;
&lt;p&gt;The idea of a second factor is that you need an additional physical device which generates a one-time code. This applies if you for example want to log into a website on your PC and then use the TOTP which only your phone/app can generate. But nowadays so much more is done on mobile devices too. So, if I log in to outlook.com on my phone, I don’t technically have a second factor since I can approve the sign-in request on the same device. In fact, if you think about it, most people probably have an app for their password manager and Microsoft Authenticator or another authenticator app on their phone which both can be unlocked biometrically.&lt;/p&gt;
&lt;p&gt;If somebody wants to access your 2FA codes, they need access to your phone anyway. If they already have access to your phone, does it really matter if they get the 2FA codes from the Microsoft Authenticator App or from the password manager? Of course, this is a hypothetical worst-case scenario as physical violence or serious threats could be involved in order to get you to unlock your phone and apps with biometrics.&lt;/p&gt;
&lt;p&gt;The key difference between storing your 2FA codes in an authenticator app or in a password manager is that a hacker would always need physical access to your phone if they’re stored in an authenticator app. But even if an attacker would be able to get these codes, the passwords which are protected in the password manager are still needed.&lt;/p&gt;
&lt;p&gt;To get into the password manager, the uncrackable (at least until quantum computing becomes mainstream) master password is needed. Even if that had been obtained by somebody, physical access to my unlocked phone would still be needed. The way I see it, what really needs to be protected is the phone. Instead of only being a second factor it actually has become the weakest link since it often holds passwords and 2FA codes, regardless of if they’re accessible in different apps.&lt;/p&gt;
&lt;h4 id=&#34;security-concept&#34;&gt;Security Concept
&lt;/h4&gt;&lt;p&gt;My security concept consists of two main security elements as I call them. One of them is Bitwarden, the other one is my personal Microsoft Account. Well, basically there’s also a third one which is my Apple Id (which of course is 2FA enabled as well). I don’t store anything from my Microsoft Account in Bitwarden. This is absolutely crucial. Even if a hacker would somehow get temporarily into my vault, they would not be able to take full control over it since they can’t get the 2FA code for the Bitwarden login. To get to the 2FA code, somebody would need to manage to sign into an iPhone with my Apple Id, restore the backup of my Microsoft Authenticator App from iCloud and then log into my Microsoft Account where both the Apple Id and my Microsoft Account are 2FA enabled and neither of the codes are stored in Bitwarden. All account related settings must be done in the Bitwarden Web Vault for which 2FA is required. The 2FA code for Bitwarden is only stored in my Microsoft Authenticator App. In my Microsoft Account there’s no information regarding Bitwarden except for the 2FA code (without the secret key). This means I only need to remember two complex passwords where the master password of Bitwarden is extremely complex (50+ characters).&lt;/p&gt;
&lt;p&gt;I only enter my master password about once per month to make sure that I don’t forget it. (I do have a backup plan in case I should forget it.) All the other times, I just use biometric authentication on Windows and iOS. Not using or typing the master password reduces the risk of it being obtained by anybody.&lt;/p&gt;
&lt;p&gt;I trust that my devices are secure, therefore I only use biometric authentication and choose to stay logged in (only biometric auth required) until I explicitly sign out of my Bitwarden Vault. This on the other hand exposes my PC to the same risk as my smartphone. If somebody puts a gun to my head and asks me to unlock Bitwarden on my Phone or my PC, they’d get everything. I’m sure I’ll have bigger problems than that if that should ever happen.&lt;/p&gt;
&lt;p&gt;As long as we’re excluding attack scenarios where a malicious actor physically attacks us or forces us to unlock our devices and apps, it doesn’t really matter if you store passwords and 2FA codes in the same place. I mean if we’re talking that somebody is targeting you remotely. They can’t get into your vault by using your master password unless they also have access to your authenticator app on your phone, which does exactly what it should — being a second factor.&lt;/p&gt;
&lt;h4 id=&#34;convenience-of-having-2fa-codes-stored-in-bitwarden&#34;&gt;Convenience of Having 2FA Codes Stored in Bitwarden
&lt;/h4&gt;&lt;p&gt;Let’s talk about some positive stuff. There are lots of advantages from a convenience point of view by storing all your 2FA codes (except Microsoft Account, Bitwarden and iCloud 2FA) in your password manager.&lt;/p&gt;
&lt;p&gt;There’s no tedious searching for accounts/codes and no annoying typing of 6-digit codes each time you want to log into a website. Matching accounts will autmatically be detected by a websites base URL. All you have to do is to choose a matching account for any particular website and press Ctrl + V after the username and password have been auto-filled.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1bOQpqyUFe92Ujs56MwkIEQ.png&#34;
	width=&#34;1505&#34;
	height=&#34;576&#34;
	srcset=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1bOQpqyUFe92Ujs56MwkIEQ_hu_f576f2e5aaf03c3.png 480w, https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1bOQpqyUFe92Ujs56MwkIEQ_hu_6ecfc026b3e73c42.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;261&#34;
		data-flex-basis=&#34;627px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I find that auto-fill with automatic copy/paste of the 2FA is actually even faster than approving a sign-in request on your phone. If you’re using a randomly generated password which is impossible to memorize, you need to use your password manager anyway. Thus, you might as well paste the 2FA code from the password manager as well. When you log into a website or an app on your PC, grabbing your mobile phone is only going to break your flow since you need to pick it up or even take it out of your pants. I for one always choose Bitwarden auto-fill over accepting sign-in requests on my phone.&lt;/p&gt;
&lt;h4 id=&#34;secret-key-management-in-bitwarden&#34;&gt;Secret Key Management in Bitwarden
&lt;/h4&gt;&lt;p&gt;If you wish, you can also just store a TOTP without an associated password.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1OAhirvPr9CBNblaE87Bfw.png&#34;
	width=&#34;636&#34;
	height=&#34;891&#34;
	srcset=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1OAhirvPr9CBNblaE87Bfw_hu_5215e0b77d25fe6d.png 480w, https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1OAhirvPr9CBNblaE87Bfw_hu_aa368b049758fcae.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;71&#34;
		data-flex-basis=&#34;171px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;You can safely store secret keys and can always access them again if you want to move them to another app. There’s no need to sign into a website and setup 2FA again. You are your own master of keys.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1Xm0GomzXQCGkjICW8yKWoQ.png&#34;
	width=&#34;636&#34;
	height=&#34;891&#34;
	srcset=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1Xm0GomzXQCGkjICW8yKWoQ_hu_5af555c11bbfcee4.png 480w, https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1Xm0GomzXQCGkjICW8yKWoQ_hu_7b0e0e5fca328aaa.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;71&#34;
		data-flex-basis=&#34;171px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you’re the type of person who likes to organize stuff, you can create as many folders as you like and sort your credentials to fit your needs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1OrrRoyMiBrT2xIjbee9g.png&#34;
	width=&#34;634&#34;
	height=&#34;891&#34;
	srcset=&#34;https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1OrrRoyMiBrT2xIjbee9g_hu_bc6c3b3383965460.png 480w, https://heusser.pro/p/how-to-handle-password-and-2fa-madness-like-a-pro-1647abaf96e6/1OrrRoyMiBrT2xIjbee9g_hu_6124829478e11b8b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;71&#34;
		data-flex-basis=&#34;170px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;multiple-bitwarden-vaults&#34;&gt;Multiple Bitwarden Vaults
&lt;/h4&gt;&lt;p&gt;If the idea of storing passwords and 2FA codes in the same place creeps you out, and you don’t mind manually copying or typing in 2FA codes, you could also consider creating a second Bitwarden Vault (account) with a different master password. With this approach you will lose a lot of convenience and ease of use but a dedicated password manager with support for 2FA codes still provides much more freedom and functionality than a classic authenticator app. But if we’re honest with each other you’re probably going to end up with both vaults synced to your phone anyway.&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h3&gt;&lt;p&gt;If you’re struggling with your password and 2FA management and finding your current usability questionable I recommend the following basic principles to make your life a little easier.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use Microsoft Authenticator only for your personal Microsoft Account, for your main work or school account and for the 2FA code of your password manager. Keep it clean.&lt;/li&gt;
&lt;li&gt;Add all other 2FA codes to your password manager.&lt;/li&gt;
&lt;li&gt;Choose a super strong master password and type it only as often as necessary.&lt;/li&gt;
&lt;li&gt;Use biometric authentication whenever possible.&lt;/li&gt;
&lt;li&gt;Enable 2FA for your password manager.&lt;/li&gt;
&lt;li&gt;Use 2FA wherever possible without any exceptions.&lt;/li&gt;
&lt;li&gt;Make sure that you always have a backup plan in case you forget your master password, or you lose your phone.&lt;/li&gt;
&lt;li&gt;Never save your Microsoft Account password or 2FA code to your password manager.&lt;/li&gt;
&lt;li&gt;Use a different, strong, randomly generated password for each website.&lt;/li&gt;
&lt;li&gt;Follow me on Medium.&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>11 Must-Have Apps for Windows 11</title>
        <link>https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/</link>
        <pubDate>Mon, 14 Nov 2022 23:31:22 +0000</pubDate>
        
        <guid>https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/</guid>
        <description>&lt;p&gt;Today’s blog post is a little bit different. It’s about how I use Windows 11 and some specific apps and features to achieve more. Don’t worry, I still have plenty of topics about Microsoft Teams in my backlog though.&lt;/p&gt;
&lt;p&gt;According to Twitter not everybody likes Windows 11. But perhaps, some people don’t like it because they don’t like change in the first place. I’ve also seen a lot of people use their muscle memory as an excuse for not adopting new ways of doing things. But I believe that trying new things, breaking patterns, and questioning things we’ve been doing a certain way for decades is exactly what keeps our mind fit and helps us get more efficient.&lt;/p&gt;
&lt;p&gt;For example, I’ve been using &lt;strong&gt;Win + R&lt;/strong&gt; &lt;code&gt;cmd&lt;/code&gt; since I can remember. What’s so bad about re-training my mind to enter &lt;code&gt;wt&lt;/code&gt; instead. It’s even shorter!&lt;/p&gt;
&lt;p&gt;While Windows 11 may be far from complete or perfect it’s without doubt the best operating system Microsoft has ever made. It’s pretty clear that from now on Windows 11 will get all the love from Microsoft while Windows 10 sits basically on the side lines. There’s really no point in holding on to it. I’m not even mad that Windows 11 is only supported on 8th-Gen Intel Processors and later. In fact, I like that Microsoft is drawing a line and provides a modern OS for modern systems. I mean, 7th-Gen mobile CPUs are not even Quad-Core and 6th-Gen CPUs don’t even support hardware HEVC decoding. Should we really still be using devices which can’t even play back videos recorded in 4K on a modern iPhone?&lt;/p&gt;
&lt;p&gt;Maybe, I’d have a different opinion on that if not all of my devices except my 1st-Gen Surface Go already had a supported chip. But luckily, they have. I replaced the Surface Go with a Surface Go 3 just a few weeks ago. And that cost me about a third of what a new iPhone would have been.&lt;/p&gt;
&lt;p&gt;If you haven’t already rage-quit this article, let’s take a look at some awesome Windows 11 apps and features.&lt;/p&gt;
&lt;h3 id=&#34;1windows-clipboard&#34;&gt;1—Windows Clipboard
&lt;/h3&gt;&lt;p&gt;Although this feature is also available in recent Windows 10 versions, it’s still noteworthy since not enough people know about it already.&lt;/p&gt;
&lt;p&gt;If you’ve never heard of the shortcut &lt;strong&gt;Windows + V&lt;/strong&gt; drop everything you’re doing and press it now. Turn it on, thank me later.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1Oh4VQGp2IqpptV5rMym1Tw.png&#34;
	width=&#34;540&#34;
	height=&#34;600&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1Oh4VQGp2IqpptV5rMym1Tw_hu_8f5e659ae69da488.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1Oh4VQGp2IqpptV5rMym1Tw_hu_bd761f6d78ea307a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;90&#34;
		data-flex-basis=&#34;216px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Whenever you press Windows + V instead of Ctrl + V Windows will now bring up a history of recently copied text and pictures. You can even pin frequently used text, so you’ll still be able to access it after a reboot. Pinned items are at the bottom of the list. Just press &lt;strong&gt;End&lt;/strong&gt; to quickly get there once the clipboard is open.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1xuyDswgue9OqYGTrjNwe0w.png&#34;
	width=&#34;540&#34;
	height=&#34;600&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1xuyDswgue9OqYGTrjNwe0w_hu_a8f89e68235a8ec1.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1xuyDswgue9OqYGTrjNwe0w_hu_741af32f51f09c63.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;90&#34;
		data-flex-basis=&#34;216px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you want to, you can even synchronize your clipboard to other devices.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1fWRLAHTQ4QSCY7fB5Xsmbw.png&#34;
	width=&#34;1550&#34;
	height=&#34;525&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1fWRLAHTQ4QSCY7fB5Xsmbw_hu_921b121b7d68f253.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1fWRLAHTQ4QSCY7fB5Xsmbw_hu_e9ea7242adc23ab.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;295&#34;
		data-flex-basis=&#34;708px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now go tell your muscle memory that &lt;strong&gt;Win + V&lt;/strong&gt; will replace &lt;strong&gt;Ctrl + V&lt;/strong&gt; from now on.&lt;/p&gt;
&lt;h3 id=&#34;2paste-file-for-fileexplorer&#34;&gt;2—Paste File for File Explorer
&lt;/h3&gt;&lt;p&gt;Believe it or not but I have never used a third-party screenshot app on my own devices. I totally understand why you would use one though.&lt;/p&gt;
&lt;p&gt;Anyway, it doesn’t matter as long as your preferred screenshot tool puts an image into your clipboard. Like &lt;strong&gt;Windows + Shift + S&lt;/strong&gt; does.&lt;/p&gt;
&lt;p&gt;![](9PP2MWPBZFGH you’ll be able to paste a screenshot from clipboard directly into a PNG file. Even though there are other, free alternatives, I decided to buy this app. It supports the modern Windows 11 context menu, looks nice and is able to create files without any confirmation dialogs.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1h4jyGS3ecyt9BRXqfzllw.png&#34;
	width=&#34;382&#34;
	height=&#34;543&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1h4jyGS3ecyt9BRXqfzllw_hu_56a4a783083d437c.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1h4jyGS3ecyt9BRXqfzllw_hu_c10b646796997fce.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;70&#34;
		data-flex-basis=&#34;168px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Bonus Tip:&lt;/em&gt;&lt;/strong&gt; If you’re using a device with a pen or stylus, you can configure its button to take a screenshot.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1ejE4QvkFFVZzlb2dkmyow.png&#34;
	width=&#34;1920&#34;
	height=&#34;1209&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1ejE4QvkFFVZzlb2dkmyow_hu_5330d3edb62dc83b.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1ejE4QvkFFVZzlb2dkmyow_hu_f82af1c121d3ced6.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;158&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;3nanazip&#34;&gt;3—NanaZip
&lt;/h3&gt;&lt;p&gt;Gone are the days where WinRar nagged me to buy their license. I switched to the free alternative &lt;a class=&#34;link&#34; href=&#34;https://www.7-zip.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;7-Zip&lt;/a&gt; years ago. But 7-Zip doesn’t support the modern Windows 11 Context Menu. However, the free Microsoft Store App &lt;a class=&#34;link&#34; href=&#34;https://www.microsoft.com/store/productId/9N8G7TSCL18R&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;NanaZip&lt;/strong&gt;&lt;/a&gt;, which is a fork of 7-Zip does.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1oNsbR0hOYhyO0jMZc1wD3A.png&#34;
	width=&#34;1400&#34;
	height=&#34;1111&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1oNsbR0hOYhyO0jMZc1wD3A_hu_e88e9bcc96352e9d.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1oNsbR0hOYhyO0jMZc1wD3A_hu_8502a1ccee44e7d2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;126&#34;
		data-flex-basis=&#34;302px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;4snippingtool&#34;&gt;4 — Snipping Tool
&lt;/h3&gt;&lt;p&gt;![](Pictures** folder as a PNG file. This kind of replaces some functionality of Paste File for File Explorer. But it also kind of doesn’t since you’ll still be faster if you want to save your screenshot in a specific folder.)&lt;/p&gt;
&lt;p&gt;When you start Snipping Tool, you’ll be presented a Hint about that feature now.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1eHeYqjFSIBlNEc6DQiHw.png&#34;
	width=&#34;759&#34;
	height=&#34;348&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1eHeYqjFSIBlNEc6DQiHw_hu_daa08805b4885b3e.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1eHeYqjFSIBlNEc6DQiHw_hu_58eeb9fa20e18d1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;218&#34;
		data-flex-basis=&#34;523px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Of course, it’s possible to disable this feature if you want to.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1t39H0yinEhMhxSw2HWPh5A.png&#34;
	width=&#34;1920&#34;
	height=&#34;1209&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1t39H0yinEhMhxSw2HWPh5A_hu_8acbdcd6a8f564b8.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1t39H0yinEhMhxSw2HWPh5A_hu_68ec82c04c59f213.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;158&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;5files&#34;&gt;5 — Files
&lt;/h3&gt;&lt;p&gt;Yes, the Windows File Explorer got tabs now. But there’s also a new kid on the block called &lt;a class=&#34;link&#34; href=&#34;https://www.microsoft.com/store/productId/9NGHP3DX8HDX&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;Files&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1xugMUM0zx8CUER2wjSTA.png&#34;
	width=&#34;1920&#34;
	height=&#34;1209&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1xugMUM0zx8CUER2wjSTA_hu_6f9131ab610461d4.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1xugMUM0zx8CUER2wjSTA_hu_32521c4139fac02c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;158&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This third-party file explorer puts a lot of empathies on aesthetic. I use it from time to time, but I don’t want to set it as my default file explorer because that could potentially mess up Windows. One noteworthy thing is that it supports pasting images in clipboard natively. Just click paste or use &lt;strong&gt;Ctrl + V.&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;6microsoft-photos&#34;&gt;6 — Microsoft Photos
&lt;/h3&gt;&lt;p&gt;Photos finally got an update which was long overdue. The latest version also supports displaying your iCloud Photos, if iCloud for Windows is installed. Since I back up my photos to OneDrive (obviously) there are more interesting features and settings to me.&lt;/p&gt;
&lt;p&gt;Ages ago, my go to photo viewers were IrfanView and later Picasa Photo Viewer. I liked that they could be quit by just pressing the &lt;strong&gt;ESC&lt;/strong&gt; button. Up until now, this didn’t work in Photos. But it does now! If you also change the settings and configure the mouse wheel to flick through photos instead of zooming in or out, you’ll have the perfect inbox photo viewer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1Ae77lGfdfP7OLNTUdG4Kg.png&#34;
	width=&#34;1274&#34;
	height=&#34;175&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1Ae77lGfdfP7OLNTUdG4Kg_hu_cbfd23999edfce8d.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1Ae77lGfdfP7OLNTUdG4Kg_hu_d442037242e72842.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;728&#34;
		data-flex-basis=&#34;1747px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Microsoft makes it quite obvious that they’ve acquired &lt;a class=&#34;link&#34; href=&#34;https://www.microsoft.com/store/productId/9P1J8S7CCWWT&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Clipchamp&lt;/a&gt; and that this is the recommended tool for video editing on Windows. However, the free version is limited to 1080p output. The Photos app actually includes a built-in video trim tool. This might seem like something ridiculously unimportant, but the point is that it supports trimming 4K HEVC HDR 60 fps videos.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1fqwenvhrchA1Or5S0yzHg.png&#34;
	width=&#34;1920&#34;
	height=&#34;1209&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1fqwenvhrchA1Or5S0yzHg_hu_aa3968e4e0e5990d.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1fqwenvhrchA1Or5S0yzHg_hu_126114f3a107632.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;158&#34;
		data-flex-basis=&#34;381px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Being able to trim a game clip which I recorded on my Xbox Series X without installing any other software is something which makes me happy. The best part about this is that the trimmed video will retain the original fps and resolution.&lt;/p&gt;
&lt;h3 id=&#34;7windows-terminal&#34;&gt;7—Windows Terminal
&lt;/h3&gt;&lt;p&gt;Windows Terminal is one of my favorite and most used apps on Windows 11. Make sure you set it as your default terminal application to really start using it instead of legacy powershell.exe or cmd.exe.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1hiivDJTccSmk3scCRo22w.png&#34;
	width=&#34;1219&#34;
	height=&#34;123&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1hiivDJTccSmk3scCRo22w_hu_2fd38d19c2106a.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1hiivDJTccSmk3scCRo22w_hu_1ea4528fb8dde6c2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;991&#34;
		data-flex-basis=&#34;2378px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If Windows Terminal is not already installed on your PC or if you don’t see the option to set the default terminal application, you can grab or update it from &lt;a class=&#34;link&#34; href=&#34;https://www.microsoft.com/store/productId/9N0DX20HK701&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Bonus Tip:&lt;/em&gt;&lt;/strong&gt; If you enable &lt;strong&gt;Use parent process directory&lt;/strong&gt; you can make launch Windows Terminal to the current directory. This is especially useful when you want to open PowerShell in the current directory from File Explorer.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1t2yxu21R2hGb58aKwGHJuA.png&#34;
	width=&#34;1735&#34;
	height=&#34;432&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1t2yxu21R2hGb58aKwGHJuA_hu_2d2174231090f08b.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1t2yxu21R2hGb58aKwGHJuA_hu_38623c6d4df8642d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;401&#34;
		data-flex-basis=&#34;963px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Just type &lt;strong&gt;wt&lt;/strong&gt; in the address bar and press Enter.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1kxyvO9gJiEMfe9gTOpnepg.png&#34;
	width=&#34;1300&#34;
	height=&#34;320&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1kxyvO9gJiEMfe9gTOpnepg_hu_841619803496ab40.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1kxyvO9gJiEMfe9gTOpnepg_hu_ee44105018706028.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;406&#34;
		data-flex-basis=&#34;975px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This will launch Windows Terminal directly in that directory, as it was the case when entering &lt;strong&gt;cmd&lt;/strong&gt; or &lt;strong&gt;powershell.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1uwacM84IRbj38t6NzKn6g.png&#34;
	width=&#34;1734&#34;
	height=&#34;267&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1uwacM84IRbj38t6NzKn6g_hu_1621c73ea5a27d19.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1uwacM84IRbj38t6NzKn6g_hu_f40e9068cd0e89f4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;649&#34;
		data-flex-basis=&#34;1558px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;8powertoys&#34;&gt;8 — PowerToys
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://apps.microsoft.com/store/detail/XP89DCGQ3K6VLD&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PowerToys&lt;/a&gt; is so good that Microsoft should seriously consider to just bake some of these features into Windows.&lt;/p&gt;
&lt;p&gt;One of the most powerful features of PowerToys is the &lt;strong&gt;Text Extractor.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1yBUPVZQo4GHTzy8EecUPA.png&#34;
	width=&#34;1752&#34;
	height=&#34;1160&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1yBUPVZQo4GHTzy8EecUPA_hu_fe46270880674c49.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1yBUPVZQo4GHTzy8EecUPA_hu_d1bcb16f4e69d252.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;151&#34;
		data-flex-basis=&#34;362px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Whenever you need to extract Text from an image or when somebody was too lazy and sent you a screenshot instead of plain text, you can use &lt;strong&gt;Win + Shift + T&lt;/strong&gt; to take a screen snipping. This works the same way as taking a screenshot with &lt;strong&gt;Win + Shift S.&lt;/strong&gt; The difference is that instead of an image, the text which is present in an image/on screen will be copied to your clipboard.&lt;/p&gt;
&lt;p&gt;Since Apple introduced OCR for any photo in iOS 15, this is a super awesome feature to have on Desktops as well. It’s even more powerful because you can specify an exact range from which you want to extract text.&lt;/p&gt;
&lt;p&gt;Other noteworthy features are PowerToys Run and Keyboard Manager. For example, if you don’t like the Windows Start Search, you can configure PowerToys Run to launch with &lt;strong&gt;Win + Space.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1RHpK3kv6dMSJYoNL2oMIA.png&#34;
	width=&#34;2880&#34;
	height=&#34;648&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1RHpK3kv6dMSJYoNL2oMIA_hu_7abbe1e2ffeb8d73.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1RHpK3kv6dMSJYoNL2oMIA_hu_34feb29e9c2e7415.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;444&#34;
		data-flex-basis=&#34;1066px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now &lt;strong&gt;Win + Space&lt;/strong&gt; is mapped to language input switching by default. But by leveraging the built-in Keyboard Manager, we can easily remap &lt;strong&gt;Win + Space&lt;/strong&gt; to &lt;strong&gt;Win + Shift + Space.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1jAsbVpwHV0f3saJdVuY9FA.png&#34;
	width=&#34;1232&#34;
	height=&#34;385&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1jAsbVpwHV0f3saJdVuY9FA_hu_3d6259b13efa8913.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1jAsbVpwHV0f3saJdVuY9FA_hu_8470174819e986fd.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;320&#34;
		data-flex-basis=&#34;768px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;After that, we can configure the activation Shortcut of PowerToys run to &lt;strong&gt;Win + Space.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/13HpcypmptvCZ1LT21DosOQ.png&#34;
	width=&#34;1234&#34;
	height=&#34;651&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/13HpcypmptvCZ1LT21DosOQ_hu_1977f8021b804307.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/13HpcypmptvCZ1LT21DosOQ_hu_e77036576bfb0b8a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;189&#34;
		data-flex-basis=&#34;454px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;PowerToys also offers an excellent overview of all its features called &lt;strong&gt;Welcome to PowerToys&lt;/strong&gt; where each feature is explained.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/18NOxGGik1z7FupMFG2uQ.png&#34;
	width=&#34;1632&#34;
	height=&#34;1041&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/18NOxGGik1z7FupMFG2uQ_hu_6646a436ed681294.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/18NOxGGik1z7FupMFG2uQ_hu_e008246febfe26f9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;156&#34;
		data-flex-basis=&#34;376px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;9devtoys&#34;&gt;9—DevToys
&lt;/h3&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.microsoft.com/store/productId/9PGCV4V3BK4W&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DevToys&lt;/a&gt; is a must have Tool for Windows sys admins and developers.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DevToys helps in everyday tasks like formatting JSON, comparing text, testing RegExp. No need to use many untruthful websites to do simple tasks with your data. With Smart Detection, DevToys is able to detect the best tool that can treat the data you copied in the clipboard of your Windows. Compact overlay lets you keep the app in small and on top of other windows. Multiple instances of the app can be used at once.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;It’s essentially a one-stop-shop for all your coding and formatting needs. For example, I just recently copied a JSON template from a PDF which removed all indents. All I had to do to restore them was to paste it into DevToys’ JSON Formatter.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1sYw7XH2QN9Nah0lO2gQlw.png&#34;
	width=&#34;1503&#34;
	height=&#34;1168&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1sYw7XH2QN9Nah0lO2gQlw_hu_3906fc9494c5a9c3.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1sYw7XH2QN9Nah0lO2gQlw_hu_1f4e5ea9c2861a12.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;128&#34;
		data-flex-basis=&#34;308px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;10microsoft-edge&#34;&gt;10—Microsoft Edge
&lt;/h3&gt;&lt;p&gt;Ever since Microsoft Edge (Chromium) has been released, I never touched Chrome again. If you’re part of the people who get annoyed that Microsoft is trying to force Edge on you, I highly encourage you to give in and give it at least try it. It’s worth it.&lt;/p&gt;
&lt;p&gt;I admit that I was a little annoyed at first when Microsoft started advertising new Edge features such as Vertical Tabs or Collections. But once I tried them, there was no going back.&lt;/p&gt;
&lt;p&gt;It’s no secret that Edge uses Google’s Chromium Engine, so some of these features are also available on Chrome. But Edge does have some unique features.&lt;/p&gt;
&lt;h4 id=&#34;vertical-tabs&#34;&gt;Vertical Tabs
&lt;/h4&gt;&lt;p&gt;Vertical Tabs is a feature I only use in certain situations or in certain profiles. For example, when I’m browsing the web in my spare time / not at work, I usually have less than ten open tabs. But sometimes when I’m researching a topic, I suddenly have twenty, thirty or even more open tabs. That’s where vertical tabs come into play.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1GWf99sLNBcyZ7jLCinpQ.png&#34;
	width=&#34;3843&#34;
	height=&#34;2090&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1GWf99sLNBcyZ7jLCinpQ_hu_bfb0a760bbba97d6.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1GWf99sLNBcyZ7jLCinpQ_hu_52de0070525d156d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;183&#34;
		data-flex-basis=&#34;441px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1HdxExt5CiXHykHoKHcAHQ.png&#34;
	width=&#34;3843&#34;
	height=&#34;2090&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1HdxExt5CiXHykHoKHcAHQ_hu_af16c8324f7731ad.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1HdxExt5CiXHykHoKHcAHQ_hu_97c6a9c588887e77.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;183&#34;
		data-flex-basis=&#34;441px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Vertical tabs can be turned on or turned off by the push of a button.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1R3jGd4er0uPgWOFmNVFO6Q.png&#34;
	width=&#34;434&#34;
	height=&#34;290&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1R3jGd4er0uPgWOFmNVFO6Q_hu_7c33d91101e3cec1.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1R3jGd4er0uPgWOFmNVFO6Q_hu_5daa98f2e4ebbb4c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;359px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;tab-search&#34;&gt;Tab Search
&lt;/h4&gt;&lt;p&gt;There’s also a new feature which allows you to search tabs. Just press &lt;strong&gt;Ctrl + Shift + A&lt;/strong&gt; to bring up s search box for open and recently closed tabs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1iwJLsBXxiCg8cu0oyc5cQ.png&#34;
	width=&#34;543&#34;
	height=&#34;408&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1iwJLsBXxiCg8cu0oyc5cQ_hu_5466477c00e3c0a.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1iwJLsBXxiCg8cu0oyc5cQ_hu_31ff657ff54082ba.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;319px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;You can also quickly close open tabs which appear in search.&lt;/p&gt;
&lt;h4 id=&#34;tab-groups&#34;&gt;Tab Groups
&lt;/h4&gt;&lt;p&gt;Did you know that you can also put tabs in a group? To do this, simply drag one tab over another to create a tab group.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1jqV778IaTfAm0EW2nZfg.png&#34;
	width=&#34;973&#34;
	height=&#34;58&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1jqV778IaTfAm0EW2nZfg_hu_4947b6b73a786326.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1jqV778IaTfAm0EW2nZfg_hu_f383730682af3f9d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1677&#34;
		data-flex-basis=&#34;4026px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This feature looks much better in vertical tabs though.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1GT34joDrSJGLQ7us3FMtQ.png&#34;
	width=&#34;381&#34;
	height=&#34;698&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1GT34joDrSJGLQ7us3FMtQ_hu_50c6e8e3ecdf63a4.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1GT34joDrSJGLQ7us3FMtQ_hu_6b37fac1533c6365.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;54&#34;
		data-flex-basis=&#34;131px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;collections&#34;&gt;Collections
&lt;/h4&gt;&lt;p&gt;Collections was one of the features where I first thought that Microsoft should just stop and try to force it on me. Until I tried it. So many people still rely on favorites. As you can tell from the screenshots, so do I. But favorites can get messy over time. I don’t know how many times I bookmarked a site just because I thought I might need it again, even if that day is possibly still years away. Adding a site which I won’t access many times or never again to my favorites seems a bit like defeating the purpose, doesn’t it?&lt;/p&gt;
&lt;p&gt;That’s why we have collections now. I use them for almost every type of website. For example, I have a collection for useful PowerShell articles or Stack Overflow threads, one for important Microsoft Learn articles. And I also have some temporary collections where I store items which I might want to purchase.&lt;/p&gt;
&lt;p&gt;There are different ways of adding websites to collections. Simply press the collections icon and click the &lt;strong&gt;plus sign&lt;/strong&gt; to add the current tab to an existing collection or start a new one.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1uU7GDp25A25K4HZi5Jc32Q.png&#34;
	width=&#34;542&#34;
	height=&#34;314&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1uU7GDp25A25K4HZi5Jc32Q_hu_b12520744747ddd6.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1uU7GDp25A25K4HZi5Jc32Q_hu_c4f842f8ea61df1c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;172&#34;
		data-flex-basis=&#34;414px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;You can also create a new collection from an open tab group.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1VxNXMu2vcmu905PIraejA.png&#34;
	width=&#34;699&#34;
	height=&#34;536&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1VxNXMu2vcmu905PIraejA_hu_770a2132e762aa23.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1VxNXMu2vcmu905PIraejA_hu_ca156884599b8986.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;130&#34;
		data-flex-basis=&#34;312px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Or you can open all pages of a collection straight into a tab group.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1NtA35eIXxGgAQaQ2rQQETw.png&#34;
	width=&#34;688&#34;
	height=&#34;396&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1NtA35eIXxGgAQaQ2rQQETw_hu_79e99399fd828a5a.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1NtA35eIXxGgAQaQ2rQQETw_hu_d0a4aa6c9642be2d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;173&#34;
		data-flex-basis=&#34;416px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/17lWlKEWfM9Pp52I9XebpnQ.png&#34;
	width=&#34;380&#34;
	height=&#34;712&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/17lWlKEWfM9Pp52I9XebpnQ_hu_5b81cd330ac3011e.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/17lWlKEWfM9Pp52I9XebpnQ_hu_93162ba23a65a9fa.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;53&#34;
		data-flex-basis=&#34;128px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It’s even possible to add notes to collections. This is super useful if you’re researching a topic for school or work. A collection might contain websites from the same domain or even use the same fav icon. With notes it will be easier to find the correct link again.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1RhcEfB6P9b1KGQL31T8SMw.png&#34;
	width=&#34;528&#34;
	height=&#34;458&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1RhcEfB6P9b1KGQL31T8SMw_hu_84178a75b053d874.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1RhcEfB6P9b1KGQL31T8SMw_hu_abbeaf590645482e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;115&#34;
		data-flex-basis=&#34;276px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;qr-codeshare&#34;&gt;QR Code Share
&lt;/h4&gt;&lt;p&gt;Another cool feature is the ability to generate a QR code for a specific website. Just press the QR icon in the address bar.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1BdthS5BWStaEZnQZl6bSZg.png&#34;
	width=&#34;1917&#34;
	height=&#34;175&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1BdthS5BWStaEZnQZl6bSZg_hu_b3e9c3a5d6f7bf43.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1BdthS5BWStaEZnQZl6bSZg_hu_a70b7cb54472f2ba.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1095&#34;
		data-flex-basis=&#34;2629px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This will create a neat little QR code which points to the website.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1MwLbNC0mt1GHk6oSCTSgQ.png&#34;
	width=&#34;478&#34;
	height=&#34;637&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1MwLbNC0mt1GHk6oSCTSgQ_hu_5a0da90245c3c58b.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1MwLbNC0mt1GHk6oSCTSgQ_hu_2b1e9860eaff6091.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;75&#34;
		data-flex-basis=&#34;180px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;profiles&#34;&gt;Profiles
&lt;/h4&gt;&lt;p&gt;Profiles are without doubt one of the most useful features for browsers if they’re properly configured.&lt;/p&gt;
&lt;p&gt;Let’s say somebody at work sends you a YouTube video and you have Edge configured to open links with your work profile by default, but your personal profile is logged into your Google Account with a YouTube Premium Subscription.&lt;/p&gt;
&lt;p&gt;There’s no need to copy the URL and paste it in your personal profile. It’s super easy to just right click the tab and select &lt;strong&gt;Move tab to Personal.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1N284pIv48z5dKIHUyefXRw.png&#34;
	width=&#34;1048&#34;
	height=&#34;333&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1N284pIv48z5dKIHUyefXRw_hu_f330ffa2c6bf3030.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1N284pIv48z5dKIHUyefXRw_hu_3f76948cb6fabef1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;314&#34;
		data-flex-basis=&#34;755px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In settings, you can configure specific sites to always use a specific profile. The next time you open a YouTube link, it will automatically open in your personal profile.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/128tkUX31kfBuCymljKkw.png&#34;
	width=&#34;1305&#34;
	height=&#34;979&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/128tkUX31kfBuCymljKkw_hu_5e8673e61c0bdb24.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/128tkUX31kfBuCymljKkw_hu_746cd4093481e152.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;319px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;microsoft-editor&#34;&gt;Microsoft Editor
&lt;/h4&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://microsoftedge.microsoft.com/addons/detail/microsoft-editor-spellin/hokifickgkhplphjiodbggjmoafhignh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Microsoft Editor&lt;/a&gt; is another example of why we need to be able to change and adapt to modern technology. For years we have &lt;strong&gt;right clicked&lt;/strong&gt; on words which are underlined in red. Because that’s just how it worked. But so much more is done in a browser nowadays, and thus we need to use a &lt;strong&gt;left click&lt;/strong&gt; now. It took me a few weeks to adjust but now I can’t imagine living without Editor anymore.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1JnIAi29rDRxZcUYTxyfww.png&#34;
	width=&#34;1045&#34;
	height=&#34;424&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1JnIAi29rDRxZcUYTxyfww_hu_30ff15fd068b2215.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1JnIAi29rDRxZcUYTxyfww_hu_f7381dc82c080381.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;246&#34;
		data-flex-basis=&#34;591px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;11clipt&#34;&gt;11 — Clipt
&lt;/h3&gt;&lt;p&gt;![https://chrome.google.com/webstore/detail/clipt/ngpicahlgepngcpigiiebnheihgbaenh]( is a Chromium Extension with a companion app on iOS and Android. The extension also works with Microsoft Edge. Instead of using WhatsApp or any other chat or email service to synchronize content between your devices, Clipt uses an encrypted file on your Google Drive to sync content.)&lt;/p&gt;
&lt;p&gt;Copy any text on your phone and &lt;strong&gt;send&lt;/strong&gt; it through the Clipt App.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1APTOJE6PnCJ87FqiaDRhog.png&#34;
	width=&#34;750&#34;
	height=&#34;1334&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1APTOJE6PnCJ87FqiaDRhog_hu_aef0a407b88896e5.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1APTOJE6PnCJ87FqiaDRhog_hu_c22e24f5294f84eb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;56&#34;
		data-flex-basis=&#34;134px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;On your PC, you will receive a notification from Clipt and you will be able to paste what you just copied on your mobile without any further interaction.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1FUCvIBj9X649aFgD8xuBkw.png&#34;
	width=&#34;546&#34;
	height=&#34;225&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1FUCvIBj9X649aFgD8xuBkw_hu_9f122baf545d96e7.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1FUCvIBj9X649aFgD8xuBkw_hu_fd674e91c053092.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;242&#34;
		data-flex-basis=&#34;582px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Of course, it’s also possible to send content the other way around.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1NeoEtRJcOjmoy9TU2G8GjQ.png&#34;
	width=&#34;1609&#34;
	height=&#34;238&#34;
	srcset=&#34;https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1NeoEtRJcOjmoy9TU2G8GjQ_hu_2b8e322b78e2b43b.png 480w, https://heusser.pro/p/11-must-have-apps-for-windows-11-2c362809db3/1NeoEtRJcOjmoy9TU2G8GjQ_hu_5b1e5fafb28cc321.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;676&#34;
		data-flex-basis=&#34;1622px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you enable auto copy in Clipt settings, everything you copy on your PC will be synced with your phone automatically.&lt;/p&gt;
&lt;h3 id=&#34;final-notes&#34;&gt;Final Notes
&lt;/h3&gt;&lt;p&gt;These are 11 awesome Windows 11 Apps I use almost daily. I get that change can be hard, but technology is changing faster than ever. If we don’t keep up with it, we’ll lose out eventually. Microsoft is developing new features and changing things for a reason. Maybe not all changes that Microsoft has made to Windows 11 are completely understandable by an average user&amp;rsquo;s point of view — but for most of them there’s another, easy, even easier or just as easy way of doing it — if you’re willing to work on yourself and embrace change.&lt;/p&gt;
&lt;p&gt;The one change people absolutely hated was that it’s not possible to open Task Manager from the task bar anymore. While those in question spent their time shouting about it on Twitter, I’ve long trained my brain to just use &lt;strong&gt;Ctrl + Shift + Esc&lt;/strong&gt; to open Task Manager. Even when Microsoft brings this functionality back, I will most likely just continue to use the shortcut instead.&lt;/p&gt;
&lt;p&gt;I hope that I was able to tell you about some stuff you didn’t know already and that it helps you too to be more productive.&lt;/p&gt;
&lt;p&gt;To many awesome Windows 11 updates, eliminating those legacy interfaces and dialogs one at a time.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Everything You Ever Wanted to Know About Teams Holidays</title>
        <link>https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/</link>
        <pubDate>Mon, 31 Oct 2022 20:12:56 +0000</pubDate>
        
        <guid>https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/</guid>
        <description>&lt;p&gt;Can you believe that it’s already the last day of October and that so far, I’ve only published &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/how-to-handle-microsoft-graph-paging-in-powershell-354663d4b32a&#34; &gt;one article&lt;/a&gt; this month? And it wasn’t even about Teams…&lt;/p&gt;
&lt;p&gt;Let me change that. We’re almost at the end of the year already. You know what that means, right? Holidays! But before we can go on Holiday we need to add or update them on our Teams Auto Attendants. That’s exactly what I’m going to write about today.&lt;/p&gt;
&lt;h3 id=&#34;best-practices&#34;&gt;Best Practices
&lt;/h3&gt;&lt;p&gt;Beware, these are not best practices which are documented anywhere officially. The recommendations outlined in this blog post are based on my learnings from working with Teams Auto Attendants in the past years.&lt;/p&gt;
&lt;p&gt;When you start planning or configuring Holidays in Teams, the first question you should ask yourself is the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Do you want to treat every Holiday the same, or do you want to treat some holidays differently?&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This applies to both actions and greetings. The greeting, of course, is the message which will be played back when somebody calls you on a Holiday. The action is what the Auto Attendant will do in terms of call routing on that Holiday. Examples are, disconnect, forward to voicemail, a person in your organization or to an external number.&lt;/p&gt;
&lt;h4 id=&#34;greetings&#34;&gt;Greetings
&lt;/h4&gt;&lt;p&gt;Depending on the answer to our core question, you either need one generic greeting which applies to all Holidays, or you need a different greeting for each or at least for some Holidays.&lt;/p&gt;
&lt;p&gt;A reason for an individual greeting per Holiday could be that you want to be very specific and include information when your company will resume business as usual.&lt;/p&gt;
&lt;p&gt;If you opt for a generic greeting, I always tell my customers that their greeting should mention something like this.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Thank you for your call. Due to a Holiday, our office remains closed for today. Please try us again on the next &lt;strong&gt;working day&lt;/strong&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The key take-away here is to use &lt;strong&gt;working day&lt;/strong&gt; rather than tomorrow or the next day, since this could also be a Saturday or a Sunday.&lt;/p&gt;
&lt;h4 id=&#34;actions&#34;&gt;Actions
&lt;/h4&gt;&lt;p&gt;An action is where you configure what should happen to inbound calls which are received on Holidays. These are configured inside a so-called holiday call handling.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1tp1XcM6lXY00lfbcb5vrw.png&#34;
	width=&#34;1384&#34;
	height=&#34;1024&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1tp1XcM6lXY00lfbcb5vrw_hu_d4a17f3d718385e8.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1tp1XcM6lXY00lfbcb5vrw_hu_2be32433f9d793dc.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;135&#34;
		data-flex-basis=&#34;324px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In TAC, actions are called &lt;strong&gt;Call routing options.&lt;/strong&gt; In PowerShell they’re referred to as &lt;strong&gt;Action.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1XPAcx1D2AiEG7QC9MyeGzg.png&#34;
	width=&#34;751&#34;
	height=&#34;298&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1XPAcx1D2AiEG7QC9MyeGzg_hu_141e7d984578407f.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1XPAcx1D2AiEG7QC9MyeGzg_hu_7f5fdd9c356518f0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;252&#34;
		data-flex-basis=&#34;604px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;scope&#34;&gt;Scope
&lt;/h4&gt;&lt;p&gt;Please note that the settings described in this article only apply to Auto Attendants. It’s currently not possible with Teams native features to configure a global schedule for all of your company’s numbers or to configure Holidays for Teams Users. To achieve something like this, you need to use Direct Routing and an SBC which offers time-based routing, like &lt;a class=&#34;link&#34; href=&#34;https://www.anynode.de/technical-data/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Anynode&lt;/a&gt; does for example.&lt;/p&gt;
&lt;p&gt;Again, if you treat all your Holidays the same, for example play back a message and then forward to voicemail, your configuration will be much easier to build and maintain. You will only need to update the schedules once a year. There’s no need to touch the call handlings again with this approach.&lt;/p&gt;
&lt;h4 id=&#34;holiday-lists&#34;&gt;Holiday Lists
&lt;/h4&gt;&lt;p&gt;The third thing we need is a Holiday list. The terminology might be a little confusing here. In TAC they’re simply called &lt;strong&gt;Holidays.&lt;/strong&gt; In &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/powershell/module/skype/new-csonlineschedule?view=skype-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PowerShell&lt;/a&gt; they’re called &lt;strong&gt;Schedules.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If we add a new Holiday in TAC, it uses the singular form Holiday, even though this can have multiple entries. This essentially makes it a Holiday list from my point of view.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1aEtINYXUX2i7UtbWDzbzbA.png&#34;
	width=&#34;1277&#34;
	height=&#34;269&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1aEtINYXUX2i7UtbWDzbzbA_hu_9df8b344a323d19a.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1aEtINYXUX2i7UtbWDzbzbA_hu_8b4f41f1ebc621cb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;474&#34;
		data-flex-basis=&#34;1139px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;While Holidays can be created from inside the configuration menu of an Auto Attendant, these lists are actually stored outside of an Auto Attendant. You can find them in Teams Admin Center under &lt;a class=&#34;link&#34; href=&#34;https://admin.teams.microsoft.com/company-wide-settings/holidays&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;Voice\Holidays&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1hVJdRxmQDMLykXkxp0GEsg.png&#34;
	width=&#34;2174&#34;
	height=&#34;760&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1hVJdRxmQDMLykXkxp0GEsg_hu_93395874ac3ce712.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1hVJdRxmQDMLykXkxp0GEsg_hu_567a2f72a7fc0990.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;286&#34;
		data-flex-basis=&#34;686px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;A Holiday list can be linked to multiple Auto Attendants. Because of that, I recommend to always edit Holiday schedules under &lt;a class=&#34;link&#34; href=&#34;https://admin.teams.microsoft.com/company-wide-settings/holidays&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;strong&gt;Voice\Holidays&lt;/strong&gt;&lt;/a&gt; and not directly on the Attendant itself. This should minimize mistakes and confusion.&lt;/p&gt;
&lt;p&gt;I don’t recommend including the year into the schedule’s name. The year is already included in each entry. Besides that, it’s also highly likely that you will have a Holiday for New Year&amp;rsquo;s Eve which overlaps into the next year which kind of messes with the naming scheme.&lt;/p&gt;
&lt;h4 id=&#34;limits&#34;&gt;Limits
&lt;/h4&gt;&lt;p&gt;A Holiday list can have up to ten entries. And an Auto Attendant can have up to 20 Holiday call handlings. While I haven’t verified this, it means that in theory, you should be able to have a maximum of 200 Holidays per Auto Attendant, assuming that each entry only spans one day. Only having 165 working days, what a life that would be.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/19kci3K5qI70JBfn20eY1tQ.png&#34;
	width=&#34;1073&#34;
	height=&#34;721&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/19kci3K5qI70JBfn20eY1tQ_hu_af5bc53cf8e20f01.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/19kci3K5qI70JBfn20eY1tQ_hu_47ab5379d3ce284a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;148&#34;
		data-flex-basis=&#34;357px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;understanding-thedates&#34;&gt;Understanding The Dates
&lt;/h4&gt;&lt;p&gt;A Holiday consists of a start and end date and a start and end time. This means that we can also configure partial Holidays which for example start at noon or later. Our Auto Attendant might have business hours which allow calls to get through until 5 p.m. If we configure a Holiday to start at 4 p.m. we can close the lines 1 hour earlier without touching our business hours.&lt;/p&gt;
&lt;p&gt;The end date and time is usually 12:00 a.m. of the following day. So, if we want to close the Auto Attendant for the entire day on October 31st, we configure the Holiday like this:&lt;/p&gt;
&lt;p&gt;Start: 31.10.2022 12:00 AM&lt;br&gt;
End: 01.11.2022 12:00 AM&lt;/p&gt;
&lt;p&gt;This is &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/microsoftteams/set-up-holidays-in-teams&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;documented&lt;/a&gt; and recommended by Microsoft.&lt;/p&gt;
&lt;p&gt;When the new day begins, the Auto Attendant will go back to evaluating business hours as usual.&lt;/p&gt;
&lt;p&gt;It’s important to point out that Holiday lists do not store any information about time zones. Time zones are configured on Auto Attendants. Remember that the same list can be associated with multiple Auto Attendants. This allows you to have consolidated Holiday lists which automatically adjust to the relevant time zones based on the Auto Attendant configuration.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1GvD76p2agULlleuMkd3A.png&#34;
	width=&#34;959&#34;
	height=&#34;229&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1GvD76p2agULlleuMkd3A_hu_6abd6dcdd31f09da.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1GvD76p2agULlleuMkd3A_hu_dd9a213e26510887.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;418&#34;
		data-flex-basis=&#34;1005px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;configuring-holidays-on-an-auto-attendant&#34;&gt;Configuring Holidays on an Auto Attendant
&lt;/h4&gt;&lt;p&gt;If you create a new call handling for an Auto Attendant, you need to select a Holiday (list/schedule) from your Holidays. This again means that if you want to have an individual greeting or action per Holiday, you can only have one Holiday per list. Thus, you need to take the limit of twenty call handlings per Attendant into consideration.&lt;/p&gt;
&lt;p&gt;If you need to configure more than twenty call handlings, you will need to update the configuration sometime during the year. Without removing call handlings of past Holidays, you won’t be able to add new ones for the rest of the year.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1J4pgmSGCkJ9VPULBb1fpJw.png&#34;
	width=&#34;975&#34;
	height=&#34;1006&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1J4pgmSGCkJ9VPULBb1fpJw_hu_1917439bd23589bd.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1J4pgmSGCkJ9VPULBb1fpJw_hu_5e1a32495f47b239.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;96&#34;
		data-flex-basis=&#34;232px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When I built my first Auto Attendants many years ago, I used to include the year in the name of the call handling. This was an awfully bad idea, and I learned my lesson. I had to update all the schedules and all call handling names.&lt;/p&gt;
&lt;p&gt;Because of the administrative overhead, I usually recommend my customers to have one list for dynamic Holidays and one for fixed Holidays. Since I came up with these terms on my own, I’m not sure if they’re popular. But they should be self-explanatory. Dynamic days are the ones which occur e.g., every third Monday of April. Fixed days are the ones which fall on the same day each year. E.g., Fourth of July. Because there are usually more than ten Holidays in a year, we need two lists anyway. Splitting between dynamic and fixed days seemed like the most obvious way to me.&lt;/p&gt;
&lt;p&gt;If you have more than ten fixed or dynamic Holidays, you can just create a second list and add a call handling with the same settings for those days as well. There’s no way around that.&lt;/p&gt;
&lt;p&gt;Editing a Holiday will open its own sub menu which has a &lt;strong&gt;Save&lt;/strong&gt; button. Never forget to also click &lt;strong&gt;Submit&lt;/strong&gt; on the Auto Attendant after you have saved a Holiday call handling. If you don’t save the Auto Attendant as well, changes to your Holidays won’t be saved.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1RyzPgNVfqMPskxGV6CrDaw.png&#34;
	width=&#34;1229&#34;
	height=&#34;643&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1RyzPgNVfqMPskxGV6CrDaw_hu_c28852539acd6401.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1RyzPgNVfqMPskxGV6CrDaw_hu_cb1967e227308797.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;191&#34;
		data-flex-basis=&#34;458px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;some-exceptions&#34;&gt;Some Exceptions
&lt;/h4&gt;&lt;p&gt;If your company also has annual Holidays, which typically last one or two weeks, I suggest creating a separate list and call handling for these weeks.&lt;/p&gt;
&lt;p&gt;You can create one entry for the entire timespan and configure a custom greeting because it isn’t obvious when the next working day will be.&lt;/p&gt;
&lt;p&gt;Also, you can’t create multiple call handlings with the same start time on the same Auto Attendant. However, it is possible to create Holidays, where one Holiday occurs during another, multi-day Holiday. To test this, I’ve created the following Holidays.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1DofZ4VAaXsLi6YarxKEvg.png&#34;
	width=&#34;1066&#34;
	height=&#34;296&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1DofZ4VAaXsLi6YarxKEvg_hu_a914252474b03a37.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1DofZ4VAaXsLi6YarxKEvg_hu_72af2991710c5991.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;360&#34;
		data-flex-basis=&#34;864px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The date 31.10.2022 is also in the range of the following Holiday which starts one day before, on 30.10.2022.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1iBXZ4wDNepWvZvBEgTQj7A.png&#34;
	width=&#34;1069&#34;
	height=&#34;290&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1iBXZ4wDNepWvZvBEgTQj7A_hu_b54c2fce2ebb0088.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1iBXZ4wDNepWvZvBEgTQj7A_hu_e174a64da39a58d7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;368&#34;
		data-flex-basis=&#34;884px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Next, I created another Holiday which wraps around both previous Holidays.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1vFgMTWt3euwkq5lI0j7U5A.png&#34;
	width=&#34;1279&#34;
	height=&#34;359&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1vFgMTWt3euwkq5lI0j7U5A_hu_5688fb5032a66a67.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1vFgMTWt3euwkq5lI0j7U5A_hu_923f8ef6a2d0cefe.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;356&#34;
		data-flex-basis=&#34;855px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I then created a call handling for each of them.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1iVxHOpIvLdlMXHRwAqnIxw.png&#34;
	width=&#34;1226&#34;
	height=&#34;599&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1iVxHOpIvLdlMXHRwAqnIxw_hu_3043800737f9a9f7.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1iVxHOpIvLdlMXHRwAqnIxw_hu_228c48abedf1aee5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;204&#34;
		data-flex-basis=&#34;491px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;To find out, which call handling is effective, I called my Auto Attendant. Because I’ve configured a different greeting for each of them, I was able to easily determine which one was active.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1Wec7TKqb5GlOaz8mQFFDuA.png&#34;
	width=&#34;863&#34;
	height=&#34;456&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1Wec7TKqb5GlOaz8mQFFDuA_hu_ad503dc534699e19.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1Wec7TKqb5GlOaz8mQFFDuA_hu_831fb3bf5a9a56a4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;189&#34;
		data-flex-basis=&#34;454px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It turns out, that Teams is smart enough to always prioritize the one which is the most precise. In this case, it’s the one which only includes a single day.&lt;/p&gt;
&lt;p&gt;To be absolutely sure, I even removed the other two call handlings and saved the Auto Attendant. I then added them again to see if the order in which they are configured makes a difference, but it doesn’t.&lt;/p&gt;
&lt;p&gt;Im not sure if this will be a feature that anyone will ever need but it’s still good to know. In theory we could set up a Holiday for an entire week but still have a different greeting and/or action on e.g. Wednesday if we configure a separate Holiday for it.&lt;/p&gt;
&lt;h4 id=&#34;further-reading&#34;&gt;Further Reading
&lt;/h4&gt;&lt;p&gt;If you’ve found these insights about Auto Attendants and Holidays useful, please also see &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471&#34; &gt;this article&lt;/a&gt;, where I explain how the entire process of updating (not creating) schedules can be outsourced to users without granting them Teams Administrator rights.&lt;/p&gt;
&lt;p&gt;And of course, Holiday Tables which are configured on an Auto Attendant can also be visually displayed using the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;M365 Call Flow Visualizer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Based on feedback from the community, I’ve added the name of the call handling and the linked Holiday list to the diagram for more clarity.&lt;/p&gt;
&lt;p&gt;You can see that there’s a name for both the &lt;strong&gt;Call Handling&lt;/strong&gt; and the linked &lt;strong&gt;Holiday Schedule&lt;/strong&gt; in the flow chart**.**&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1FpF50ssn2tmTJPC7zAbeSQ.png&#34;
	width=&#34;1357&#34;
	height=&#34;1584&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1FpF50ssn2tmTJPC7zAbeSQ_hu_b4e766564a623bd4.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-holidays-2b5374667743/1FpF50ssn2tmTJPC7zAbeSQ_hu_6c19e90cbe9602d3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;85&#34;
		data-flex-basis=&#34;205px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;final-note&#34;&gt;Final Note
&lt;/h4&gt;&lt;p&gt;In Teams Admin Center, Holidays are chronologically configured and displayed after the business hours have been configured. But in practice, any Holiday gets prioritized over business hours. The M365 Call Flow Visualizer correctly represents this in its diagram outputs.&lt;/p&gt;
&lt;p&gt;I hope that this article helps you prepare for the Holidays so that you can leave for the Holidays with the peace of mind you need.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>How To Handle Microsoft Graph Paging in PowerShell</title>
        <link>https://heusser.pro/p/how-to-handle-microsoft-graph-paging-in-powershell-354663d4b32a/</link>
        <pubDate>Tue, 11 Oct 2022 16:10:04 +0000</pubDate>
        
        <guid>https://heusser.pro/p/how-to-handle-microsoft-graph-paging-in-powershell-354663d4b32a/</guid>
        <description>&lt;p&gt;Even though Microsoft Graph has been around for some years now, I’m going out on a limb here and say that it’s still quite new to a lot of engineers. This article won’t cover basic topics like what Graph is or how to get started. It focuses on a rather specific topic with which I struggled with at first: &lt;strong&gt;pagination (also known as paging&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-handle-microsoft-graph-paging-in-powershell-354663d4b32a/1Wt4AThn1lsDlW0eFYohd9g.jpeg&#34;
	width=&#34;2288&#34;
	height=&#34;2037&#34;
	srcset=&#34;https://heusser.pro/p/how-to-handle-microsoft-graph-paging-in-powershell-354663d4b32a/1Wt4AThn1lsDlW0eFYohd9g_hu_d43f6fda6b77d574.jpeg 480w, https://heusser.pro/p/how-to-handle-microsoft-graph-paging-in-powershell-354663d4b32a/1Wt4AThn1lsDlW0eFYohd9g_hu_57b2731c92eefcb4.jpeg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;112&#34;
		data-flex-basis=&#34;269px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;As the name suggests, we’re talking about multiple pages of results, if a response is too large for one request/response or if the page size is “hardcoded” by Microsoft. Microsoft also offers a &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/odata/client/pagination&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;dedicated article&lt;/a&gt; on Microsoft Learn about that.&lt;/p&gt;
&lt;p&gt;For example, if we want to query all the users in an Azure AD tenant and that tenant has 10&#39;000 users, it wouldn’t make sense to return all these objects in a single request.&lt;/p&gt;
&lt;p&gt;Let’s continue with the example of querying an organization’s Azure AD users. The official documentation, which also includes a note about the default page size can be found &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/graph/api/user-list?view=graph-rest-1.0&amp;amp;tabs=http#optional-query-parameters&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The default and maximum page sizes are 100 and 999 user objects respectively.&lt;/p&gt;
&lt;p&gt;This means that if we make a request like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$aadUsers2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-RestMethod&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://graph.microsoft.com/v1.0/users&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$Header&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Graph will only return the first 100 users, even though we didn’t include any filter in the request URL.&lt;/p&gt;
&lt;p&gt;If there are less than 100 users, all users will be returned of course. We can see that this is the case because the variable &lt;code&gt;$aadUsers2&lt;/code&gt; does not contain an &lt;code&gt;@odata.nextLink&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-handle-microsoft-graph-paging-in-powershell-354663d4b32a/1BcaLfQ6GqY3RFXEIseFjGQ.png&#34;
	width=&#34;913&#34;
	height=&#34;148&#34;
	srcset=&#34;https://heusser.pro/p/how-to-handle-microsoft-graph-paging-in-powershell-354663d4b32a/1BcaLfQ6GqY3RFXEIseFjGQ_hu_d3723f9d2ebd2122.png 480w, https://heusser.pro/p/how-to-handle-microsoft-graph-paging-in-powershell-354663d4b32a/1BcaLfQ6GqY3RFXEIseFjGQ_hu_c925f318d875435c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;616&#34;
		data-flex-basis=&#34;1480px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Because Microsoft Graph uses the OData (&lt;a class=&#34;link&#34; href=&#34;https://www.odata.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Open Data Protocol&lt;/a&gt;) for their REST API, we can also specify the page size by including the &lt;code&gt;$top&lt;/code&gt; filter. In fact, I need to use this to simulate and demonstrate paging because I don’t have more than 100 users in my test tenant.&lt;/p&gt;
&lt;p&gt;In this example, I’m using &lt;code&gt;?`$top=5&lt;/code&gt; to make Graph only return 5 objects per page. The ` before the $ sign is needed to escape the character.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$aadUsers&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Invoke-RestMethod&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Uri&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;https://graph.microsoft.com/v1.0/users?\&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`$&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;top=5&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Headers&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$Header&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Method&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ContentType&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Here we can see that the result now includes an &lt;code&gt;@odata.nextLink&lt;/code&gt; property. If a Get request is made to this URL, we will receive the next 5 users.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-handle-microsoft-graph-paging-in-powershell-354663d4b32a/1fPtkKakBcKkyHil6QVY9w.png&#34;
	width=&#34;1057&#34;
	height=&#34;134&#34;
	srcset=&#34;https://heusser.pro/p/how-to-handle-microsoft-graph-paging-in-powershell-354663d4b32a/1fPtkKakBcKkyHil6QVY9w_hu_9ad7f6e88fcc2eec.png 480w, https://heusser.pro/p/how-to-handle-microsoft-graph-paging-in-powershell-354663d4b32a/1fPtkKakBcKkyHil6QVY9w_hu_50d056dc857f5a94.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;788&#34;
		data-flex-basis=&#34;1893px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In a more realistic scenario, a tenant may have tens of thousands of Azure AD users though. So, setting the top filter to 999 is more realistic but still wouldn’t return all the users. But what if we really need to get all the users?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How can we keep requesting the next page until we have received all the pages/objects?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’ve come up with a very simple solution for this. We’ll just use a do-until loop in PowerShell which will keep requesting the next page via the URL returned by the &lt;code&gt;@odata.nextLink&lt;/code&gt; until there’s no &lt;code&gt;@odata.nextLink&lt;/code&gt; property anymore. Once it’s done, we’ll have all the users in the &lt;code&gt;$allPages&lt;/code&gt; variable. And finally, we set the initial variable &lt;code&gt;$aadUsers&lt;/code&gt; to the value of &lt;code&gt;$allPages&lt;/code&gt;.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/070c44a49274159f66c8b42fb3a2bbf1.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Please be aware that you will need to include your own Authorization Header before you are able to make any requests towards Microsoft Graph. A very comprehensive guide about that can be found &lt;a class=&#34;link&#34; href=&#34;https://adamtheautomator.com/powershell-graph-api/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt; for example.&lt;/p&gt;
&lt;p&gt;For most of these commands, like getting users, there are also PowerShell Modules and Cmdlets available. However, I like to use PowerShell web requests (&lt;code&gt;Invoke-RestMethod&lt;/code&gt; ) to reduce dependencies. This way, I don’t need to install any modules if I ever need to run this code from another system or a serverless Azure Function, for example.&lt;/p&gt;
&lt;p&gt;Let me know what you think. Do you think that’s useful, or have you found a better way to handle paging in Microsoft Graph?&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Updated Calling UI on Teams Desk Phones</title>
        <link>https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/</link>
        <pubDate>Thu, 29 Sep 2022 20:31:53 +0000</pubDate>
        
        <guid>https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/</guid>
        <description>&lt;p&gt;It’s been a while since I’ve used my Yealink MP56 Teams certified Desk Phone. I only bought it for testing purposes anyway… But today I noticed that the call control UI has been completely revamped.&lt;/p&gt;
&lt;p&gt;I’m running Firmware Version 1449/1.0.94.2022090705/0907. (And yes, I used the awesome PowerToys Text Extractor (Win + Shift + T) to copy the text from the screenshot below.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/1GC3ucFmSDUefZHlDJh2Ig.jpeg&#34;
	width=&#34;800&#34;
	height=&#34;480&#34;
	srcset=&#34;https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/1GC3ucFmSDUefZHlDJh2Ig_hu_2ee4f25cdec747bd.jpeg 480w, https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/1GC3ucFmSDUefZHlDJh2Ig_hu_157d03b45d5d580c.jpeg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;166&#34;
		data-flex-basis=&#34;400px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;An incoming call now looks like this. If I remember correctly, the buttons used to be much smaller and located next to each other at the bottom of the screen.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/1AegRntILpLiXhzwKM16Q.jpeg&#34;
	width=&#34;800&#34;
	height=&#34;480&#34;
	srcset=&#34;https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/1AegRntILpLiXhzwKM16Q_hu_6acec01035ccac77.jpeg 480w, https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/1AegRntILpLiXhzwKM16Q_hu_5f763c3ba6bc2fc1.jpeg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;166&#34;
		data-flex-basis=&#34;400px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The in-call controls also feature larger, centered buttons now.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/1ukiZX9MRAIrIca4TTYAQ2Q.jpeg&#34;
	width=&#34;800&#34;
	height=&#34;480&#34;
	srcset=&#34;https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/1ukiZX9MRAIrIca4TTYAQ2Q_hu_2c3c0be3237fb798.jpeg 480w, https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/1ukiZX9MRAIrIca4TTYAQ2Q_hu_eefd5ee7435d9dba.jpeg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;166&#34;
		data-flex-basis=&#34;400px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The transfer button has been moved to the main screen, which means that you’ll need one tap less to initiate a transfer now.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/1Q3TrkssZ05qBSiENlfxM1w.jpeg&#34;
	width=&#34;800&#34;
	height=&#34;480&#34;
	srcset=&#34;https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/1Q3TrkssZ05qBSiENlfxM1w_hu_ae266c16091985c6.jpeg 480w, https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/1Q3TrkssZ05qBSiENlfxM1w_hu_324fa62f52a08327.jpeg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;166&#34;
		data-flex-basis=&#34;400px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/1fu0FAoGzkPiKzst5U9wfQ.jpeg&#34;
	width=&#34;800&#34;
	height=&#34;480&#34;
	srcset=&#34;https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/1fu0FAoGzkPiKzst5U9wfQ_hu_7abec81be55910dd.jpeg 480w, https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/1fu0FAoGzkPiKzst5U9wfQ_hu_91c57c31115002ea.jpeg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;166&#34;
		data-flex-basis=&#34;400px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The menu for the actual transfer / search looks the same in both the new and the old UI.&lt;/p&gt;
&lt;p&gt;You can still bring back the old view by tapping &lt;strong&gt;…More&lt;/strong&gt;. and then &lt;strong&gt;Change view.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/1zKuewvudu7c7RwrJgZKw.jpeg&#34;
	width=&#34;800&#34;
	height=&#34;480&#34;
	srcset=&#34;https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/1zKuewvudu7c7RwrJgZKw_hu_5e01d66808cfbdb3.jpeg 480w, https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/1zKuewvudu7c7RwrJgZKw_hu_95e035cea247ce04.jpeg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;166&#34;
		data-flex-basis=&#34;400px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This will transition into the old UI where everything is located at the bottom of the screen.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/1qE72elvoIwvZ26ObznmP1g.png&#34;
	width=&#34;800&#34;
	height=&#34;480&#34;
	srcset=&#34;https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/1qE72elvoIwvZ26ObznmP1g_hu_ddfbdc6a88876abf.png 480w, https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/1qE72elvoIwvZ26ObznmP1g_hu_fbf564663731a98e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;166&#34;
		data-flex-basis=&#34;400px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Funny enough, there’s no option to switch back to the new look once you’ve changed the view.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/17YI7KnZsSDfyPws1bdWHA.jpeg&#34;
	width=&#34;800&#34;
	height=&#34;480&#34;
	srcset=&#34;https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/17YI7KnZsSDfyPws1bdWHA_hu_7521875a18963c29.jpeg 480w, https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/17YI7KnZsSDfyPws1bdWHA_hu_ace0fc48c502110b.jpeg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;166&#34;
		data-flex-basis=&#34;400px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The only way to get back to the new view is if you tap the &lt;strong&gt;←&lt;/strong&gt; arrow and then &lt;strong&gt;Tap to return to call.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/1GekqCj551lsyzSTrdKAQg.png&#34;
	width=&#34;800&#34;
	height=&#34;97&#34;
	srcset=&#34;https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/1GekqCj551lsyzSTrdKAQg_hu_8b2b1c0495aa1ada.png 480w, https://heusser.pro/p/updated-calling-ui-on-teams-desk-phones-9e8f18790f5a/1GekqCj551lsyzSTrdKAQg_hu_b90a586200a38d2b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;824&#34;
		data-flex-basis=&#34;1979px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This will bring back the revamped UI for the active call. I suspect that the old UI will be removed entirely sooner or later. I don’t see any reason why one would need or want two different calling UIs. I also don’t think that Microsoft wants to maintain two different UIs. Especially if the new one features a lot of improvements and welcome changes.&lt;/p&gt;
&lt;p&gt;Oh, and thanks to MVP James Cussen for the awesome &lt;a class=&#34;link&#34; href=&#34;https://www.myteamslab.com/2020/10/teams-phone-screen-capture-tool.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Teams Phone Screen Capture Tool&lt;/a&gt;.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Report on Teams Call Queue Opt In Status and Assignment Paths</title>
        <link>https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/</link>
        <pubDate>Thu, 29 Sep 2022 17:22:31 +0000</pubDate>
        
        <guid>https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/</guid>
        <description>&lt;p&gt;At the beginning of September, I wrote &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/find-all-auto-attendants-and-call-queues-a-user-is-associated-with-16710c3adf01&#34; &gt;this&lt;/a&gt; article, where I presented a way to quickly see all Call Queues and Auto Attendants any user is associated with by running a PowerShell script.&lt;/p&gt;
&lt;p&gt;Today, we’re going to wrap up September by taking a look at the other way around. We want to see all the agents which are part of a specific queue. Of course, the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;M365 Call Flow Visualizer&lt;/a&gt; will also show this information in the diagram but sometimes all we need is just a plain old CSV file.&lt;/p&gt;
&lt;p&gt;If you’re using a Teams Voice Enabled Channel (also known as Collaborative Calling) you will be able to see which agents are currently opted in to the Queue in the Teams Client.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1sQNinlL8ABHZcYr69HUZ5w.png&#34;
	width=&#34;1896&#34;
	height=&#34;1238&#34;
	srcset=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1sQNinlL8ABHZcYr69HUZ5w_hu_e0c74b08492521ac.png 480w, https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1sQNinlL8ABHZcYr69HUZ5w_hu_3648a4f7f3afdde3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;153&#34;
		data-flex-basis=&#34;367px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;However, this only works for Voice Enabled Channels and only agents which are part of the Queue can see this information. If you’re a Teams Voice Admin like me, you might want to see the opt in status of agents from other queues or check the assignment path (Direct, Groups or Channel) as well. If you’re confused about Call Queues and agent lists, please have a look at &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0&#34; &gt;this&lt;/a&gt; article.&lt;/p&gt;
&lt;h3 id=&#34;the-problem&#34;&gt;The Problem
&lt;/h3&gt;&lt;p&gt;It has always been possible to retrieve some of the information about Call Queue agents by PowerShell. The problem is that the properties of a Call Queue will only display the Object Ids of agents but no Display Names.&lt;/p&gt;
&lt;p&gt;Let’s store the properties of a Call Queue in a variable.&lt;/p&gt;
&lt;p&gt;$callQueue = Get-CsCallQueue -Identity a3b9ffff-f74b-46bb-9743-0c5146a61f31&lt;/p&gt;
&lt;p&gt;We can now view the agent list by accessing the &lt;strong&gt;Agents&lt;/strong&gt; property. This will give us an output which looks like this.&lt;/p&gt;
&lt;p&gt;PS C:\Temp\M365CallFlowVisualizer&amp;gt; $callQueue.Agents&lt;/p&gt;
&lt;p&gt;ObjectId                             OptIn&lt;br&gt;
-&amp;mdash;&amp;mdash;-                             &amp;mdash;&amp;ndash;&lt;br&gt;
61d8b739-2e10-4e47-8e63-e66cc73d0a24  True&lt;br&gt;
fa19b242-8bae-419d-a4eb-12796577c81f  True&lt;br&gt;
76606d0b-4d28-4246-9c08-2a0f95f96141  True&lt;br&gt;
9a7c1bb4-49db-40ee-9d05-26f5dfd338c2  True&lt;/p&gt;
&lt;p&gt;We can also see that two distribution lists (groups) are associated with this Call Queue by entering the following.&lt;/p&gt;
&lt;p&gt;PS C:\Temp\M365CallFlowVisualizer&amp;gt; $callQueue.DistributionLists&lt;/p&gt;
&lt;p&gt;Guid&lt;br&gt;
-&amp;mdash;&lt;br&gt;
57e8de46-1552-4271-9f93-a602216c32ad&lt;br&gt;
942d0869-2713-407d-8b6f-70b946039877&lt;/p&gt;
&lt;p&gt;So far, we only know the Opt In status of the agents (without names) and that there are two groups linked to this Call Queue. But we still don’t know the user principal or display names of the agents, or if they’ve been added to the queue by a group or a direct assignment. If they’ve indeed been added by a group, we also don’t know from which one(s).&lt;/p&gt;
&lt;h3 id=&#34;the-solution&#34;&gt;The Solution
&lt;/h3&gt;&lt;p&gt;I’ve created a PowerShell function inside a script which will give us just that. The script is available on my &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer/blob/main/Functions/Get-CallQueueAgentsStatus.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt; profile. Make sure that you download or clone the whole repository, since this re-uses the &lt;code&gt;Connect-M365CFV&lt;/code&gt; function which is part of the Visualizer. Because some data, like group memberships can’t be retrieved by Teams PS alone, we also need to connect to Microsoft.Graph Powershell and thus need this function.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1mZw6xKKup3ayftvTLiY4kw.png&#34;
	width=&#34;1798&#34;
	height=&#34;483&#34;
	srcset=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1mZw6xKKup3ayftvTLiY4kw_hu_a208d81a7f846132.png 480w, https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1mZw6xKKup3ayftvTLiY4kw_hu_ba9a1d6890174a91.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;372&#34;
		data-flex-basis=&#34;893px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;how-to-run-thescript&#34;&gt;How To Run the Script
&lt;/h4&gt;&lt;p&gt;Basically, all the code is inside a single function. The script has a Cmdlet-Binding with two optional parameters though.&lt;/p&gt;
&lt;p&gt;-CallQueueId&lt;br&gt;
-Export&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;CallQueueId&lt;/strong&gt; can be the Id of any Call Queue. You can copy this from the URL in TAC for example.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1NmlnNylGa7Y9vxBjnjYg.png&#34;
	width=&#34;1143&#34;
	height=&#34;177&#34;
	srcset=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1NmlnNylGa7Y9vxBjnjYg_hu_5b4a5aa2353ca21a.png 480w, https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1NmlnNylGa7Y9vxBjnjYg_hu_5d327253d25fd3e4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;645&#34;
		data-flex-basis=&#34;1549px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you don’t specify an Id, you will be able to select any Call Queue from a list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1V3XpQnRhcbiSGCTMdcrw.png&#34;
	width=&#34;1896&#34;
	height=&#34;474&#34;
	srcset=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1V3XpQnRhcbiSGCTMdcrw_hu_4987ba497758c8df.png 480w, https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1V3XpQnRhcbiSGCTMdcrw_hu_401556e72ac47cd.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;400&#34;
		data-flex-basis=&#34;960px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Export&lt;/strong&gt; is a Validate Set where &lt;strong&gt;WorkingDir&lt;/strong&gt; and &lt;strong&gt;CustomDir&lt;/strong&gt; are valid inputs. &lt;strong&gt;WorkingDir&lt;/strong&gt; will export a CSV file to your current working directory and &lt;strong&gt;CustomDir&lt;/strong&gt; will prompt you to choose a destination folder.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1fJjtD9WrLPnxwvtm6Ocwg.png&#34;
	width=&#34;617&#34;
	height=&#34;744&#34;
	srcset=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1fJjtD9WrLPnxwvtm6Ocwg_hu_e7d993a241837a51.png 480w, https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1fJjtD9WrLPnxwvtm6Ocwg_hu_4e637b17fe01fd99.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;82&#34;
		data-flex-basis=&#34;199px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you don’t include any of the two values, no CSV file will be exported.&lt;/p&gt;
&lt;p&gt;If we want to run the script from the root of the repository, we can do it like this.&lt;/p&gt;
&lt;p&gt;.\Functions\Get-CallQueueAgentsStatus.ps1&lt;/p&gt;
&lt;p&gt;Or like this.&lt;/p&gt;
&lt;p&gt;.\Functions\Get-CallQueueAgentsStatus.ps1 -Export CustomDir -CallQueueId b138ee51-75e0-4c39-b3a8-c14c01170ee0&lt;/p&gt;
&lt;h3 id=&#34;output-of-different-scenarios&#34;&gt;Output of Different Scenarios
&lt;/h3&gt;&lt;p&gt;Let’s check out some examples of the results.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; Here, all the agents are assigned directly.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1bWLc7yMh3ze3I6dpECPVQA.png&#34;
	width=&#34;1896&#34;
	height=&#34;234&#34;
	srcset=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1bWLc7yMh3ze3I6dpECPVQA_hu_ecc602a221a5bc80.png 480w, https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1bWLc7yMh3ze3I6dpECPVQA_hu_5cb15c5adc923277.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;810&#34;
		data-flex-basis=&#34;1944px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1noowArUNCiqMWCqN3KfjQ.png&#34;
	width=&#34;1375&#34;
	height=&#34;633&#34;
	srcset=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1noowArUNCiqMWCqN3KfjQ_hu_daf5c8998477548.png 480w, https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1noowArUNCiqMWCqN3KfjQ_hu_cda7dd915b4cd05c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;217&#34;
		data-flex-basis=&#34;521px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt; This one is a little more interesting. Here we can see that one user is assigned directly, two are assigned by two groups and one is assigned by only one group. We can also see that the first user does not have a direct phone number assigned.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1FeNdBPyrxK0FCUQajL2acA.png&#34;
	width=&#34;1896&#34;
	height=&#34;302&#34;
	srcset=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1FeNdBPyrxK0FCUQajL2acA_hu_a23bf974d6861da7.png 480w, https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1FeNdBPyrxK0FCUQajL2acA_hu_c9390e8ddffad1c4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;627&#34;
		data-flex-basis=&#34;1506px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1VdnttMWdiPNxH4qp5uVjdw.png&#34;
	width=&#34;1373&#34;
	height=&#34;965&#34;
	srcset=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1VdnttMWdiPNxH4qp5uVjdw_hu_e6b27cdc652fa8b.png 480w, https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1VdnttMWdiPNxH4qp5uVjdw_hu_73162ac0d6b1cd0b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;142&#34;
		data-flex-basis=&#34;341px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 3:&lt;/strong&gt; And in this last example, all the agents have the same assignment path. Because only direct (users) and groups can be combined, all the agents are assigned by the same Team and Channel. Last but not least, we can see that the last user is currently not opted in to the queue.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1GGTgZcdZuXLz6WPAavIuQ.png&#34;
	width=&#34;1896&#34;
	height=&#34;266&#34;
	srcset=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1GGTgZcdZuXLz6WPAavIuQ_hu_e168d481d59ecff.png 480w, https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1GGTgZcdZuXLz6WPAavIuQ_hu_11dfda15403977f1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;712&#34;
		data-flex-basis=&#34;1710px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1bTLk3fjZ1Yitj3loiLdRQ.png&#34;
	width=&#34;1376&#34;
	height=&#34;225&#34;
	srcset=&#34;https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1bTLk3fjZ1Yitj3loiLdRQ_hu_27f918dee6c3a82.png 480w, https://heusser.pro/p/report-on-teams-call-queue-opt-in-status-and-assignment-paths-93f177976485/1bTLk3fjZ1Yitj3loiLdRQ_hu_e3849f11b48f3cdb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;611&#34;
		data-flex-basis=&#34;1467px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;As you can see, the output of my script provides a lot of valuable information about Call Queue agents which is nowhere to be found in Teams Admin Center.&lt;/p&gt;
&lt;p&gt;I hope that you enjoy my work and that you too — will find this script useful.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>How To Export a Teams Call Flow to PNG</title>
        <link>https://heusser.pro/p/how-to-export-a-teams-call-flow-to-png-4d38a8c4f183/</link>
        <pubDate>Tue, 13 Sep 2022 16:21:20 +0000</pubDate>
        
        <guid>https://heusser.pro/p/how-to-export-a-teams-call-flow-to-png-4d38a8c4f183/</guid>
        <description>&lt;p&gt;&lt;strong&gt;Update 29.01.2023&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This blog post is now obsolete. The M365 Call Flow Visualizer is now able to directly export PNG files using the &lt;code&gt;-ExportPng $true&lt;/code&gt; parameter. Please make sure to install the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer#install-nodejs-and-mermaid-cli&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;prerequisites&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;/Update&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154&#34; &gt;Back then&lt;/a&gt;, when I thought about making the &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;M365 Call Flow Visualizer&lt;/a&gt; a reality I was looking for a way to generate a diagram from code. And &lt;a class=&#34;link&#34; href=&#34;https://mermaid-js.github.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Mermaid-JS&lt;/a&gt; was the answer. If you’re unfamiliar with Markdown, outputting diagrams to either Markdown, Mermaid or HTML files might look like an odd decision. However, my endgame always was to programmatically generate call flow diagrams and render them on a documentation website built with &lt;a class=&#34;link&#34; href=&#34;https://dotnet.github.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DocFx&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;HTML Output was only added later down the line because I thought that having an option to easily share these files with other, maybe non-tech-savvy people (who wouldn’t know what to do with a *.md file) would be a good option. Having clickable greeting nodes is another benefit of the HTML output option.&lt;/p&gt;
&lt;p&gt;But of course, sometimes images are the easiest way of sharing things or including them in other documents or services such as Email, Word, or OneNote. While I haven’t found a way to automatically export a Teams Call Flow directly to an image, I’m going to show you what I think is the easiest way for the time being.&lt;/p&gt;
&lt;h4 id=&#34;export-topng&#34;&gt;Export to PNG
&lt;/h4&gt;&lt;p&gt;First, install the VS Code Extension &lt;a class=&#34;link&#34; href=&#34;https://marketplace.visualstudio.com/items?itemName=tomoyukim.vscode-mermaid-editor&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Mermaid Editor&lt;/a&gt; from the Marketplace. Once installed, go to the extension settings, and configure them as you see fit. I suggest Type: “png” with a transparent background for the best results.&lt;/p&gt;
&lt;p&gt;Next, run the M365CallFlowVisualizerV2.ps1 script with the &lt;code&gt;-DocType Mermaid&lt;/code&gt; parameter. This will output a Mermaid file instead of Mermaid code inside a Markdown file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;M365CallFlowVisualizerV2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;ps1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-theme&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;custom&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ObfuscatePhoneNumbers&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;$true&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-DocType&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Mermaid&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;In the above exmaple, I’m using the fairly new &lt;code&gt;-ObfuscatePhoneNumbers&lt;/code&gt; parameter as well. This way, I can share call flow diagrams without worrying about getting spam calls to my test numbers.&lt;/p&gt;
&lt;p&gt;In VS Code, navigate to your &lt;code&gt;.\Output&lt;/code&gt; folder and look for the generated &lt;code&gt;*.mmd&lt;/code&gt; (Mermaid) file and open it. You will now see an eye icon in the top right corner of VS Code. Click it.&lt;/p&gt;
&lt;p&gt;This will preview the diagram in split-view.&lt;/p&gt;
&lt;p&gt;Now switch back to the &lt;code&gt;*.mmd&lt;/code&gt; file and notice how a little download icon appears next to the eye icon.&lt;/p&gt;
&lt;p&gt;Click this icon to generate a PNG image from the Mermaid file. The image will be saved to the same directory as the original file.&lt;/p&gt;
&lt;p&gt;Now you have a nice PNG file, including a transparent background of your call flow.&lt;/p&gt;
&lt;h4 id=&#34;appendix&#34;&gt;Appendix
&lt;/h4&gt;&lt;p&gt;I am aware that &lt;a class=&#34;link&#34; href=&#34;https://mermaid.ink&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://mermaid.ink&lt;/a&gt; offers an API to directly output to SVG since I already made use of that to render Teams User &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7&#34; &gt;Calling Settings&lt;/a&gt;. From what I can tell right now, it looks like an encoded call flow is just too big for the API to handle. I’m also looking into &lt;a class=&#34;link&#34; href=&#34;https://github.com/mermaid-js/mermaid-cli&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Mermaid CLI&lt;/a&gt; to see if this can be used in some form or another to make outputting images a little bit easier in the future. I still hope that exporting to PNG gives you more flexibility, even though it’s a manual process.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Automatically Notify Users to Update Teams Holidays for Next Year</title>
        <link>https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/</link>
        <pubDate>Wed, 07 Sep 2022 10:19:11 +0000</pubDate>
        
        <guid>https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/</guid>
        <description>&lt;p&gt;In my last few articles, I’ve talked about building Teams Phone self-service solutions for end users. The reason one might want to do this is quite obvious: We don’t want to give users access to Teams Admin Center but as engineers, we don’t want to take on tedious tasks like updating an Auto Attendant’s Holiday list either.&lt;/p&gt;
&lt;p&gt;Even though pretty much everything that can be configured in TAC, including managing Holidays can be scripted with PowerShell, Holidays still require a fixed date and time range and can’t be renewed automatically or fetched from an external source. This results in a considerable administrative overhead for both Teams admins and end users.&lt;/p&gt;
&lt;p&gt;When I need to configure Teams Holidays, I always ask users to provide a list where each holiday is noted &lt;strong&gt;with an explicit date&lt;/strong&gt;. I’m not going to do the work for them and go look up when exactly a Holiday takes place next year. (For Holidays which don’t have a fixed date at least.) I’ve seen some lazy users try to take a shortcut and tell me to just add “all lawful Bank Holidays” of Country/State/Canton XY. Unfortunately, that’s not how it works my dear users. I’d spend hours looking up this stuff and probably still end up with some wrong dates anyway. That’s why I set out and created a better solution. /rant&lt;/p&gt;
&lt;p&gt;In this article, I’m going to show you a solution where the whole process of &lt;strong&gt;maintaining&lt;/strong&gt; a Holiday List can be outsourced to end users. Admins only need to set up Holidays &lt;strong&gt;once&lt;/strong&gt; initially.&lt;/p&gt;
&lt;h4 id=&#34;recap&#34;&gt;Recap
&lt;/h4&gt;&lt;p&gt;Before we dive in, let’s recap what I’ve published in my last articles to give you some context on Teams self-service solutions using Azure Automation and Adaptive Cards.&lt;/p&gt;
&lt;p&gt;It all began with &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851?source=user_profile---------11----------------------------&#34; &gt;this article&lt;/a&gt; where I wrote about my take on a self-service solution which lets users manually open or close an Auto Attendant. This solution builds on the work of Microsoft MVPs which are linked in the original article.&lt;/p&gt;
&lt;p&gt;I then went on and published &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-self-service-call-queue-solution-part-2-ab8201157831&#34; &gt;this piece&lt;/a&gt; which uses the same principle but lets users enable or disable immediate forwarding to an external number or update the external forwarding target number on a Call Queue.&lt;/p&gt;
&lt;p&gt;We can use these examples and build on them to create something similar for Auto Attendant Holidays.&lt;/p&gt;
&lt;h4 id=&#34;how-does-itwork&#34;&gt;How Does it Work?
&lt;/h4&gt;&lt;p&gt;It’s important to understand that there needs to be an existing, initial configuration in your Tenant. This means that you as a Teams Phone admin need to sit down with the person in charge of the reception phone or whoever oversees Holidays at your company. You then need to configure either a single or multiple Holiday lists in TAC and link them to each Auto Attendant, where they’re required.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1fQcNBnDUDxER2RrRYDd3w.png&#34;
	width=&#34;2190&#34;
	height=&#34;315&#34;
	srcset=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1fQcNBnDUDxER2RrRYDd3w_hu_a34ff7c20d5d1015.png 480w, https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1fQcNBnDUDxER2RrRYDd3w_hu_61258ed5cb342825.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Holiday Schedules in Teams Admin Center&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;695&#34;
		data-flex-basis=&#34;1668px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;My solution currently doesn’t have an option to allow users to add new Holidays to a list. When a new Holiday needs to be added, users must still request the change at IT. After it has been added to the list, there’s no additional work required for the new Holiday to also support user self-serviced updating.&lt;/p&gt;
&lt;p&gt;I created an Azure Runbook which runs on a schedule. I suppose running it weekly will suffice. If you wish, you can even run it daily. The script checks if the difference between the &lt;strong&gt;run time of the Job&lt;/strong&gt; and the &lt;strong&gt;end date&lt;/strong&gt; of a Holiday is bigger than 24 hours. This is because Holiday dates/lists itself don’t have a time zone property. But Auto Attendants do have a time zone setting, thus, we need to make sure that a Holiday is not updated/deleted before the Holiday would end in an Attendant specific time zone. A buffer of 24 hours should work well considering that the largest UTC offset is +14 hours.&lt;/p&gt;
&lt;p&gt;When the script runs, it will send a Teams Message Card to a Channel for each Holiday which now lies in the past. (Even though they are technically &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/outlook/actionable-messages/message-card-reference&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Legacy Actionable Message Cards&lt;/a&gt; I will just refer to them as &lt;a class=&#34;link&#34; href=&#34;https://adaptivecards.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Adaptive Cards&lt;/a&gt; from now on.)&lt;/p&gt;
&lt;p&gt;Members of the channel will be able to see the dates, the name of the Holiday schedule as well as all linked Auto Attendants on the Adaptive Card. Furthermore, the script will add one year to the current dates and pre-fill the dates of next year as a suggested value in the date picker.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1QKq3e17FCDqQEvn5hbJzfg.png&#34;
	width=&#34;1489&#34;
	height=&#34;745&#34;
	srcset=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1QKq3e17FCDqQEvn5hbJzfg_hu_8bf613fc1ff5278e.png 480w, https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1QKq3e17FCDqQEvn5hbJzfg_hu_26f90a362d60f3ec.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;en-US date format&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;199&#34;
		data-flex-basis=&#34;479px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Because we’re using Adaptive Cards, the date format will automatically adjust to the Teams Clients display language. In this example, the Teams Client was set to German (Switzerland).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/15exIWj45WBr92GT2Jut6UQ.png&#34;
	width=&#34;1478&#34;
	height=&#34;737&#34;
	srcset=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/15exIWj45WBr92GT2Jut6UQ_hu_79a531492c2b49e1.png 480w, https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/15exIWj45WBr92GT2Jut6UQ_hu_ec2a6b23b084e7ef.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;de-CH date format&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;200&#34;
		data-flex-basis=&#34;481px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Members can then review and accept the new dates or change them in case a Holiday falls on a different day next year.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1AcxduYIh3KWZjYOITozFQ.png&#34;
	width=&#34;1485&#34;
	height=&#34;794&#34;
	srcset=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1AcxduYIh3KWZjYOITozFQ_hu_89ccbc147532d9f9.png 480w, https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1AcxduYIh3KWZjYOITozFQ_hu_920ce999dd54b327.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Adaptive Card date picker&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;187&#34;
		data-flex-basis=&#34;448px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If needed, they can also configure a start or end time, if for example, a Holiday only starts at noon.&lt;/p&gt;
&lt;p&gt;Finally, they will need to select their local time zone. This is due to the fact that the Adaptive Card will submit the date and time based on the time zone which is configured on the local PC where Teams is running.&lt;/p&gt;
&lt;p&gt;In early testing stages of this solution, “00:00” was always passed to the Azure Function as “23:00” because I live in UTC-1. Without this information the Function wouldn’t be able to do its magic and convert it back to the correct date.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1h3iWOIBo7n33yhjeAHKNow.png&#34;
	width=&#34;1397&#34;
	height=&#34;420&#34;
	srcset=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1h3iWOIBo7n33yhjeAHKNow_hu_975584511ecf471.png 480w, https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1h3iWOIBo7n33yhjeAHKNow_hu_8d704648b4ac1e88.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Adaptive Card drop-down list&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;332&#34;
		data-flex-basis=&#34;798px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I’ve included all time zones which are supported on Windows Systems.&lt;/p&gt;
&lt;p&gt;Now all a user needs to do is to click “Submit New Dates”. This will pass all the information to an Azure Function, Update the card, and fire up the Runbook.&lt;/p&gt;
&lt;p&gt;In other words, users won’t need to bother you to update their Holidays anymore. After each time a Holiday has passed, they will get a card which allows them to update it for next year by themselves.&lt;/p&gt;
&lt;h4 id=&#34;prerequisites&#34;&gt;Prerequisites
&lt;/h4&gt;&lt;p&gt;Just as with my previous articles you need to have the following things ready in Azure.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An Azure Function App so that we can create a new Function&lt;/li&gt;
&lt;li&gt;An Azure Automation Account so we can create 2x new Runbooks&lt;/li&gt;
&lt;li&gt;Azure Automation Credentials with Teams Administrator Permissions&lt;/li&gt;
&lt;li&gt;An Incoming Teams Webhook&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you struggle to set up any of these, I recommend reading my &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851&#34; &gt;first article&lt;/a&gt; about this topic. I also suggest creating a dedicated Teams Channel where the webhook will be added. More on that later.&lt;/p&gt;
&lt;h4 id=&#34;azure-runbook-checkholidayschedules&#34;&gt;Azure Runbook: CheckHolidaySchedules
&lt;/h4&gt;&lt;p&gt;Let’s create the first Runbook. This will be the one which logs into Teams PowerShell and checks if there are any Holidays which already lie in the past compared to the time of the Runbook Job.&lt;/p&gt;
&lt;p&gt;Enter your &lt;code&gt;$teamsWebhookUrl&lt;/code&gt; on line 2. If you like, you can change the &lt;code&gt;$defaultLocalTimeZone&lt;/code&gt; on line 3 to the time zone where most of your users are located. Make sure you also adjust the name of your Credential if yours has a different name.&lt;/p&gt;
&lt;p&gt;Leave the &lt;code&gt;$functionUrl&lt;/code&gt; empty for now since we don’t have that one yet.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/76a5f782a129ff06c6093158f1b81004.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Save and publish the Runbook. Don’t forget to add a schedule to the Runbook. If you need a reminder on how to do that, please see &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/automatically-enable-overflow-action-on-call-queues-if-no-agents-are-opted-in-f1c9bea7cb87&#34; &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;azure-runbook-updateholidayschedules&#34;&gt;Azure Runbook: UpdateHolidaySchedules
&lt;/h4&gt;&lt;p&gt;This Runbook will receive all the information a user has entered on the Adaptive Card. Because we also want to update the card, but Runbooks don’t support that, we will pass all the information from the card to the Function first. This includes the old date time range (so the script knows which one needs to be replaced), the newly entered dates and the time zone of the user.&lt;/p&gt;
&lt;p&gt;The Function will then pass the data to the Runbook. Because the script now has both the old and new dates, it will be able to remove the old values and add the new ones to the Holiday schedule.&lt;/p&gt;
&lt;p&gt;Paste your Teams Webhook URL on line 7 before you save.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/d871770b0f9c477d765f5ff2f391c03e.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;To be able to call this Runbook from the Function, we’ll need to add a Webhook trigger to it as it’s described &lt;a class=&#34;link&#34; href=&#34;https://www.bing.com/search?q=azure&amp;#43;runbook&amp;#43;webhook&amp;#43;docs&amp;amp;form=ANNTH1&amp;amp;refig=f6e9976ff1de4f9baa308faa7c1bbdd2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. Before you click Create, copy its URL.&lt;/p&gt;
&lt;h4 id=&#34;azure-function-updatecardandtriggerrunbook&#34;&gt;Azure Function: UpdateCardAndTriggerRunbook
&lt;/h4&gt;&lt;p&gt;Now we can create the Function. Set &lt;code&gt;$runBookUrl&lt;/code&gt; to the Runbook’s webhook URL on line 6 and save the Function.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/01ab601212a7bb42dc5b8257f91b8f30.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;For the last step, we need to copy the URL of the Function and go back to our first Runbook “CheckHolidaySchedules”.&lt;/p&gt;
&lt;h4 id=&#34;runbook-checkholidayschedules-again&#34;&gt;Runbook CheckHolidaySchedules (Again)
&lt;/h4&gt;&lt;p&gt;Edit the Runbook and set the &lt;code&gt;$functionUrl&lt;/code&gt; variable to the copied Function URL on line 1. Save and Publish the Runbook again.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1GR5EyFfJfYB6i4K3scmjeg.png&#34;
	width=&#34;1055&#34;
	height=&#34;42&#34;
	srcset=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1GR5EyFfJfYB6i4K3scmjeg_hu_81fcbf06884514bf.png 480w, https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1GR5EyFfJfYB6i4K3scmjeg_hu_43a598e62b692ece.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;2511&#34;
		data-flex-basis=&#34;6028px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;test-drive&#34;&gt;Test Drive
&lt;/h4&gt;&lt;p&gt;During normal operation, we would need to wait for a Holiday to be over before anything happens. In our case, we can test by manually starting the Runbook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1H9UkxAEL3jrTfviZvVSgg.png&#34;
	width=&#34;1520&#34;
	height=&#34;235&#34;
	srcset=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1H9UkxAEL3jrTfviZvVSgg_hu_349651dd859cbae4.png 480w, https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1H9UkxAEL3jrTfviZvVSgg_hu_457934d2f53150b1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Start the Runbook to test&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;646&#34;
		data-flex-basis=&#34;1552px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;After a few seconds, we should start seeing some new Adaptive Cards in our channel. Keep in mind that triggering the Runbook for the first time will post a card for each Holiday which has already passed. We can also see which Auto Attendants are affected on the card.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1AYdQc3exHJ9FyyXQiVqSA.png&#34;
	width=&#34;1480&#34;
	height=&#34;746&#34;
	srcset=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1AYdQc3exHJ9FyyXQiVqSA_hu_2c77ee4b57fda546.png 480w, https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1AYdQc3exHJ9FyyXQiVqSA_hu_6be4744a8105200c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Adaptive Card sent by the Runbook&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;198&#34;
		data-flex-basis=&#34;476px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;After new dates have been submitted by a user, the Function will update the card.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/19gmVaYLQTt48rRlAxtOv3g.png&#34;
	width=&#34;1478&#34;
	height=&#34;239&#34;
	srcset=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/19gmVaYLQTt48rRlAxtOv3g_hu_5453bab8a71f0419.png 480w, https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/19gmVaYLQTt48rRlAxtOv3g_hu_3a5b4acc4725b224.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Adaptive Card after it has been updated by the Function&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;618&#34;
		data-flex-basis=&#34;1484px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;As soon as the Runbook has finished, it will post another card to the channel to confirm that the Holiday has been renewed for next year. For review purposes both the old and new dates are included. If anybody made a mistake, they could still contact IT to manually fix the dates.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1DTMQw26Duejt40miV2ig.png&#34;
	width=&#34;1482&#34;
	height=&#34;304&#34;
	srcset=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1DTMQw26Duejt40miV2ig_hu_7bbf1ccb31f4df86.png 480w, https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1DTMQw26Duejt40miV2ig_hu_734dc5a9644890b7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Adaptive Card confirmation sent by the second Runbook&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;487&#34;
		data-flex-basis=&#34;1170px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If we switch to the Holiday list in TAC, we can see that the Runbook added the new Holiday and removed the old one.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/11Wx5wc7HVIBSgXum5COQLA.png&#34;
	width=&#34;1290&#34;
	height=&#34;866&#34;
	srcset=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/11Wx5wc7HVIBSgXum5COQLA_hu_b2acddc754ba6289.png 480w, https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/11Wx5wc7HVIBSgXum5COQLA_hu_d0a1370be3e3724a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;01. September 2023 has been added at the end of the list by the Runbook&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;148&#34;
		data-flex-basis=&#34;357px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h4&gt;&lt;p&gt;Out of all the Teams self-service automation solutions I already did, I think that this is actually the coolest one. Not only does it provide a great user experience because everything can be done from within Teams, but it also makes sure nobody forgets to update the company’s Holiday list. No more last-minute support tickets just before you were about to leave for the Christmas break.&lt;/p&gt;
&lt;p&gt;And the best part is that we don’t need to grant any kind of admin permission. The only thing we need to make sure is that only the people who are allowed to update the Holidays have access to the Teams Channel.&lt;/p&gt;
&lt;p&gt;The whole point of using a script to automatically notify us when a Holiday has passed instead of using the &lt;strong&gt;request a change on-demand approach&lt;/strong&gt; like with the other two self-service examples is that nobody forgets about updating the Holidays. To make sure that users don’t miss the Adaptive Cards in Teams, I suggest using a dedicated channel and having them turn on notifications for all activity on said channel.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1VTj3UiR6hEnLHyOiYbAUQ.png&#34;
	width=&#34;1186&#34;
	height=&#34;398&#34;
	srcset=&#34;https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1VTj3UiR6hEnLHyOiYbAUQ_hu_5f580b2f463d81e4.png 480w, https://heusser.pro/p/automatically-notify-users-to-update-teams-holidays-for-next-year-cb1f6f9c6471/1VTj3UiR6hEnLHyOiYbAUQ_hu_bc55580031c84bb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Channel notification Settings in Teams&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;297&#34;
		data-flex-basis=&#34;715px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;By using a dedicated channel for Holiday self-service, we don’t need to force users to turn on all notifications for channels which might have much more activity/trigger too many notifications.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Automatically Enable Overflow Action on Call Queues if No Agents are Opted In</title>
        <link>https://heusser.pro/p/automatically-enable-overflow-action-on-call-queues-if-no-agents-are-opted-in-f1c9bea7cb87/</link>
        <pubDate>Sun, 04 Sep 2022 16:07:25 +0000</pubDate>
        
        <guid>https://heusser.pro/p/automatically-enable-overflow-action-on-call-queues-if-no-agents-are-opted-in-f1c9bea7cb87/</guid>
        <description>&lt;p&gt;One of the biggest pain points of Microsoft Teams Call Queues is that a configured time out is always honored, even if no agents are available to answer the calls. It doesn’t matter if they have opted out, are offline or even if the queue has no agents configured at all. The call will only be forwarded after the timeout has been reached.&lt;/p&gt;
&lt;p&gt;To conquer this issue, I’ve created a small PowerShell script which can be implemented and executed on a schedule as an Azure Runbook.&lt;/p&gt;
&lt;p&gt;The idea is quite simple. The script loops through all Call Queues and checks if there’s at least one agent opted in. If all agents are opted out, the script will set the Queue’s overflow threshold to zero.&lt;/p&gt;
&lt;p&gt;If there’s at least one agent who’s opted in, it will check if the overflow threshold is still zero. If that’s the case, the script will update the overflow threshold to any value you set in the script.&lt;/p&gt;
&lt;p&gt;This means that every time the script detects a Queue where no agents are opted in, the configured overflow action will be active immediately. As soon as the script sees that agents are available again, the immediate overflow action is disabled again.&lt;/p&gt;
&lt;p&gt;I’ve also added a simple alerting mechanism using Teams incoming webhooks. Messages will only be sent when something was changed.&lt;/p&gt;
&lt;h4 id=&#34;azure-runbook-codeexample&#34;&gt;Azure Runbook Code Example
&lt;/h4&gt;&lt;p&gt;Here’s the example code. Please keep in mind that this is in fact only an example. All the Message Cards go into the same Teams Channel because there’s no link between a Queue and a Channel which it might be associated with (e.g., a Voice Enabled Channel). I’m also using the same &lt;code&gt;$defaultOverFlowThreshold&lt;/code&gt; for all Call Queues.&lt;/p&gt;
&lt;p&gt;If you’re not familiar with Azure Runbooks, Automation Credentials and Teams Webhooks, please refer to &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851&#34; &gt;this article&lt;/a&gt;. The steps to create these things are the same.&lt;/p&gt;
&lt;p&gt;Insert your webhook URL on line 3 and make sure that the name of the Automation Credentials matches yours on line 5.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/a5f7245d99e0752410f8d67cc9a63344.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Unless the examples of my previous articles, were the Runbooks were triggered by a webhook, we’ll need to create a schedule for this one. I recommend a schedule which runs every 15 minutes. This should be good enough to cover most scenarios.&lt;/p&gt;
&lt;p&gt;In the Azure Portal, switch to Schedules and click + Add a schedule.&lt;/p&gt;
&lt;p&gt;Next, click Link a schedule to your runbook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-enable-overflow-action-on-call-queues-if-no-agents-are-opted-in-f1c9bea7cb87/1FPVs3DbJVXhXhMR1mS5Tw.png&#34;
	width=&#34;1422&#34;
	height=&#34;285&#34;
	srcset=&#34;https://heusser.pro/p/automatically-enable-overflow-action-on-call-queues-if-no-agents-are-opted-in-f1c9bea7cb87/1FPVs3DbJVXhXhMR1mS5Tw_hu_41e585f82dfb6c35.png 480w, https://heusser.pro/p/automatically-enable-overflow-action-on-call-queues-if-no-agents-are-opted-in-f1c9bea7cb87/1FPVs3DbJVXhXhMR1mS5Tw_hu_1a5e42d2d4888173.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;498&#34;
		data-flex-basis=&#34;1197px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Click on + Add a schedule.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-enable-overflow-action-on-call-queues-if-no-agents-are-opted-in-f1c9bea7cb87/1j3DMLkjJkMSam186QP6pWQ.png&#34;
	width=&#34;1496&#34;
	height=&#34;147&#34;
	srcset=&#34;https://heusser.pro/p/automatically-enable-overflow-action-on-call-queues-if-no-agents-are-opted-in-f1c9bea7cb87/1j3DMLkjJkMSam186QP6pWQ_hu_8d2c09cf76a7cc81.png 480w, https://heusser.pro/p/automatically-enable-overflow-action-on-call-queues-if-no-agents-are-opted-in-f1c9bea7cb87/1j3DMLkjJkMSam186QP6pWQ_hu_bc58b0800552e8e4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1017&#34;
		data-flex-basis=&#34;2442px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Give it a name and use the settings below. The smallest increment Azure Runbooks support is hourly. If we want to run it every 15 minutes, we’ll need to create four schedules where each schedule starts at a different time. Let’s start with the one which will run at every full hour.&lt;/p&gt;
&lt;p&gt;Repeat the same step three more times using the following start times (based on this example): 15:15, 15:30, 15:45.&lt;/p&gt;
&lt;p&gt;Once you’re done, it should look like this.&lt;/p&gt;
&lt;p&gt;The Runbook will now run every 15 minutes and automatically enable or disable the immediate overflow action based on agent availability (opt in status).&lt;/p&gt;
&lt;p&gt;Let me know if you would be interested in a more sophisticated solution of this Runbook. I’m thinking of a way where we can store and link information about individual Call Queues such as different webhook URLs, different overflow thresholds etc. or even the minimum number of agents which should be available before a Queue is being enabled again. I already have an idea in store how this could be achieved…&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Find All Auto Attendants and Call Queues a User is Associated with</title>
        <link>https://heusser.pro/p/find-all-auto-attendants-and-call-queues-a-user-is-associated-with-16710c3adf01/</link>
        <pubDate>Sun, 04 Sep 2022 11:12:16 +0000</pubDate>
        
        <guid>https://heusser.pro/p/find-all-auto-attendants-and-call-queues-a-user-is-associated-with-16710c3adf01/</guid>
        <description>&lt;p&gt;I’d be lying if I said that many people have asked me about such a script. But one person has. Frankly, this was all the motivation I needed. The question was &lt;strong&gt;if there’s a way to see all call flows any user is associated with&lt;/strong&gt;. I figured that I’d take a shot and see if I can come up with anything. And come up I did.&lt;/p&gt;
&lt;p&gt;First, let’s talk about where a Teams User could be configured in a call flow.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Auto Attendant Holiday Call Handlings&lt;/li&gt;
&lt;li&gt;Auto Attendant Default Call Flows (transfer or IVR option)&lt;/li&gt;
&lt;li&gt;Auto Attendant After Hours Call Flows (transfer or IVR option)&lt;/li&gt;
&lt;li&gt;Auto Attendant Operator (IVR option)&lt;/li&gt;
&lt;li&gt;Call Queue Agent&lt;/li&gt;
&lt;li&gt;Call Queue Timeout Target (transfer or personal voicemail)&lt;/li&gt;
&lt;li&gt;Call Queue Overflow Target (transfer or personal voicemail)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;how-does-itwork&#34;&gt;How Does it Work?
&lt;/h4&gt;&lt;p&gt;To achieve this, I’ve modified the M365 Call Flow Visualizer Script. Since the Visualizer is already able to read configurations from Auto Attendants and Call Queues, this wasn’t too hard. All I had to do was to write another function which will pull the Ids of all Voice Apps into an array. I then loop through all the Ids and run the Visualizer for each Voice App. When the Visualizer detects that a call is forwarded to a User at any point in the call flow, the details of said forwarding will be added to a PSObject which will then be added to a variable which only exists in the new function. I called this variable &lt;code&gt;$userLinkVoiceApps&lt;/code&gt; . Because the Visualizer is running for each Voice App, this variable must exist outside of the main script. Otherwise, it would get overwritten after each run.&lt;/p&gt;
&lt;p&gt;. .\Functions\Find-CallQueueAndAutoAttendantUserLinks.ps1&lt;/p&gt;
&lt;p&gt;. Find-CallQueueAndAutoAttendantUserLinks -SearchScope All&lt;/p&gt;
&lt;p&gt;I’ve added this script to my &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer/blob/main/CallFlowUserFinder.ps1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;repository&lt;/a&gt;. Make sure you clone the whole repo or download it as a zip file so that all relative file paths work.&lt;/p&gt;
&lt;p&gt;If you don’t specify the &lt;code&gt;-SearchUserId&lt;/code&gt; you will be able to select a user from the Out-GridView Table. Otherwise, you can pass an Azure AD ObjectId to the function using this parameter. You can also limit the search scope to just &lt;code&gt;AutoAttendants&lt;/code&gt;or &lt;code&gt;CallQueues&lt;/code&gt; . By default, the search Scope &lt;code&gt;All&lt;/code&gt; is used.&lt;/p&gt;
&lt;p&gt;The M365CallFlowVisualizer.ps1 is run with the parameters shown below. The &lt;code&gt;-FindUserLinks&lt;/code&gt; switch tells the script to write all user related information into the external &lt;code&gt;$userLinkVoiceApps&lt;/code&gt; variable. Since we’re running the script for each Voice App anyway, there’s no point in expanding nested call flows. We don’t need to create diagrams either, therefore all diagram output options are disabled.&lt;/p&gt;
&lt;p&gt;. .\M365CallFlowVisualizerV2.ps1 -Identity $searchScopeIncludedVoiceApp -FindUserLinks -SaveToFile $false -SetClipBoard $false -ExportHtml $false -ShowNestedCallFlows $false -ShowUserCallingSettings $false&lt;/p&gt;
&lt;p&gt;Depending on the amount of Voice Apps you have, it will take some time to finish. After all the information has been gathered, it will be exported to a CSV file at&lt;code&gt;.\Output\VoiceAppsLinkedTo_$UserId.csv&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;Here’s an example of the generated output (the actual output will also include User Ids and Voice App Ids). We’re now able to see to which Voice Apps and where in these Voice Apps a user is configured at a glance.&lt;/p&gt;
&lt;h4 id=&#34;good-toknow&#34;&gt;Good to Know
&lt;/h4&gt;&lt;p&gt;The M365 Call Flow Visualizer does not support reading IVRs on Holiday Call Handlings. Thus, this script won’t be able to tell if a user is linked to an Auto Attendant on a Holiday IVR.&lt;/p&gt;
&lt;p&gt;The Visualizer is built in a way in which it represents an accurate diagram of the &lt;strong&gt;active&lt;/strong&gt; configuration of a Voice App. For example, if you’ve configured an Operator but it isn’t linked to an IVR menu option, the Operator won’t be drawn in the diagram, even if it’s present in the configuration. The same goes for configured after hours call flows, which don’t use a schedule (in which case the default call flow is active all the time). Because of that, the script won’t include users which are configured on &lt;strong&gt;inactive&lt;/strong&gt; configurations on Auto Attendants.&lt;/p&gt;
&lt;p&gt;For Call Queues which are configured to either immediately time out or overflow it’s a little bit different. The Visualizer won’t draw the call distribution subgraph because there’s no distribution happening when zero-time outs or overflows are configured but the agent will still be included in the exported CSV file.&lt;/p&gt;
&lt;p&gt;Here we can see that the Call Queue “PS Test CQ” immediately overflows to an external number.&lt;/p&gt;
&lt;p&gt;In Teams Admin Center, agents are assigned using a Team though.&lt;/p&gt;
&lt;p&gt;If you would like to learn more about Call Queues and Agent Lists, please refer to &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0&#34; &gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Nevertheless, the CallFlowUserFinder.ps1 will still include this user in the exported table so that you can see all the Queues a user is associated with.&lt;/p&gt;
&lt;p&gt;I hope that this script/method helps you figure which Voice Apps a specific user is linked to.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Microsoft Teams Self-Service Call Queue Solution (Part 2)</title>
        <link>https://heusser.pro/p/microsoft-teams-self-service-call-queue-solution-part-2-ab8201157831/</link>
        <pubDate>Sat, 03 Sep 2022 13:21:48 +0000</pubDate>
        
        <guid>https://heusser.pro/p/microsoft-teams-self-service-call-queue-solution-part-2-ab8201157831/</guid>
        <description>&lt;p&gt;There was an issue with my code in this article. The solution described in this article assumes that your call queue overflow and timeout actions already forward to an external PSTN number. If it was set to any other option like voicemail or disconnect, the runbook failed. I’ve updated the &lt;strong&gt;Runbook&lt;/strong&gt; code sample on GitHub accordingly.&lt;/p&gt;
&lt;h4 id=&#34;original-article&#34;&gt;Original Article
&lt;/h4&gt;&lt;p&gt;A while ago I published &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851&#34; &gt;this&lt;/a&gt; article which explains how we can build a self-service solution for changing the configurations of Auto Attendants and Call Queues using Azure Automation Tools. The main reason behind this is so that we don’t have to grant admin privileges to users which would like to manage Queues and Attendants.&lt;/p&gt;
&lt;p&gt;In my last post, I provided an example how an Auto Attendant can be manually closed or opened. Today I’m going to show you an example of how we can let users change some settings on Call Queues.&lt;/p&gt;
&lt;p&gt;I’ve written the code for the following changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Immediately forward a Call Queue to an external number&lt;/li&gt;
&lt;li&gt;Disable the immediate forwarding again&lt;/li&gt;
&lt;li&gt;Change the external number for forwarding on Timeout&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Immediate forwarding is configured through an overflow Threshold of 0 and not a Timeout of 0. This is because, typically, Overflow Threshold is less used than timeout. I always recommend using Overflow Threshold 0 when you want to do an immediate forwarding. Unlike Timeout 0, the call is forwarded directly, without the Queue answering the call first when using Overflow. You can read more about that &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6&#34; &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If the immediate forwarding is disabled again, the value of the Overflow Threshold will be set to 50 again. This is the default value which is configured for new Call Queues. Of course, you change that in the Runbook code.&lt;/p&gt;
&lt;p&gt;This is what the Message Card looks like when it’s sent by the Azure Function.&lt;/p&gt;
&lt;h3 id=&#34;lets-buildit&#34;&gt;Let’s Build It
&lt;/h3&gt;&lt;p&gt;To build this on your own, please refer to my first article since the configuration steps are the same. You just need to replace the code of the Azure Functions and Runbooks from the Gists below.&lt;/p&gt;
&lt;h4 id=&#34;runbook-code&#34;&gt;Runbook Code
&lt;/h4&gt;&lt;p&gt;Insert the Webhook URL of your Teams Channel on line 7 and make sure that you’ve created the Automation Credentials as described in the article linked at the beginning of this post.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/30c4ff283d8736f3b1b47acd81d40b95.js&#34;&gt;&lt;/script&gt;

&lt;h4 id=&#34;refresh-card-functioncode&#34;&gt;Refresh Card Function Code
&lt;/h4&gt;&lt;p&gt;Insert the URL of your Azure Runbook Webhook trigger on line 11.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/7928bf7f6dabcbf0c5283566511488e5.js&#34;&gt;&lt;/script&gt;

&lt;h4 id=&#34;request-card-functioncode&#34;&gt;Request Card Function Code
&lt;/h4&gt;&lt;p&gt;To get a drop-down list with all your queues, we need to create one first.&lt;/p&gt;
&lt;p&gt;You can use the following code to create a list, which we’ll insert in our Function code later.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/767ebef524b966842b67436cc2ba9a0a.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This will create part of the JSON code and put it in your clipboard. You’ll need it later. If you’re already using Windows Clipboard, you will be able to pull it up by pressing Windows + V.&lt;/p&gt;
&lt;p&gt;Here’s the code for the Azure Function which will send the Update Call Queue Config stuff. Insert your URLs on line 6 and 7 and make sure to paste your list of Call Queue choices on line 27.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/315f3d455144ea86bc2c94c0a8a92a45.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;After you’ve inserted your list, it should look like this. Yours will show real Ids of course.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-call-queue-solution-part-2-ab8201157831/1DHb1Es27FcAN3yemT5wQ.png&#34;
	width=&#34;1124&#34;
	height=&#34;292&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-call-queue-solution-part-2-ab8201157831/1DHb1Es27FcAN3yemT5wQ_hu_a7eb3bae9640ae72.png 480w, https://heusser.pro/p/microsoft-teams-self-service-call-queue-solution-part-2-ab8201157831/1DHb1Es27FcAN3yemT5wQ_hu_599b45ea6f34eae7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;384&#34;
		data-flex-basis=&#34;923px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;That’s all. Now your users will be able to request a config change card. Let’s go through the process again.&lt;/p&gt;
&lt;p&gt;First, the outgoing webhook is mentioned in a channel. The Function will then confirm that the request has been received.&lt;/p&gt;
&lt;p&gt;The Function will also send the config change card.&lt;/p&gt;
&lt;p&gt;Once the user has entered all the information, they will be able to submit the config. This will also update the card and confirm the settings.&lt;/p&gt;
&lt;p&gt;It takes a while until the Runbook has finished. But one it has done its job, it will send us another card, confirming the settings.&lt;/p&gt;
&lt;p&gt;Note: Setting a new number as the Queue’s Timeout Action will also reset the configured Overflow Threshold to 50. (If the Overflow Threshold would still be 0, the Timeout settings would have no effect at all.)&lt;/p&gt;
&lt;p&gt;I hope that these code examples help you to build your own self-service solution for your users.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Everything You Ever Wanted to Know About Teams Resource Accounts</title>
        <link>https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/</link>
        <pubDate>Mon, 29 Aug 2022 19:45:51 +0000</pubDate>
        
        <guid>https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/</guid>
        <description>&lt;p&gt;Today we’re going to take a detailed look at Teams Resource Accounts.&lt;/p&gt;
&lt;p&gt;Resource Accounts are special Azure AD Objects (or Microsoft 365 User Accounts, if you will) which can only be created from Teams Admin Center or via Teams PowerShell. It’s not possible to create such an account in M365 Admin or Azure AD. What’s funny though is that they can only be deleted from M365 Admin or AAD but not from Teams Admin Center or Teams PowerShell.&lt;/p&gt;
&lt;h4 id=&#34;the-basics&#34;&gt;The Basics
&lt;/h4&gt;&lt;p&gt;Currently, there are two different types of so called first-party (Microsoft) Resource Accounts. Call Queues and Auto Attendants. These accounts are then associated with corresponding types of Voice App, which are again, Call Queues or Auto Attendants.&lt;/p&gt;
&lt;p&gt;Each Resource Account can only be associated with &lt;strong&gt;one&lt;/strong&gt; Voice App, but a Voice App can have multiple Resource Accounts associated. Just like with Teams users, each Resource Account can also only have &lt;strong&gt;one&lt;/strong&gt; phone number assigned. For example, you can have an Auto Attendant which has multiple Resource Accounts assigned, where each Resource Account has a phone number from a different country. This way you can have an Auto Attendant which serves customers across multiple countries, but each customer will be able to call a local number.&lt;/p&gt;
&lt;h4 id=&#34;how-to-create-a-resourceaccount&#34;&gt;How to Create a Resource Account
&lt;/h4&gt;&lt;p&gt;You can create new Resource Accounts from TAC. They are located under &lt;a class=&#34;link&#34; href=&#34;https://admin.teams.microsoft.com/company-wide-settings/resource-accounts&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Voice\Resource accounts&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are a few things to consider here. The first one is naming. If you have a complex call flow, chances are that you will have many Auto Attendants, Call Queues and Resource Accounts. I always use a prefix and suffix system.&lt;/p&gt;
&lt;p&gt;The Display Name is followed by the suffix “AA” or “CQ”. This way it will be easier to identify the correct Resource Account, when you associate it with a Voice App. The User Principal Name is led by the prefix “ra_aa_” or “ra_cq_” so that they can easily be filtered in AAD. Of course, this is only a suggestion, you’re free to name them however you want.&lt;/p&gt;
&lt;p&gt;Usually, I just use the *.onmicrosoft.com name of the Tenant as the domain suffix. External users won’t be able to interact with these kinds of accounts, so it doesn’t matter if you don’t use your default custom domain name.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1AWJTS0fgG35lia04bwh5w.png&#34;
	width=&#34;507&#34;
	height=&#34;614&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1AWJTS0fgG35lia04bwh5w_hu_72abebbc81982654.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1AWJTS0fgG35lia04bwh5w_hu_778cae4121beb826.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;82&#34;
		data-flex-basis=&#34;198px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Here are the &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/powershell/module/skype/new-csonlineapplicationinstance?view=skype-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PowerShell equivalent commands&lt;/a&gt; to create Resoure Accounts.&lt;/p&gt;
&lt;p&gt;Auto Attendant:&lt;/p&gt;
&lt;p&gt;# App Id Auto Attendants: ce933385-9390-45d1-9512-c8d228074e07&lt;/p&gt;
&lt;p&gt;New-CsOnlineApplicationInstance -UserPrincipalName &amp;ldquo;ra_aa_example_ps@domain.com&amp;rdquo; -ApplicationId &amp;ldquo;ce933385-9390-45d1-9512-c8d228074e07&amp;rdquo; -DisplayName &amp;ldquo;Example PS AA&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Call Queues:&lt;/p&gt;
&lt;p&gt;# App Id Call Queues: 11cd3e2e-fccb-42ad-ad00-878b93575e07&lt;/p&gt;
&lt;p&gt;New-CsOnlineApplicationInstance -UserPrincipalName &amp;ldquo;ra_cq_example_ps@domain.com&amp;rdquo; -ApplicationId &amp;ldquo;11cd3e2e-fccb-42ad-ad00-878b93575e07&amp;rdquo; -DisplayName &amp;ldquo;Example PS CQ&amp;rdquo;&lt;/p&gt;
&lt;h4 id=&#34;searching-for-resourceaccounts&#34;&gt;Searching for Resource Accounts
&lt;/h4&gt;&lt;p&gt;If you want to return all Resource Accounts by PowerShell, the MicrosoftTeams Module 4.6.0 now supports a parameter to only return Resource Accounts: &lt;code&gt;Get-CsOnlineUser -AccountType ResourceAccount&lt;/code&gt; . If we didn’t include a prefix or a suffix, there’s currently no way to tell if the returned objects are Queues or Attendants.&lt;/p&gt;
&lt;p&gt;For that, we need to use&lt;code&gt;Get-CsOnlineApplicationInstance&lt;/code&gt; . This will return a list with some basic information like Display Name, UPN, Phone Number and Application Id.&lt;/p&gt;
&lt;h4 id=&#34;licensing-resourceaccounts&#34;&gt;Licensing Resource Accounts
&lt;/h4&gt;&lt;p&gt;A Resource Account must be licensed in the following cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you want to assign a phone number to it&lt;/li&gt;
&lt;li&gt;If the Resource Accounts needs to be able to transfer calls to external numbers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Update 29.01.2023&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Microsoft updated their documentation. From now on, &lt;strong&gt;every&lt;/strong&gt; Resource Account must be licensed, regardless of if a phone number is assigned or not. You can find more info &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/microsoftteams/manage-resource-accounts#assign-a-license&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;An easy way to ensure that every Teams Resource Account is licensed properly is to use a dynamic user Azure AD Group which automatically assigns the license. The easiest way to do so is to filter on the Department attribute.&lt;/p&gt;
&lt;p&gt;(user.department -eq &amp;ldquo;Microsoft Communication Application Instance&amp;rdquo;)&lt;/p&gt;
&lt;p&gt;If you need step-by-step instructions on how to create an Azure AD Group with a dynamic query, please consult &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739&#34; &gt;this&lt;/a&gt; article and just replace the query with the one above.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 06.02.2023&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Thanks to a reader &lt;a class=&#34;link&#34; href=&#34;https://medium.com/p/3c1dad7d67c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;comment&lt;/a&gt;, it was brought to my attention, that group based licensing actually requires an Azure AD Premium P1 license, for any user which takes advantage of the feature. This is documented &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-licensing-whatis-azure-portal#licensing-requirements&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I don’t know if a resource account qualifies as “user” because they are resource account and sign-in blocked. If you want to be absolutely sure, I recommend that you have a P1 license for each resource account or that you contact your account manager at Microsoft and ask them about this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Licensing can’t be done from TAC. We need to use AAD or M365 Admin. As we can see, the account “Example AA” has now been created in AAD.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1evT4xkagZq7LVOGeSDAn5w.png&#34;
	width=&#34;1759&#34;
	height=&#34;382&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1evT4xkagZq7LVOGeSDAn5w_hu_1cfcf1205a6d26ff.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1evT4xkagZq7LVOGeSDAn5w_hu_61e8e8ff6ed8af2f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;460&#34;
		data-flex-basis=&#34;1105px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Because this is a special kind of account, it’s Sign-in blocked. This means that the account doesn’t support interactive sign-ins.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1juIc9FR7liYQzHJAbkhg.png&#34;
	width=&#34;854&#34;
	height=&#34;220&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1juIc9FR7liYQzHJAbkhg_hu_265aaf2a7578aa48.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1juIc9FR7liYQzHJAbkhg_hu_9df7e81643cdea8e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;388&#34;
		data-flex-basis=&#34;931px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Another important info is that these accounts have “Microsoft Communication Application Instance” set as their department. Just leave this as it is and don’t change anything.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1LXbE3uikECfwcAvF4MvTkw.png&#34;
	width=&#34;819&#34;
	height=&#34;117&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1LXbE3uikECfwcAvF4MvTkw_hu_16956d3a632f79ac.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1LXbE3uikECfwcAvF4MvTkw_hu_694be2680a2ce643.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;700&#34;
		data-flex-basis=&#34;1680px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Based on my experience, it’s no problem to change its Display or User Principal Name though.&lt;/p&gt;
&lt;p&gt;If you want to assign a phone number to a Resource Account, you will need to assign a license to it. Microsoft has recently renamed the old license “Microsoft Teams Phone — Virtual User” to “Microsoft Teams Phone Resource Account”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/17nSgscEOXkNkdAbl5pliw.png&#34;
	width=&#34;511&#34;
	height=&#34;87&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/17nSgscEOXkNkdAbl5pliw_hu_b439be7c6c6f5543.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/17nSgscEOXkNkdAbl5pliw_hu_72f8b876047e37ca.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;587&#34;
		data-flex-basis=&#34;1409px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;What’s really nice about these licenses, is that their free. &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/microsoftteams/teams-add-on-licensing/virtual-user#resource-account-license-allocation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;At least to some extent&lt;/a&gt;. If you have at least one Teams Phone license, you will get 25 Teams Phone Resource Account licenses for free. After that, you will get 1 Resource Account license for every 10 Teams Phone licenses. The “PowerShell Name” or rather the AccountSkuId of this license is still called “TenantName:PHONESYSTEM_VIRTUALUSER”. Unlike Teams Phone which needs a “base license” like a Business Premium or Enterprise E3, Resource Account licenses can be assigned as standalone licenses.&lt;/p&gt;
&lt;h4 id=&#34;how-to-assign-phone-numbers-to-resourceaccounts&#34;&gt;How to Assign Phone Numbers to Resource Accounts
&lt;/h4&gt;&lt;p&gt;Once you’ve assigned a license to a Resource Account you can either use TAC or PowerShell to assign a phone number to the account.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1vhe0ahawllXMWMWFpxQ.png&#34;
	width=&#34;498&#34;
	height=&#34;750&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1vhe0ahawllXMWMWFpxQ_hu_55e60d273539d31a.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1vhe0ahawllXMWMWFpxQ_hu_3a62d880cfb600d5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;66&#34;
		data-flex-basis=&#34;159px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;For PowerShell, you can use the same command as you would with a normal user. You might stumble upon outdated articles which mention the following command.&lt;/p&gt;
&lt;p&gt;Set-CsOnlineApplicationInstance -Identity &amp;ldquo;ra_aa_example_ps@domain.com&amp;rdquo; -OnPremPhoneNumber +4144512xxxx&lt;/p&gt;
&lt;p&gt;The new one is the following:&lt;/p&gt;
&lt;p&gt;Set-CsPhoneNumberAssignment -Identity &amp;ldquo;ra_aa_example_ps@domain.com&amp;rdquo; -PhoneNumber +4144512xxxx -PhoneNumberType DirectRouting&lt;/p&gt;
&lt;p&gt;Even though the Resource Account now has a phone number assigned to it, the number won’t be active until the Resource Account is associated with a Voice App. We’ll get to that later.&lt;/p&gt;
&lt;h4 id=&#34;how-to-assign-a-voice-routing-policy-to-a-resourceaccount&#34;&gt;How to Assign a Voice Routing Policy to a Resource Account
&lt;/h4&gt;&lt;p&gt;If the Resource Account should be able to transfer calls to external PSTN numbers using Direct Routing, we will also need to assign a Voice Routing Policy to it. This can also be done from TAC. Select your Resource Account and click on Edit. Now choose your desired Voice Routing Policy and click Save.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1au4ToHQ2IwpJc3nIrDgPqQ.png&#34;
	width=&#34;511&#34;
	height=&#34;532&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1au4ToHQ2IwpJc3nIrDgPqQ_hu_ec906677b816c1bd.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1au4ToHQ2IwpJc3nIrDgPqQ_hu_b92c4944fce3040c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;96&#34;
		data-flex-basis=&#34;230px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Doing it with PowerShell is again, the same as if it was a normal user.&lt;/p&gt;
&lt;p&gt;Grant-CsOnlineVoiceRoutingPolicy -Identity &amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;mailto:ra_aa_example_ps@domain.com&#34; &gt;ra_aa_example_ps@domain.com&lt;/a&gt;&amp;rdquo; -PolicyName &amp;ldquo;Test&amp;rdquo;&lt;/p&gt;
&lt;h4 id=&#34;how-to-change-the-type-of-a-resourceaccount&#34;&gt;How to Change the Type of a Resource Account
&lt;/h4&gt;&lt;p&gt;On that same “Edit resource account” window, it’s also possible to change the type of a Resource Account. This can also be done by PowerShell. Just use the &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/powershell/module/skype/set-csonlineapplicationinstance?view=skype-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Set-CsApplicationInstance&lt;/a&gt; cmdlet and include the &lt;code&gt;-Identity&lt;/code&gt; and &lt;code&gt;-ApplicationId&lt;/code&gt; parameters. Even though this should work in theory, I haven’t tested it myself since I recommend re-creating them, if ever needed. Also be careful when 3rd party resource accounts e.g. from Attendant Console or Contact Center vendors are in play. TAC only supports first party Application Ids and won’t allow you to save changes you made without choosing a Resource Account type. Use PowerShell if you need to assign an online voice routing policy to a 3rd party resource account.&lt;/p&gt;
&lt;h4 id=&#34;how-to-associate-a-resource-account-with-a-voiceapp&#34;&gt;How to Associate a Resource Account with a Voice App
&lt;/h4&gt;&lt;p&gt;In most cases, having one Resource Account per Queue or Attendant is enough. Let’s make a small detour and talk about naming again for a second. To avoid confusion, I always make sure that the Display Name for the Queue/Attendant and the Resource Account are the same. If a Voice App needs multiple resource accounts, I use numbering on the resource account names. It’s important to note that the Display Name of the Resource Account is the name which a recipient of a call which was transferred by an Attendant or a Queue will see on the Teams toast notification.&lt;/p&gt;
&lt;p&gt;Here we can see that this Call Queue is called “MS Test CQ” but the associated resource account is called “Team Green CQ”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1RGhZfRUJ9Hj7L0u8ko1uYQ.png&#34;
	width=&#34;1766&#34;
	height=&#34;593&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1RGhZfRUJ9Hj7L0u8ko1uYQ_hu_161818e7054c5116.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1RGhZfRUJ9Hj7L0u8ko1uYQ_hu_b91405f38313aa7f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;297&#34;
		data-flex-basis=&#34;714px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Since the toast will show the Display Name of the resource account, it will say that there’s a call for “Team Green CQ” and not “MS Test CQ”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/16eE5gPpiQQQ7E0HWidOcrw.png&#34;
	width=&#34;452&#34;
	height=&#34;438&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/16eE5gPpiQQQ7E0HWidOcrw_hu_953c6827b03a4e0b.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/16eE5gPpiQQQ7E0HWidOcrw_hu_e58cdee714326b33.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;103&#34;
		data-flex-basis=&#34;247px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I talked about the importance of the AA/CQ suffix at the beginning of this post. Microsoft has improved TAC and now shows assigned phone numbers in the drop-down list, if we search for a Voice App redirection target.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1ROuuUDhMjYnjORsGLjOiLQ.png&#34;
	width=&#34;1380&#34;
	height=&#34;382&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1ROuuUDhMjYnjORsGLjOiLQ_hu_b2742172048d3ea0.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1ROuuUDhMjYnjORsGLjOiLQ_hu_decddffa0d40242b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;361&#34;
		data-flex-basis=&#34;867px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;But let’s assume that neither of these accounts had a phone number assigned and we didn’t use a suffix either. Good luck figuring out which one of these is the Auto Attendant and which one is the Call Queue.&lt;/p&gt;
&lt;h4 id=&#34;enterprise-voice&#34;&gt;Enterprise Voice
&lt;/h4&gt;&lt;p&gt;This is an interesting one. As far as I can tell, resource accounts which were created at least a few months ago, are still Enterprise Voice enabled, even if they don’t have a Teams Phone Resource Account License assigned.&lt;/p&gt;
&lt;p&gt;Here’s an example of such a relict. This resource account is Enterprise Voice enabled, despite not having a LineURI or a Feature Type. FeatureTypes is a relatively new property which is returned by &lt;code&gt;Get-CsOnlineUser&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;DisplayName            : Support Number Business Hours AA&lt;br&gt;
EnterpriseVoiceEnabled : True&lt;br&gt;
LineUri                :&lt;br&gt;
FeatureTypes           : {}&lt;/p&gt;
&lt;p&gt;For reference, here’s a screenshot of the M365 Admin Portal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1PqykXYuUDlX2lTaW1z4Q.png&#34;
	width=&#34;1338&#34;
	height=&#34;200&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1PqykXYuUDlX2lTaW1z4Q_hu_11eb01dc8fc7bd82.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1PqykXYuUDlX2lTaW1z4Q_hu_c62eb3fa8d330779.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;669&#34;
		data-flex-basis=&#34;1605px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If we check “Support Number AA” (which does have a license) by PowerShell using the search query below, we can see that it includes “VoiceApp” under FeatureTypes.&lt;/p&gt;
&lt;p&gt;Get-CsOnlineUser -Identity &lt;a class=&#34;link&#34; href=&#34;mailto:ra_aa_support_number@mozzism.ch&#34; &gt;ra_aa_support_number@mozzism.ch&lt;/a&gt; | FL DisplayName, EnterpriseVoiceEnabled, LineURI, FeatureTypes&lt;/p&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;p&gt;DisplayName            : Support Number AA&lt;br&gt;
EnterpriseVoiceEnabled : True&lt;br&gt;
LineUri                : tel:+4144xxxxxxx&lt;br&gt;
FeatureTypes           : {VoiceApp}&lt;/p&gt;
&lt;p&gt;If we check a normal Teams user account, we can see that they’ll have “PhoneSystem” and “Teams” included in their FeatureTypes.&lt;/p&gt;
&lt;p&gt;DisplayName            : Ben Kim&lt;br&gt;
EnterpriseVoiceEnabled : True&lt;br&gt;
FeatureTypes           : {PhoneSystem, Teams}&lt;/p&gt;
&lt;p&gt;But beware that a user can also include the Feature Type “PhoneSystem” without actually being Enterprise Voice enabled. (In this case the user has a Teams Phone License but is not configured for EV yet.)&lt;/p&gt;
&lt;p&gt;DisplayName            : Bill Stearn&lt;br&gt;
EnterpriseVoiceEnabled : False&lt;br&gt;
FeatureTypes           : {PhoneSystem, Teams}&lt;/p&gt;
&lt;p&gt;I wasn’t able to reproduce this scenario. When I created a new resource account and didn’t assign a license, it was always set to Enterprise Voice enabled False.&lt;/p&gt;
&lt;p&gt;DisplayName            : Example PS AA&lt;br&gt;
EnterpriseVoiceEnabled : False&lt;br&gt;
FeatureTypes           : {}&lt;/p&gt;
&lt;p&gt;Let’s see how this looks, after we’ve added a Microsoft Teams Phone Resource Account License to “Example PS AA”. After a few minutes, the Feature Type will be added, and EV will be set to True. I was spamming the Get-CsOnlineUser query so often, that I even managed to get an output right before and after the change.&lt;/p&gt;
&lt;p&gt;Here we can see that the Feature Type “VoiceApp” was added but Enterprise Voice was still disabled.&lt;/p&gt;
&lt;p&gt;DisplayName            : Example PS AA&lt;br&gt;
EnterpriseVoiceEnabled : False&lt;br&gt;
FeatureTypes           : {VoiceApp}&lt;/p&gt;
&lt;p&gt;Literally seconds later, I ran it again and now Enterprise Voice has been enabled.&lt;/p&gt;
&lt;p&gt;DisplayName            : Example PS AA&lt;br&gt;
EnterpriseVoiceEnabled : True&lt;br&gt;
FeatureTypes           : {VoiceApp}&lt;/p&gt;
&lt;p&gt;Assigning the license will automatically set Enterprise Voice enabled to True. This is different than with normal user accounts. They will stay False until we either assign them a number through TAC or use &lt;code&gt;Set-CsPhoneNumberAssignment -EnterpriseVoiceEnabled $true&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;If the license is removed from the resource account, EV will be disabled again.&lt;/p&gt;
&lt;h4 id=&#34;external-pstn-transfer-from-resourceaccounts&#34;&gt;External PSTN Transfer from Resource Accounts
&lt;/h4&gt;&lt;p&gt;The official documentation of the technical requirements which are needed for external PSTN transfers can be viewed &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/microsoftteams/create-a-phone-system-auto-attendant?tabs=general-info#external-phone-number-transfers---technical-details&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. I’m only covering Direct Routing Scenarios in this article.&lt;/p&gt;
&lt;p&gt;These requirements need to be met by all resource accounts which are associated with a Voice App. For example, if you have an Auto Attendant which has two resource accounts / numbers assigned and it forwards to an external number outside of business hours, both resource accounts will need to have a valid voice routing policy assigned. TAC won’t display a warning or an error message, even if none of the associated resource account have an online voice routing policy assigned. So, in other words: If a call is made to a Resource Account which doesn’t have a voice routing policy assigned, the call transfer will fail.&lt;/p&gt;
&lt;p&gt;What about nesting? Although I don’t think that this is officially documented, I have found that only the top-level resource account, which is the one with the number which is dialed, needs to be configured properly.&lt;/p&gt;
&lt;p&gt;Let’s take a look at the configuration of the resource accounts used in this scenario.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1GRf3ngbTvUo9hndInnZg.png&#34;
	width=&#34;545&#34;
	height=&#34;1376&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1GRf3ngbTvUo9hndInnZg_hu_1167bb4d3f81db22.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1GRf3ngbTvUo9hndInnZg_hu_a3601540d92d276b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;39&#34;
		data-flex-basis=&#34;95px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Obviously, the Call Queue “Test EV Enabled CQ” and not the “Test EV Enabled AA” does the PSTN transfer. But only the Auto Attendant is configured for outbound PSTN calling. The call transfer in this scenario works.&lt;/p&gt;
&lt;p&gt;DisplayName              : Test EV Enabled AA&lt;br&gt;
EnterpriseVoiceEnabled   : True&lt;br&gt;
FeatureTypes             : {VoiceApp}&lt;br&gt;
OnlineVoiceRoutingPolicy : FirstTrunk&lt;/p&gt;
&lt;p&gt;DisplayName              : Test EV Enabled CQ&lt;br&gt;
EnterpriseVoiceEnabled   : False&lt;br&gt;
FeatureTypes             : {}&lt;br&gt;
OnlineVoiceRoutingPolicy :&lt;/p&gt;
&lt;p&gt;In the PSTN and SMS (preview) usage report in TAC, we can see that it’s the initially called resource account, rather than the one associated with the call queue which does the outbound call. Outbound Direct Routing calls from Voice Apps are labelled as “dr_out_bot”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1OeqBbcYeZ8ZTXWRwP1xyyA.png&#34;
	width=&#34;1594&#34;
	height=&#34;198&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1OeqBbcYeZ8ZTXWRwP1xyyA_hu_34157e7b07847860.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1OeqBbcYeZ8ZTXWRwP1xyyA_hu_4a3ee3552a1c52e6.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;805&#34;
		data-flex-basis=&#34;1932px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;To be absolutely sure, I created another configuration. This time the other way around. The top-level Auto Attendant does not have an online voice routing policy assigned, but the nested Call Queue does.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/14WDSbZwQEdURpq3c7BpcgQ.png&#34;
	width=&#34;364&#34;
	height=&#34;898&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/14WDSbZwQEdURpq3c7BpcgQ_hu_685157994fb1079c.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/14WDSbZwQEdURpq3c7BpcgQ_hu_b0a49701d136ecf4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;40&#34;
		data-flex-basis=&#34;97px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When I called the number of the Auto Attendant, the PSTN transfer of the Call Queue did not work, even though the Queue is configured for outbound calling. When I called the number of the Queue directly, forwarding to PSTN worked perfectly.&lt;/p&gt;
&lt;p&gt;P.S. If you’re wondering, how I created that flow chart and didn’t get the memo before, besides blogging, I’m also the creator of this &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;PowerShell Tool&lt;/a&gt; which allows anybody to automatically render these cool diagrams for free.&lt;/p&gt;
&lt;h4 id=&#34;finding-auto-attendants-and-call-queues-inteams&#34;&gt;Finding Auto Attendants and Call Queues in Teams
&lt;/h4&gt;&lt;p&gt;If you can’t find all your Auto Attendants and Call Queues when you search for them in Teams, you should definitely take a look at &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681&#34; &gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;one-lastthing&#34;&gt;One Last Thing
&lt;/h4&gt;&lt;p&gt;Although it’s now possible to do most of the things, like assigning online voice routing policies or phone numbers in TAC, some things are still missing from TAC. For example, you won’t find your resource accounts under “Manage users”. You can, however, replace the Object Id of a user in the URL, with an Object Id of a Resource Account. This will allow you to view some data, like recent calls.&lt;/p&gt;
&lt;p&gt;If you’re too lazy to grab the Object Id, you can also click the Display Name of a Resource Account from the PSTN and SMS (preview) usage report.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1aUlQ20axCxy0nA86UlRjw.png&#34;
	width=&#34;1489&#34;
	height=&#34;128&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1aUlQ20axCxy0nA86UlRjw_hu_7da24d98d07da211.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1aUlQ20axCxy0nA86UlRjw_hu_e853f1906e00c209.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1163&#34;
		data-flex-basis=&#34;2791px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This will yield an error message that TAC can’t get the policies of this account. But you’ll still be able to see it’s call history under the “Meetings &amp;amp; calls” tab.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1gzkRCHSpGq5csQDU7FQuA.png&#34;
	width=&#34;2040&#34;
	height=&#34;634&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1gzkRCHSpGq5csQDU7FQuA_hu_38a203eac327fb17.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-teams-resource-accounts-2ff9661fc489/1gzkRCHSpGq5csQDU7FQuA_hu_f8727b72014cf227.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;321&#34;
		data-flex-basis=&#34;772px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I hope this article helps you better understand how Resource Accounts work in Teams Phone. Feel free to reach out if you have any questions left.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Why Can Only some Users Search Auto Attendants and Call Queues in Teams?</title>
        <link>https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/</link>
        <pubDate>Fri, 26 Aug 2022 08:27:12 +0000</pubDate>
        
        <guid>https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/</guid>
        <description>&lt;p&gt;Have you ever wondered why you or some of your users can’t see all Auto Attendants or Call Queues when you search for them in Teams? Start following me on Medium and wonder no more.&lt;/p&gt;
&lt;p&gt;The users who can find them are most likely agents of the queues which show up when they search for it or have previously received a call forwarded by an Auto Attendant. Based on my testing, Auto Attendants and Call Queues only show up in search, if there has been some form of interaction between the user and the resource account before.&lt;/p&gt;
&lt;p&gt;Here’s an example where the resource account “Example AA” which is associated with an Auto Attendant can’t be found by a user.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1tg14cxCdjlonXkMgRPiUJg.png&#34;
	width=&#34;1227&#34;
	height=&#34;152&#34;
	srcset=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1tg14cxCdjlonXkMgRPiUJg_hu_e739c9d922f3e2a2.png 480w, https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1tg14cxCdjlonXkMgRPiUJg_hu_5fea402594aaffe1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;807&#34;
		data-flex-basis=&#34;1937px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;And here’s the same search query from a different user, which has interacted with “Example AA” before.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1C6dCc5y1jWlQtTgdyD6fIQ.png&#34;
	width=&#34;1190&#34;
	height=&#34;258&#34;
	srcset=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1C6dCc5y1jWlQtTgdyD6fIQ_hu_e66b42b4e1e5f5c5.png 480w, https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1C6dCc5y1jWlQtTgdyD6fIQ_hu_110d5d23b7bf2917.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;461&#34;
		data-flex-basis=&#34;1106px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;So, what can you do if you want your users to find Call Queues and Auto Attendants in Teams, if they’re not part of the queue or don’t get calls from an Auto Attendant?&lt;/p&gt;
&lt;p&gt;Certainly, adding all users to a queue or configuring an Auto Attendant a hundred times over and making actual calls to its number so that the user receives a call from the attendant is no option.&lt;/p&gt;
&lt;p&gt;Let’s explore other options.&lt;/p&gt;
&lt;h4 id=&#34;deep-links--user-self-service&#34;&gt;Deep Links / User Self-Service
&lt;/h4&gt;&lt;p&gt;I’ve blogged about &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/creating-microsoft-teams-calling-deep-links-f7c9d62eacdd&#34; &gt;deep links&lt;/a&gt; in Teams before. If we create a deep link to call a resource account’s user principal name, the resource account will somehow magically be added to the user’s Teams contacts, once the user clicks on the link. This user will then be able to find this Auto Attendant or Call Queue from search.&lt;/p&gt;
&lt;p&gt;Let’s call this a self-service approach. We as admins will provide our users a list with deep links and the users choose themselves, which accounts they want to add.&lt;/p&gt;
&lt;p&gt;A deep link will look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://teams.microsoft.com/l/call/0/0?users=ra_aa_example@mozzism.onmicrosoft.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we copy this link and paste it in our favorite browser (which should be Microsoft Edge of course) we will see the following pop-up.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1rbe0FSPUNi533rul0Kxg.png&#34;
	width=&#34;766&#34;
	height=&#34;245&#34;
	srcset=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1rbe0FSPUNi533rul0Kxg_hu_3f48bfe0a1e2594c.png 480w, https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1rbe0FSPUNi533rul0Kxg_hu_e516db56805c87.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;312&#34;
		data-flex-basis=&#34;750px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Next, we need to click “Open” in order to initiate the call in Teams. That’s all that’s needed already. We don’t actually need to call the Auto Attendant.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1Jc77DF5dftfPiJZdcrbNg.png&#34;
	width=&#34;891&#34;
	height=&#34;230&#34;
	srcset=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1Jc77DF5dftfPiJZdcrbNg_hu_9579265b454a9423.png 480w, https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1Jc77DF5dftfPiJZdcrbNg_hu_61dbb972740321b5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;387&#34;
		data-flex-basis=&#34;929px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Note: This will only work if the resource account is in fact associated with a voice app.&lt;/p&gt;
&lt;p&gt;If we cancel and search for “example” again, the Auto Attendant / resource account now shows up, everywhere we could possibly search for it. This includes the search and action bar, the people picker on the dial pad and the new number or contact search field in call answering rules.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/17ormYlPnrP6skX1LiImA.png&#34;
	width=&#34;540&#34;
	height=&#34;674&#34;
	srcset=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/17ormYlPnrP6skX1LiImA_hu_5c86c728d3a1c6b7.png 480w, https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/17ormYlPnrP6skX1LiImA_hu_d1366663cc6ddc69.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;80&#34;
		data-flex-basis=&#34;192px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1MTkOifCqgHWKRSmU9ZudVg.png&#34;
	width=&#34;678&#34;
	height=&#34;413&#34;
	srcset=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1MTkOifCqgHWKRSmU9ZudVg_hu_5549a77c4935aa02.png 480w, https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1MTkOifCqgHWKRSmU9ZudVg_hu_dcce76307b6f381c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;164&#34;
		data-flex-basis=&#34;393px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;What if we’ve got hundreds of resource accounts? I’ve got you covered here as well. Just use this code to generate a deep link for each resource account in your tenant.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/35167cfa3c0dd14511d1e63d56633fe8.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This will read all first party resource accounts (Auto Attendants and Call Queues, other 3rd party resource accounts, such as Landis or Luware won’t be included) from your tenant, create a deep link for each account and put them in your clipboard.&lt;/p&gt;
&lt;p&gt;Now we can publish these links anywhere we want. I put mine in a Teams Wiki for example.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1MrRVxccFvYQn9p3B3OPuzQ.png&#34;
	width=&#34;1404&#34;
	height=&#34;942&#34;
	srcset=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1MrRVxccFvYQn9p3B3OPuzQ_hu_d9c163292bca260a.png 480w, https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1MrRVxccFvYQn9p3B3OPuzQ_hu_4dc2ad87f6ba87f2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;357px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;All that’s left to do for the users is to click on a link and then cancel or make the call.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1ezGtnmlIwS6F2EdhN2RmVA.png&#34;
	width=&#34;2130&#34;
	height=&#34;1236&#34;
	srcset=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1ezGtnmlIwS6F2EdhN2RmVA_hu_3609a8a03706bc28.png 480w, https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1ezGtnmlIwS6F2EdhN2RmVA_hu_e9a523c9ef194d95.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;172&#34;
		data-flex-basis=&#34;413px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;That’s one way to do it. But what if you want to go the extra mile for your users and automatically make all your Attendants and Queues available for all your users?&lt;/p&gt;
&lt;h4 id=&#34;the-powershell-way--going-the-extramile&#34;&gt;The PowerShell Way / Going the Extra Mile
&lt;/h4&gt;&lt;p&gt;Although it’s possible to do this at scale, this method does come with a caveat. We’ll see what that is later. Instead of launching a deep link to a call, we’re going to create a chat between the user and the resource account. But how can we create a chat with the resource account, if we can’t search for it in the first place?&lt;/p&gt;
&lt;p&gt;I have found that it’s possible to use Microsoft Graph to create a chat between a user and a resource account.&lt;/p&gt;
&lt;p&gt;Here’s an example script. Use it at your own risk. As I already stated in &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6&#34; &gt;this article&lt;/a&gt;, the function to authenticate against MS Graph is baes on the work of &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/AlexAsplund&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Alex Asplund&lt;/a&gt; from &lt;a class=&#34;link&#34; href=&#34;https://adamtheautomator.com/powershell-graph-api/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this article&lt;/a&gt;. You will need an Azure App Registration with at least the following Application permissions: “profile”, “openid”, “User.Read.All”, “Chat.Create”.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/da5e36678540355993ff93abde3f8bba.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Fill in &lt;code&gt;$AppId&lt;/code&gt; ,&lt;code&gt;$AppSecret&lt;/code&gt; and &lt;code&gt;$TenantName&lt;/code&gt; with your own credentials and domain name on lines 4–6. Once you run the script, it will retrieve all your resource accounts and all users which have a Teams Phone Standard License assigned. This serves merely as an example. Of course, you can create your own filter for the variable &lt;code&gt;$allTeamsPhoneUsers&lt;/code&gt; or import a CSV file etc.&lt;/p&gt;
&lt;p&gt;Next, the script will loop through all users, and create an empty chat with each resource account, which will ultimately make the resource accounts discoverable for the user.&lt;/p&gt;
&lt;p&gt;Let’s see the result. Again, before the script was executed, the account “USA Toll Free Test AA” does not show up in this user’s search box.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1eRdP6AZLSl6vyCJXJRiicQ.png&#34;
	width=&#34;1232&#34;
	height=&#34;157&#34;
	srcset=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1eRdP6AZLSl6vyCJXJRiicQ_hu_e292fa188f9e1084.png 480w, https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1eRdP6AZLSl6vyCJXJRiicQ_hu_89d4830c6ebf852c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;784&#34;
		data-flex-basis=&#34;1883px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Once the script has run for any Teams user, they will see a bunch of new, empty chats in their Teams chats. Unfortunately, I don’t know why Teams won’t show the Display Name here.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1Yu9h1Z97KR8zknhzVdXCEg.png&#34;
	width=&#34;644&#34;
	height=&#34;816&#34;
	srcset=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1Yu9h1Z97KR8zknhzVdXCEg_hu_1842853e7e0190a6.png 480w, https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1Yu9h1Z97KR8zknhzVdXCEg_hu_29cd0b5a3608fae9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;78&#34;
		data-flex-basis=&#34;189px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Funny enough, the Display Name will show up if we switch to the Organization Tab in the chat.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/10jKaL3o2x7v1HXY0rVOPBA.png&#34;
	width=&#34;1126&#34;
	height=&#34;327&#34;
	srcset=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/10jKaL3o2x7v1HXY0rVOPBA_hu_db977961dafb6895.png 480w, https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/10jKaL3o2x7v1HXY0rVOPBA_hu_c04fbcf039b8e86d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;344&#34;
		data-flex-basis=&#34;826px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;And of course, the account now shows up in search, which is what we want.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1Tgx0nPdJDN76Z4w2ymwqQ.png&#34;
	width=&#34;1238&#34;
	height=&#34;273&#34;
	srcset=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1Tgx0nPdJDN76Z4w2ymwqQ_hu_b57bd18fe01a1ff3.png 480w, https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1Tgx0nPdJDN76Z4w2ymwqQ_hu_53d583e1283a4367.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;453&#34;
		data-flex-basis=&#34;1088px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;So, there you have it. Something which could be used to make all Auto Attendants and Call Queues discoverable in Teams for all your users. Because we’re only using the Graph permission “Create.Chat” we can use Application permissions and don’t need to worry about delegation and user tokens. The only downside is that depending on the amount of voice apps you add, the users will see a boatload of new, unread chats, all titled with “Unkown User”. Depending on user activity in Teams, these could get moved down the list pretty quickly though. Or users can just choose to hide them if they don’t want a messy chats section.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1z3kdGAc4NyA27AMG2X8FUg.png&#34;
	width=&#34;526&#34;
	height=&#34;652&#34;
	srcset=&#34;https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1z3kdGAc4NyA27AMG2X8FUg_hu_3b63c703f63ab6cf.png 480w, https://heusser.pro/p/why-can-only-some-users-search-auto-attendants-and-call-queues-in-teams-940402164681/1z3kdGAc4NyA27AMG2X8FUg_hu_c1ac83b049b44e07.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;80&#34;
		data-flex-basis=&#34;193px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I hope that this article helps lighten some confusion around why only some users can search for voice apps. Furthermore, I hope that my script to programmatically add all resource accounts to Teams will help you make your users happy.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Change Business Hours of a Teams Auto Attendant with PowerShell</title>
        <link>https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/</link>
        <pubDate>Tue, 23 Aug 2022 18:21:59 +0000</pubDate>
        
        <guid>https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/</guid>
        <description>&lt;p&gt;Changing the business hours on a Teams Auto Attendant can be quite cumbersome. Especially if you have multiple hours a day, like a lunch break. If you’ve been working long enough with Teams, you probably remember how easy it was in Skype for Business Online Admin Center. There, we could just select opening hours from a timetable and be done with it. Nowadays we have to select the start and end time from a drop-down list for each day individually.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/1OJWoGKSIPltflYAjr6K4Q.png&#34;
	width=&#34;1235&#34;
	height=&#34;1086&#34;
	srcset=&#34;https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/1OJWoGKSIPltflYAjr6K4Q_hu_598c6903f5ee6bca.png 480w, https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/1OJWoGKSIPltflYAjr6K4Q_hu_9aec423ed1096f32.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;113&#34;
		data-flex-basis=&#34;272px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;To speed up this process, I’ve created a PowerShell Script. Right now, there are no parameters. After all, the idea is to be quicker and not make you pick times from a drop-down in PowerShell rather than in TAC.&lt;/p&gt;
&lt;p&gt;By default, the script will allow you to set a time range for mornings and one for afternoons. These are defined in the variables &lt;code&gt;$tr1&lt;/code&gt; and &lt;code&gt;$tr2&lt;/code&gt; on line 7 and 8. You can adjust them to your liking, as long as they don’t overlap each other. Only 15minute increments are supported. You must use the 24-hour clock system.&lt;/p&gt;
&lt;p&gt;Edit (08.09.2022): I’ve updated line 16 to look for the CallFlowId of the Auto Attendants CallHandlingAssociation with type “AfterHours” instead of the CallFlow Name matching “After hours call flow”.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/389d9107fdd2cf5f0727c331ec27d636.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Once you run the script, the defined time ranges will be applied to the Auto Attendant which was selected from the list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/19tJFZYDGgLaWooIZxwZXUQ.png&#34;
	width=&#34;1472&#34;
	height=&#34;382&#34;
	srcset=&#34;https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/19tJFZYDGgLaWooIZxwZXUQ_hu_c59ac7fa5093facc.png 480w, https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/19tJFZYDGgLaWooIZxwZXUQ_hu_2fa92cc125f0f573.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;385&#34;
		data-flex-basis=&#34;924px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This works for both, Auto Attendants which already have business hours configured and Auto Attendants which didn’t have business hours already. Your configured after hours call flow (e.g. forward to shared voicemail etc.) will not be impacted/overwritten. It will stay exactly the same as it was.&lt;/p&gt;
&lt;p&gt;If your call flow has different business hours for specific days, just add more &lt;code&gt;$tr&lt;/code&gt; variables and make sure to add/change them on line 40. For example, if your business closes early on Fridays but has no lunch break, create a &lt;code&gt;$tr3&lt;/code&gt; variable and change &lt;code&gt;-FridayHours @($tr1,$tr2)&lt;/code&gt; to &lt;code&gt;-FridayHours @($tr3)&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;By default, the script will not add any business hours for Saturday and Sunday. This means that the after hours call flow will be active on the weekend. If you also want to configure hours for these days, add them using the switch &lt;code&gt;-SaturdayHours&lt;/code&gt; followed by the array &lt;code&gt;@($tr4,$tr5)&lt;/code&gt; .&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/1Dwi1PcIhDweQdaV4OSw64w.png&#34;
	width=&#34;713&#34;
	height=&#34;133&#34;
	srcset=&#34;https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/1Dwi1PcIhDweQdaV4OSw64w_hu_8df12f6276101568.png 480w, https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/1Dwi1PcIhDweQdaV4OSw64w_hu_45b1407760c28d87.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;536&#34;
		data-flex-basis=&#34;1286px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;On a final note, when changing business hours via PowerShell, we must use the &lt;code&gt;-Complement&lt;/code&gt; switch. This will invert the time ranges. Meaning that the after hours call flow will be active during times which are outside of what is shown on the timetable. TAC displays the business hours, during which the Auto Attendant is open but it does so on the after hours call flow page. This can be a little misleading. When business hours are set through TAC, the complement flag is automatically enabled.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/12hwGZALSqgnj9JLZEmK8g.png&#34;
	width=&#34;837&#34;
	height=&#34;278&#34;
	srcset=&#34;https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/12hwGZALSqgnj9JLZEmK8g_hu_96ef7199c8a2f67f.png 480w, https://heusser.pro/p/change-business-hours-of-a-teams-auto-attendant-with-powershell-ed03a15881d2/12hwGZALSqgnj9JLZEmK8g_hu_4543d0ebf638ce3f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;301&#34;
		data-flex-basis=&#34;722px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I hope this helps you save some time as well.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Download Existing Audio Files from Teams Admin Center</title>
        <link>https://heusser.pro/p/download-existing-audio-files-from-teams-admin-center-1839230eadb0/</link>
        <pubDate>Tue, 16 Aug 2022 17:33:21 +0000</pubDate>
        
        <guid>https://heusser.pro/p/download-existing-audio-files-from-teams-admin-center-1839230eadb0/</guid>
        <description>&lt;p&gt;Many companies use custom audio files like greetings, IVR announcements etc. in their call flows. Often these audio files are custom made by professionals. Hence, they provide a certain value to many customers. Unfortunately, sometimes people take the “set and forget” approach and these files are then either deleted or can’t be found by the people who need them.&lt;/p&gt;
&lt;p&gt;So, let’s assume that you have an auto attendant or a call queue in Teams which use custom audio files. Now you want to create a new call flow with the same greetings, but you can’t find the existing files anymore. The only place where they are stored is in Teams / the live configuration.&lt;/p&gt;
&lt;h4 id=&#34;download-viatac&#34;&gt;Download via TAC
&lt;/h4&gt;&lt;p&gt;Since a few weeks, it’s possible to download these files via TAC directly instead of just PowerShell. To do so, just go into the configuration of your auto attendant or call queue and locate the desired file you want to download.&lt;/p&gt;
&lt;p&gt;Now right click on the filename and select “Save link as”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/download-existing-audio-files-from-teams-admin-center-1839230eadb0/11yqZHiodIZeZzqL9YsH3rg.png&#34;
	width=&#34;708&#34;
	height=&#34;671&#34;
	srcset=&#34;https://heusser.pro/p/download-existing-audio-files-from-teams-admin-center-1839230eadb0/11yqZHiodIZeZzqL9YsH3rg_hu_24de34315c1f533c.png 480w, https://heusser.pro/p/download-existing-audio-files-from-teams-admin-center-1839230eadb0/11yqZHiodIZeZzqL9YsH3rg_hu_4bc5aaf41e947b4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;105&#34;
		data-flex-basis=&#34;253px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The suggested filename is actually the audio file id from the CsOnlineAudioFile but the extension is missing by default.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/download-existing-audio-files-from-teams-admin-center-1839230eadb0/1wNaFbBhDQgXFvIUxuonbQ.png&#34;
	width=&#34;708&#34;
	height=&#34;68&#34;
	srcset=&#34;https://heusser.pro/p/download-existing-audio-files-from-teams-admin-center-1839230eadb0/1wNaFbBhDQgXFvIUxuonbQ_hu_a53f43e6b0f4b108.png 480w, https://heusser.pro/p/download-existing-audio-files-from-teams-admin-center-1839230eadb0/1wNaFbBhDQgXFvIUxuonbQ_hu_83afbfb8dfbebfd5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1041&#34;
		data-flex-basis=&#34;2498px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Naturally, I tried to add .mp3 as the filename extension since that’s what it says in TAC.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/download-existing-audio-files-from-teams-admin-center-1839230eadb0/1aa4m4jVobzxNhGuZxTCAVw.png&#34;
	width=&#34;530&#34;
	height=&#34;129&#34;
	srcset=&#34;https://heusser.pro/p/download-existing-audio-files-from-teams-admin-center-1839230eadb0/1aa4m4jVobzxNhGuZxTCAVw_hu_fb8a8dd5d371c607.png 480w, https://heusser.pro/p/download-existing-audio-files-from-teams-admin-center-1839230eadb0/1aa4m4jVobzxNhGuZxTCAVw_hu_5bd826cafa2ceeef.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;410&#34;
		data-flex-basis=&#34;986px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Once the file has been downloaded, it plays back just fine on my computer. However, when I try to upload it to another auto attendant or call queue (or even the same for that matter), I always receive the following error message.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/download-existing-audio-files-from-teams-admin-center-1839230eadb0/1aWpVq6apo0mqJH0H2uwAw.png&#34;
	width=&#34;638&#34;
	height=&#34;55&#34;
	srcset=&#34;https://heusser.pro/p/download-existing-audio-files-from-teams-admin-center-1839230eadb0/1aWpVq6apo0mqJH0H2uwAw_hu_a2f754b4d294ef3f.png 480w, https://heusser.pro/p/download-existing-audio-files-from-teams-admin-center-1839230eadb0/1aWpVq6apo0mqJH0H2uwAw_hu_2d26a4679a0712d3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1160&#34;
		data-flex-basis=&#34;2784px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Teams supports MP3, WAV and WMA files which are smaller than 5 MB. So, the downloaded file should be supported. However, it looks like uploaded files are somehow converted by Teams, regardless of their source format. &lt;strong&gt;As soon as I renamed the downloaded mp3 file to .wav, I was able to upload the file without any issues.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/download-existing-audio-files-from-teams-admin-center-1839230eadb0/1jtiQRFtF8SowJ1FSkDVrNg.png&#34;
	width=&#34;397&#34;
	height=&#34;82&#34;
	srcset=&#34;https://heusser.pro/p/download-existing-audio-files-from-teams-admin-center-1839230eadb0/1jtiQRFtF8SowJ1FSkDVrNg_hu_bd610bfad569fc35.png 480w, https://heusser.pro/p/download-existing-audio-files-from-teams-admin-center-1839230eadb0/1jtiQRFtF8SowJ1FSkDVrNg_hu_35bc22c7c2ba329e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;484&#34;
		data-flex-basis=&#34;1161px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;download-by-powershell&#34;&gt;Download by PowerShell
&lt;/h4&gt;&lt;p&gt;Previously, the only way to download existing audio files was by using PowerShell. If that’s what you’re interested in, you can use the Gist below to download already uploaded audio files. This handy snippet will retrieve all types of audio files (TenantGlobal, HuntGroup and OrgAutoAttendant), present them in an Out-GridView list (Windows only) and lets you choose a destination directory.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/download-existing-audio-files-from-teams-admin-center-1839230eadb0/1EzZMcqhGpskq1eQ9p56T4g.png&#34;
	width=&#34;1499&#34;
	height=&#34;525&#34;
	srcset=&#34;https://heusser.pro/p/download-existing-audio-files-from-teams-admin-center-1839230eadb0/1EzZMcqhGpskq1eQ9p56T4g_hu_c52dbfef5e9c97.png 480w, https://heusser.pro/p/download-existing-audio-files-from-teams-admin-center-1839230eadb0/1EzZMcqhGpskq1eQ9p56T4g_hu_f58512d834a88a7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;285&#34;
		data-flex-basis=&#34;685px&#34;
	
&gt;&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/4bf4ab793a31b8350793d60e783214d0.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Note: It’s the same case here, if an mp3 file is saved with an mp3 filename extension, Teams won’t accept the file. Thus, the PowerShell code saves .mp3 and .wma files as .wav files.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;TLDR&lt;/em&gt;&lt;/strong&gt;; All you have to do is to download the file and save it as *.wav regardless of the original filename extension. You’ll then be able to easily export and reupload already existing audio files.&lt;/p&gt;
&lt;p&gt;I hope this article saves you some trouble next time somebody urgently needs an audio file which has mysteriously disappeared from SharePoint or your file server.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>How To Add a New Domain to M365 with MS Graph PowerShell</title>
        <link>https://heusser.pro/p/how-to-add-a-new-domain-to-m365-with-ms-graph-powershell-e6b41c02bfa3/</link>
        <pubDate>Thu, 21 Jul 2022 15:16:51 +0000</pubDate>
        
        <guid>https://heusser.pro/p/how-to-add-a-new-domain-to-m365-with-ms-graph-powershell-e6b41c02bfa3/</guid>
        <description>&lt;p&gt;As you might have &lt;a class=&#34;link&#34; href=&#34;https://techcommunity.microsoft.com/t5/microsoft-entra-azure-ad-blog/azure-ad-change-management-simplified/ba-p/2967456&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;heard&lt;/a&gt;, Microsoft will soon be deprecating the MSOnline PowerShell Module. Even though Microsoft is giving us a little bit more time (now after December 2022 instead of June 2022) it’s time to move on and start working with the new, Microsoft.Graph PowerShell Module. I’m already using it in my &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154&#34; &gt;Microsoft 365 Call Flow Visualizer&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Today, I updated a Direct Routing provisioning script which I wrote at work. This script does everything that’s needed to set up Direct Routing in a tenant.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add the FQDN of the SBC as a new Domain to the customer tenant&lt;/li&gt;
&lt;li&gt;Add the TXT verification DNS record to our Azure DNS zone&lt;/li&gt;
&lt;li&gt;Verify/confirm the domain in the customer tenant&lt;/li&gt;
&lt;li&gt;Create a resource account to &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-activate-fqdn-of-online-pstn-gateway-without-license-85e9ee4ca4cc&#34; &gt;activate the domain&lt;/a&gt; without a license&lt;/li&gt;
&lt;li&gt;Add the gateway, PSTN usage, voice route and voice routing policy&lt;/li&gt;
&lt;li&gt;Remove the activation user/resource account&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;prepare-graph-powershell&#34;&gt;Prepare Graph PowerShell
&lt;/h4&gt;&lt;p&gt;Before you can use Microsoft.Graph PowerShell you need to install the Module.&lt;/p&gt;
&lt;p&gt;Install-Module Microsoft.Graph&lt;/p&gt;
&lt;p&gt;This will install all Graph Modules. It’s also possible to install only select modules (e.g. &lt;code&gt;Install-Module Microsoft.Graph.Users&lt;/code&gt;) but since many modules have dependencies (e.g. Authentication etc.) it’s easier to just install all Modules from the get-go.&lt;/p&gt;
&lt;p&gt;When you connect to Microsoft Graph PowerShell you need to provide the required scopes. For the Cmdlets shown in t his blog article you need at least the following:&lt;/p&gt;
&lt;p&gt;Connect-MgGraph -Scopes &amp;ldquo;User.ReadWrite.All&amp;rdquo;,&amp;ldquo;Domain.ReadWrite.All&amp;rdquo;&lt;/p&gt;
&lt;p&gt;If you connect to Graph PowerShell for the first time, you will need to grant consent for the defined scopes. I’ve also defined the scope “Group.ReadWrite.All”, that’s why it also requests access for Read and write all groups.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-add-a-new-domain-to-m365-with-ms-graph-powershell-e6b41c02bfa3/1SX5hicBOkwEmlZmJp8tBw.png&#34;
	width=&#34;541&#34;
	height=&#34;815&#34;
	srcset=&#34;https://heusser.pro/p/how-to-add-a-new-domain-to-m365-with-ms-graph-powershell-e6b41c02bfa3/1SX5hicBOkwEmlZmJp8tBw_hu_aea9d3267614274e.png 480w, https://heusser.pro/p/how-to-add-a-new-domain-to-m365-with-ms-graph-powershell-e6b41c02bfa3/1SX5hicBOkwEmlZmJp8tBw_hu_bbaaa8daba2d81ae.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;66&#34;
		data-flex-basis=&#34;159px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Here are the old MSOnline Cmdlets vs the new Microsoft.Graph Cmdlets for the relevant actions.&lt;/p&gt;
&lt;h4 id=&#34;add-thedomain&#34;&gt;Add the Domain
&lt;/h4&gt;&lt;p&gt;MSol&lt;/p&gt;
&lt;p&gt;New-MsolDomain -Name &amp;ldquo;sbc001.domain.com&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Mg&lt;/p&gt;
&lt;p&gt;New-MgDomain -BodyParameter @{Id=&amp;ldquo;sbc001domain.com&amp;rdquo;;IsDefault=&amp;ldquo;False&amp;rdquo;}&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IsDefault&lt;/code&gt; is optional. The domain won’t be added as the new default domain, even if you don’t include this key in the hash table. You can still include it though, it might give you some sort of comfort.&lt;/p&gt;
&lt;h4 id=&#34;get-the-verification-text&#34;&gt;Get the Verification Text
&lt;/h4&gt;&lt;p&gt;This was the only one which was a bit tricky since the actual value is hidden in the “AdditionalProperties” property which won’t be shown in the output.&lt;/p&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-add-a-new-domain-to-m365-with-ms-graph-powershell-e6b41c02bfa3/14I3XovOid37okdOGNmCHYw.png&#34;
	width=&#34;1486&#34;
	height=&#34;113&#34;
	srcset=&#34;https://heusser.pro/p/how-to-add-a-new-domain-to-m365-with-ms-graph-powershell-e6b41c02bfa3/14I3XovOid37okdOGNmCHYw_hu_ce92c98eeae2d915.png 480w, https://heusser.pro/p/how-to-add-a-new-domain-to-m365-with-ms-graph-powershell-e6b41c02bfa3/14I3XovOid37okdOGNmCHYw_hu_2724767a5d9a2585.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1315&#34;
		data-flex-basis=&#34;3156px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If we use &lt;code&gt;| Format-Lsit&lt;/code&gt; or &lt;code&gt;| Select-Object *&lt;/code&gt; we will see that there’s a property called “AdditionalProperties”.&lt;/p&gt;
&lt;p&gt;This code, however, will store the verification code in the &lt;code&gt;$MgVerificationCode&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;Mg&lt;/p&gt;
&lt;p&gt;$MgVerificationCode = (Get-MgDomainVerificationDnsRecord -DomainId &amp;ldquo;sbc001.domain.com&amp;rdquo; | Where-Object {$_.RecordType -eq &amp;ldquo;Txt&amp;rdquo;}).AdditionalProperties.text&lt;/p&gt;
&lt;p&gt;Msol&lt;/p&gt;
&lt;p&gt;With Msol, the code did not include the first “MS=” why I needed to add it to the variable before getting the value. This is not the case with Graph anymore.&lt;/p&gt;
&lt;p&gt;$MsolVerificationCode = &amp;ldquo;MS=&amp;quot;+ (Get-MsolDomainVerificationDNS -DomainName $FQDNs.Values.FQDN).Label.Split(&amp;rdquo;.&amp;quot;)[0]&lt;/p&gt;
&lt;h4 id=&#34;verify-thedomain&#34;&gt;Verify the Domain
&lt;/h4&gt;&lt;p&gt;If you use an Azure DNS zone you can now use Az.DNS to create a new TXT record which contains &lt;code&gt;$MgVerificationCode&lt;/code&gt; as the value.&lt;/p&gt;
&lt;p&gt;New-AzDnsRecordSet -Name &amp;ldquo;sbc001&amp;rdquo; -RecordType TXT -ResourceGroupName &amp;ldquo;ResourceGroupX&amp;rdquo; -TTL 3600 -ZoneName &amp;ldquo;domain.com&amp;rdquo; -DnsRecords (New-AzDnsRecordConfig -Value $MgVerificationCode)&lt;/p&gt;
&lt;p&gt;Once the record is created, we can confirm the domain. This usually works within seconds if you use Azure DNS.&lt;/p&gt;
&lt;p&gt;Mg&lt;/p&gt;
&lt;p&gt;Confirm-MgDomain -DomainId &amp;ldquo;sbc001.domain.com&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Msol&lt;/p&gt;
&lt;p&gt;Confirm-MsolDomain -DomainName &amp;ldquo;sbc001.domain.com&amp;rdquo;&lt;/p&gt;
&lt;h4 id=&#34;remvoe-theuser&#34;&gt;Remvoe the User
&lt;/h4&gt;&lt;p&gt;When everything is set up, the activation user can be removed again.&lt;/p&gt;
&lt;p&gt;Mg&lt;/p&gt;
&lt;p&gt;Remove-MgUser -UserId $UpnAA&lt;/p&gt;
&lt;p&gt;Msol&lt;/p&gt;
&lt;p&gt;Remove-MsolUser -UserPrincipalName $UpnAA -Force&lt;/p&gt;
&lt;p&gt;While we needed to specify the &lt;code&gt;-Force&lt;/code&gt; parameter with MSol, we don’t need to specify anything when using Microsoft Graph. If you wish to make the script interactive and have a user confirm the deletion when using &lt;code&gt;Remove-MgUser&lt;/code&gt;, you can use the &lt;code&gt;-Confirm&lt;/code&gt; parameter instead.&lt;/p&gt;
&lt;p&gt;That’s all for today. Don’t fear Microsoft.Graph and happy scripting everybody!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Use Siri Shortcuts to make Microsoft Graph Requests</title>
        <link>https://heusser.pro/p/use-siri-shortcuts-to-make-microsoft-graph-requests-3804f80adbfa/</link>
        <pubDate>Sat, 16 Jul 2022 11:46:03 +0000</pubDate>
        
        <guid>https://heusser.pro/p/use-siri-shortcuts-to-make-microsoft-graph-requests-3804f80adbfa/</guid>
        <description>&lt;p&gt;Just two days ago I published &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6&#34; &gt;Set your Teams Status to In a Call when using other Calling &amp;amp; Meeting Apps on iOS&lt;/a&gt;. In this article, I explained how we can leverage Siri Shortcuts on iOS to call an Azure Function which then executes web requests against the Microsoft Graph API.&lt;/p&gt;
&lt;p&gt;Today I wanted to see if I’m able to get it working without the use of an Azure Function as a middleman. Spoiler alert: I totally was.&lt;/p&gt;
&lt;p&gt;You can import the Siri Shortcut from &lt;a class=&#34;link&#34; href=&#34;https://www.icloud.com/shortcuts/0c59afb62e5d401f80341e86e0492ad6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Of course, you need to have an Azure App Registration with the desired permissions ready to use this. Once you’ve imported the shortcut, just fill in the required information in the text fileds. We need the App Id, the App secret and the name (domain) or Id of the tenant.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/use-siri-shortcuts-to-make-microsoft-graph-requests-3804f80adbfa/1e3EoKpzxjpK6m0Ii7Wsw.png&#34;
	width=&#34;750&#34;
	height=&#34;1334&#34;
	srcset=&#34;https://heusser.pro/p/use-siri-shortcuts-to-make-microsoft-graph-requests-3804f80adbfa/1e3EoKpzxjpK6m0Ii7Wsw_hu_d1b2b5fd48f1c5aa.png 480w, https://heusser.pro/p/use-siri-shortcuts-to-make-microsoft-graph-requests-3804f80adbfa/1e3EoKpzxjpK6m0Ii7Wsw_hu_ed9404ac97cf98c5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;56&#34;
		data-flex-basis=&#34;134px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Let’s take a detailed look of what’s going on inside the Shortcut.&lt;/p&gt;
&lt;p&gt;First, an http POST request is made to request the access token. Client_id and client_secret are passed to the request body as variables from the Text fields you populated at the top of the Shortcut.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/use-siri-shortcuts-to-make-microsoft-graph-requests-3804f80adbfa/1QlYK0AE2DSj3SKPpfSJaug.jpeg&#34;
	width=&#34;750&#34;
	height=&#34;917&#34;
	srcset=&#34;https://heusser.pro/p/use-siri-shortcuts-to-make-microsoft-graph-requests-3804f80adbfa/1QlYK0AE2DSj3SKPpfSJaug_hu_b04b071bb1e0dacc.jpeg 480w, https://heusser.pro/p/use-siri-shortcuts-to-make-microsoft-graph-requests-3804f80adbfa/1QlYK0AE2DSj3SKPpfSJaug_hu_9d631585e7688229.jpeg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;81&#34;
		data-flex-basis=&#34;196px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The Microsoft authentication endpoint returns a JSON string which is similar to what you get when you use &lt;code&gt;Invoke-WebRequest&lt;/code&gt; instead of &lt;code&gt;Invoke-RestMethod&lt;/code&gt; in PowerShell.&lt;/p&gt;
&lt;p&gt;{&amp;ldquo;token_type&amp;rdquo;:&amp;ldquo;Bearer&amp;rdquo;,&amp;ldquo;expires_in&amp;rdquo;:3599,&amp;ldquo;ext_expires_in&amp;rdquo;:3599,&amp;ldquo;access_token&amp;rdquo;:&amp;ldquo;eyJ0eXAixboxOiJKV1QiLCJub25jZSI6ITUROWEtpblE4THcwNVN1Z1JMOU1aUUpwdXlqedasd1VpQXNjU3ciLseriesCJhbGciOiJSUzI1NiIsIng1dCI6IjJaUXBKM1VwYmpBWVhZR2FYRUpsOGxWMFRPSSIsImtpZCI6IXjJaUXBKM1VBWVhZR2FYRUp&amp;rdquo;}&lt;/p&gt;
&lt;p&gt;This means that we’ll have to get the &lt;code&gt;value&lt;/code&gt; of both the &lt;code&gt;keys&lt;/code&gt; “token_type” and “access_token”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/use-siri-shortcuts-to-make-microsoft-graph-requests-3804f80adbfa/1VKksWkNAJ7ESWUEjkQWd7Q.jpeg&#34;
	width=&#34;750&#34;
	height=&#34;850&#34;
	srcset=&#34;https://heusser.pro/p/use-siri-shortcuts-to-make-microsoft-graph-requests-3804f80adbfa/1VKksWkNAJ7ESWUEjkQWd7Q_hu_ccf255239ae94f5.jpeg 480w, https://heusser.pro/p/use-siri-shortcuts-to-make-microsoft-graph-requests-3804f80adbfa/1VKksWkNAJ7ESWUEjkQWd7Q_hu_79176f4ff4cee612.jpeg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;88&#34;
		data-flex-basis=&#34;211px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The access token is now stored in the variables &lt;code&gt;token_type&lt;/code&gt; (Bearer ) and &lt;code&gt;access_token&lt;/code&gt; (Actual token) and available to use in this Shortcut and subsequent web requests. To see if it’s working, we’re just going to make a GET request and return some Azure AD Users.&lt;/p&gt;
&lt;p&gt;Here you can see that we use both variables to include the access token in the &lt;code&gt;Authorization&lt;/code&gt; Header.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/use-siri-shortcuts-to-make-microsoft-graph-requests-3804f80adbfa/1RCYyCinwNHAg14Dd1DKWUw.jpeg&#34;
	width=&#34;750&#34;
	height=&#34;562&#34;
	srcset=&#34;https://heusser.pro/p/use-siri-shortcuts-to-make-microsoft-graph-requests-3804f80adbfa/1RCYyCinwNHAg14Dd1DKWUw_hu_5d9968cdf9f44a09.jpeg 480w, https://heusser.pro/p/use-siri-shortcuts-to-make-microsoft-graph-requests-3804f80adbfa/1RCYyCinwNHAg14Dd1DKWUw_hu_f79dfd3a65a566ff.jpeg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;133&#34;
		data-flex-basis=&#34;320px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Because this is an OData query, the values will be stored in the &lt;code&gt;value&lt;/code&gt; key. So we need to get the value of the &lt;code&gt;value&lt;/code&gt; key one more time to see some results.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/use-siri-shortcuts-to-make-microsoft-graph-requests-3804f80adbfa/12rVXLaYUXZyyNAMla6kjGA.png&#34;
	width=&#34;750&#34;
	height=&#34;1334&#34;
	srcset=&#34;https://heusser.pro/p/use-siri-shortcuts-to-make-microsoft-graph-requests-3804f80adbfa/12rVXLaYUXZyyNAMla6kjGA_hu_bb9bcbd4116ecfbd.png 480w, https://heusser.pro/p/use-siri-shortcuts-to-make-microsoft-graph-requests-3804f80adbfa/12rVXLaYUXZyyNAMla6kjGA_hu_32b4cbb6c69808cc.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;56&#34;
		data-flex-basis=&#34;134px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Of course, this is just an example to prove that the authentication is working without an Azure Function or any PowerShell code. Everything is running on an iOS device. Receiving data from Graph on an iPhone is probably not what people want to use this for, but it was the easiest example.&lt;/p&gt;
&lt;p&gt;Using Shortcuts to make http Post requests is much more interesting. Think about all the possibilities here for a second. We could basically do any Post request we want. And then, we can add Shortcuts to the iPhone Homescreen, ask Siri to run Shortcuts or even launch them from an Apple Watch. Amazing.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Set your Teams Status to In a Call when using other Calling &amp; Meeting Apps on iOS</title>
        <link>https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6/</link>
        <pubDate>Thu, 14 Jul 2022 21:59:48 +0000</pubDate>
        
        <guid>https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6/</guid>
        <description>&lt;p&gt;Hello everybody. I try my best to blog about new and unique Microsoft Teams related stuff at least once a month. If you’re new to my stories, feel free to check out my previous articles &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p&#34; &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Today we’re going to take a look at something very cool. A few months ago, I wrote this little code snippet which lets you change a Teams user’s presence by using PowerShell and the Microsoft Graph API. The API endpoint is documented &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/graph/api/presence-setpresence?view=graph-rest-1.0&amp;amp;tabs=http&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. You might be asking yourself: why would we want to do this in the first place? Teams already updates our presence if we’re in a call, a meeting or just busy because of an Outlook appointment, right?&lt;/p&gt;
&lt;h4 id=&#34;use-cases&#34;&gt;Use Cases
&lt;/h4&gt;&lt;p&gt;Setting the presence of a user can be very useful if for example not all your users are on Teams yet. Let’s say that we’ve still got a legacy PBX system with SIP devices registered to it, but we use Teams for internal calls. There’s no way to know that a user is already on the phone unless the user specifically updates his status to Busy or Do not disturb. A user can’t set his own status to “In a call” or “In a meeting” though.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6/1Z6KHSlNLLNCOK0AK8XeiyQ.png&#34;
	width=&#34;548&#34;
	height=&#34;680&#34;
	srcset=&#34;https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6/1Z6KHSlNLLNCOK0AK8XeiyQ_hu_648f9c40fc984f87.png 480w, https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6/1Z6KHSlNLLNCOK0AK8XeiyQ_hu_edce78d7f28f910d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;80&#34;
		data-flex-basis=&#34;193px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If we’re using an &lt;a class=&#34;link&#34; href=&#34;https://www.anynode.de/supervision/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;anynode SBC&lt;/a&gt; for example, we could implement a Route Supervision which calls an Azure Function, whenever a user receives or starts a call on a legacy PBX system. The Azure Function would then send an http POST request to the Graph API to change the presence status of the user.&lt;/p&gt;
&lt;p&gt;Since Microsoft has now released the &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/microsoftteams/sip-gateway-plan&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SIP Gateway&lt;/a&gt; the need for such a solution has significantly decreased because the SIP Gateway already handles Teams presence out of the box. If you’re interested in learning more about the SIP Gateway for Teams, please check out this session from Commsverse from my colleague &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/tpickhan&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Thorsten Pickhan&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;what-about-other-usecases&#34;&gt;What about other use cases?
&lt;/h4&gt;&lt;p&gt;I know, we all love Teams but sometimes we do need to use other calling and meeting apps such as Skype, Zoom, WhatsApp, or Discord. Don’t you just hate it that Teams doesn’t know when you’re already on a call in another app? Today, we’re going to change that!&lt;/p&gt;
&lt;h4 id=&#34;the-power-ofsiri&#34;&gt;The Power of Siri
&lt;/h4&gt;&lt;p&gt;If you have an iPhone or iPad you probably know about Siri Shortcuts and Automations. If you don’t know them already, I highly recommend checking them out. Shortcuts and automations are like local Power Automate Flows which are created and executed on your iOS device. Today I discovered that you can actually do http POST requests with Shortcuts. How cool is that?&lt;/p&gt;
&lt;p&gt;Granted, coding or building shortcuts is quite a hassle on such a small screen but there’s an easy workaround for that. We’re just using the Shortcut to call an Azure Function and let the Function do all the work for us.&lt;/p&gt;
&lt;h4 id=&#34;creating-an-azure-ad-app-registration&#34;&gt;Creating an Azure AD App Registration
&lt;/h4&gt;&lt;p&gt;First, we need an Azure AD App where we can grant the required permissions to set and clear the Teams presence. There’s an exceptional tutorial &lt;a class=&#34;link&#34; href=&#34;https://adamtheautomator.com/powershell-graph-api/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. (I also used the example code to acquire the token from this website.)&lt;/p&gt;
&lt;p&gt;“Presence.ReadWrite.All” is the permission we need.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6/1vWX5aB7074iXuLcnpJjGhA.png&#34;
	width=&#34;851&#34;
	height=&#34;537&#34;
	srcset=&#34;https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6/1vWX5aB7074iXuLcnpJjGhA_hu_1d751e4de83ced88.png 480w, https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6/1vWX5aB7074iXuLcnpJjGhA_hu_15724bde0f579e68.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;158&#34;
		data-flex-basis=&#34;380px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;create-an-azurefunction&#34;&gt;Create an Azure Function
&lt;/h4&gt;&lt;p&gt;Next, we create an Azure Function. If you’re not familiar with Azure Functions, please read this &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851&#34; &gt;article&lt;/a&gt;. The creating of a Function App and a Function is described under “Create the Refresh Card Function”.&lt;/p&gt;
&lt;p&gt;Copy and paste the following code into your function. Populate the variables on lines 10–14 with your tenant specific information.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/5b08518eff2dd7c579c61cab23e25e95.js&#34;&gt;&lt;/script&gt;

&lt;h4 id=&#34;create-the-sirishortcut&#34;&gt;Create the Siri Shortcut
&lt;/h4&gt;&lt;p&gt;Now, we’ll create a new Siri Shortcut. Choose “Get contents of URL” as your first action. Now go back to your Azure Function and copy its URL.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6/1VQBnbft1BSu02gpwe7Zl3g.png&#34;
	width=&#34;1840&#34;
	height=&#34;247&#34;
	srcset=&#34;https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6/1VQBnbft1BSu02gpwe7Zl3g_hu_a0bc7eac5c8b078a.png 480w, https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6/1VQBnbft1BSu02gpwe7Zl3g_hu_12a7a185baa80efc.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;744&#34;
		data-flex-basis=&#34;1787px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Paste the URL into the Shortcut. I always use Sticky Notes to quickly synchronize text between my Windows PC and my iPhone.&lt;/p&gt;
&lt;p&gt;Next, expand the action by clicking on the circled arrow which points right. This will reveal additional options. Change the Method to POST and add a key and a value (Text) to the Request Body. I used “Name”: “Azure”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6/1JPlHNIr6mVHsBIA1HLoOqA.jpeg&#34;
	width=&#34;750&#34;
	height=&#34;1334&#34;
	srcset=&#34;https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6/1JPlHNIr6mVHsBIA1HLoOqA_hu_a763cccb72152ed2.jpeg 480w, https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6/1JPlHNIr6mVHsBIA1HLoOqA_hu_5614208e557998af.jpeg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;56&#34;
		data-flex-basis=&#34;134px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;That’s it for the shortcut. You should now be able to run the shortcut. Every time you do so, your iOS device will call the Azure Function which will request a token and then set the defined user&amp;rsquo;s presence to In a Call.&lt;/p&gt;
&lt;p&gt;By now, I hope you can understand why I didn’t bother to try and also build the authentication flow using only Shortcuts.&lt;/p&gt;
&lt;h4 id=&#34;building-the-siri-automation&#34;&gt;Building the Siri Automation
&lt;/h4&gt;&lt;p&gt;The last piece we need to do is to create an Automation which will trigger the Shortcut. Unfortunately, there aren’t as many triggers as I had wished but using “When an App is opened” does the trick, sort of.&lt;/p&gt;
&lt;p&gt;In Shortcuts, switch from My Shortcuts to Automation on the bottom. Click + to create a new Automation. You want to create a Personal Automation.&lt;/p&gt;
&lt;p&gt;Select “App” as your trigger and then select one or multiple calling Apps.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6/1Qi4dsjTt9HZZOb1tkTRRVA.png&#34;
	width=&#34;750&#34;
	height=&#34;1334&#34;
	srcset=&#34;https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6/1Qi4dsjTt9HZZOb1tkTRRVA_hu_2f64e433906efd87.png 480w, https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6/1Qi4dsjTt9HZZOb1tkTRRVA_hu_eea79e627e5dd85c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;56&#34;
		data-flex-basis=&#34;134px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Then, add an action and search for “Run Shortcut”. Click on Shortcut and select the previously created Shortcut from the list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6/1c9TA4amw9yA5TGJHnvOueA.png&#34;
	width=&#34;750&#34;
	height=&#34;1334&#34;
	srcset=&#34;https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6/1c9TA4amw9yA5TGJHnvOueA_hu_275816a54e453ee.png 480w, https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6/1c9TA4amw9yA5TGJHnvOueA_hu_df1303d254abdb04.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;56&#34;
		data-flex-basis=&#34;134px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Click Next and then Done. Leave “Ask Before Running” enabled. This way you’ll be asked if you want to update your Teams presence each time you open one of the selected Apps. If you’re not making a call, you can just ignore or close the notification banner.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6/1xnsJrcVZZlXYiUnOFGfqfg.png&#34;
	width=&#34;750&#34;
	height=&#34;1334&#34;
	srcset=&#34;https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6/1xnsJrcVZZlXYiUnOFGfqfg_hu_15b0f625b2f294b3.png 480w, https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6/1xnsJrcVZZlXYiUnOFGfqfg_hu_dabc1e1de634dce5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;56&#34;
		data-flex-basis=&#34;134px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now you’re all set. Every time you open one of your selected Apps (just Skype in my case) the automation will be triggered and ask you, if you want to set your Teams presence to In a call.&lt;/p&gt;
&lt;p&gt;If you like, you can repeat all the steps and create another Function, Shortcut and Automation to clear the presence again, if you’re done with your call on the other App.&lt;/p&gt;
&lt;p&gt;In this case, just replace line 42–51 with this code in the “Clear Presence Function” and choose “When an App is closed” as the Siri Automation trigger.&lt;/p&gt;
&lt;p&gt;$Body = @&amp;quot;&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;&amp;ldquo;sessionId&amp;rdquo;: &amp;ldquo;bf3cbc08-e5b0-47bb-a4f0-89e3e3f7adac&amp;rdquo;,&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;&amp;ldquo;@&lt;/p&gt;
&lt;p&gt;Invoke-RestMethod -Method Post -Uri &amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;https://graph.microsoft.com/v1.0/users/$UserId/presence/clearPresence%22&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://graph.microsoft.com/v1.0/users/$UserId/presence/clearPresence&#34;&lt;/a&gt; -Headers $Header -Body $Body -ContentType &amp;ldquo;application/json&amp;rdquo;&lt;/p&gt;
&lt;h4 id=&#34;demo&#34;&gt;Demo
&lt;/h4&gt;&lt;p&gt;Here you can see the Automation in Action. At first, the user’s Teams presence is “Available”. When Skype is opened, the Automation is triggered and confirmed by the user. When Teams is opened again, we can see that the status has changed from “Available” to “In a call”. Because Skype was closed/minimized when Teams was opened, the second Automation, which clears the Teams presence again is triggered and allowed to run. This resets the Teams presence to its original state. Teams is closed and opened again to force a refresh of the presence.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6/1WA9VV3zTsQF3ov8DnQGfog.gif&#34;
	width=&#34;600&#34;
	height=&#34;1067&#34;
	srcset=&#34;https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6/1WA9VV3zTsQF3ov8DnQGfog_hu_885c091f1b5095bd.gif 480w, https://heusser.pro/p/set-your-teams-status-to-in-a-call-when-using-other-calling-meeting-apps-on-ios-3409d68aceb6/1WA9VV3zTsQF3ov8DnQGfog_hu_250523b66c683305.gif 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;56&#34;
		data-flex-basis=&#34;134px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;What’s cool is that this even works when you’re getting an incoming call in an App like Skype, WhatsApp etc. When you accept the call, the App is opened and thus triggers the automation. I can’t record that on video because iOS screen recording is stopped if an incoming call gets accepted and the notification does not show up, when screen sharing through AirPlay is active.&lt;/p&gt;
&lt;h4 id=&#34;bonus&#34;&gt;Bonus
&lt;/h4&gt;&lt;p&gt;Because we now have Shortcuts to set our Teams presence to “In a call” or clear the presence again, we can also use Siri to execute these Shortcuts. All we have to say is Hey Siri, followed by the name of the Shortcut. E.g. “Hey Siri, Set Teams Presence” or “Hey Siri, Clear Teams Presence”.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Microsoft Teams: Handle Shared Voicemail More Efficiently</title>
        <link>https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/</link>
        <pubDate>Sun, 05 Jun 2022 21:06:42 +0000</pubDate>
        
        <guid>https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/</guid>
        <description>&lt;p&gt;In this &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24&#34; &gt;article&lt;/a&gt;, I did a pretty hefty run down of all things shared voicemail in Microsoft Teams. I also teased another article about creating a Power Automate Flow to deliver shared voicemails into a Teams channel instead of receiving them just by email. …which brings us to this article.&lt;/p&gt;
&lt;p&gt;The idea behind all that is, that shared voicemails get posted as an adaptive card in a Teams channel, rather than that a few individuals receive shared voicemails by email.&lt;/p&gt;
&lt;h4 id=&#34;preparations&#34;&gt;Preparations
&lt;/h4&gt;&lt;p&gt;First, we need to identify or create a Microsoft 365 Group which will be configured as shared voicemail target on an auto attendant or a call queue. Next, we’ll need to enable the follow in inbox feature for this group and add a shared mailbox of choice to this M365 Group. (If you need help with this, please check the linked article at the beginning of this story.)&lt;/p&gt;
&lt;h4 id=&#34;building-theflow&#34;&gt;Building the Flow
&lt;/h4&gt;&lt;p&gt;Then we can start building our flow. Choose “When a new email arrives in a shared mailbox (V2)” (Office 365 Outlook) as your trigger and select the mailbox and its folder. (If this shared mailbox also receives other messages, you might want to include a subject filter under advanced options.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1TjJaftuwTADjGZhNQJHsEg.png&#34;
	width=&#34;919&#34;
	height=&#34;295&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1TjJaftuwTADjGZhNQJHsEg_hu_1bbc5ddff5c3c785.png 480w, https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1TjJaftuwTADjGZhNQJHsEg_hu_da12cc7ea4480c6e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;311&#34;
		data-flex-basis=&#34;747px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Next, we’ll need to initialize some variables.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1Mo4Px5HSucy8Q7gniM9KVg.png&#34;
	width=&#34;912&#34;
	height=&#34;285&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1Mo4Px5HSucy8Q7gniM9KVg_hu_e91aeb8f69a33cea.png 480w, https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1Mo4Px5HSucy8Q7gniM9KVg_hu_52515add349b3c12.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;320&#34;
		data-flex-basis=&#34;768px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The value of this variable is the phone number which left the voicemail. We can get the number by splitting the from address at the “@” character and selecting the first value of the splitted string. This is done with the following expression.&lt;/p&gt;
&lt;p&gt;split(triggerOutputs()?[&amp;lsquo;body/from&amp;rsquo;], &amp;lsquo;@&amp;rsquo;)[0]&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1N9QkMCcHSanum0L4lJkrA.png&#34;
	width=&#34;916&#34;
	height=&#34;283&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1N9QkMCcHSanum0L4lJkrA_hu_b09b3699b4186876.png 480w, https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1N9QkMCcHSanum0L4lJkrA_hu_b7081aeba721bbd4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;323&#34;
		data-flex-basis=&#34;776px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;To avoid duplicate files, we will create a time stamp with this expression. (Adjust the name of the time zone to your own time zone. If you’re not sure how your time zone is called, just run “Get-TimeZone” in PowerShell and copy it’s Id.)&lt;/p&gt;
&lt;p&gt;convertTimeZone(utcNow(),&amp;lsquo;UTC&amp;rsquo;,&amp;lsquo;W. Europe Standard Time&amp;rsquo;, &amp;lsquo;yyyy-MM-dd HH:mm:ss&amp;rsquo;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1wAZc48VRkLgFAsVeJyrQ.png&#34;
	width=&#34;915&#34;
	height=&#34;285&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1wAZc48VRkLgFAsVeJyrQ_hu_18502116db6c5ba8.png 480w, https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1wAZc48VRkLgFAsVeJyrQ_hu_2bf79537e9ac6503.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;321&#34;
		data-flex-basis=&#34;770px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;And in the end, we will convert the “+” sign into an URL friendly format with this expression.&lt;/p&gt;
&lt;p&gt;replace(variables(&amp;lsquo;FromNumber&amp;rsquo;), &amp;lsquo;+&amp;rsquo;, &amp;lsquo;%2b&amp;rsquo;)&lt;/p&gt;
&lt;p&gt;Now we have all the variables which we need. Choose “Get Attachment (V2)” (Outlook Office 365) as your next action. This will automatically add an “Apply to each” loop for this action. Let’s fill in the dynamic content of the trigger output such as “Message Id” and “Attachment Id”. To be sure that only voicemails are uploaded to SharePoint, I’ve added a condition which checks if the attachments filename ends with *.mp3.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/10Wa7BKJuUsYsSm3vdMTuw.png&#34;
	width=&#34;1973&#34;
	height=&#34;807&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/10Wa7BKJuUsYsSm3vdMTuw_hu_57af2001f222fc35.png 480w, https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/10Wa7BKJuUsYsSm3vdMTuw_hu_7113c9815f6bf100.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;244&#34;
		data-flex-basis=&#34;586px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If it does, we’ll save the file to SharePoint. If it doesn’t, we won’t do any further processing and the flow ends there. Notice how we’ll use the previously initialized variables to construct a unique filename consisting of the received date and the caller’s number. Once the file has been saved, we’ll create a share link to later access the file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1PtvopHOOHj77EW7S0wh1Q.png&#34;
	width=&#34;972&#34;
	height=&#34;962&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1PtvopHOOHj77EW7S0wh1Q_hu_56eca94b42dda14e.png 480w, https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1PtvopHOOHj77EW7S0wh1Q_hu_aa4b9b3c90ad7bc0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;101&#34;
		data-flex-basis=&#34;242px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;All that’s left to do now is to post an adaptive card to a channel and wait for a reply.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1L1N5uzLNZkz9j00cjuldLg.png&#34;
	width=&#34;832&#34;
	height=&#34;1790&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1L1N5uzLNZkz9j00cjuldLg_hu_baa83b2b2440fc90.png 480w, https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1L1N5uzLNZkz9j00cjuldLg_hu_befb4be6458b9d4a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;46&#34;
		data-flex-basis=&#34;111px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Paste the following JSON object into your flow and replace the variables with your own names if needed.&lt;/p&gt;
&lt;p&gt;{&lt;br&gt;
&amp;ldquo;$schema&amp;rdquo;: &amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;http://adaptivecards.io/schemas/adaptive-card.json&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://adaptivecards.io/schemas/adaptive-card.json&lt;/a&gt;&amp;rdquo;,&lt;br&gt;
&amp;ldquo;type&amp;rdquo;: &amp;ldquo;AdaptiveCard&amp;rdquo;,&lt;br&gt;
&amp;ldquo;version&amp;rdquo;: &amp;ldquo;1.3&amp;rdquo;,&lt;br&gt;
&amp;ldquo;body&amp;rdquo;: [&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;type&amp;rdquo;: &amp;ldquo;TextBlock&amp;rdquo;,&lt;br&gt;
&amp;ldquo;text&amp;rdquo;: &amp;ldquo;@{triggerOutputs()?[&amp;lsquo;body/subject&amp;rsquo;]}&amp;rdquo;,&lt;br&gt;
&amp;ldquo;size&amp;rdquo;: &amp;ldquo;Large&amp;rdquo;&lt;br&gt;
},&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;type&amp;rdquo;: &amp;ldquo;TextBlock&amp;rdquo;,&lt;br&gt;
&amp;ldquo;text&amp;rdquo;: &amp;ldquo;New Voicemail from @{variables(&amp;lsquo;FromNumber&amp;rsquo;)}&amp;rdquo;&lt;br&gt;
},&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;type&amp;rdquo;: &amp;ldquo;ActionSet&amp;rdquo;,&lt;br&gt;
&amp;ldquo;actions&amp;rdquo;: [&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;type&amp;rdquo;: &amp;ldquo;Action.OpenUrl&amp;rdquo;,&lt;br&gt;
&amp;ldquo;title&amp;rdquo;: &amp;ldquo;Listen to Voicemail Message&amp;rdquo;,&lt;br&gt;
&amp;ldquo;url&amp;rdquo;: &amp;ldquo;@{outputs(&amp;lsquo;Create_sharing_link_for_a_file_or_folder&amp;rsquo;)?[&amp;lsquo;body/link/webUrl&amp;rsquo;]}&amp;rdquo;&lt;br&gt;
}&lt;br&gt;
]&lt;br&gt;
},&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;type&amp;rdquo;: &amp;ldquo;ActionSet&amp;rdquo;,&lt;br&gt;
&amp;ldquo;actions&amp;rdquo;: [&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;type&amp;rdquo;: &amp;ldquo;Action.OpenUrl&amp;rdquo;,&lt;br&gt;
&amp;ldquo;title&amp;rdquo;: &amp;ldquo;@{variables(&amp;lsquo;FromNumber&amp;rsquo;)} Call Back&amp;rdquo;,&lt;br&gt;
&amp;ldquo;url&amp;rdquo;: &amp;ldquo;&lt;a class=&#34;link&#34; href=&#34;https://teams.microsoft.com/l/call/0/0?users=4:@%7Bvariables%28%27CallBackNumber%27%29%7D&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://teams.microsoft.com/l/call/0/0?users=4:@{variables(&amp;lsquo;CallBackNumber&amp;rsquo;)}&lt;/a&gt;&amp;rdquo;&lt;br&gt;
},&lt;br&gt;
{&lt;br&gt;
&amp;ldquo;type&amp;rdquo;: &amp;ldquo;Action.Submit&amp;rdquo;,&lt;br&gt;
&amp;ldquo;title&amp;rdquo;: &amp;ldquo;Call Completed&amp;rdquo;,&lt;br&gt;
&amp;ldquo;style&amp;rdquo;: &amp;ldquo;positive&amp;rdquo;&lt;br&gt;
}&lt;br&gt;
]&lt;br&gt;
}&lt;br&gt;
]&lt;br&gt;
}&lt;/p&gt;
&lt;h3 id=&#34;the-result&#34;&gt;The Result
&lt;/h3&gt;&lt;p&gt;Let’s see how this looks from a user&amp;rsquo;s perspective. Whenever a new shared voicemail is received in the shared mailbox, the Flow will be triggered and sends an adaptive card into the channel.&lt;/p&gt;
&lt;p&gt;All Team members will know that a new voicemail has been received and they can listen to it by clicking the button.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1OSUU8Q1gnJGs2jVqNeag.png&#34;
	width=&#34;1233&#34;
	height=&#34;396&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1OSUU8Q1gnJGs2jVqNeag_hu_7cf68074c4dd0eb8.png 480w, https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1OSUU8Q1gnJGs2jVqNeag_hu_a3cc6a17d8e4864a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;311&#34;
		data-flex-basis=&#34;747px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This will open the SharePoint link and the media can be played back in the browser.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1fLv1Wx2j4fnsIjFXgGimg.png&#34;
	width=&#34;1896&#34;
	height=&#34;1020&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1fLv1Wx2j4fnsIjFXgGimg_hu_d47db4d4a8dc86b4.png 480w, https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1fLv1Wx2j4fnsIjFXgGimg_hu_2332cf660b1f53a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;185&#34;
		data-flex-basis=&#34;446px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, playing back media on adaptive cards is not yet supported in Teams.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1hAWYMhyLYhbgz8eG7K5gg.png&#34;
	width=&#34;1240&#34;
	height=&#34;241&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1hAWYMhyLYhbgz8eG7K5gg_hu_5975dbe41e76d836.png 480w, https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1hAWYMhyLYhbgz8eG7K5gg_hu_431ee1e44e7515eb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;514&#34;
		data-flex-basis=&#34;1234px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Because we’ve inserted a &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/creating-microsoft-teams-calling-deep-links-f7c9d62eacdd&#34; &gt;calling deep link&lt;/a&gt; on the adaptive card, users will also be able to initiate a call directly from the card.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1SkEKX8jDzDm0ToFqlAA.png&#34;
	width=&#34;889&#34;
	height=&#34;228&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1SkEKX8jDzDm0ToFqlAA_hu_ce0ed1ec4e44be68.png 480w, https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1SkEKX8jDzDm0ToFqlAA_hu_e109e76e9cb75a0b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;389&#34;
		data-flex-basis=&#34;935px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;And finally, once the customer has been called back the adaptive card can be completed by clicking the “Call Completed” button. This will refresh the card and let all other channel members know, that there is no action needed from their side anymore. They will also be able to see, who completed the card.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1SBzl3BpHLvjijG1rcX5MA.png&#34;
	width=&#34;1228&#34;
	height=&#34;289&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1SBzl3BpHLvjijG1rcX5MA_hu_df33b29ff5c07b6f.png 480w, https://heusser.pro/p/microsoft-teams-handle-shared-voicemail-more-efficiently-746ddeae6ac4/1SBzl3BpHLvjijG1rcX5MA_hu_3cab282b95f1799c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;424&#34;
		data-flex-basis=&#34;1019px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I really hope that media cards will soon be supported to provide an even better user experience in Teams.&lt;/p&gt;
&lt;p&gt;As always, I hope that you liked my article and that it helps you too, deliver a better user experience.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Microsoft Teams Self-Service Auto Attendants (Without Premium Connectors)</title>
        <link>https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/</link>
        <pubDate>Tue, 17 May 2022 20:39:01 +0000</pubDate>
        
        <guid>https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/</guid>
        <description>&lt;p&gt;Hi everybody.&lt;/p&gt;
&lt;p&gt;Every week more customers are moving to a Microsoft Teams based telephone solution. With that, customers also want more flexibility in managing their auto attendants and call queues. Many of my customers also want their team managers or members to be able to change certain settings of their auto attendants and call queues by themselves. The problem is that all these changes currently require an administrator role for Microsoft Teams. Even though most of the things can be configured in an easy-to-understand GUI in TAC (Teams Admin Center), a user could still potentially break stuff if they’re not 100% aware of what they’re doing. Furthermore, some changes are not as straight forward as they could be. As an example: There’s no switch to manually “open” or “close” an auto attendant since the default and after hours call flows are linked to a weekly recurrent schedule.&lt;/p&gt;
&lt;p&gt;While Teams is certainly lacking in this area, there’s no denying that the advantages of a Teams Phone solution far outweigh the disadvantages. Microsoft also offers numerous awesome tools to cope with this very issue by allowing us to automate nearly everything. And that ladies and gentlemen, is one of the most awesome and fascinating things to me!&lt;/p&gt;
&lt;p&gt;Let’s dive in.&lt;/p&gt;
&lt;h4 id=&#34;credits-and-inspiration&#34;&gt;Credits and Inspiration
&lt;/h4&gt;&lt;p&gt;This article is inspired by the work of two other fantastic community members and bloggers: MVPs &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/Luca_Vitali&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Luca Vitali&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/AlexHolmeset&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Alexander Holmeset&lt;/a&gt;. Both have written articles on self-service &lt;a class=&#34;link&#34; href=&#34;https://alexholmeset.blog/2021/11/05/self-service-microsoft-teams-auto-attendant-administration/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;auto attendant&lt;/a&gt; and &lt;a class=&#34;link&#34; href=&#34;https://lucavitali.wordpress.com/2020/11/23/how-to-use-lightweight-bot-and-azure-automation-to-interact-with-teams-call-queue/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;call queue&lt;/a&gt; management using Microsoft automation tools.&lt;/p&gt;
&lt;p&gt;I don’t think that I would have been able to come up with a solution of my own without their exceptional blog posts. At least not this fast.&lt;/p&gt;
&lt;p&gt;To fully understand this blog post, please make sure you read their publications first.&lt;/p&gt;
&lt;h4 id=&#34;the-ever-present-licensing-dilemma&#34;&gt;The Ever-Present Licensing Dilemma
&lt;/h4&gt;&lt;p&gt;Alex’s solution uses a combination of Microsoft Forms, Power Automate and an Azure Runbook. However, to use an HTTP request either as a trigger or an action in a Flow, you need a premium license for Power Automate. I can understand that requirement from Microsofts business perspective, but such a basic feature shouldn’t require a premium license. Since I don’t have any premium licenses at the moment anyway, I looked for other ways.&lt;/p&gt;
&lt;p&gt;Luca’s method uses an outgoing webhook in Teams. It’s a great way to invoke a Bot or script directly from Teams. There’s no need to install any apps and you don’t even need to open a website or an App to change some settings on an auto attendant or a call queue.&lt;/p&gt;
&lt;p&gt;The problem is that Teams can’t really handle the response sent back by the Runbook. This means that a user will always get an error message, even if the Runbook was triggered successfully. This might be very confusing for end users and just doesn’t look nice.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1l4zCsrW8BZdzKBuSOSUEww.png&#34;
	width=&#34;1769&#34;
	height=&#34;320&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1l4zCsrW8BZdzKBuSOSUEww_hu_33bc8c78230778c8.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1l4zCsrW8BZdzKBuSOSUEww_hu_a5e8406e7ef024f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;552&#34;
		data-flex-basis=&#34;1326px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;azure-functions&#34;&gt;Azure Functions
&lt;/h4&gt;&lt;p&gt;Instead of calling the Azure Runbook directly from the outgoing Teams webhook, I tried to call an Azure Function first. &lt;a class=&#34;link&#34; href=&#34;https://azure.microsoft.com/en-us/services/functions/?ef_id=EAIaIQobChMIrP2Yzfqu9wIVDtxRCh1qvABSEAAYASAAEgK5RfD_BwE%3AG%3As&amp;amp;OCID=AID2200264_SEM_EAIaIQobChMIrP2Yzfqu9wIVDtxRCh1qvABSEAAYASAAEgK5RfD_BwE%3AG%3As&amp;amp;gclid=EAIaIQobChMIrP2Yzfqu9wIVDtxRCh1qvABSEAAYASAAEgK5RfD_BwE&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Azure Functions&lt;/a&gt; are serverless web services which can execute code once they’re called by a trigger. Much like the Runbook in Luca’s blog, my Function is also triggered by a web request by the outgoing webhook.&lt;/p&gt;
&lt;p&gt;From what I could find &lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/45743782/custom-bot-always-replies-with-an-error&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;on the internet&lt;/a&gt;, the webhook expects a reply in JSON format containing &lt;code&gt;&amp;quot;type&amp;quot;: &amp;quot;message&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;text&amp;quot;: &amp;quot;some message&amp;quot;&lt;/code&gt;. I didn’t find a way to customize the response of the Runbook but it’s easy with an Azure Function. I will show you how later in this post.&lt;/p&gt;
&lt;h3 id=&#34;override-auto-attendant-businesshours&#34;&gt;Override Auto Attendant Business Hours
&lt;/h3&gt;&lt;p&gt;Let’s start with the example from the introduction of this article. Let’s assume that we have a small company where the users who answer the phone need to be able to manually open or close an auto attendant.&lt;/p&gt;
&lt;p&gt;Note: This part assumes that you already have the following components set up. If you don’t have them already, please refer to the external websites linked in this post in order to set them up.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Microsoft Teams Auto Attendant&lt;/li&gt;
&lt;li&gt;A Microsoft Teams Team&lt;/li&gt;
&lt;li&gt;An Azure Automation Account&lt;/li&gt;
&lt;li&gt;An Azure Function App&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, it might be a little confusing at first, because we’re creating each component from the opposite direction in which they are chained together. This way, we only have to touch each component once though.&lt;/p&gt;
&lt;h4 id=&#34;prepare-the-auto-attendant&#34;&gt;Prepare the Auto Attendant
&lt;/h4&gt;&lt;p&gt;The easiest way I could think of is to create a special holiday for this scenario. I called it “Manual Override”. The reason I did it in this way is that the actual business hours don’t get changed. If there were multiple hours per day or different hours each day, it would be quite an effort to revert all the changes once the manual override should no longer be active.&lt;/p&gt;
&lt;p&gt;To start configuring it, head over to TAC and switch to Voice\Holidays. Now create a new holiday and set the dates to anywhere in the past.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/13cZh7wnoXylrJra7g552Xw.png&#34;
	width=&#34;1307&#34;
	height=&#34;468&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/13cZh7wnoXylrJra7g552Xw_hu_ea0c114af5a4e0e1.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/13cZh7wnoXylrJra7g552Xw_hu_8659a41c4757d5f3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;279&#34;
		data-flex-basis=&#34;670px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now go to your auto attendant and link the holiday schedule.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1HmJH2bcY32mdNcD7AbdG8Q.png&#34;
	width=&#34;1171&#34;
	height=&#34;527&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1HmJH2bcY32mdNcD7AbdG8Q_hu_1c0092cf3cbae448.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1HmJH2bcY32mdNcD7AbdG8Q_hu_c4dbb21d16ce0d51.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;222&#34;
		data-flex-basis=&#34;533px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Make sure you click “Submit” after you have saved the holiday. Otherwise, the auto attendant won’t be updated.&lt;/p&gt;
&lt;p&gt;That’s all you need to do in order to prepare your auto attendant for this self-service solution.&lt;/p&gt;
&lt;p&gt;Later in this post, I will provide an example script which will log into Teams PowerShell and change the dates of the “Manual Override” Holiday. When an auto attendant should be open, the holiday schedule will be set to past dates. Past dates won’t have any effect on the auto attendants routing decisions and therefore the auto attendant&amp;rsquo;s business hours schedule will be active.&lt;/p&gt;
&lt;p&gt;When the auto attendant should be manually closed before the configured business hours end, the holiday schedule will be updated to start at today’s date and end at the start of tomorrow’s date.&lt;/p&gt;
&lt;p&gt;This means that it’s possible to close the attendant if the office closes before the regular business hours on that day. If it’s not manually opened again, it will resume to normal business hours as soon as the next day starts.&lt;/p&gt;
&lt;p&gt;While it’s possible to close or open the attendant during business hours (e.g., extended lunch break), it’s not possible to extend the configured business hours using the method used by the provided example script.&lt;/p&gt;
&lt;h4 id=&#34;prepare-your-teamschannel&#34;&gt;Prepare your Teams Channel
&lt;/h4&gt;&lt;p&gt;First, we will need an incoming webhook in a channel to receive messages in Teams. We will use this webhook to receive message cards sent by an Azure Function or by a Runbook.&lt;/p&gt;
&lt;p&gt;Go to your desired channel and click on “Connectors”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/13qApQbilVuvLrzFbROq0Kw.png&#34;
	width=&#34;777&#34;
	height=&#34;484&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/13qApQbilVuvLrzFbROq0Kw_hu_8cc6d2963133b3ad.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/13qApQbilVuvLrzFbROq0Kw_hu_a56db33ffa789cf1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;160&#34;
		data-flex-basis=&#34;385px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now add an Incoming Webhook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1luJXKnNDSQWz8WTUCT09A.png&#34;
	width=&#34;1171&#34;
	height=&#34;361&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1luJXKnNDSQWz8WTUCT09A_hu_47391bd6be1ee15b.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1luJXKnNDSQWz8WTUCT09A_hu_1b082fa11715de93.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;324&#34;
		data-flex-basis=&#34;778px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1C6IrFUEq9VLWDZazRGAeRw.png&#34;
	width=&#34;1315&#34;
	height=&#34;411&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1C6IrFUEq9VLWDZazRGAeRw_hu_9a6992eebd499e05.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1C6IrFUEq9VLWDZazRGAeRw_hu_32f98a6052e574a8.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;319&#34;
		data-flex-basis=&#34;767px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;After clicking “Add” the second time, the window will close. Open “Connectors” again and click “Configure”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1HSglWMuPkJYl3sNQUEYA.png&#34;
	width=&#34;1149&#34;
	height=&#34;319&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1HSglWMuPkJYl3sNQUEYA_hu_a3ee0086cb9f701.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1HSglWMuPkJYl3sNQUEYA_hu_a7b70e22b08092e5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;360&#34;
		data-flex-basis=&#34;864px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Give your Connector a name and upload an Icon (if you want to) and then click “Create”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1qSI9VpKxilxNLqu0ofyMQQ.png&#34;
	width=&#34;1156&#34;
	height=&#34;994&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1qSI9VpKxilxNLqu0ofyMQQ_hu_495b6cbd844e7ede.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1qSI9VpKxilxNLqu0ofyMQQ_hu_3f1809191ac86800.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;116&#34;
		data-flex-basis=&#34;279px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;After you have created the webhook, its URL for your connector will be shown. Copy the URL and save it for later.&lt;/p&gt;
&lt;h4 id=&#34;create-an-azurerunbook&#34;&gt;Create an Azure Runbook
&lt;/h4&gt;&lt;p&gt;Let’s create the Runbook which will change the settings on our auto attendant. This script will log into Teams PowerShell and manipulate the holiday schedule called “Manual Override”. Because only the schedule is changed, there’s not even a need to specify an auto attendant explicitly. You could even add the “Manual Override” holiday schedule to all your auto attendants (which are in the same time zone) and open or close them all at once.&lt;/p&gt;
&lt;p&gt;If you don’t have an Azure Automation Account already, you can read how to create one &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/azure/automation/automation-create-standalone-account?tabs=azureportal&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt; or in Luca Vitali’s article under chapter 1.&lt;/p&gt;
&lt;p&gt;From within your Automation Account, click “Create a runbook”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1F9IIVDVkgw4TxgdynhcfA.png&#34;
	width=&#34;1297&#34;
	height=&#34;142&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1F9IIVDVkgw4TxgdynhcfA_hu_61dbebd4885d0b8b.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1F9IIVDVkgw4TxgdynhcfA_hu_34b923c7809efb89.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;913&#34;
		data-flex-basis=&#34;2192px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Name your Runbook and choose the following settings.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1aiFCtj7JQdEF0FQTqSrxqg.png&#34;
	width=&#34;1080&#34;
	height=&#34;525&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1aiFCtj7JQdEF0FQTqSrxqg_hu_5a820bf49b12d5e8.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1aiFCtj7JQdEF0FQTqSrxqg_hu_286e9c1924fe93a3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;205&#34;
		data-flex-basis=&#34;493px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Paste the following code in the editing pane. Make sure to also insert your webhook URL on line 7 between the double quotes.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/22e54e29fda1304914fecc1b4f73541e.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;For this to work, we obviously need credentials which have the Teams Administrator Role. These are imported on line 17. If you need guidance on how to add them to your automation account, please refer to Luca Vitali’s article under chapter 3.&lt;/p&gt;
&lt;p&gt;Once you have pasted the script and inserted your webhook URL, save and publish the Runbook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1DhNPlwQ3grUUNEmrdUfEg.png&#34;
	width=&#34;752&#34;
	height=&#34;141&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1DhNPlwQ3grUUNEmrdUfEg_hu_ffc3eb5bee0325fb.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1DhNPlwQ3grUUNEmrdUfEg_hu_9277880e5a743e00.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;533&#34;
		data-flex-basis=&#34;1280px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Next, we will add a webhook to the Runbook as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1vyUi1t0LaYYugFHyU2NXA.png&#34;
	width=&#34;1624&#34;
	height=&#34;203&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1vyUi1t0LaYYugFHyU2NXA_hu_c7f0b0d35d55b7c0.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1vyUi1t0LaYYugFHyU2NXA_hu_a495bff0188ed0a9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;800&#34;
		data-flex-basis=&#34;1920px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;You can also read in detail how to configure the webhook on Luca’s blog.&lt;/p&gt;
&lt;p&gt;Copy the webhook URL of the Runbook and save it for later.&lt;/p&gt;
&lt;h4 id=&#34;create-the-refresh-cardfunction&#34;&gt;Create the Refresh Card Function
&lt;/h4&gt;&lt;p&gt;Next, we will create a new Azure Function. This Function will be called when a user clicks on the “Submit Config” button on a card which was sent by the first Function (which will be created later). Besides triggering the Runbook, it will also update the card which was sent by the first Function.&lt;/p&gt;
&lt;p&gt;For this, go to portal.azure.com and select Function App. If you don’t have an Azure Function App already, you need to &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-function-app-portal#create-a-function-app&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;create one&lt;/a&gt; first.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1CumuF2zcRMU0JMZWi9LjdA.png&#34;
	width=&#34;1084&#34;
	height=&#34;1324&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1CumuF2zcRMU0JMZWi9LjdA_hu_dcf7dbf669d84f53.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1CumuF2zcRMU0JMZWi9LjdA_hu_e12ca678deab8eda.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;81&#34;
		data-flex-basis=&#34;196px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Once the Function App has been deployed you can create the function.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1dBu57rsM9ztmOXanEQsBA.png&#34;
	width=&#34;821&#34;
	height=&#34;193&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1dBu57rsM9ztmOXanEQsBA_hu_6e066a0d7189692d.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1dBu57rsM9ztmOXanEQsBA_hu_b9e4c47b7e0a3629.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;425&#34;
		data-flex-basis=&#34;1020px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Choose “HTTP trigger” as the template, name your function and leave the Authorization level at “Function”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1AOtHCDdzmktCrFloLFxCA.png&#34;
	width=&#34;1244&#34;
	height=&#34;1228&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1AOtHCDdzmktCrFloLFxCA_hu_7250cdee4009cf34.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1AOtHCDdzmktCrFloLFxCA_hu_2481f328785628da.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;101&#34;
		data-flex-basis=&#34;243px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In the editing pane, paste the following code. Insert the URL from the Runbook webhook on line 8 in between the double quotes.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/a908360198d56dd82798164f9e2c4ce0.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Save the Function and copy the Function URL by clicking “Get function URL”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1GCEmPpCLTPQk4T100aesg.png&#34;
	width=&#34;867&#34;
	height=&#34;85&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1GCEmPpCLTPQk4T100aesg_hu_63283f3b6a873c9d.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1GCEmPpCLTPQk4T100aesg_hu_da6ddbf525c87126.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1020&#34;
		data-flex-basis=&#34;2448px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Note: the URL will include a key at the end. Because we’ve chosen “Function” as the Authorization level when we created the function, it will only be possible to call the function by including the key in the URL.&lt;/p&gt;
&lt;h4 id=&#34;create-the-request-cardfunction&#34;&gt;Create the Request Card Function
&lt;/h4&gt;&lt;p&gt;Now we create the second Function. This is the Function which will be called from the outgoing webhook in Teams and sends the “Config Change” Card to the channel. It’s actually the Function which will be called first.&lt;/p&gt;
&lt;p&gt;Paste the following code in the Azure Portal. Again, make sure to populate the variables on line 6 and 7. $uri represents the URL of your Teams incoming webhook and $refreshURI represents the URL of your “RefreshCard” Azure Function.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/0c3b259ab033bd39880a3665f48cd760.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Don’t forget to save the Function.&lt;/p&gt;
&lt;h4 id=&#34;create-an-outgoing-webhook-inteams&#34;&gt;Create an Outgoing Webhook in Teams
&lt;/h4&gt;&lt;p&gt;Finally, we need to create an outgoing webhook in Teams. Users will be able to mention the webhook in the channel. Once the “Bot” is mentioned, a web request will be made to the “RequestCard” Function.&lt;/p&gt;
&lt;p&gt;To set it up, go to your Team’s settings and switch to the Apps tab. From there, click on “Create an outgoing webhook” on the bottom right.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/11rS272NPQrXX9EE9LbUnQ.png&#34;
	width=&#34;1896&#34;
	height=&#34;1041&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/11rS272NPQrXX9EE9LbUnQ_hu_9fede21c08cff6a2.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/11rS272NPQrXX9EE9LbUnQ_hu_27ce07d431bf0d0c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;437px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Name your outgoing webhook and paste the Function URL of the “RequestCard” Function in the “Callback URL” field before you click “Create”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1N4NssEokqJxnX8LCCGuU2A.png&#34;
	width=&#34;871&#34;
	height=&#34;792&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1N4NssEokqJxnX8LCCGuU2A_hu_f034e895c3dadbb2.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1N4NssEokqJxnX8LCCGuU2A_hu_33bba750f0fd5609.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;109&#34;
		data-flex-basis=&#34;263px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;You can ignore the security token which will be shown after the webhook has been created. If you like you can still save it somewhere safe.&lt;/p&gt;
&lt;h3 id=&#34;see-it-inaction&#34;&gt;See it in Action
&lt;/h3&gt;&lt;p&gt;Now that we have everything set up, any member of the channel can request a card to manually open or close an auto attendant.&lt;/p&gt;
&lt;p&gt;Here’s the “Manual Override” Holiday Schedule before the config change has been submitted. Today, as of writing this article it’s the 17th of May 2022. The holiday schedule is set to 15.05.2022–16.052022 so it’s non-effective.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/11ZO1uAxt2OUWo0RWzvaXA.png&#34;
	width=&#34;1156&#34;
	height=&#34;266&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/11ZO1uAxt2OUWo0RWzvaXA_hu_e63a61e0653bdceb.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/11ZO1uAxt2OUWo0RWzvaXA_hu_d947aab4b2fe6a78.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;434&#34;
		data-flex-basis=&#34;1043px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;And here’s the chronological process:&lt;/p&gt;
&lt;p&gt;A user requests a card by mentioning the outgoing webhook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/12pjsanYyHOkHRzO08yZGg.png&#34;
	width=&#34;1141&#34;
	height=&#34;134&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/12pjsanYyHOkHRzO08yZGg_hu_cf9c1da6f46271c4.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/12pjsanYyHOkHRzO08yZGg_hu_2606f03578cb69f5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;851&#34;
		data-flex-basis=&#34;2043px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This will call our first “RequestCard” Azure Function. The Function will then reply with a message that the config change request has been received.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1myTE8zK18Jduhiy9S4k5ng.png&#34;
	width=&#34;1224&#34;
	height=&#34;241&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1myTE8zK18Jduhiy9S4k5ng_hu_7e5366aa267934c8.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1myTE8zK18Jduhiy9S4k5ng_hu_246164196ef6366e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;507&#34;
		data-flex-basis=&#34;1218px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;At the same time, the Function will also send a new card to the channel which contains the options to open or close the auto attendant and a “Submit Config” button.&lt;/p&gt;
&lt;p&gt;Note: Unfortunately, it’s not possible to send the card as an answer to the invocation of the webhook. This answer can only support text.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1PkeQQeNPtIuNbd3j65f0w.png&#34;
	width=&#34;1223&#34;
	height=&#34;435&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1PkeQQeNPtIuNbd3j65f0w_hu_9bffdec9ca2697cb.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1PkeQQeNPtIuNbd3j65f0w_hu_6391e8df835fe0c7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;281&#34;
		data-flex-basis=&#34;674px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Once a user has chosen an option and submitted the config change, the “RefreshCard” Function will be called.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1HgOp80zmMgDaDdcL0N510Q.png&#34;
	width=&#34;1226&#34;
	height=&#34;434&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1HgOp80zmMgDaDdcL0N510Q_hu_33548af2ea9e6e19.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1HgOp80zmMgDaDdcL0N510Q_hu_e1539bc42428da52.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;282&#34;
		data-flex-basis=&#34;677px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This Function will update the “Config Change Request” card, trigger the Runbook, and lets the user know that their config change request has been received.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1YJROpRLPOQxKxe6VI86wAw.png&#34;
	width=&#34;1225&#34;
	height=&#34;247&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1YJROpRLPOQxKxe6VI86wAw_hu_aaa2c109ce5a0509.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1YJROpRLPOQxKxe6VI86wAw_hu_bee7d7d1059de78d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;495&#34;
		data-flex-basis=&#34;1190px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Once the Runbook has finished, it will also post a new card to the channel, informing the user that the auto attendant has been opened or closed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1ui2yuTIb1O1yC1qTJgxkdA.png&#34;
	width=&#34;1222&#34;
	height=&#34;239&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1ui2yuTIb1O1yC1qTJgxkdA_hu_93dd72219ac0f995.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1ui2yuTIb1O1yC1qTJgxkdA_hu_23ae15b05f21abf1.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;511&#34;
		data-flex-basis=&#34;1227px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If we check the holiday schedule again, we can see that it has been updated and set from 17.05.2022 to 18.05.2022. This means that any calls which are received by the auto attendant today, go into the holiday call handling and not into the default call flow. Thus, this auto attendant is now closed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1Uh6LLtUaj5nDUQwOiIDNJQ.png&#34;
	width=&#34;1144&#34;
	height=&#34;262&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1Uh6LLtUaj5nDUQwOiIDNJQ_hu_f35d8d954471b130.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1Uh6LLtUaj5nDUQwOiIDNJQ_hu_6f14acbeb5b9788b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;436&#34;
		data-flex-basis=&#34;1047px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary
&lt;/h3&gt;&lt;p&gt;This is a great proof of concept on how to build a self-service auto attendant or call queue solution which doesn’t require any Premium Licenses for Power Automate or Power Apps. Of course, Azure Functions and Runbooks are not free either but I’m almost certain that it will still be much cheaper at scale.&lt;/p&gt;
&lt;p&gt;From my point of view this is a great showcase of what one can achieve with Azure Automation. I also like that everything stays in Teams from an end user perspective. There’s no need to open any other website or App and even Teams mobile App experiences are supported.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1f9rH3SVsdeBaCT4jm29dA.png&#34;
	width=&#34;1050&#34;
	height=&#34;892&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1f9rH3SVsdeBaCT4jm29dA_hu_946c49b7d31e0187.png 480w, https://heusser.pro/p/microsoft-teams-self-service-auto-attendants-without-premium-connectors-27e6f1281851/1f9rH3SVsdeBaCT4jm29dA_hu_fcc602e0bf480b30.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;117&#34;
		data-flex-basis=&#34;282px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This article only scatched the surface by covering only one example of endless possible scenarios. For example, it’s also possible to write an Azure Function in a way in which it can receive parameters from the outgoing webhook. Instead of just mentioning the webhook by “@RequestCard” we could also mention it like this: “@RequestCard CQ ” or “@RequestCard AA” and then respond with a different config change card, one for each type of voice app or even different change scenarios. Or we could even do stuff like check the username from which the outgoing webhook was invoked and do a security filtering on it by only allowing certain users to submit changes to auto attendants or call queues. The sky really is the limit.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Everything you ever wanted to know about Microsoft Teams Phone and Shared Voicemail</title>
        <link>https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/</link>
        <pubDate>Sat, 07 May 2022 20:16:33 +0000</pubDate>
        
        <guid>https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/</guid>
        <description>&lt;p&gt;Shared Voicemail has been available in Teams Phone for quite some time now. I still thought that it would be helpful to do a proper write up.&lt;/p&gt;
&lt;h4 id=&#34;the-basics&#34;&gt;The Basics
&lt;/h4&gt;&lt;p&gt;A shared voicemail always has to be a Microsoft 365 Group. This group doesn’t need to be Teams enabled but it can be. As of the time of writing, I do not know of a way to forward a call straight to shared voicemail without configuring an auto attendant or a call queue in front of it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 27.01.2023&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As it turns out, it’s now possible to also set Distribution Lists or Mail Enabled Security Groups as shared voicemail targets. I’ve put together a new article about that &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-shared-voicemail-now-supports-distribution-lists-and-mail-enabled-security-groups-cc6453f88f1&#34; &gt;here&lt;/a&gt;.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;/Update&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;skimping-onlicenses&#34;&gt;Skimping on Licenses
&lt;/h4&gt;&lt;p&gt;If Teams &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/microsoftteams/teams-add-on-licensing/virtual-user#virtual-user-license-allocation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Phone Standard — Virtual User Licenses&lt;/a&gt; are scarce in your tenant, this trick might help you out. &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/microsoftteams/routing-calls-to-unassigned-numbers&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Teams Unassigned Number treatments&lt;/a&gt; are usually used to handle incoming calls to numbers which are not assigned to any user or resource account. Since you specify the matching rule with a regular expression, it’s also possible to match whole numbers explicitly.&lt;/p&gt;
&lt;p&gt;An Unassigned Number Treatment can only be configured to forward to a resource account or an announcement. It’s not possible to forward directly to a shared voicemail. If you match the whole number without any wildcards, it’s possible to forward external calls to a shared voicemail without assigning a Teams Phone Standard — Virtual User License. However, an auto attendant or a call queue is still needed to forward the call to voicemail.&lt;/p&gt;
&lt;p&gt;Bonus Tip for Unassigned Number Treatments: While it’s possible to play back an announcement without having to setup an auto attendant or a call queue, an announcement will only play back the call and not disconnect the call after the announcement has been played back. If you want to automatically disconnect the call after playing back a message, choose an auto attendant to play back your announcement.&lt;/p&gt;
&lt;h4 id=&#34;setup-shared-voicemail&#34;&gt;Setup Shared Voicemail
&lt;/h4&gt;&lt;p&gt;I won’t go into the details on how to setup a complete auto attendant or a call queue in this article. This is only to show you where you would configure a redirection to a shared voicemail. Anywhere where you can choose a redirection target on an auto attendant or a call queue, you can choose to forward to shared voicemail. Remember, this has to be a Microsoft 365 Group.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1SJZHPoU2AeDf3sIREfdA.png&#34;
	width=&#34;1389&#34;
	height=&#34;667&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1SJZHPoU2AeDf3sIREfdA_hu_6bb054e591a1b24e.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1SJZHPoU2AeDf3sIREfdA_hu_2652f63e7664e4a6.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;208&#34;
		data-flex-basis=&#34;499px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now let’s see where shared voicemails land, once a customer has left a message.&lt;/p&gt;
&lt;h4 id=&#34;microsoft-365groups&#34;&gt;Microsoft 365 Groups
&lt;/h4&gt;&lt;p&gt;Shared voicemails are delivered to M365 Group’s inboxes, not to a channel email address or similar. A customer might tell you which users need to be able to receive and access these voicemails. Naturally, you start adding members to this group in M365 Admin or Azure AD.&lt;/p&gt;
&lt;p&gt;Based on my personal experience this usually results in two problems.&lt;/p&gt;
&lt;p&gt;1. Group inboxes are often neglected or completely forgotten by users, even though they’re visible and accessible in most Outlook clients. This can lead to potentially unhappy customers because their calls are never returned.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1UB44J9XqnSeuSmsiFVgRw.png&#34;
	width=&#34;1894&#34;
	height=&#34;1020&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1UB44J9XqnSeuSmsiFVgRw_hu_9317f0b036fb272c.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1UB44J9XqnSeuSmsiFVgRw_hu_8880c6984d0c4c5d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;185&#34;
		data-flex-basis=&#34;445px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Microsoft 365 Groups offer various settings which can be configured. Some of these settings can only be configured after the group has been created.&lt;/p&gt;
&lt;p&gt;By default, the “Send copies of team emails and events to team member’s inboxes” is disabled.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1ACMhAeuVmlXodIbuKfpGw.png&#34;
	width=&#34;881&#34;
	height=&#34;768&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1ACMhAeuVmlXodIbuKfpGw_hu_3107919ee8442316.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1ACMhAeuVmlXodIbuKfpGw_hu_f43da9d41259111e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;114&#34;
		data-flex-basis=&#34;275px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This means that emails to this group will not find it’s way to the member’s inboxes. Members have to open the group mailbox proactively.&lt;/p&gt;
&lt;p&gt;From a user’s perspective, their settings look like this. This is the default setting for new groups.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/12dq53yL2p15n9Pg4yHBbZw.png&#34;
	width=&#34;428&#34;
	height=&#34;718&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/12dq53yL2p15n9Pg4yHBbZw_hu_1bf90a7ff7b1a628.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/12dq53yL2p15n9Pg4yHBbZw_hu_d988403959818b04.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;59&#34;
		data-flex-basis=&#34;143px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;So, let’s head back to M365 Admin and change the setting for “Send copies of team emails and events to team member’s inboxes”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1dvOIE9fcyqLSV6lzA4EEg.png&#34;
	width=&#34;873&#34;
	height=&#34;481&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1dvOIE9fcyqLSV6lzA4EEg_hu_bcae2519e51b5fc7.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1dvOIE9fcyqLSV6lzA4EEg_hu_402021925eb60a14.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;181&#34;
		data-flex-basis=&#34;435px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;After a few seconds, this change will be reflected in the user’s mailbox settings as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1Hah5CoH3mR9L4Oz3LTJSg.png&#34;
	width=&#34;428&#34;
	height=&#34;705&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1Hah5CoH3mR9L4Oz3LTJSg_hu_c3eddfeceeda7fda.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1Hah5CoH3mR9L4Oz3LTJSg_hu_aa92d0abe235bcec.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;60&#34;
		data-flex-basis=&#34;145px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Of course, a user can always override his own settings by going into groups and clicking on settings.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1OSjGMbMU8oB1CWAEe3zvg.png&#34;
	width=&#34;664&#34;
	height=&#34;400&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1OSjGMbMU8oB1CWAEe3zvg_hu_34f3a4b64d396d06.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1OSjGMbMU8oB1CWAEe3zvg_hu_67b1dbf21d0db632.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;166&#34;
		data-flex-basis=&#34;398px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When I last tested this about 1–2 years ago, the setting would only apply to new members for the group. Already existing member’s settings were not changed. It seems like Microsoft has updated this behavior which is a very welcome change. However, disabling it again from M365 Admin doesn’t seem to also disable it for the group&amp;rsquo;s members again.&lt;/p&gt;
&lt;p&gt;The equivalent PowerShell parameter for this setting is still called &lt;code&gt;AutoSubscribeNewMembers&lt;/code&gt;and the &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/powershell/module/exchange/set-unifiedgroup?view=exchange-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;official documentation&lt;/a&gt; says the following.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The AutoSubscribeNewMembers switch specifies whether to automatically subscribe new members that are added to the Microsoft 365 Group to conversations and calendar events. &lt;strong&gt;Only users that are added to the group after you enable this setting are automatically subscribed to the group.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Based on my testing, setting it via PowerShell really does not enable “Follow in Inbox” for existing users. The setting is only enabled if it’s configured via the portal. If you disable, save and enable it again from the portal, existing members will be subscribed to all emails again.&lt;/p&gt;
&lt;p&gt;While that solves the problem of users missing voicemails because they’re lost in a group inbox, it introduces problem number two.&lt;/p&gt;
&lt;p&gt;2. When multiple people get an email with a voicemail message, coordination and clear communication within the team is key to prevent either multiple people calling back a customer or nobody at all calling back a customer.&lt;/p&gt;
&lt;h4 id=&#34;what-about-shared-mailboxes&#34;&gt;What about Shared Mailboxes?
&lt;/h4&gt;&lt;p&gt;Can’t we just use a shared mailbox as a target for shared voicemail where we already have established routines, rules and shifts on who processes which messages on which days etc.?&lt;/p&gt;
&lt;p&gt;The answer is both yeas and no. Technically no. At least can’t we choose a shared mailbox as voicemail target in Teams Admin Center. It is however possible to just add a shared mailbox as the only member of a M365 Group and enable “Follow in Inbox” for the group&amp;rsquo;s members. This way, all voicemails will be delivered to a shared mailbox and the group’s actual inbox can be completely ignored without feeling guilty at all.&lt;/p&gt;
&lt;h3 id=&#34;voicemails-in-teamsclient&#34;&gt;Voicemails in Teams Client
&lt;/h3&gt;&lt;h4 id=&#34;personal-voicemails&#34;&gt;Personal Voicemails
&lt;/h4&gt;&lt;p&gt;Let’s check out all the places a user can see voicemail notifications. Even though this article is focusing on shared voicemail, I’ll start with personal voicemails for a complete overview.&lt;/p&gt;
&lt;p&gt;The first thing you will probably notice when you get a new voicemail is the Teams feed notification which looks like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1xJeMRVve3aCWVRwYhX5fkw.png&#34;
	width=&#34;581&#34;
	height=&#34;237&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1xJeMRVve3aCWVRwYhX5fkw_hu_cc5c41cbc94fc899.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1xJeMRVve3aCWVRwYhX5fkw_hu_a0f2bce2d459123f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;245&#34;
		data-flex-basis=&#34;588px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Of course, you can also go to the Calls app and filter your history by “Voicemail”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1LVXePzkv5dPv7rSQWfdHA.png&#34;
	width=&#34;1896&#34;
	height=&#34;1020&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1LVXePzkv5dPv7rSQWfdHA_hu_bde004db6e29da32.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1LVXePzkv5dPv7rSQWfdHA_hu_df301331503cceea.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;185&#34;
		data-flex-basis=&#34;446px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;You can also find your voicemails as an *.mp3 attachment in your personal inbox.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1gCb35wXXp7uOa0RC3lu9A.png&#34;
	width=&#34;2736&#34;
	height=&#34;1248&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1gCb35wXXp7uOa0RC3lu9A_hu_fae9658db1e79453.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1gCb35wXXp7uOa0RC3lu9A_hu_688e455de15f59f2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;219&#34;
		data-flex-basis=&#34;526px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The Teams client actually searches your inbox for emails which meet certain criteria to display them in the Teams Client. Unfortunately, I don’t know the exact criteria Teams is evaluating but I’ve seen some cases where voicemails did not show up in a user&amp;rsquo;s Teams Client because an external anti-virus solution was scanning emails and manipulated the message headers before they were delivered into the user’s inboxes. That is definitely something to keep in mind if you’re facing similar issues.&lt;/p&gt;
&lt;h4 id=&#34;shared-voicemails&#34;&gt;Shared Voicemails
&lt;/h4&gt;&lt;p&gt;The interesting part is that this also applies to shared voicemails. If a user has subscribed to receive all group emails in their inbox, the shared voicemail will also be delivered into the personal inbox of the user.&lt;/p&gt;
&lt;p&gt;As you can see, the email received at 19:17 is a shared voicemail. The subject contains “Geteilte Voicemail” which means “Shared Voicemail” in English and also includes the Name of the Call Queue on which the voicemail was received.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1OCbUZEp7MkfiJ28fJQj4ig.png&#34;
	width=&#34;2736&#34;
	height=&#34;1179&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1OCbUZEp7MkfiJ28fJQj4ig_hu_3fad94ff0d911e23.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1OCbUZEp7MkfiJ28fJQj4ig_hu_5f98625d063474fd.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;232&#34;
		data-flex-basis=&#34;556px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In this case, it’s indeed the name of a call queue or auto attendant and not the display name of the resource account associated with one of the afore mentioned voice apps.&lt;/p&gt;
&lt;p&gt;Here you can see that I have a call queue named “MS Test CQ” but the associated resource account is actually called “Team Green CQ”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1RRrb2OMw41FgNW2LZe0zg.png&#34;
	width=&#34;1860&#34;
	height=&#34;702&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1RRrb2OMw41FgNW2LZe0zg_hu_dddf9aed01065032.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1RRrb2OMw41FgNW2LZe0zg_hu_9c96320722ea359e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;264&#34;
		data-flex-basis=&#34;635px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;And here you can see that the subject shows the call queue’s name.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1O3VPwMqCVfPXvvbWSBNjNQ.png&#34;
	width=&#34;1265&#34;
	height=&#34;833&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1O3VPwMqCVfPXvvbWSBNjNQ_hu_595e1d0f07bff628.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1O3VPwMqCVfPXvvbWSBNjNQ_hu_7919e42434692ac7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;151&#34;
		data-flex-basis=&#34;364px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;But let’s get back to Teams. The call history now shows both the personal and the shared voicemail in the user’s personal call history. There’s no indication whatsoever that the voicemail received at 19:17 is a shared one. The user can only get this information in Outlook.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/15B2FqT5vcqKs0E5Ot3cGA.png&#34;
	width=&#34;2736&#34;
	height=&#34;1738&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/15B2FqT5vcqKs0E5Ot3cGA_hu_77c74b1b72cd9bb0.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/15B2FqT5vcqKs0E5Ot3cGA_hu_60dfdbb3e647f6ea.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;157&#34;
		data-flex-basis=&#34;377px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;voice-enabledchannels&#34;&gt;Voice Enabled Channels
&lt;/h4&gt;&lt;p&gt;Teams Channels can also be configured as “Voice Enabled Channels”, also known as “Collaborative Calling Channels”. A channel becomes voice enabled if a Team and a Channel are used as a call queue’s &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0&#34; &gt;agent list&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here you can see that I’ve selected the “General” channel from the Team “CQ Agents Escalation” as the call queue’s agent list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1Pipfuped1OuKx47jS1nIA.png&#34;
	width=&#34;1833&#34;
	height=&#34;515&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1Pipfuped1OuKx47jS1nIA_hu_cefc43c89cd66019.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1Pipfuped1OuKx47jS1nIA_hu_18e647b1ec66b2c2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;355&#34;
		data-flex-basis=&#34;854px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Voice enabled channels are only visible/available on Desktop Clients. Web, mobile or desk phones are not supported yet. It’s important to mention that this has absolutely no impact on the delivery of call queue calls. Even if a channel is used for the agent list, mobile, web and desk phone clients can still receive calls from the call queue. They just won’t be able to see the “Calls” tab inside the channel.&lt;/p&gt;
&lt;p&gt;On the Desktop Client, the “Calls” tab is added automatically when a channel is configured to receive calls. This tab cannot be added from the Teams Client itself. Assigning it to a call queue in TAC is the only way to do it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1oOGcAgu4wPmwWGHlv8Wo8w.png&#34;
	width=&#34;1295&#34;
	height=&#34;355&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1oOGcAgu4wPmwWGHlv8Wo8w_hu_bcc9e35916fb84e.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1oOGcAgu4wPmwWGHlv8Wo8w_hu_f6329dcff3db76c5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;364&#34;
		data-flex-basis=&#34;875px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The Calls Tab includes its own call history. Unfortunately, this is a bit misleading. The history will only show incoming calls which were answered by the signed in user. It doesn’t show missed calls on the queue at all.&lt;/p&gt;
&lt;p&gt;If notifications about missed calls on call queues are essential to you, I suggest to take a look at &lt;a class=&#34;link&#34; href=&#34;https://twincapfirst.ch/teams-easy-call-report-en/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;the service&lt;/a&gt; I developed at my previous employer which does just that.&lt;/p&gt;
&lt;p&gt;If we switch the filter to Voicemail, it gets even weirder. Here we can see the same shared voicemail from 19:17.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1iC0xQLcRWs72b0Ke13osfQ.png&#34;
	width=&#34;1295&#34;
	height=&#34;351&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1iC0xQLcRWs72b0Ke13osfQ_hu_ac6c2b471d85460a.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1iC0xQLcRWs72b0Ke13osfQ_hu_5c021aab9c362067.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;368&#34;
		data-flex-basis=&#34;885px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Note that I’ve set a different group as shared voicemail target than the Team which is configured as voice enabled channel. It seems that the Teams Client is evaluating all the M365 Groups which are configured on this particular call queue and whether or not the signed in user is a member of these groups. A call queue can have a maximum of two different voicemail targets. One for the overflow action and one for the timeout action.&lt;/p&gt;
&lt;p&gt;Right now, I’ve only configured shared voicemail as the overflow action.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1aINhOLqNZ1Rxc0FhyDldQ.png&#34;
	width=&#34;1851&#34;
	height=&#34;870&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1aINhOLqNZ1Rxc0FhyDldQ_hu_e3d377ba8062fce6.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1aINhOLqNZ1Rxc0FhyDldQ_hu_3914227f8630e032.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;212&#34;
		data-flex-basis=&#34;510px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Since the signed in user is a member of that group, the voicemails will show up in the voice enabled channel.&lt;/p&gt;
&lt;p&gt;If I remove the shared voicemail target from the queue in TAC and refresh the Teams Client, the entry is gone.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1pkYwDCSYzHnoFLI6wrF5w.png&#34;
	width=&#34;1278&#34;
	height=&#34;341&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1pkYwDCSYzHnoFLI6wrF5w_hu_460d740cdd604845.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1pkYwDCSYzHnoFLI6wrF5w_hu_bf27372c6e43cf1f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;374&#34;
		data-flex-basis=&#34;899px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This call queue also has shared voicemail configured for its timeout action. The M365 Group for voicemail on timeout is called “Axe Capital Reception Voicemail”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1ctREaNsrYDpLO6R2XJeMpw.png&#34;
	width=&#34;1843&#34;
	height=&#34;879&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1ctREaNsrYDpLO6R2XJeMpw_hu_dc9745519174c288.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1ctREaNsrYDpLO6R2XJeMpw_hu_1a5c2fbbc67108c9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;209&#34;
		data-flex-basis=&#34;503px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The signed in user is not a member of this group yet, hence the voicemails in the group mailbox do not show up in the calls tab. I’ve now added the user to this group as well and signed out and in again in Teams.&lt;/p&gt;
&lt;p&gt;Suddenly, the user sees a lot more shared voicemails in the calls tab because they have been fetched from the M365 Group “Axe Capital Reception Voicemail”. The list is now aggregated across both M365 Groups which are configured in the call queue and the user is a member of. As you can see, the first entry is still the shared voicemail from the “Shared Voicemail Demo” group from 19:17.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1KyPwYmmbvi75WvFtovFygg.png&#34;
	width=&#34;1292&#34;
	height=&#34;625&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1KyPwYmmbvi75WvFtovFygg_hu_8a3d7541c9ee9fca.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1KyPwYmmbvi75WvFtovFygg_hu_43ac8aec1e3ba309.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;206&#34;
		data-flex-basis=&#34;496px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;best-practices&#34;&gt;Best Practices
&lt;/h4&gt;&lt;p&gt;These are my recommendations for most shared voicemail scenarios.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new, dedicated M365 Group without a Team for shared voicemails.&lt;/li&gt;
&lt;li&gt;Make sure “Send copies of team emails and events to team member’s inboxes” is enabled.&lt;/li&gt;
&lt;li&gt;Add an existing or new shared mailbox as the group’s only member.&lt;/li&gt;
&lt;li&gt;Manage responsibilities of calling back or delegating through existing processes and staff for already existing shared mailboxes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By creating a new, dedicated group instead of using an existing group or Team we can make sure that this group only ever receives voicemail messages and prevent unwanted emails from making its way into the shared mailbox.&lt;/p&gt;
&lt;p&gt;If you’re going to use voice enabled channels, also use the same Team as shared voicemail target. Otherwise, you need to make sure that all the Team’s members are also members of the M365 groups used for shared voicemail. Different users seeing different voicemails in their Calls tab will only create confusion among them. Unless of course you deliberately want only select members of the Team to see shared voicemails.&lt;/p&gt;
&lt;p&gt;Another way of efficiently handling shared voicemails would be to set up a Power Automate Flow which triggers on new emails in a shared mailbox, saves the audio files to SharePoint and sends an adaptive card with the link to the mp3 file to a channel. I plan to do a separate post about that though.&lt;/p&gt;
&lt;h3 id=&#34;bonus-tips&#34;&gt;Bonus Tips
&lt;/h3&gt;&lt;p&gt;Even though call queues and auto attendants are quite similar, there are some differences which can be quite significant to some customers.&lt;/p&gt;
&lt;h4 id=&#34;voicemail-on-an-auto-attendant&#34;&gt;Voicemail on an Auto Attendant
&lt;/h4&gt;&lt;p&gt;When you configure shared voicemail on an auto attendant, there’s no option to configure the greeting for the voicemail itself. Instead, you configure the greeting one layer above, on the call flow.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/15Pi1yTy8oNo9uSYzbNhS0Q.png&#34;
	width=&#34;950&#34;
	height=&#34;822&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/15Pi1yTy8oNo9uSYzbNhS0Q_hu_1b520f47025a6d9.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/15Pi1yTy8oNo9uSYzbNhS0Q_hu_1e83aac95becfefd.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;115&#34;
		data-flex-basis=&#34;277px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;By default, an auto attendant will play a “system greeting” after your custom greeting has been played back or synthesized by the Azure Text-To-Speech service. The system greeting will sound like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Please leave a message after the tone. When you have finished, please hang up.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;You can suppress the system greeting by enabling the toggle switch for “Skip voicemail system message”. Because the greeting is configured outside of the scope of the call routing options, this can be configured for both TTS and audio file greetings.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1kx6GV9cGcWgew5uwhoDgpw.png&#34;
	width=&#34;1348&#34;
	height=&#34;801&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1kx6GV9cGcWgew5uwhoDgpw_hu_dd2c9a25ecb4eaea.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1kx6GV9cGcWgew5uwhoDgpw_hu_4e2ba6427780767c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;168&#34;
		data-flex-basis=&#34;403px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;voicemail-on-a-callqueue&#34;&gt;Voicemail on a Call Queue
&lt;/h4&gt;&lt;p&gt;For call queues, this is slightly different. There is no option to suppress the system greeting. A call queue’s primary purpose is to route calls to agents so there are only routing options for overflow or timeout scenarios. This also means that there’s no option to configure a greeting inside the scope of an overflow or a timeout action.&lt;/p&gt;
&lt;p&gt;When you upload your own audio file, the system greeting is automatically suppressed by the call queue. There’s no option to enable it. (Why would you anyway?)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1UqMt8oNZmM3JyqMp3sCUA.png&#34;
	width=&#34;1394&#34;
	height=&#34;1057&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1UqMt8oNZmM3JyqMp3sCUA_hu_bf3be3e7ee43e721.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1UqMt8oNZmM3JyqMp3sCUA_hu_b6a9e8cce8bd32b3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;131&#34;
		data-flex-basis=&#34;316px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you’re using a TTS greeting, there’s no option to disable it. In this case the system greeting is always played back after your custom TTS greeting.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1frpCn0up1cMvTHed5cEXg.png&#34;
	width=&#34;1389&#34;
	height=&#34;606&#34;
	srcset=&#34;https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1frpCn0up1cMvTHed5cEXg_hu_e1e37704e8eb6c89.png 480w, https://heusser.pro/p/everything-you-ever-wanted-to-know-about-microsoft-teams-phone-and-shared-voicemail-4df01cb28e24/1frpCn0up1cMvTHed5cEXg_hu_a503a11acfb57745.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;229&#34;
		data-flex-basis=&#34;550px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you absolutely need to have a TTS greeting but also need to suppress the system greeting your only options are to use Azure Cognitive Services to generate and upload an audio file from your TTS greeting or to create another auto attendant which will have the sole purpose of playing back the TTS greeting and then forward to shared voicemail.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 06.04.2023&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Skip voicemail system message&lt;/strong&gt; is now available in TAC. It now supports both audio files and TTS greetings. I don’t remember when exactly it was added but it was a long time ago since I already wrote about it in &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/teams-auto-attendant-stuff-you-didnt-know-about-4888a20df0fb&#34; &gt;this article&lt;/a&gt; in December 2023.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;/Update&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&#34;one-lastcaveat&#34;&gt;One Last Caveat
&lt;/h4&gt;&lt;p&gt;But there’s another catch I recently discovered with this approach. If an auto attendant forwards to shared voicemail, the caller will hear two different beeps before the message can be recorded.&lt;/p&gt;
&lt;p&gt;The auto attendant will play back the greeting and then transfer the call to shared voicemail. The caller will hear one beep for the transfer and most likely starts to record the message while the call is still being transferred to shared voicemail. Once the transfer has been completed, there will be a second beep which sounds slightly different. This is the actual beep which will indicate that the recording has started. This can be quite confusing for both the caller and the callee. It’s possible that the first one or two seconds or so are cut off from the recording or that the caller gets confused and loses focus because his recording is interrupted by the second beep.&lt;/p&gt;
&lt;p&gt;To mitigate this issue, the only workaround at the moment is to forward the call to a call queue which goes straight to voicemail by using an &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6&#34; &gt;overflow threshold of 0&lt;/a&gt;. But keep in mind that you can’t use a TTS greeting if you also want to suppress the system greeting when using this method. This will, however, play back one beep for the transfer to the queue, play back your configured greeting on the queue and then play the second beep to indicate that the recording has started.&lt;/p&gt;
&lt;p&gt;Even though these seem like minor issues, I hope that Microsoft addresses them in a timely manner. I think that’s all I know about Teams Phone and Voicemail. I hope it helped you demystify some stuff.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Microsoft Teams Enterprise Voice Diagnostic Tool</title>
        <link>https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/</link>
        <pubDate>Mon, 18 Apr 2022 15:00:30 +0000</pubDate>
        
        <guid>https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/</guid>
        <description>&lt;p&gt;This will be a quick one. I promise. In &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0&#34; &gt;another blog post&lt;/a&gt; I claimed, or rather said, that I don’t know of any other way to check if a Teams user is enterprise voice enabled via GUI than to try to add the user to a call queue.&lt;/p&gt;
&lt;h4 id=&#34;gui-method1&#34;&gt;GUI Method 1
&lt;/h4&gt;&lt;p&gt;If you try to add a user which is not EV enabled to a call queue, TAC will show the following error message:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/0aWqaqGt1Or7uQVh9.png&#34;
	width=&#34;568&#34;
	height=&#34;101&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/0aWqaqGt1Or7uQVh9_hu_3d00de2b0eeb0ede.png 480w, https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/0aWqaqGt1Or7uQVh9_hu_d5147b98a79ebda0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;562&#34;
		data-flex-basis=&#34;1349px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;gui-method2&#34;&gt;GUI Method 2
&lt;/h4&gt;&lt;p&gt;When I wrote this, I totally forgot about the &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/MicrosoftTeams/troubleshoot/teams-conferencing/no-dial-pad#run-a-self-diagnostics-tool&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;diagnostic tool&lt;/a&gt; which is built into the Microsoft 365 Admin Portals “Support” section. If you click the following button on Microsoft Docs, you will be redirected to the self diagnostic test tool within the Admin Portal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/1yfUuMJX9oR9GbZtad81asA.png&#34;
	width=&#34;1022&#34;
	height=&#34;147&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/1yfUuMJX9oR9GbZtad81asA_hu_3944de9622349880.png 480w, https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/1yfUuMJX9oR9GbZtad81asA_hu_87521361086ffef5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;695&#34;
		data-flex-basis=&#34;1668px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;You can also use &lt;a class=&#34;link&#34; href=&#34;https://admin.microsoft.com/AdminPortal/?searchSolutions=Diag%3A%20Teams%20Dial%20Pad%20Missing#/homepage&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this&lt;/a&gt; direct link or type “Diag: Teams Dial Pad Missing” in the search field when opening a new request.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/1246GSvZbEAHamjHDwr57A.png&#34;
	width=&#34;689&#34;
	height=&#34;311&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/1246GSvZbEAHamjHDwr57A_hu_9f8292d3f9547966.png 480w, https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/1246GSvZbEAHamjHDwr57A_hu_4e96d07e8ac881b2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;221&#34;
		data-flex-basis=&#34;531px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;You will then see a field where you need to enter the username of the user you’d like to check. Click on “Run Tests” to run the diagnostics.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/16lzI1o4VkniWWacOvFCBg.png&#34;
	width=&#34;666&#34;
	height=&#34;454&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/16lzI1o4VkniWWacOvFCBg_hu_8493330665c499f7.png 480w, https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/16lzI1o4VkniWWacOvFCBg_hu_b280fcf2661e1860.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;146&#34;
		data-flex-basis=&#34;352px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This will also check if the user is enterprise voice enabled and tell you if that’s not the case.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/1kAoytUHlXPzCvBpcJJtrw.png&#34;
	width=&#34;631&#34;
	height=&#34;640&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/1kAoytUHlXPzCvBpcJJtrw_hu_c5a08863167521e7.png 480w, https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/1kAoytUHlXPzCvBpcJJtrw_hu_a375590781b06cea.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;98&#34;
		data-flex-basis=&#34;236px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It doesn’t seem to also check the licenses properly because this user already has a Teams Phone Standard License, but EV is not enabled yet.&lt;/p&gt;
&lt;p&gt;If we run the same test for a user which is EV enabled, the diagnostics come up empty which means that there are no issues / EV is indeed enabled.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/1pa39FpQQ9RyJSLfGCI5ubA.png&#34;
	width=&#34;668&#34;
	height=&#34;301&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/1pa39FpQQ9RyJSLfGCI5ubA_hu_aafa4abb219c2a46.png 480w, https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/1pa39FpQQ9RyJSLfGCI5ubA_hu_ef228c68b2ae00e8.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;221&#34;
		data-flex-basis=&#34;532px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;other-cases&#34;&gt;Other Cases
&lt;/h4&gt;&lt;p&gt;The diagnostics tool can also help you discover other issues like check for not assigned phone numbers or voice routing policies.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/1W9hcjAkup6op4l2g6H1w.png&#34;
	width=&#34;629&#34;
	height=&#34;586&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/1W9hcjAkup6op4l2g6H1w_hu_966595baab8899de.png 480w, https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/1W9hcjAkup6op4l2g6H1w_hu_e65681d00fc08d7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;107&#34;
		data-flex-basis=&#34;257px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/11BKjYuP0gbcIZGdSUJSedQ.png&#34;
	width=&#34;652&#34;
	height=&#34;381&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/11BKjYuP0gbcIZGdSUJSedQ_hu_9c7904d14a109285.png 480w, https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/11BKjYuP0gbcIZGdSUJSedQ_hu_1844ca6e18ab8eed.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;171&#34;
		data-flex-basis=&#34;410px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;powershell-method&#34;&gt;PowerShell Method
&lt;/h4&gt;&lt;p&gt;Of course, there’s always PowerShell. To query the information we need, we can just run the following:&lt;/p&gt;
&lt;p&gt;Get-CsOnlineUser -Identity &lt;a class=&#34;link&#34; href=&#34;mailto:user@domain.com&#34; &gt;user@domain.com&lt;/a&gt; | Format-Table DisplayName, EnterpriseVoiceEnabled, OnlineVoiceRoutingPolicy, LineURI, FeatureTypes&lt;/p&gt;
&lt;p&gt;This will tell us all the interesting information like if the user is EV enabled, if it has an online voice routing policy and what kind of feature types are supported.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/1rwv9JbnYmzE66PIORAWg.png&#34;
	width=&#34;1254&#34;
	height=&#34;126&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/1rwv9JbnYmzE66PIORAWg_hu_2de43dc97be8435e.png 480w, https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/1rwv9JbnYmzE66PIORAWg_hu_b8c77b4b75d2d320.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;995&#34;
		data-flex-basis=&#34;2388px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Note: Microsoft recently introduced the FeatureTypes attribute in the MicrosoftTeams PowerShell module. (I’m using 4.2.0 as of writing this article). This means that there’s no need to check for a valid license via other PowerShell Modules like MSOnline, AzureAD or Microsoft.Graph anymore.&lt;/p&gt;
&lt;p&gt;Users which don’t have a Teams Phone Standard license assigned, won’t show “PhoneSystem” in their supported feature types.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/1WWcmQkflsk6uRrFMd0gH2Q.png&#34;
	width=&#34;1199&#34;
	height=&#34;133&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/1WWcmQkflsk6uRrFMd0gH2Q_hu_9b524688b85dc902.png 480w, https://heusser.pro/p/microsoft-teams-enterprise-voice-diagnostic-tool-9e01dbde26a0/1WWcmQkflsk6uRrFMd0gH2Q_hu_81ef78ed4b68238c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;901&#34;
		data-flex-basis=&#34;2163px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;summary&#34;&gt;Summary
&lt;/h4&gt;&lt;p&gt;I’d still wish that TAC would reflect somewhere if a user is EV enabled or not. But at least there are some workarounds to check if a user is EV enabled if PowerShell isn’t available at a given time for any reason.&lt;/p&gt;
&lt;p&gt;Even though this tool has been around for quite some time, I don’t think that many Teams Admins know about it. How about you, did you know that something like this existed?&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Automatically Render Diagrams of Teams User Calling Settings</title>
        <link>https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/</link>
        <pubDate>Sun, 17 Apr 2022 10:38:04 +0000</pubDate>
        
        <guid>https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/</guid>
        <description>&lt;p&gt;Hello friends.&lt;/p&gt;
&lt;p&gt;A few weeks ago, Microsoft made a lot of Teams admins happy by rolling out a new feature which allows admins to change (or view) a Teams user’s calling settings directly from the Teams admin center. Gone are the days were we admins needed to be delegates of users to change these kinds of settings.&lt;/p&gt;
&lt;p&gt;Those of you who know me a little better might know that I don’t have much experience with Skype for Business and thus only ever heard stories about SEFAUtil (secondary extension feature activation). From what I can see, this new feature is basically SEFAUtil for Teams.&lt;/p&gt;
&lt;p&gt;I won’t go into detail about the functionalities in TAC as these has been covered plenty by other community bloggers already. As it’s often the case, this functionality has been available with PowerShell before it has made its way to the TAC. But anyways, here’s how it looks like in TAC.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/161NOVj8fF2bSwiLrlp2BHA.png&#34;
	width=&#34;1799&#34;
	height=&#34;1279&#34;
	srcset=&#34;https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/161NOVj8fF2bSwiLrlp2BHA_hu_db94adbb6af8cd0f.png 480w, https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/161NOVj8fF2bSwiLrlp2BHA_hu_41711bc22bba82c3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;140&#34;
		data-flex-basis=&#34;337px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I haven’t used it much yet but one time I urgently needed to change a user’s forwarding settings, TAC was repeatedly throwing errors at me. I had no choice than to fall back to PowerShell.&lt;/p&gt;
&lt;h4 id=&#34;reading-user-calling-settings-with-powershell&#34;&gt;Reading User Calling Settings with PowerShell
&lt;/h4&gt;&lt;p&gt;Of course, we can not only set them by PS but also read them:&lt;/p&gt;
&lt;p&gt;Get-CsUserCallingSettings -Identity &lt;a class=&#34;link&#34; href=&#34;mailto:user@domain.com&#34; &gt;user@domain.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since I’ve already done much more complex things by &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154&#34; &gt;generating a diagram of huge Auto Attendant and Call Queue call flows&lt;/a&gt;, I figured why not leverage PowerShell to also draw diagrams from user calling settings?&lt;/p&gt;
&lt;p&gt;I must admit that it turned out a little more complex than I anticipated. During final testing, I generated a diagram for each possible scenario, and I counted no less than 64 different ways an enterprise voice enabled user can configure his calling settings. This also includes simultaneous and serial ring for call groups. At least I already had a lot of practice on how to structure the code and how to draw the diagrams.&lt;/p&gt;
&lt;h4 id=&#34;user-calling-settings-diagramexamples&#34;&gt;User Calling Settings Diagram Examples
&lt;/h4&gt;&lt;p&gt;Here are some examples, including the corresponding Teams client settings.&lt;/p&gt;
&lt;p&gt;In this example, “Also ring” and “If unanswered” are the same. Call group is the only forwarding target which supports this scenario.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1TlJx5ucG8YIsZDtamLyzjw.png&#34;
	width=&#34;639&#34;
	height=&#34;544&#34;
	srcset=&#34;https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1TlJx5ucG8YIsZDtamLyzjw_hu_6d52d223158760d5.png 480w, https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1TlJx5ucG8YIsZDtamLyzjw_hu_1550536024958d5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;117&#34;
		data-flex-basis=&#34;281px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/13oEWK0gZhI7y34lBQ40sQ.png&#34;
	width=&#34;951&#34;
	height=&#34;1747&#34;
	srcset=&#34;https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/13oEWK0gZhI7y34lBQ40sQ_hu_ff23f3656a977ed.png 480w, https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/13oEWK0gZhI7y34lBQ40sQ_hu_d29c8fb2bc47ae0e.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;54&#34;
		data-flex-basis=&#34;130px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Here’s one where immediate forwarding is enabled:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/174NDGhlNdC2jWmfcns2gA.png&#34;
	width=&#34;637&#34;
	height=&#34;527&#34;
	srcset=&#34;https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/174NDGhlNdC2jWmfcns2gA_hu_d69f14535fb7cf19.png 480w, https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/174NDGhlNdC2jWmfcns2gA_hu_9ba7f408ece701d0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;120&#34;
		data-flex-basis=&#34;290px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1en6dkpg1L1BeJJCVH3lrA.png&#34;
	width=&#34;909&#34;
	height=&#34;1612&#34;
	srcset=&#34;https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1en6dkpg1L1BeJJCVH3lrA_hu_8c84ed61d0b9f7bd.png 480w, https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1en6dkpg1L1BeJJCVH3lrA_hu_7f99ef02f1b3a6d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;56&#34;
		data-flex-basis=&#34;135px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When immediately forwarding to delegates, an “If unanswered target is required”. “Do nothing” is not available in this case.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1kMUtWPH8Sg9kq0ZXqnvBug.png&#34;
	width=&#34;632&#34;
	height=&#34;571&#34;
	srcset=&#34;https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1kMUtWPH8Sg9kq0ZXqnvBug_hu_9a02a6e867b8effa.png 480w, https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1kMUtWPH8Sg9kq0ZXqnvBug_hu_4d477815b1f68d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;110&#34;
		data-flex-basis=&#34;265px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;In this case, only “Also ring” is configured and “If unanswered” is set to “Do nothing”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1X0hbtVapj1mEJsp8HHaNJQ.png&#34;
	width=&#34;635&#34;
	height=&#34;535&#34;
	srcset=&#34;https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1X0hbtVapj1mEJsp8HHaNJQ_hu_edad5819689aef25.png 480w, https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1X0hbtVapj1mEJsp8HHaNJQ_hu_21e4412ea21a2a92.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;118&#34;
		data-flex-basis=&#34;284px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1gbiySQUKuer0byUExkceg.png&#34;
	width=&#34;526&#34;
	height=&#34;491&#34;
	srcset=&#34;https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1gbiySQUKuer0byUExkceg_hu_5a42405200ed9b2a.png 480w, https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1gbiySQUKuer0byUExkceg_hu_f9627ab11aac155b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;107&#34;
		data-flex-basis=&#34;257px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;And here, “Also ring” is set to “No one else” but “If unanswered” is set to an external phone number with a timeout of 50 seconds.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1poPeDhcPwlEdO1KRPojg.png&#34;
	width=&#34;638&#34;
	height=&#34;544&#34;
	srcset=&#34;https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1poPeDhcPwlEdO1KRPojg_hu_1b8ee69f9b7e4a15.png 480w, https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1poPeDhcPwlEdO1KRPojg_hu_7187a16c9c88e615.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;117&#34;
		data-flex-basis=&#34;281px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1XRyPWHckC3MglldUVHgw.png&#34;
	width=&#34;633&#34;
	height=&#34;1138&#34;
	srcset=&#34;https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1XRyPWHckC3MglldUVHgw_hu_300feafc0faded31.png 480w, https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1XRyPWHckC3MglldUVHgw_hu_291e5d7b5466c40b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;55&#34;
		data-flex-basis=&#34;133px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you like, you can check out all the examples &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer/tree/main/Examples/UserCallingSettings&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;render-and-export-diagrams-like-apro&#34;&gt;Render and Export Diagrams like a Pro!
&lt;/h4&gt;&lt;p&gt;Or you can head over to my &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub Repo&lt;/a&gt; to clone it from there to try it for yourself. For now, the function is intended for standalone usage. Meaning, it’s not yet implemented into the M365 Call Flow Visualizer.&lt;/p&gt;
&lt;p&gt;Once the repo is cloned, you can import the function by dot sourcing it in your terminal:&lt;/p&gt;
&lt;p&gt;. .\Functions\Get-TeamsUserCallFlow.ps1&lt;/p&gt;
&lt;p&gt;After that, you can just run the function by either using the &lt;code&gt;-UserPrincipalName&lt;/code&gt; or the &lt;code&gt;-UserId&lt;/code&gt; parameter where &lt;code&gt;-UserId&lt;/code&gt; expects an Azure AD User Object Id from your tenant.&lt;/p&gt;
&lt;p&gt;Get-TeamsUserCallFlow -UserPrincipalName &lt;a class=&#34;link&#34; href=&#34;mailto:user@domain.com&#34; &gt;user@domain.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are a few parameters to play with. By default, the function will generate an SVG image of the diagram and opens it in your default browser by leveraging the &lt;a class=&#34;link&#34; href=&#34;https://mermaid.ink/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;mermaid.ink&lt;/a&gt; service. It will also save the diagram to&lt;code&gt;.\Output\UserCallingSettings&lt;/code&gt; by default. You can change this by specifying the &lt;code&gt;-CustomFilePath&lt;/code&gt; parameter.&lt;/p&gt;
&lt;p&gt;Although it has cost me a lot of time, I was finally able to pull off directly exporting an SVG image without using any additional, local dependencies. I’m doing this by encoding the diagram in Base64 and calling mermaid.ink. During testing I noticed that mermaid.ink is quite picky when it comes to these base 64 encoded URLs. At first, a lot of my diagrams failed due to illegal padding characters and so on. I believe that I was able to fix most of that. If any of your diagrams fail to render on mermaid ink, please let me know.&lt;/p&gt;
&lt;h4 id=&#34;create-a-diagram-for-all-yourusers&#34;&gt;Create a Diagram for all your users
&lt;/h4&gt;&lt;p&gt;I’ve also included an example of how to draw a diagram for each enabled user in your tenant. You can copy it from this gist or run it directly from the root of the cloned repo.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/2687f5fe0a2fae48739d71bbd5a86909.js&#34;&gt;&lt;/script&gt;

&lt;h4 id=&#34;some-notes-on-recursive-user-callingsettings&#34;&gt;Some Notes on Recursive User Calling Settings
&lt;/h4&gt;&lt;p&gt;I do not support recursive user calling settings in my first release. I’m not sure if there is a strong enough need for it too. I know that some teams like to forward calls to each other if they’re not available. It would certainly be handy for troubleshooting purposes as we could detect infinite forwarding loops created by users much faster. On the other hand, diagrams could get huge and hard to read. What do you think, should I work on recursive diagrams for a future release? Let me know!&lt;/p&gt;
&lt;h4 id=&#34;whats-next&#34;&gt;What’s next
&lt;/h4&gt;&lt;p&gt;There are a couple of changes planned for this project. If you pay close attention, you can see that I already moved some functions like “Connect-M365CFV” out of the main script and import it by dot sourcing instead. Since the main script still has more than 3000 lines of code (including carriage returns) I’m planning to move most of the functions to separate files and dot source them as well.&lt;/p&gt;
&lt;p&gt;When I get the time, I will also implement user calling settings into the main script. As an example, a call flow which forwards calls to a user will then render like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1cje7dY50wNOdeup0F1EQ.png&#34;
	width=&#34;938&#34;
	height=&#34;1639&#34;
	srcset=&#34;https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1cje7dY50wNOdeup0F1EQ_hu_cc992eaa5625f1b.png 480w, https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1cje7dY50wNOdeup0F1EQ_hu_ae5b30257124471b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;57&#34;
		data-flex-basis=&#34;137px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Whereas it currently “stops” at the users and looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1VLbdHmPHHCI0WpnbAhXGYw.png&#34;
	width=&#34;1529&#34;
	height=&#34;1605&#34;
	srcset=&#34;https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1VLbdHmPHHCI0WpnbAhXGYw_hu_450edaeec85863ba.png 480w, https://heusser.pro/p/automatically-render-diagrams-of-teams-user-calling-settings-551d6b12b0a7/1VLbdHmPHHCI0WpnbAhXGYw_hu_1a82da86ce463ba.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;95&#34;
		data-flex-basis=&#34;228px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I will also try to do the same with SVG export as I did for the user calling settings. I’m not entirely sure it will work with super large diagrams though.&lt;/p&gt;
&lt;p&gt;I hope that you enjoy automatically drawing diagrams of your users calling settings as much as I do.&lt;/p&gt;
&lt;p&gt;Happy Easter everyone!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Microsoft Teams Call Queue Agent Lists (And how to Force-Sync them)</title>
        <link>https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/</link>
        <pubDate>Sun, 10 Apr 2022 10:13:53 +0000</pubDate>
        
        <guid>https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/</guid>
        <description>&lt;p&gt;The purpose of a call queue in Teams is to distribute incoming calls to multiple call agents. Every call queue stores its own “Agent List” which is basically just an array of Microsoft 365 users object Ids. Incoming Teams or PSTN calls are then distributed to the call queue’s agents. In this post, we’ll take a look at the types of agent lists which are available and how to configure them. We’ll also explore some useful tips how to cope with unexpected behavior during configuration.&lt;/p&gt;
&lt;h4 id=&#34;agent-listtypes&#34;&gt;Agent List Types
&lt;/h4&gt;&lt;p&gt;There are three (or four, depending how you look at it) different ways of adding Agents to a queue&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Direct user assignments&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Users are assigned by display name and will be visible directly in a queue’s settings. This method is suitable for small teams because you can see who’s in the queue in TAC without checking the group members in M365 Admin or AAD. Since you can’t control the order agents will be added in when using a group or channel based agent list, direct assignments are crucial when your queue is using serial routing. &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/microsoftteams/create-a-phone-system-call-queue#users-and-groups&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;You can add up to 20 agents individually.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1JnhguYQCBAml6b1TDgAiA.png&#34;
	width=&#34;1383&#34;
	height=&#34;927&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1JnhguYQCBAml6b1TDgAiA_hu_3d2dceb3dbcd285f.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1JnhguYQCBAml6b1TDgAiA_hu_1eaa05c960dcd40.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;358px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;2. Group assignments&lt;/p&gt;
&lt;p&gt;With group assignments, you can add up to 200 agents but you can’t control the order in which the agents are added. Thus, you can’t control the order in which the users are signaled by the queue when using serial routing either. Based on my testing, the order of the agent list will correspond to the order in which the users show up when viewing it in AAD. Although it might not be a common scenario, you can even add multiple groups to the list. &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/microsoftteams/create-a-phone-system-call-queue#users-and-groups&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;All common group types are supported.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/17ssSjJFxHxXZTdtm8BpupQ.png&#34;
	width=&#34;1380&#34;
	height=&#34;923&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/17ssSjJFxHxXZTdtm8BpupQ_hu_3fc27908289ba767.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/17ssSjJFxHxXZTdtm8BpupQ_hu_e256789b2f9798f8.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;149&#34;
		data-flex-basis=&#34;358px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;3. Combination of direct and groups&lt;/p&gt;
&lt;p&gt;If you want to use a group but still need to add other users which are not a member of this group, you can add them individually. Here I’ve got a group called “CQ Agents 1” which has two members.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1Dkc15OvPzERAne0L7pTXgA.png&#34;
	width=&#34;1109&#34;
	height=&#34;292&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1Dkc15OvPzERAne0L7pTXgA_hu_541ae666270fe46.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1Dkc15OvPzERAne0L7pTXgA_hu_34a62d0560faa38a.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;379&#34;
		data-flex-basis=&#34;911px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I’ve also added Mike and Bobby as individual agents. Of course. the queue will add Mike only once.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1r2hQr9rHxDqI24577P61lg.png&#34;
	width=&#34;1380&#34;
	height=&#34;1251&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1r2hQr9rHxDqI24577P61lg_hu_df35b7c09b471dc1.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1r2hQr9rHxDqI24577P61lg_hu_86d84a3ef5d684ae.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;110&#34;
		data-flex-basis=&#34;264px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, querying the queue’s agents only yields object Ids and no display names.&lt;/p&gt;
&lt;p&gt;(Get-CsCallQueue -Identity a11d15d3-79d8-4bd2-8a35-xxxxxxxxxxxx).Agents&lt;/p&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ObjectId                             OptIn  
--------                             -----  
76606d0b-4d28-4246-9c08-xxxxxxxxxxxx  True This is Bobby&#39;s Object Id  
9a7c1bb4-49db-40ee-9d05-xxxxxxxxxxxx  True This is Mike&#39;s Object Id  
fa19b242-8bae-419d-a4eb-xxxxxxxxxxxx  True This is Wendy&#39;s Object Id
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, individually added agents will be first in the list, just like TAC is displaying it (individual agents above groups).&lt;/p&gt;
&lt;p&gt;I have now replaced the direct assignment of Mike with Wendy and placed her on top.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1ua3yDYWFbd0Z2T5OKyeBIQ.png&#34;
	width=&#34;1276&#34;
	height=&#34;360&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1ua3yDYWFbd0Z2T5OKyeBIQ_hu_6b2c0fcb8d0ebc33.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1ua3yDYWFbd0Z2T5OKyeBIQ_hu_2bf767d5eeb08832.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;354&#34;
		data-flex-basis=&#34;850px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When we query the agent list again, we can see that Wendy is on top now, even though she would be added last if we’re using just a group.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ObjectId                             OptIn  
--------                             -----  
fa19b242-8bae-419d-a4eb-xxxxxxxxxxxx  True This is Wendy&#39;s Object Id  
76606d0b-4d28-4246-9c08-xxxxxxxxxxxx  True This is Bobby&#39;s Object Id  
9a7c1bb4-49db-40ee-9d05-xxxxxxxxxxxx  True This is Mike&#39;s Object Id
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4. Teams channel assignment&lt;/p&gt;
&lt;p&gt;The third and last option is to use a Teams Channel. In this case, the group type obviously needs to be a Team. &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/microsoftteams/create-a-phone-system-call-queue#teams-channel&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Private or shared channels are not supported.&lt;/a&gt; From an agent list perspective this method is the same as a group-based assignment, except that you can’t add individual members or multiple groups as well.&lt;/p&gt;
&lt;h4 id=&#34;summary-andcaveats&#34;&gt;Summary and Caveats
&lt;/h4&gt;&lt;p&gt;In order for a user to be added as an agent, Enterprise Voice must be enabled. &lt;strong&gt;Having a Teams Phone Standard license is not enough&lt;/strong&gt;. Unfortunately, there’s no straightforward way of checking if EV is enabled in TAC.&lt;/p&gt;
&lt;p&gt;You might think that the “Phone System” Column in Teams Users will tell you that but that’s actually just evaluating if the user is licensed for Teams Phone Standard. (I hope Microsoft updates the column name at some point…).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1o3uFzdE2500fMsfRDgRo3Q.png&#34;
	width=&#34;1273&#34;
	height=&#34;126&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1o3uFzdE2500fMsfRDgRo3Q_hu_4e2ae23ffda0018b.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1o3uFzdE2500fMsfRDgRo3Q_hu_396b2d27dc7dade3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1010&#34;
		data-flex-basis=&#34;2424px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When you try to add a user which is not EV enabled to a queue, TAC will throw an error message:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1onUinLhMf93WDYAt0S0g.png&#34;
	width=&#34;568&#34;
	height=&#34;101&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1onUinLhMf93WDYAt0S0g_hu_5dbc50df533a6721.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1onUinLhMf93WDYAt0S0g_hu_8f6170372b9dae76.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;562&#34;
		data-flex-basis=&#34;1349px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This is the only way I know of to check if a user is EV enabled or not through a GUI based tool. It’s easy in PS though:&lt;/p&gt;
&lt;p&gt;Get-CsOnlineUser -Identity &lt;a class=&#34;link&#34; href=&#34;mailto:bill@domain.com&#34; &gt;bill@domain.com&lt;/a&gt; | ft DisplayName,FeatureTypes,EnterpriseVoiceEnabled&lt;/p&gt;
&lt;p&gt;Again, having a Teams Phone service plan, does not mean EV is enabled by default. A user’s feature types can be read from the .FeatureTypes attribute (Teams PS 4.x.x and later).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DisplayName FeatureTypes         EnterpriseVoiceEnabled  
----------- ------------         ----------------------  
Bill Stearn {PhoneSystem, Teams}                  False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Does this mean we can only add groups to an agent list if all the members are already EV enabled? Certainly not. In this case, only EV enabled members will be added to a queue but you won’t see any warnings or errors if your group contains users without EV.&lt;/p&gt;
&lt;p&gt;I’ve added Bill to the “CQ Agents 1” group:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1pTf4EjM79Dcv21SuFa1IPQ.png&#34;
	width=&#34;1107&#34;
	height=&#34;212&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1pTf4EjM79Dcv21SuFa1IPQ_hu_ca91a8eeec5ea21.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1pTf4EjM79Dcv21SuFa1IPQ_hu_650311fd8d7c01fb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;522&#34;
		data-flex-basis=&#34;1253px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Let’s check our queue again by storing it’s properties in the variable &lt;code&gt;$cq&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$cq&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Get-CsCallQueue&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Identity&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a11d15d3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;79d8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;4bd2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;8a35-xxxxxxxxxxxx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;By accessing $cq.DistributionListsLastExpanded we can verify that the queue has indeed updated its agent list when we saved it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1MP0g1DqtuGySqfMbguKw.png&#34;
	width=&#34;1059&#34;
	height=&#34;28&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1MP0g1DqtuGySqfMbguKw_hu_3b9cca151ab93a8e.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1MP0g1DqtuGySqfMbguKw_hu_d08cba6fbd1fde9d.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;3782&#34;
		data-flex-basis=&#34;9077px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;As expected, the object Id of bill does not show up when we check $cq.Agents. I’ve also removed the direct assignments, that’s why we only see two object Ids now.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ObjectId                             OptIn  
--------                             -----  
fa19b242-8bae-419d-a4eb-xxxxxxxxxxxx  True That&#39;s Wendy&#39;s Object Id  
9a7c1bb4-49db-40ee-9d05-xxxxxxxxxxxx  True That&#39;s Mike&#39;s Object Id
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What’s interesting is that even though the direct assignments were removed, the queue remembered the specific order we defined using direct assignments before. Wendy is still above mike.&lt;/p&gt;
&lt;p&gt;No matter in which way the agents are added, in the end, all EV enabled agents will always be stored in one single array on the queue’s properties in the “Agents” attribute.&lt;/p&gt;
&lt;h4 id=&#34;agent-listsync&#34;&gt;Agent List Sync
&lt;/h4&gt;&lt;p&gt;Now you know what types of agent lists you can have and how to configure them. Let’s talk about syncing agent lists. With direct assignments, it’s easy. Every time you add or remove an agent and save the queue, the agent list is updated immediately.&lt;/p&gt;
&lt;p&gt;If you’re adding a group which already has a bunch of users in it, that’s no problem either. But what about if you add a Team or a group which does not have any members yet, or if you add new users to an existing group which is already linked to a queue?&lt;/p&gt;
&lt;p&gt;I created a new, empty Team called “PS Test CQ” and added it to the queue’s agent list. As expected, TAC now says that this queue has zero agents.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1TnPbQ99tL2GNctNLkDd9A.png&#34;
	width=&#34;1850&#34;
	height=&#34;253&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1TnPbQ99tL2GNctNLkDd9A_hu_62ac5d76bd3880e9.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1TnPbQ99tL2GNctNLkDd9A_hu_2fbaa7ca64689626.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;731&#34;
		data-flex-basis=&#34;1754px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;So, let’s head over to Teams and add some members. After a browser refresh, TAC still shows zero call agents. Let’s check again with PowerShell:&lt;/p&gt;
&lt;p&gt;(Get-CsCallQueue -Identity a11d15d3-79d8-4bd2-8a35-xxxxxxxxxxxx) | ft Name, DistributionListsLastExpanded, Agents&lt;/p&gt;
&lt;p&gt;Although the output at least tells us when the agent list was last synchronized, it also shows no agents:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Name       DistributionListsLastExpanded Agents  
----       ----------------------------- ------  
PS Test CQ 04/10/2022 09:12:22 +00:00    {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I don’t know the exact interval Teams uses to sync call queue agent lists. But I’m guessing it checks every few hours or so. Is there a way to force a sync?&lt;/p&gt;
&lt;h4 id=&#34;force-agent-list-sync-usingtac&#34;&gt;Force Agent List Sync using TAC
&lt;/h4&gt;&lt;p&gt;If we’re doing it via TAC, we must change any value of the queue to be able to save it. Otherwise, the submit button will be greyed out.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1Cuo5HASr68JnCdmDDLpxKQ.png&#34;
	width=&#34;1224&#34;
	height=&#34;725&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1Cuo5HASr68JnCdmDDLpxKQ_hu_bfbd5c60d7ba82c1.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1Cuo5HASr68JnCdmDDLpxKQ_hu_17d15c61894df782.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;168&#34;
		data-flex-basis=&#34;405px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you want to do it via TAC, I recommend changing a non-critical value like up the overflow threshold value by 1 and submit.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1rCOHPX3fUTdnLRivr8ckdQ.png&#34;
	width=&#34;666&#34;
	height=&#34;536&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1rCOHPX3fUTdnLRivr8ckdQ_hu_4e8f2a901f6d8039.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1rCOHPX3fUTdnLRivr8ckdQ_hu_f2591dca5feb0d73.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;124&#34;
		data-flex-basis=&#34;298px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This will submit the new configuration which will also update the agent list. Now our queue has 1 agent (the one we added to the Team earlier).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1Y80efOkZInQnO0FtDwHNMw.png&#34;
	width=&#34;1731&#34;
	height=&#34;137&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1Y80efOkZInQnO0FtDwHNMw_hu_977df423ba5e68ef.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/1Y80efOkZInQnO0FtDwHNMw_hu_6d02b716a38e5bdd.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1263&#34;
		data-flex-basis=&#34;3032px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;To minimize service impact, remember to revert the change back to its original value and submit again.&lt;/p&gt;
&lt;p&gt;Since TAC evaluates if you changed anything before you’re allowed to save the queue and you always have to save the queue twice to force a sync, this is a pretty cumbersome way to do it.&lt;/p&gt;
&lt;h4 id=&#34;force-agent-list-sync-by-powershell&#34;&gt;Force Agent List Sync by PowerShell
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Update 05.04.2023&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I wrote a new function to make this even easier. Please check out this article.&lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/manage-microsoft-teams-call-queues-with-powershell-force-sync-9919e2939552&#34; &gt;Manage Microsoft Teams Call Queues with PowerShell (Force-Sync) | by martin heusser | Apr, 2023 | Medium&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;/Update&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Luckily, PowerShell allows us to save queues, even if none of the values have changed. To test this, I’ve added another EV enabled user to the Team.&lt;/p&gt;
&lt;p&gt;With this little code snippet, we will get all our call queues and set the OverflowThreshold value to the exact same value which was returned by PowerShell.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/10283870a4485a30ae9792da12f9a91b.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;To use Set-CsCallQueue we need to provide at least one property and a value which should be changed. But unlike TAC, PS doesn’t care if the new value is the same as the old value. Hence, we only need to touch each queue once.&lt;/p&gt;
&lt;p&gt;Tip: If you only want to sync queues which have no agents at all, just change the first line to:&lt;/p&gt;
&lt;p&gt;$callQueues = Get-CsCallQueue | Where-Object {$_.Agents.Count -lt 1}&lt;/p&gt;
&lt;p&gt;After running this foreach loop, our queue now shows two agents, and all the other queues settings remain unchanged.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/13kP8m8OOxnADWJlDOpjQ.png&#34;
	width=&#34;1735&#34;
	height=&#34;145&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/13kP8m8OOxnADWJlDOpjQ_hu_140df46e547754a4.png 480w, https://heusser.pro/p/microsoft-teams-call-queue-agent-lists-and-how-to-force-sync-them-ef8092090df0/13kP8m8OOxnADWJlDOpjQ_hu_bfb66dd62febf9ea.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1196&#34;
		data-flex-basis=&#34;2871px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;addendum&#34;&gt;Addendum
&lt;/h4&gt;&lt;p&gt;There’s also a Cmdlet called “&lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/es-es/powershell/module/skype/sync-csonlineapplicationinstance?view=skype-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Sync-CsOnlineApplicationInstance&lt;/a&gt;”. Microsoft says the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Use the Sync-CsOnlineApplicationInstance cmdlet to sync the application instance from Azure Active Directory into Agent Provisioning Service.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Based on my testing, this had no effect on a queue&amp;rsquo;s agent list. Since it’s also the only Cmdlet containing *Sync-Cs* in its name, I assume that there currently is no easier workaround as the one described by me in this blog post.&lt;/p&gt;
&lt;p&gt;I hope that this information is useful to you when planning and deploying Microsoft Teams Phone solutions. But most importantly, I hope that you don’t get chills when all your queues show up with no agents even though you long added the Team or group members!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Sync Local Outlook Contacts to a Teams Desk Phone</title>
        <link>https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/</link>
        <pubDate>Thu, 07 Apr 2022 21:44:54 +0000</pubDate>
        
        <guid>https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/</guid>
        <description>&lt;p&gt;This blog post is now obsolete. Microsoft has &lt;a class=&#34;link&#34; href=&#34;https://techcommunity.microsoft.com/t5/microsoft-teams-blog/what-s-new-in-microsoft-teams-april-2022/ba-p/3297881#devices&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;now added Outlook Contacts&lt;/a&gt; to Teams Desk Phones.&lt;/p&gt;
&lt;p&gt;Outlook Contacts finally do show up on Teams Desk Phones!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1pP3r1oOQebJ2upO4HvWQ.png&#34;
	width=&#34;1894&#34;
	height=&#34;1020&#34;
	srcset=&#34;https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1pP3r1oOQebJ2upO4HvWQ_hu_7aa0da0b007010a1.png 480w, https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1pP3r1oOQebJ2upO4HvWQ_hu_b73f3086b203a68f.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;185&#34;
		data-flex-basis=&#34;445px&#34;
	
&gt;
&lt;img src=&#34;https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1QmgTr14RlgASVngE8T5cw.jpeg&#34;
	width=&#34;800&#34;
	height=&#34;480&#34;
	srcset=&#34;https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1QmgTr14RlgASVngE8T5cw_hu_c9d82d6a87a22cbb.jpeg 480w, https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1QmgTr14RlgASVngE8T5cw_hu_c72e5333edc3dd0e.jpeg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;166&#34;
		data-flex-basis=&#34;400px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;original-story&#34;&gt;Original Story
&lt;/h3&gt;&lt;p&gt;Since the second generation of &lt;a class=&#34;link&#34; href=&#34;https://www.microsoft.com/en-us/microsoft-teams/across-devices/devices/category/desk-phones-teams-displays/34&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Teams certified desk phones&lt;/a&gt; have been released, many things have been improved. They’re now much faster and also got a lot of software updates. They still have one major flaw though. They’re only able to show your “native Teams contacts” instead of all contacts which are synchronized from Outlook to Teams.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://support.microsoft.com/en-us/office/what-s-new-in-microsoft-teams-devices-eabf4d81-acdd-4b23-afa1-9ee47bb7c5e2#ID0EBD=Desk_phones&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;This&lt;/a&gt; article states the following for a previous software update:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Contacts whose numbers are saved in Outlook will be available in the &lt;strong&gt;People&lt;/strong&gt; section of the Teams phones with read-only access. You’ll still need to manually dial the number&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;No matter what I tried, I was not able to get any contacts which are synchronized by Outlook to Teams to show up on my desk phone.&lt;/p&gt;
&lt;p&gt;Let’s take a look at our contacts in the Teams client. Contacts which have been added using the Teams clients can be edited. Contacts which have been synchronized by outlook, can’t. You can see that the three dots are greyed out on the first entry while they’re not on the second entry.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1w2ezI7rEfC4GDVDAttluBA.png&#34;
	width=&#34;1734&#34;
	height=&#34;400&#34;
	srcset=&#34;https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1w2ezI7rEfC4GDVDAttluBA_hu_669c6258130f5b8c.png 480w, https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1w2ezI7rEfC4GDVDAttluBA_hu_2071179ec7ecfcb9.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;433&#34;
		data-flex-basis=&#34;1040px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;On my desk phone, I can’t see the first contact (synchronized one) anywhere.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1Je3mptWlwbVu1YNpExazNQ.png&#34;
	width=&#34;1197&#34;
	height=&#34;718&#34;
	srcset=&#34;https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1Je3mptWlwbVu1YNpExazNQ_hu_18f18b7d6585cd94.png 480w, https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1Je3mptWlwbVu1YNpExazNQ_hu_181c9d056922c545.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;166&#34;
		data-flex-basis=&#34;400px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I’m still not sure what that quoted sentence above means but I have an idea. Since they specifically say that numbers must be dialed manually, I believe that what they actually mean is that if you have synchronized contacts from outlook, their names (instead of their number) will be displayed if a saved contact calls your desk phone.&lt;/p&gt;
&lt;p&gt;A quick test confirmed this hunch. I created a contact with my work and my mobile number. I purposely set my work number as mobile and my mobile number as home phone. When synchronizing contacts from Outlook to Teams, Teams will always use the mobile number for the number shown in its contact list. If you’d like to learn more about this, Mark Vale has a great article covering this over at the &lt;a class=&#34;link&#34; href=&#34;https://www.commsverse.com/microsoft-teams-contacts-list/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Commsverse Blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here you can see the Outlook contact.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1wNLpmLyJGuePpk2TcX0QA.png&#34;
	width=&#34;1392&#34;
	height=&#34;763&#34;
	srcset=&#34;https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1wNLpmLyJGuePpk2TcX0QA_hu_3e5cddaab3b1ea9a.png 480w, https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1wNLpmLyJGuePpk2TcX0QA_hu_11403628ea0404d0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;437px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The number which is declared as Mobile will be showed in the Teams client.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1wyoq4EijSDIHOquVsqyXNg.png&#34;
	width=&#34;1788&#34;
	height=&#34;110&#34;
	srcset=&#34;https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1wyoq4EijSDIHOquVsqyXNg_hu_4e223c4d20505fa0.png 480w, https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1wyoq4EijSDIHOquVsqyXNg_hu_ce04846febeb9eac.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;1625&#34;
		data-flex-basis=&#34;3901px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If we right-click the call icon, the other numbers from the Outlook contact will also show up.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1ErWpGEhYOAvefoYxf1f0vQ.png&#34;
	width=&#34;1834&#34;
	height=&#34;486&#34;
	srcset=&#34;https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1ErWpGEhYOAvefoYxf1f0vQ_hu_16198f2a0533ec0f.png 480w, https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1ErWpGEhYOAvefoYxf1f0vQ_hu_41de70fb09b957c5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;377&#34;
		data-flex-basis=&#34;905px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;So, when I used my mobile to call my desk phone, the name of the Outlook contact indeed showed up on the desk phone, even though that contact is not visible anywhere on the desk phone. This also means that despite Teams is only showing, or at least preferring the mobile number of an Outlook contact in the contact list, it will still use numbers which are hidden behind a right-click for display name lookups.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/10ydaPFAkcIRQ4nfxCFpJQ.jpeg&#34;
	width=&#34;800&#34;
	height=&#34;480&#34;
	srcset=&#34;https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/10ydaPFAkcIRQ4nfxCFpJQ_hu_f06bf543244dd130.jpeg 480w, https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/10ydaPFAkcIRQ4nfxCFpJQ_hu_8535c991ce7e9779.jpeg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;166&#34;
		data-flex-basis=&#34;400px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;That’s why I assume that that’s what Microsoft actually meant by that vague statement.&lt;/p&gt;
&lt;h4 id=&#34;synchronize-outlook-contacts-toteams&#34;&gt;Synchronize Outlook Contacts to Teams
&lt;/h4&gt;&lt;p&gt;That’s nice and all but it still doesn’t let us select and call our contacts directly from our Teams desk phones. Depending on the number of contacts we need on our phone, manually adding them is not an option either.&lt;/p&gt;
&lt;p&gt;If Alexander Holmeset is able to &lt;a class=&#34;link&#34; href=&#34;https://alexholmeset.blog/2021/12/13/microsoft-teams-speed-dial-contacts-provisioning/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;add contacts to a user&amp;rsquo;s speed dial list&lt;/a&gt; by using PowerShell, why not use his method to read all our local contacts from Outlook and add them as native Teams contacts?&lt;/p&gt;
&lt;p&gt;With a little help from &lt;a class=&#34;link&#34; href=&#34;http://squareclouds.net/exporting-outlook-contacts-with-powershell&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this article,&lt;/a&gt; I was able to get all the users local Outlook contacts and then add them to Teams programmatically.&lt;/p&gt;
&lt;p&gt;Since our contacts might have multiple number types like Business, Mobile, Home etc. stored in one object, but Teams contacts support only one number, the script will create one contact for each number type. The number type will then be added as a suffix enclosed in square brackets.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1KJYS5xwbIuZf7dXtl9A.png&#34;
	width=&#34;890&#34;
	height=&#34;554&#34;
	srcset=&#34;https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1KJYS5xwbIuZf7dXtl9A_hu_2bba979e2ee26289.png 480w, https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1KJYS5xwbIuZf7dXtl9A_hu_9d9a52f860c4e7c5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;160&#34;
		data-flex-basis=&#34;385px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;To reduce dependencies, I’m not using the AAD Internals modules to get the user token which is needed to add the contacts. I slightly modified the example from &lt;a class=&#34;link&#34; href=&#34;https://heusser.pro/p/opt-in-or-opt-out-teams-call-queue-agents-remotely-59fe6147f50d&#34; &gt;this post&lt;/a&gt;. Instead of requesting the token for the Call Queue Opt In / Opt Out service, we’re just requesting a token for normal access to the Teams Web Client. For this to work, you or another user needs to enter his credentials once the login prompt appears. You also need to specify your Teams region by Read-Host. In my case that’s “emea”.&lt;/p&gt;
&lt;h4 id=&#34;the-script&#34;&gt;The Script
&lt;/h4&gt;&lt;p&gt;The script will only add a contact to Teams, if the phone number or the name is not already saved to another Teams contact. It will only look for contacts stored in a user&amp;rsquo;s Contacts folder inside the personal mailbox.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/c3057fba9da212578601e0b12b0a95bf.js&#34;&gt;&lt;/script&gt;

&lt;h4 id=&#34;the-result&#34;&gt;The Result
&lt;/h4&gt;&lt;p&gt;Once the script has done its work. We can see that we now have editable contacts in Teams for all our local Outlook contacts. The downside is that there now are multiple entries because of the different sources.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1xaTcZzkZ4uGKdUWHiOujjA.png&#34;
	width=&#34;1842&#34;
	height=&#34;741&#34;
	srcset=&#34;https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1xaTcZzkZ4uGKdUWHiOujjA_hu_47d330a830677c72.png 480w, https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1xaTcZzkZ4uGKdUWHiOujjA_hu_b4eb6588ad8b47c7.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;248&#34;
		data-flex-basis=&#34;596px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The upside is that a Teams contact will always take precedent over a synchronized contact for incoming call notifications. This means that you’ll always see the number type a person is calling you from.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1zmrbJ9B7lyVzowWGS47yQ.jpeg&#34;
	width=&#34;800&#34;
	height=&#34;480&#34;
	srcset=&#34;https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1zmrbJ9B7lyVzowWGS47yQ_hu_5a447cd391aa9e6.jpeg 480w, https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1zmrbJ9B7lyVzowWGS47yQ_hu_d6053539d198c982.jpeg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;166&#34;
		data-flex-basis=&#34;400px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;And of course, the biggest upside is that you’ll finally have the comfort to use your desk phone to quickly call a contact from the tips of your fingers without manually entering the number first.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1wEwlj71A3dFKMlZEIGnEpA.png&#34;
	width=&#34;1194&#34;
	height=&#34;719&#34;
	srcset=&#34;https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1wEwlj71A3dFKMlZEIGnEpA_hu_1a47b76bdd2b3efc.png 480w, https://heusser.pro/p/sync-local-outlook-contacts-to-a-teams-desk-phone-7f5dc2717d3/1wEwlj71A3dFKMlZEIGnEpA_hu_d2d23a4030c5aefd.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;166&#34;
		data-flex-basis=&#34;398px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I hope that this script helps you improve the experience for your end users of Teams certified desk phones until Microsoft provides a better contact management solution.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Create a Dynamic Azure AD Group with all Teams Phone Standard Licensed Users</title>
        <link>https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/</link>
        <pubDate>Mon, 28 Mar 2022 15:01:16 +0000</pubDate>
        
        <guid>https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/</guid>
        <description>&lt;p&gt;When it comes to Azure AD and licensing, we usually use Azure AD Groups to assign certain licenses to group members. It’s an effective way to assign different licenses to different teams within your organization. For example, you could have a group which assigns a Microsoft 365 E5 license to all the IT-Staff.&lt;/p&gt;
&lt;p&gt;Is there a need to do the opposite? Add all users who have a specific service plan assigned to an Azure AD group? Although this scenario might not be as common as the first one, there’s certainly a use case for it.&lt;/p&gt;
&lt;p&gt;Think about a Teams call queue in a small to mid-sized firm which distributes incoming calls to, let’s say 5–10 call agents. If none of these agents are able to answer the call within a certain time, the call is then escalated to a second call queue which contains all the company’s Teams Phone Standard enabled users. A call queue can have up to &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/microsoftteams/create-a-phone-system-call-queue#teams-channel&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;two hundred&lt;/a&gt; call agents, if they’re added via a Teams Channel or a group.&lt;/p&gt;
&lt;p&gt;Instead of adding all phone enabled users manually we can create an Azure AD group which uses a dynamic query to include all users which have the service plan “MCOEV” assigned.&lt;/p&gt;
&lt;h4 id=&#34;heres-how-to-doit&#34;&gt;Here’s how to do it
&lt;/h4&gt;&lt;p&gt;First, head over to &lt;a class=&#34;link&#34; href=&#34;https://portal.azure.com/#blade/Microsoft_AAD_IAM/GroupsManagementMenuBlade/AllGroups&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;portal.azure.com&lt;/a&gt; and go to Azure AD, Groups. Then click New group.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1gDIaXRlNKUOM1U71nGgEvg.png&#34;
	width=&#34;1422&#34;
	height=&#34;324&#34;
	srcset=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1gDIaXRlNKUOM1U71nGgEvg_hu_5a642efc89e530c0.png 480w, https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1gDIaXRlNKUOM1U71nGgEvg_hu_e8e3d030302e7448.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;438&#34;
		data-flex-basis=&#34;1053px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;You can choose between a Microsoft 365 Group or a Security Group. For the Membership type, choose Dynamic User and then Add dynamic query.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1myN3vL9tTOdiDlRKgoQdyQ.png&#34;
	width=&#34;1035&#34;
	height=&#34;892&#34;
	srcset=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1myN3vL9tTOdiDlRKgoQdyQ_hu_dd6949d0c2dbcfdc.png 480w, https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1myN3vL9tTOdiDlRKgoQdyQ_hu_490647f0bcb8f622.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;116&#34;
		data-flex-basis=&#34;278px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Click the Edit button on Rule syntax.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1y3zKCrheFFtZhMuefUHg.png&#34;
	width=&#34;1556&#34;
	height=&#34;677&#34;
	srcset=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1y3zKCrheFFtZhMuefUHg_hu_6a9e39acd6441e70.png 480w, https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1y3zKCrheFFtZhMuefUHg_hu_6212931c442bbe67.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;229&#34;
		data-flex-basis=&#34;551px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now enter the following query and click OK.&lt;/p&gt;
&lt;p&gt;USER.ASSIGNEDPLANS -ANY (ASSIGNEDPLAN.SERVICEPLANID -EQ &amp;ldquo;4828c8ec-dc2e-4779-b502-87ac9ce28ab7&amp;rdquo; -AND ASSIGNEDPLAN.CAPABILITYSTATUS -EQ &amp;ldquo;ENABLED&amp;rdquo;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1RWeLgN5BP5RFAkr7lS50Q.png&#34;
	width=&#34;1257&#34;
	height=&#34;447&#34;
	srcset=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1RWeLgN5BP5RFAkr7lS50Q_hu_3889ec287706e78f.png 480w, https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1RWeLgN5BP5RFAkr7lS50Q_hu_b8a6dc0381d2c9b.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;281&#34;
		data-flex-basis=&#34;674px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The Id we are querying is the Id for the service plan “MCOEV” which can be seen &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/enterprise-users/licensing-service-plan-reference&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;here&lt;/a&gt;. Since we’re looking for the service plan Id, it doesn’t matter if the license is assigned to a user via the Teams Phone Standard add-on, E5 or even Common Area Phone SKU. With the second part of the query (-AND) we’re also making sure, that we’re only including users where the service plan is actually enabled.&lt;/p&gt;
&lt;p&gt;Click Save.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1HMIASp06A45oOvCFOU4i6g.png&#34;
	width=&#34;1549&#34;
	height=&#34;710&#34;
	srcset=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1HMIASp06A45oOvCFOU4i6g_hu_95d1fc5902636d06.png 480w, https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1HMIASp06A45oOvCFOU4i6g_hu_3aae5a093cb74e75.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;218&#34;
		data-flex-basis=&#34;523px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;And finally, click Create.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1LsdWbsig2hQJzrErXoUTw.png&#34;
	width=&#34;1026&#34;
	height=&#34;1166&#34;
	srcset=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1LsdWbsig2hQJzrErXoUTw_hu_48b738d6d3ba7e2d.png 480w, https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1LsdWbsig2hQJzrErXoUTw_hu_6ca3f34d0befa947.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;87&#34;
		data-flex-basis=&#34;211px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It will take a while until all the members have been added. We can check if our rule works by clicking on Dynamic membership rules and navigating to Validate Rules (preview). Let’s add some users and check if they meet the criteria.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1MFwrIBncdH8pWcWrwXFLw.png&#34;
	width=&#34;1551&#34;
	height=&#34;872&#34;
	srcset=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1MFwrIBncdH8pWcWrwXFLw_hu_a61a956d305eeda6.png 480w, https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1MFwrIBncdH8pWcWrwXFLw_hu_690bb4a53c1e9f49.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;177&#34;
		data-flex-basis=&#34;426px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;By clicking View details we can examine the query and see exactly why a user will be included or not.&lt;/p&gt;
&lt;p&gt;Here’s an example of a user where the service plan is assigned and also enabled.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1mz1us2OGznfSo1FaVQG8qA.png&#34;
	width=&#34;1243&#34;
	height=&#34;467&#34;
	srcset=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1mz1us2OGznfSo1FaVQG8qA_hu_24e241d412bd0151.png 480w, https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1mz1us2OGznfSo1FaVQG8qA_hu_c0da40d7aa726ebb.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;266&#34;
		data-flex-basis=&#34;638px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;The user Bill has a Teams Phone Standard License but won’t be added to the group because the service plan is disabled.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1xeKYbn5MmNhGywENqNvKdw.png&#34;
	width=&#34;1553&#34;
	height=&#34;364&#34;
	srcset=&#34;https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1xeKYbn5MmNhGywENqNvKdw_hu_f897fd1c468591e8.png 480w, https://heusser.pro/p/create-a-dynamic-azure-ad-group-with-all-teams-phone-standard-licensed-users-3a4194284739/1xeKYbn5MmNhGywENqNvKdw_hu_d7561235da6c2a7c.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;426&#34;
		data-flex-basis=&#34;1023px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Now you can use this group to assign it to a call queue. Whenever you license newly created users for the service plan MCOEV, the agent list of the call queue will automatically be updated. From my experience it can take some time until the agent lists of call queues are updated if you’re using group or channel assignments. I will write another article on how to force an agent list sync for call queues which use group assignments. So stay tuned!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Opt In or Opt Out Teams Call Queue Agents Remotely</title>
        <link>https://heusser.pro/p/opt-in-or-opt-out-teams-call-queue-agents-remotely-59fe6147f50d/</link>
        <pubDate>Thu, 24 Mar 2022 21:10:13 +0000</pubDate>
        
        <guid>https://heusser.pro/p/opt-in-or-opt-out-teams-call-queue-agents-remotely-59fe6147f50d/</guid>
        <description>&lt;p&gt;This is an interesting one. First of all, let’s give credits where they’re due. This blog post is inspired by &lt;a class=&#34;link&#34; href=&#34;https://alexholmeset.blog/2021/12/13/microsoft-teams-speed-dial-contacts-provisioning/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this post&lt;/a&gt; by the great &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/AlexHolmeset&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Alexander Holmeset.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The PowerShell code to generate the TOTP is forked from this &lt;a class=&#34;link&#34; href=&#34;https://github.com/ecspresso/TOTPPowerShellModule&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;repo&lt;/a&gt;. And the code from this repo is from this &lt;a class=&#34;link&#34; href=&#34;https://gist.github.com/jonfriesen/234c7471c3e3199f97d5&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;gist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The code to create the interactive sign in window and to get the token is based of &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/answers/questions/491498/invoke-webrequest-to-get-access-token.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;this example&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;disclaimer&#34;&gt;Disclaimer
&lt;/h4&gt;&lt;p&gt;Before we get into it, I should probably add a disclaimer that this is a proof of concept, at best. You should not use it in production as it uses some bad security practices (like sharing a user&amp;rsquo;s password). For real. Don’t say I didn’t warn you.&lt;/p&gt;
&lt;h4 id=&#34;whats-this-aboutagain&#34;&gt;What’s this about again?
&lt;/h4&gt;&lt;p&gt;However, being able to remotely change the opt in status of call queue agents seems to be quite a big ask from several Microsoft Teams admins and customers, so I decided to publish this piece anyway.&lt;/p&gt;
&lt;h4 id=&#34;changing-opt-in-status-as-auser&#34;&gt;Changing opt in status as a user
&lt;/h4&gt;&lt;p&gt;Can the opt in status of a user be changed as an admin? The answer is both yes and no. You can’t do it in any delegated way if that’s what you’re asking. You will need the user’s credentials.&lt;/p&gt;
&lt;p&gt;If you’re a Teams User which is also a call queue agent, there are numerous ways to change your own opt in status for call queues. That is, if your admin allows opting out of queues of course. Let’s go through them.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;From Teams Desktop Client Settings&lt;/li&gt;
&lt;li&gt;From a Teams Voice Enabled Channel&lt;/li&gt;
&lt;li&gt;From Teams Web Client Settings&lt;/li&gt;
&lt;li&gt;From Teams Certified Desk Phones&lt;/li&gt;
&lt;li&gt;From Teams Mobile Apps (Android / iOS)&lt;/li&gt;
&lt;li&gt;From the good old &lt;a class=&#34;link&#34; href=&#34;https://aka.ms/cqsettings&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://aka.ms/cqsettings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;im-an-admin-why-cant-i-change-the-damn-opt-instatus&#34;&gt;I’m an Admin, why can’t I change the damn opt in status?
&lt;/h4&gt;&lt;p&gt;From a Teams PowerShell session, we can only view the opt in status of a queue’s agents but not change it.&lt;/p&gt;
&lt;p&gt;(Get-CsCallQueue -Identity xxxxxxxx-f74b-46bb-9743-xxxxxxxxxxxx).Agents&lt;/p&gt;
&lt;p&gt;This will spit out something like this.&lt;/p&gt;
&lt;p&gt;ObjectId                             OptIn&lt;br&gt;
-&amp;mdash;&amp;mdash;-                             &amp;mdash;&amp;ndash;&lt;br&gt;
xxxxxxxx-4d28-4246-9c08-xxxxxxxxxxxx  True&lt;br&gt;
xxxxxxxx-8bae-419d-a4eb-xxxxxxxxxxxx  True&lt;br&gt;
xxxxxxxx-49db-40ee-9d05-xxxxxxxxxxxx False&lt;/p&gt;
&lt;p&gt;Every attempt to change the returned PowerShell object failed. Miserably.&lt;/p&gt;
&lt;h3 id=&#34;how-can-we-at-least-do-it-as-the-user-but-remotely&#34;&gt;How can we at least do it as the user, but remotely?
&lt;/h3&gt;&lt;p&gt;Similar to Alex’s approach of creating Teams Contacts from CLI we also have to acquire a user token to be able to change the opt in status of a user by CLI.&lt;/p&gt;
&lt;p&gt;In his scenario, he’s mainly thinking about new users or even accounts which are used to sign into common area phones which might not be MFA enabled yet. In our case this might look different because we want to be able to alter the opt in state of already working staff.&lt;/p&gt;
&lt;p&gt;At first, I also tried to use the AAD Internals PowerShell Module to receive a user token. In this case, however, it turned out to be much more complicated. When a user opens the Calls settings page in Teams, another token is requested from a different issuing service than the one which is used to access all the other features in Teams.&lt;/p&gt;
&lt;p&gt;After a long night of googling and binging (yes, I was this desperate) I finally was able to get a working token by modifying the example from the Docs Q&amp;amp;A which is linked in the intro of this article.&lt;/p&gt;
&lt;h4 id=&#34;prerequisites&#34;&gt;Prerequisites
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Let’s get one thing straight. This approach ONLY works if you know the password of the user and / or the user agrees to share their password or even an MFA secret with you.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I’m thinking of the following scenario: we want to be able to automatically and remotely opt in and opt out agents of call queues based on various criteria such as working schedules etc.&lt;/p&gt;
&lt;p&gt;To have at least some kind of security, my script is encrypting the password and the MFA secret before it’s saved to the disk. Once they’re encrypted, they can only be decrypted by the same user account and the same Windows system which was used to encrypt them.&lt;/p&gt;
&lt;p&gt;Why do we need to save the password to disk, when it’s an interactive login process anyway? Well, if you want to automate it by any means, we can use SendKeys to emulate a user&amp;rsquo;s keystrokes. To be completely honest, I only went so far because I wanted to see for myself if I can get it working…&lt;/p&gt;
&lt;h4 id=&#34;how-the-scriptworks&#34;&gt;How the script works
&lt;/h4&gt;&lt;p&gt;The script needs a few parameters to work. We need to provide a user principal name, a user object Id and a call queue Id.&lt;/p&gt;
&lt;p&gt;It will then check the current directory for two or three files depending on whether the -MFA switch is used.&lt;/p&gt;
&lt;p&gt;You will be prompted to enter the password and the MFA secret if these files do not already exist. The token will be saved to a file once you’ve successfully logged in and acquired one. If the token is expired (happens every few hours or so), you will be prompted for credentials again and the token inside the file will be replaced with the new one. Since we also saved the password to disk, you do not need to enter the password again. The script will decrypt and enter the password by emulating automated keystrokes automatically.&lt;/p&gt;
&lt;h4 id=&#34;script-modes&#34;&gt;Script modes
&lt;/h4&gt;&lt;p&gt;The script features a -QueryStatusOnly switch, which will only check if the user is opted in or out of a queue. This will not change anything.&lt;/p&gt;
&lt;p&gt;For the sake of simplicity, I’ve already stored the values of $UserId, $CallQueueId and $UserName as default values for the parameters. Of course, you can pass your own values if you call the script yourself.&lt;/p&gt;
&lt;p&gt;In this video, you can see how the username and password are automatically entered, which will ultimately get us the token we need to call the API and query the user’s opt in status.&lt;/p&gt;
&lt;p&gt;If we run the same thing again, we will already have a valid token.&lt;/p&gt;
&lt;p&gt;Now let’s take a look at an MFA enabled user. For this, we use the optional -MFA switch. Besides the password, this will also prompt us for the MFA secret. The script then pulls down the PowerShell Script from GitHub and uses it’s code to do some magic and generate the TOTP from the secret.&lt;/p&gt;
&lt;h4 id=&#34;okbut-how-do-we-opt-a-userout&#34;&gt;Ok — But how do we opt a user out!?
&lt;/h4&gt;&lt;p&gt;Since we can already see the opt in status of members either in Voice Enabled Channels or via PowerShell this is nothing new. Let’s opt a user out already!&lt;/p&gt;
&lt;h4 id=&#34;script&#34;&gt;Script
&lt;/h4&gt;&lt;p&gt;Here’s the script. Please notice that sometimes, activating the AAD Login Window does not always work, so you might have to cancel and run it again. For me, it usually worked the second time I ran the script.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/ce70f39f720bf17632f60a3d6b1be110.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;Here’s an example of running the script with parameters.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;.\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CallQueueOptInOptOutGist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;ps1&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-UserId&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;xxxxxxxx-8bae-419d-a4eb-xxxxxxxxxxxx&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-UserName&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;user@domain.com&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-CallQueueId&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;xxxxxxxx-f74b-46bb-9743-xxxxxxxxxxxx&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Action&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;OptOut&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h4&gt;&lt;p&gt;Even though this method uses some real dirty tricks it still get’s the job done. Well, kind of, at least. I really hope that Microsoft will add the functionality to allow Queue managers to remotely opt in or opt out their agents in a more practical way. It’s a real pity that not even the new &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/powershell/module/teams/set-csusercallingsettings?view=teams-ps&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Set-CsUserCallingSettings&lt;/a&gt; or the Boss/Admin feature can do this!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Creating Microsoft Teams Calling Deep Links</title>
        <link>https://heusser.pro/p/creating-microsoft-teams-calling-deep-links-f7c9d62eacdd/</link>
        <pubDate>Tue, 15 Mar 2022 21:51:21 +0000</pubDate>
        
        <guid>https://heusser.pro/p/creating-microsoft-teams-calling-deep-links-f7c9d62eacdd/</guid>
        <description>&lt;p&gt;Creating links for phone numbers on a desktop operating system is easy. Just like mailto: links, Windows PCs have link handlers for callto: or tel: URLs. These kinds of links are often found on websites or google search results and provide great convenience because a user just has to click a link to start dialing.&lt;/p&gt;
&lt;p&gt;Even though there are many different protocols, the most popular ones are:&lt;/p&gt;
&lt;p&gt;callto:&lt;phone number&gt;&lt;br&gt;
tel:&lt;phone number&gt;&lt;/p&gt;
&lt;p&gt;If you haven’t already configured a default App for calling on Windows, you’ll be prompted to choose an app for calling links.&lt;/p&gt;
&lt;p&gt;And that’s it. Next time you click on a phone number link, your PC will automatically use Teams to make the call.&lt;/p&gt;
&lt;h4 id=&#34;using-deep-links-on-mobilephones&#34;&gt;Using Deep Links on Mobile Phones
&lt;/h4&gt;&lt;p&gt;Mobile operating systems are a different story. Because they are very restricted in terms of customization, clicking on a callto: or tel: link will most likely start a call using your mobile number/network — which makes total sense.&lt;/p&gt;
&lt;p&gt;But what if you have a business application or an internal website and would like your users to initiate calls using their business number configured in Microsoft Teams instead of their mobile number?&lt;/p&gt;
&lt;p&gt;It’s definitely possible but it requires a bit of work. To be specific, to achieve this, we need a specific deep link. But what are deep links?&lt;/p&gt;
&lt;p&gt;Basically, they are just links followed by some application specific stuff which will not only open the App but also start an action inside said App. For example, we can use a deep link to open a specific channel or even a tab inside a channel in Teams.&lt;/p&gt;
&lt;p&gt;This &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/microsoftteams/platform/concepts/build-and-test/deep-links#generate-a-deep-link-to-a-call&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Microsoft Docs Article&lt;/a&gt; provides a detailed overview of all available deep links for Teams. As you can see, there are also deep links to initiate call actions within Teams.&lt;/p&gt;
&lt;p&gt;If you want a link which will launch Teams and start a PSTN call, you need to create the link like this. The most important part is the “4;” placed just before the phone number. This will tell Teams to call a PSTN participant.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://teams.microsoft.com/l/call/0/0?users=&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://teams.microsoft.com/l/call/0/0?users=&lt;/a&gt;&lt;user1&gt;,4:&lt;phonenumber&gt;&lt;/p&gt;
&lt;p&gt;The &lt;user&gt; part of the URL is actually optional. So a real world example would look something like this.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://teams.microsoft.com/l/call/0/0?users=4:&amp;#43;448719762819&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://teams.microsoft.com/l/call/0/0?users=4:+448719762819&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Since this is a simple URL, we can also prettify the link by giving it a title.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://teams.microsoft.com/l/call/0/0?users=4:&amp;#43;448719762819&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Call Speaking Clock via Teams&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This will start a call to a &lt;a class=&#34;link&#34; href=&#34;https://telephonesuk.org.uk/speaking-clock/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;UK Speaking Clock&lt;/a&gt;. If you’re already using Teams Telephony you can try this by yourself. This link works on desktop and mobile devices. (Beware of the costs though! According to the site linked above, calls to this number cost 13p (Pence) per minute. If you’re calling from outside the UK, the cost may vary.) If you want to test this with a local number instead, just copy the URL and change the phone number.&lt;/p&gt;
&lt;h4 id=&#34;example-gifs&#34;&gt;Example Gifs
&lt;/h4&gt;&lt;p&gt;To finish off, here are some Gifs of how it looks on an iPhone and an Android device.&lt;/p&gt;
&lt;p&gt;Clicking a Teams calling deep link from within the app on Android.&lt;/p&gt;
&lt;p&gt;Clicking a Teams calling deep link from within the app on iOS.&lt;/p&gt;
&lt;p&gt;Clicking a Teams calling deep link from another App/Website on Android (works on iOS too.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/creating-microsoft-teams-calling-deep-links-f7c9d62eacdd/1ZNgQP7PbMMRQnBjFgvrw.gif&#34;
	width=&#34;720&#34;
	height=&#34;1600&#34;
	srcset=&#34;https://heusser.pro/p/creating-microsoft-teams-calling-deep-links-f7c9d62eacdd/1ZNgQP7PbMMRQnBjFgvrw_hu_1e68e403d0342880.gif 480w, https://heusser.pro/p/creating-microsoft-teams-calling-deep-links-f7c9d62eacdd/1ZNgQP7PbMMRQnBjFgvrw_hu_11349ab98d7a01dc.gif 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;45&#34;
		data-flex-basis=&#34;108px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;update&#34;&gt;Update
&lt;/h4&gt;&lt;p&gt;When launching a deep link starting with https:// as demonstrated above, it will always open your default browser, before the Teams App is launched. Unless, you’re clicking the deep link from within Teams as shown in the first two Gifs.&lt;/p&gt;
&lt;p&gt;Twitter User &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/pilzi&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;pilzi&lt;/a&gt; was kind enough to share some additional info. By adding the prefix msteams:// in front of the URL, we can open calling deep links directly in the Teams App without opening the browser first. It seems like the msteams:// URI scheme doesn’t like + signs though. We need to write the plus sign as “%2b” for it to work.&lt;/p&gt;
&lt;p&gt;msteams://teams.microsoft.com/l/call/0/0?users=4:%2b448719762819&lt;/p&gt;
&lt;p&gt;Thanks again for the tip!&lt;/p&gt;
</description>
        </item>
        <item>
        <title>How To Read/Format Microsoft Teams PSTN Call Reports</title>
        <link>https://heusser.pro/p/how-to-read-format-microsoft-teams-pstn-call-reports-3b0e56c422a2/</link>
        <pubDate>Fri, 11 Mar 2022 23:52:10 +0000</pubDate>
        
        <guid>https://heusser.pro/p/how-to-read-format-microsoft-teams-pstn-call-reports-3b0e56c422a2/</guid>
        <description>&lt;p&gt;Analyzing PSTN usage reports in Teams Admin Center is a good start to troubleshoot issues with Direct Routing calls in Teams. You can either view the report directly in the browser or export it into a CSV file.&lt;/p&gt;
&lt;p&gt;To access this report, head over to &lt;a class=&#34;link&#34; href=&#34;https://admin.teams.microsoft.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://admin.teams.microsoft.com/&lt;/a&gt; and click Usage reports under Analytics &amp;amp; Reports. Next, choose PSTN and SMS (preview) usage and select a date range. Finally, click on Run report.&lt;/p&gt;
&lt;p&gt;It will default to Calling plans/SMS so you need to switch the tab to Direct Routing.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-read-format-microsoft-teams-pstn-call-reports-3b0e56c422a2/1PckxJFyhvjI2Pdokxqqwg.png&#34;
	width=&#34;1975&#34;
	height=&#34;879&#34;
	srcset=&#34;https://heusser.pro/p/how-to-read-format-microsoft-teams-pstn-call-reports-3b0e56c422a2/1PckxJFyhvjI2Pdokxqqwg_hu_7ee31944db3410d9.png 480w, https://heusser.pro/p/how-to-read-format-microsoft-teams-pstn-call-reports-3b0e56c422a2/1PckxJFyhvjI2Pdokxqqwg_hu_b470696cdf260bd0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;224&#34;
		data-flex-basis=&#34;539px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Viewing the logs in the browser is good enough if you just need to take a quick look at some calls. For example, you can quickly identify issues if you sort by the column Failure time (UTC). But keep in mind that cancelled calls are also shown as errors, as these are terminated with the SIP error code 487 (busy here). A duration of zero is also an indicator for failed calls.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-read-format-microsoft-teams-pstn-call-reports-3b0e56c422a2/1qexWj1fWPIeTIS1gBZP2Q.png&#34;
	width=&#34;1322&#34;
	height=&#34;285&#34;
	srcset=&#34;https://heusser.pro/p/how-to-read-format-microsoft-teams-pstn-call-reports-3b0e56c422a2/1qexWj1fWPIeTIS1gBZP2Q_hu_d02f701cea5b094c.png 480w, https://heusser.pro/p/how-to-read-format-microsoft-teams-pstn-call-reports-3b0e56c422a2/1qexWj1fWPIeTIS1gBZP2Q_hu_a9dc52e80e4d4378.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;463&#34;
		data-flex-basis=&#34;1113px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Besides obvious stuff like the display name, callee and caller numbers, the SIP address, or the call direction/type, you can also see which Direct Routing gateway and which Azure region for media or signaling was used.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-read-format-microsoft-teams-pstn-call-reports-3b0e56c422a2/1ppdvGy7oVq2GzGoJXVUkSg.png&#34;
	width=&#34;1059&#34;
	height=&#34;198&#34;
	srcset=&#34;https://heusser.pro/p/how-to-read-format-microsoft-teams-pstn-call-reports-3b0e56c422a2/1ppdvGy7oVq2GzGoJXVUkSg_hu_e7f905bf81115204.png 480w, https://heusser.pro/p/how-to-read-format-microsoft-teams-pstn-call-reports-3b0e56c422a2/1ppdvGy7oVq2GzGoJXVUkSg_hu_7c72dd139cc5e670.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;534&#34;
		data-flex-basis=&#34;1283px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If you need to take a deeper look at your call logs, it’s probably best to download the report as a CSV file. To do that, just click the Excel Icon in the upper right corner as shown in the first screenshot.&lt;/p&gt;
&lt;p&gt;Once the report has been generated, it will trigger a download of a Zip file. Depending on your setup, the Zip file might also contain a CSV file for Calling Plans. I’m only interested in Direct Routing calls at the moment, so let’s open that file in Excel. It gives us all call records in the specified date range as comma separated values. But they are all in the same column, which is pretty useless until they’re formatted correctly.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-read-format-microsoft-teams-pstn-call-reports-3b0e56c422a2/15zq9Y2Xpl34hYAAyZMhpgw.png&#34;
	width=&#34;780&#34;
	height=&#34;350&#34;
	srcset=&#34;https://heusser.pro/p/how-to-read-format-microsoft-teams-pstn-call-reports-3b0e56c422a2/15zq9Y2Xpl34hYAAyZMhpgw_hu_f90539f71e83b55e.png 480w, https://heusser.pro/p/how-to-read-format-microsoft-teams-pstn-call-reports-3b0e56c422a2/15zq9Y2Xpl34hYAAyZMhpgw_hu_27f34bf282d69afa.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;222&#34;
		data-flex-basis=&#34;534px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;For some reason, Excel always shows a warning, that there’s already data here, when I try to use the Text to Columns feature. Despite this warning, I’m still able to read the logs once the columns are separated.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-read-format-microsoft-teams-pstn-call-reports-3b0e56c422a2/1KWQEcy22MmnVj9zEKQpZow.png&#34;
	width=&#34;459&#34;
	height=&#34;179&#34;
	srcset=&#34;https://heusser.pro/p/how-to-read-format-microsoft-teams-pstn-call-reports-3b0e56c422a2/1KWQEcy22MmnVj9zEKQpZow_hu_71fefcdde60a569.png 480w, https://heusser.pro/p/how-to-read-format-microsoft-teams-pstn-call-reports-3b0e56c422a2/1KWQEcy22MmnVj9zEKQpZow_hu_70be83fba98c7974.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;256&#34;
		data-flex-basis=&#34;615px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;Since I don’t want to take the risk of missing important information in the logs, I wrote this handy PowerShell one-liner to convert the CSV file into a more human readable CSV file. This also saves me the time to turn text into columns first.&lt;/p&gt;
&lt;p&gt;Just fire up PowerShell or Windows Terminal by entering powershell or wt directly into the File Explorer’s address bar.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-read-format-microsoft-teams-pstn-call-reports-3b0e56c422a2/13g7Gfp5XdrhkytDOO5fNg.png&#34;
	width=&#34;1218&#34;
	height=&#34;352&#34;
	srcset=&#34;https://heusser.pro/p/how-to-read-format-microsoft-teams-pstn-call-reports-3b0e56c422a2/13g7Gfp5XdrhkytDOO5fNg_hu_fcd72847d1887922.png 480w, https://heusser.pro/p/how-to-read-format-microsoft-teams-pstn-call-reports-3b0e56c422a2/13g7Gfp5XdrhkytDOO5fNg_hu_f9bfed176ba4e481.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;346&#34;
		data-flex-basis=&#34;830px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This will open PowerShell in the current directory. Now all you have to do is to paste this code.&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/mozziemozz/9c5fcaaa900b8d26f99f5a304d1f90e3.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;This will read the original CSV, into a PowerShell object and export it to a new CSV file called “drExport.csv” where the columns are already separated.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-read-format-microsoft-teams-pstn-call-reports-3b0e56c422a2/1Dhj5Bl5uey0u0E3MzVh6Q.png&#34;
	width=&#34;1581&#34;
	height=&#34;323&#34;
	srcset=&#34;https://heusser.pro/p/how-to-read-format-microsoft-teams-pstn-call-reports-3b0e56c422a2/1Dhj5Bl5uey0u0E3MzVh6Q_hu_cd886370ec70d539.png 480w, https://heusser.pro/p/how-to-read-format-microsoft-teams-pstn-call-reports-3b0e56c422a2/1Dhj5Bl5uey0u0E3MzVh6Q_hu_db0422db0e5e8fc2.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;489&#34;
		data-flex-basis=&#34;1174px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;I hope this little Gist also helps you formatting your logs a little quicker.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>How to Permanently Forward PSTN Calls in Microsoft Teams (Without License)</title>
        <link>https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/</link>
        <pubDate>Thu, 10 Mar 2022 19:01:47 +0000</pubDate>
        
        <guid>https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/</guid>
        <description>&lt;p&gt;When you’re using Microsoft Teams Direct Routing as your primary calling solution, chances are that sometimes you also need to permanently forward calls to one of your numbers to another external phone number.&lt;/p&gt;
&lt;p&gt;In many cases, forwarding of numbers can also be handled outside of Teams. Most SIP providers offer a web-based portal for number management and forwarding. However, controlling all your numbers inside Teams without relying on third parties can still be an advantage sometimes.&lt;/p&gt;
&lt;p&gt;Note: this blog post only considers Teams Direct Routing scenarios. Calling Plans or Operator Connect are not covered.&lt;/p&gt;
&lt;h4 id=&#34;forwarding-by-a-licensed-teamsuser&#34;&gt;Forwarding by a Licensed Teams User
&lt;/h4&gt;&lt;p&gt;Setting up a forwarding of numbers can be achieved in multiple ways. The most obvious one to just create and license a Teams user and setup a permanent call forwarding for that user in the Teams Client.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1hF9oWNMacZgIt1dCtfkcOQ.png&#34;
	width=&#34;1156&#34;
	height=&#34;485&#34;
	srcset=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1hF9oWNMacZgIt1dCtfkcOQ_hu_841e30e4e318d3d8.png 480w, https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1hF9oWNMacZgIt1dCtfkcOQ_hu_c9ea9c611629ad97.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;238&#34;
		data-flex-basis=&#34;572px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;This user will need at minimum a Business Basic + Teams Phone Standard License. A CAP (Common Area Phone License) *in theory* should also present this option when using the Desktop or Web Client but call forwarding won’t be available when using a Teams certified Desk Phone. Thus, this is an unsupported scenario and should not be used. There’s a better way which will even allow you to get rid of the license costs entirely. I’ll explain how later in this article.&lt;/p&gt;
&lt;p&gt;Since there is no voice app like an auto attendant or call queue involved in this scenario, all calls to the direct number of this particular user will be forwarded right away. This also means that the caller will hear the ring back tone, until the external participant (forwaring target) answers the call.&lt;/p&gt;
&lt;p&gt;Advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Direct forwarding, call does not get picked up or intercepted by Teams&lt;/li&gt;
&lt;li&gt;Should be possible to forward calls to a FAX number&lt;/li&gt;
&lt;li&gt;Good for scenarios where the forwarding target often changes (can be changed by other Teams users from inside their client by using the Boss/Delegate feature)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Disadvantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;License costs&lt;/li&gt;
&lt;li&gt;Configuration can only be reviewed or changed by logging in, using Boss/Delegate or PowerShell Preview Cmdlets (Get-CsUserCallingSettings)&lt;/li&gt;
&lt;li&gt;Can’t use Service or Toll-Free numbers&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;forwaring-by-a-resourceaccount&#34;&gt;Forwaring by a Resource Account
&lt;/h4&gt;&lt;p&gt;It’s also possible to transfer calls to external PSTN numbers by using resource accounts assigned to auto attendants or call queues. Before you can assign a number to a resource account, you need to assign a free &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/microsoftteams/teams-add-on-licensing/virtual-user#virtual-user-license-allocation&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Teams Phone Standard — Virtual User License&lt;/a&gt; to the resource account.&lt;/p&gt;
&lt;p&gt;Once the license is assigned, we need to assign a phone number to the resource account:&lt;/p&gt;
&lt;p&gt;Set-CsPhoneNumberAssignment -Identity ra_cq_PS_Test@mozzism.ch -PhoneNumber +41445124077 -PhoneNumberType DirectRouting&lt;/p&gt;
&lt;p&gt;Next we also need to assign it a Voice Routing Policy:&lt;/p&gt;
&lt;p&gt;Grant-CsOnlineVoiceRoutingPolicy -Identity &lt;a class=&#34;link&#34; href=&#34;mailto:ra_cq_PS_Test@mozzism.ch&#34; &gt;ra_cq_PS_Test@mozzism.ch&lt;/a&gt; -PolicyName &amp;ldquo;FirstTrunk&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The most obvious way, at least for me was to create an auto attendant and set it up without business hours so it will always perform the same action: forward the call to an external number. This works, no doubt but the problem is that the auto attendant *ALWAYS* answers the call before it’s actually forwarded. Because of that, this method can’t be used to forward calls to a FAX number.&lt;/p&gt;
&lt;p&gt;Since it’s also possible to forward calls from a call queue to an external number, we can leverage this to create a similar experience as to when the call is permanently forwarded by a Teams user.&lt;/p&gt;
&lt;p&gt;A call queue has two options to control actions or forwardings. Overflow (max. number of simultaneous calls) or timeout.&lt;/p&gt;
&lt;p&gt;If we set the timeout to zero (0 minutes, 0 seconds) the queue still answers the call, before it’s forwarded. Even if there is no greeting configured.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1YgnBVoi8wRNzxMl3TedyyQ.png&#34;
	width=&#34;1768&#34;
	height=&#34;734&#34;
	srcset=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1YgnBVoi8wRNzxMl3TedyyQ_hu_bd99a2240be77e72.png 480w, https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1YgnBVoi8wRNzxMl3TedyyQ_hu_fea59af5794aed07.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;240&#34;
		data-flex-basis=&#34;578px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;A good example to see that the queue picked up the call is that the counter starts on any phone. Here I’m using Skype to call the call queue and you can see that the call has been established for 5 seconds, even though the configured forwarding target has not answered the call yet. While the call rings the forwarding target, Teams will generate a ring back tone inside the already established call.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1QAUIogXcABSjdUwIzj5LDQ.png&#34;
	width=&#34;1590&#34;
	height=&#34;1017&#34;
	srcset=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1QAUIogXcABSjdUwIzj5LDQ_hu_47bbf5da1fe47.png 480w, https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1QAUIogXcABSjdUwIzj5LDQ_hu_42e461b91d16c734.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;156&#34;
		data-flex-basis=&#34;375px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;If we set the overflow threshold of the queue to zero on the other hand, TAC shows a warning message that the queue won’t play the greeting when the overflow threshold is set to 0.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1jxc3VpgcSiWVumahjggBRg.png&#34;
	width=&#34;1766&#34;
	height=&#34;765&#34;
	srcset=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1jxc3VpgcSiWVumahjggBRg_hu_5d09179a7af773c3.png 480w, https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1jxc3VpgcSiWVumahjggBRg_hu_d3c4145501ecbc36.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;230&#34;
		data-flex-basis=&#34;554px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;It’s not entirely clear that this has always been the case, but I’m pretty sure that at least this warning message has been introduced a only few weeks ago when the call queue wizard was redesigned. It was this warning message that tipped me of and inspired me to test this.&lt;/p&gt;
&lt;p&gt;So, let’s make another call to the queue’s number. This time, there’s no counter visible in Skype’s call screen which means that the call gets forwarded without being intercepted by the queue first. In this case, because I’m using Skype I can only hear Skype’s own “ring back jingle”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1d3NXW1fGGCCxHfm0jhDKzw.png&#34;
	width=&#34;1590&#34;
	height=&#34;1017&#34;
	srcset=&#34;https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1d3NXW1fGGCCxHfm0jhDKzw_hu_f2faa17964f42f1d.png 480w, https://heusser.pro/p/how-to-permanently-forward-pstn-calls-in-microsoft-teams-without-license-baa0cb56b4c6/1d3NXW1fGGCCxHfm0jhDKzw_hu_989698dac2a90602.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;156&#34;
		data-flex-basis=&#34;375px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;When using a “real phone” like my cell phone the ring back tone gets played back just like when any other number is dialed.&lt;/p&gt;
&lt;p&gt;Altough I haven’t actually tested sending a FAX message end to end, I tested forwarding to a FAX number and was able to hear the typical FAX noises when I called the queue’s number. I can’t see any reason why this shouldn’t work.&lt;/p&gt;
&lt;p&gt;Advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No License costs&lt;/li&gt;
&lt;li&gt;Can use Service or Toll-Free numbers&lt;/li&gt;
&lt;li&gt;Should be possible to forward calls to a FAX number (when using a CQ)&lt;/li&gt;
&lt;li&gt;Configured forwarding is more obvious because it’s visible in TAC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Disadvantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Only Teams admins can change the forwarding target&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;summary&#34;&gt;Summary
&lt;/h4&gt;&lt;p&gt;Even though it might not be an obvious solution, using a call queue to permanently forward calls is still a great way to have more control over all your DIDs right inside Teams itself without adding any license costs.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Microsoft Teams: Activate FQDN of Online PSTN Gateway without License</title>
        <link>https://heusser.pro/p/microsoft-teams-activate-fqdn-of-online-pstn-gateway-without-license-85e9ee4ca4cc/</link>
        <pubDate>Tue, 08 Feb 2022 21:29:25 +0000</pubDate>
        
        <guid>https://heusser.pro/p/microsoft-teams-activate-fqdn-of-online-pstn-gateway-without-license-85e9ee4ca4cc/</guid>
        <description>&lt;p&gt;If you’re a Microsoft Teams Admin, like me, you are probably aware that setting up a new Online PSTN Gateway in Teams Admin Center (TAC) or via PowerShell requires the domain of the SBC’s FQDN to be activated. This is done by creating at least one account using the SBC’s FQDN as the UPN Suffix.&lt;/p&gt;
&lt;h3 id=&#34;domains&#34;&gt;Domains
&lt;/h3&gt;&lt;p&gt;Now keep in mind that there are two ways how you can add an Online PSTN Gateway in Teams. Either you use your own Gateway in which case the domain usually has one segment less and is a subdomain of your main domain. E.g.&lt;/p&gt;
&lt;p&gt;sbc.domain.com&lt;/p&gt;
&lt;p&gt;In this case you don’t need to create a user to activate the domain because &lt;em&gt;domain.com&lt;/em&gt; is already used for other UPNs and thus already known in your tenant.&lt;/p&gt;
&lt;p&gt;If you want to use Direct Routing offered by one of the various managed service providers, your FQDN might look something like this. E.g.&lt;/p&gt;
&lt;p&gt;customer1.customers.domain.com&lt;/p&gt;
&lt;p&gt;In this case you need to add a user with the following UPN. E.g.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;mailto:domainactivation@customer1.customers.domain.com&#34; &gt;domainactivation@customer1.customers.domain.com&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;microsoft-docs&#34;&gt;Microsoft Docs
&lt;/h3&gt;&lt;p&gt;The information on Microsoft’s &lt;a class=&#34;link&#34; href=&#34;https://t.umblr.com/redirect?z=https%3A%2F%2Fdocs.microsoft.com%2Fen-us%2Fmicrosoftteams%2Fdirect-routing-sbc-multiple-tenants%23activate-the-subdomain-name&amp;amp;t=OTVkYjk5ZDBiMDNhNmNhOGIxNjY2YzlmYjZkZTdjMzA3ODkxYjk1Yiw5MmY5MzI0OTk0Y2RjZTUwZWM0N2I0YmIyOWYxNWM2YzQ2ZmY1ZmIw&amp;amp;ts=1633444148&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;official documentation&lt;/a&gt; is a bit controversial. They have two sections mentioning the activation of the domain. One time for the base domain (Carrier Tenant) and one time for the subdomains (Customer Tenants).&lt;/p&gt;
&lt;p&gt;As of writing this article, the information looks like this.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://t.umblr.com/redirect?z=https%3A%2F%2Fdocs.microsoft.com%2Fen-us%2Fmicrosoftteams%2Fdirect-routing-sbc-multiple-tenants%23activate-the-domain-name&amp;amp;t=OWMxYjUzYzU2ZDI3OWRiZDBkNjQ3YWJjYjZjMTBmZTJhNzg3MDVlMiwxNWQ4NjM5NjY2NzdhZDgzZGM1NTU2NTBmOGFlMGY2YzhkMjIxMjA1&amp;amp;ts=1633444148&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Base Domain&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After you have registered a domain name, you need to activate it by adding at least one user with Phone System license and assigning a SIP address with the FQDN portion of the SIP address matching the created base domain.&lt;/p&gt;
&lt;p&gt;Previously, Microsoft always said that this user needs an E5 License. This is still visible in their screenshots. If you want to review the change history of this particular documentation, you can always see it here on &lt;a class=&#34;link&#34; href=&#34;https://href.li/?https://github.com/MicrosoftDocs/OfficeDocs-SkypeForBusiness/commits/live/Teams/direct-routing-sbc-multiple-tenants.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you’re a customer and want to add a domain name assigned to you by your managed service provider, you don’t need to worry about this part. The assigned licenses will determine what voice capabilities your tenant has. You can check this by running the following in a Teams PowerShell session.&lt;/p&gt;
&lt;p&gt;(Get-CsTenant).ProvisionedPlan&lt;/p&gt;
&lt;p&gt;This will return an XML string containing all assigned licenses. It’s still a little weird that they only mention Phone System. Because Phone System is just an add-on which can’t be assigned without a corresponding Enterprise License (one of the SKUs which actually triggers the creation of an SfB user object), unless you use Common Area Phone.&lt;/p&gt;
&lt;p&gt;Oddly enough though, for the subdomain they don’t mention licensing at all. The subdomain part describes what needs to be done in the customer tenant.&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://t.umblr.com/redirect?z=https%3A%2F%2Fdocs.microsoft.com%2Fen-us%2Fmicrosoftteams%2Fdirect-routing-sbc-multiple-tenants%23activate-the-subdomain-name&amp;amp;t=OTVkYjk5ZDBiMDNhNmNhOGIxNjY2YzlmYjZkZTdjMzA3ODkxYjk1Yiw5MmY5MzI0OTk0Y2RjZTUwZWM0N2I0YmIyOWYxNWM2YzQ2ZmY1ZmIw&amp;amp;ts=1633444148&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Sub Domains&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After you register a domain name, you need to activate it by adding at least one user and assign a SIP address with the FQDN portion of the SIP address matching the created subdomain in the customer tenant.&lt;/p&gt;
&lt;p&gt;Here they just say that the user needs to be assigned a SIP address, which is not possible without assigning a SfB Online Plan 2 license. Unless you keep on reading…&lt;/p&gt;
&lt;h3 id=&#34;what-will-assigning-the-licensedo&#34;&gt;What will assigning the license do?
&lt;/h3&gt;&lt;p&gt;So why is a License needed in the first place? Assigning a user a SfB License will provision an SfB Online user object for each licensed user.&lt;/p&gt;
&lt;p&gt;Once the SfB user is provisioned, the domain will also be stored in your tenants DomainUrlMap. If the FQDN of your Gateway is not present in your DomainUrlMap, you will not be able to create the gateway. MVP Luca Vitali has en excellent &lt;a class=&#34;link&#34; href=&#34;https://href.li/?https://lucavitali.wordpress.com/2019/03/15/new-csonlinepstngateway/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Blog Post&lt;/a&gt; about that.&lt;/p&gt;
&lt;h3 id=&#34;do-we-really-need-a-license-to-create-thegateway&#34;&gt;Do we really need a license to create the Gateway?
&lt;/h3&gt;&lt;p&gt;Based on my various tests, it really doesn’t matter if it’s an E1, E3, E5 or even a Business Basic License. As long as the SKU includes SfB Online Plan 2, a SIP address and an entry in the DomainUrlMap for that domain will be created.&lt;/p&gt;
&lt;p&gt;So, I asked myself, is there an easier way to activate the domain? One without assigning a license which would help automate things even further? Turns out there is indeed!&lt;/p&gt;
&lt;p&gt;A resource account in Teams does not need a license, unless you want to assign a phone number to it. If you create one without a license, Microsoft 365 will still provision an SfB Online object for this resource account and add its domain to your DomainUrlMap.&lt;/p&gt;
&lt;p&gt;By running &lt;em&gt;Get-CsOnlineApplicationInstance&lt;/em&gt; we can query our resource accounts in Teams.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-activate-fqdn-of-online-pstn-gateway-without-license-85e9ee4ca4cc/0ERujVXcteQftrsYE.png&#34;
	width=&#34;640&#34;
	height=&#34;351&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-activate-fqdn-of-online-pstn-gateway-without-license-85e9ee4ca4cc/0ERujVXcteQftrsYE_hu_30e853f80a917f42.png 480w, https://heusser.pro/p/microsoft-teams-activate-fqdn-of-online-pstn-gateway-without-license-85e9ee4ca4cc/0ERujVXcteQftrsYE_hu_a00fc7556c9f78c5.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;437px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;After a few minutes, the account will also be visible when you run Get-CsOnlineUser. I always create my resource accounts using &lt;em&gt;ra_aa_&lt;/em&gt; as a UPN prefix. Another easy way of identifying resource accounts is to look for the &lt;em&gt;Department Attribute.&lt;/em&gt; A resource account will always have &lt;em&gt;Microsoft Communication Application Instance&lt;/em&gt; set as &lt;em&gt;Department.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/microsoft-teams-activate-fqdn-of-online-pstn-gateway-without-license-85e9ee4ca4cc/0yI6AyClljJe7j1X0.png&#34;
	width=&#34;640&#34;
	height=&#34;351&#34;
	srcset=&#34;https://heusser.pro/p/microsoft-teams-activate-fqdn-of-online-pstn-gateway-without-license-85e9ee4ca4cc/0yI6AyClljJe7j1X0_hu_9b6c738558f6a53f.png 480w, https://heusser.pro/p/microsoft-teams-activate-fqdn-of-online-pstn-gateway-without-license-85e9ee4ca4cc/0yI6AyClljJe7j1X0_hu_8e778b9209d74db4.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;182&#34;
		data-flex-basis=&#34;437px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;caveats&#34;&gt;Caveats
&lt;/h3&gt;&lt;p&gt;The only caveat is that you don’t usually configure the SfB Online DNS entries for a domain which you want to use for your Direct Routing Gateway domain. If the DNS records are not configured, creating a resource account using your SBC FQDN will fail. Jeff Brown over at Jeff Brown Tech also has a great &lt;a class=&#34;link&#34; href=&#34;https://href.li/?https://jeffbrown.tech/microsoft-teams-unable-to-create-resource-accounts/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Blog Post&lt;/a&gt; covering this topic.&lt;/p&gt;
&lt;p&gt;According to my research and testing, the only record that’s needed in order to create the resource account is the &lt;a class=&#34;link&#34; href=&#34;https://t.umblr.com/redirect?z=https%3A%2F%2Fdocs.microsoft.com%2Fen-us%2FSkypeForBusiness%2Ftroubleshoot%2Fonline-configuration%2Fdns-configuration-issue%23solution&amp;amp;t=NDY5M2UyYjRmZGZhNjdjYTJkZjFjMGQ5NDdmMzgwNjBkZGYwNjU1MCxhMjFjMmJjOTg1YWQ2Zjk2MjU2NzE0Yzc5MGNjMzE5NzllMTBmY2I4&amp;amp;ts=1633642291&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SIP Federation TLS SRV Record.&lt;/a&gt; The other three SfB records can be ignored.&lt;/p&gt;
&lt;p&gt;Once this record is created you will be able to create a resource account using your SBCs FQDN as UPN suffix. Now you just have to wait for the account to be provisioned and for the domain to show up in your DomainUrlMap. This usually takes around 5–15 minutes but can take a lot longer sometimes.&lt;/p&gt;
&lt;p&gt;You can check your DomainUrlMap using this command:&lt;/p&gt;
&lt;p&gt;(Get-CsTenant).DomainUrlMap&lt;/p&gt;
&lt;p&gt;Based on my Testing, DomainMapUrl was not available anymore in Teams PowerShell Modules above version 2.6.0. This caused my provisioning script to end up in an infinite loop because it was checking the DomainUrlMap every few minutes but always returned empty.&lt;/p&gt;
&lt;p&gt;The last module I know of which returned the DomainUrlMap was 2.3.1. Since we’re now at version 3.1.1 I suggest to query the SfB users by using Get-CsOnlineUser to check if the domain is already activated. However, it might still take a few minutes before the gateway can be created. By working with Try {} Catch{} and a Do-Until loop you can keep trying to create the gateway until it succeeds.&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion
&lt;/h3&gt;&lt;p&gt;So, there you have it. It’s indeed possible to create a PSTN Online Gateway without ever assigning a license. Not every tenant even has available licenses and not every tenant has the same type of available licenses. This means that you don’t need to make sure anymore that your script is assigning the correct license or even that enough licenses are available in the first place. In scenarios where you want to automate everything using unattended scripts, this comes in quite handy.&lt;/p&gt;
&lt;p&gt;Because the license and the user can be removed after you created the gateway, I see no problem in setting up a resource account without a license. Unless you’re setting up the carrier tenant. In this case you don’t usually have any other production users which means that you need to keep at minimum one license assigned. Otherwise, the tenant will lose its voice capabilities and break your Direct Routing configuration for all your customers.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Automatically render Microsoft Teams Call Flow Diagrams</title>
        <link>https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/</link>
        <pubDate>Tue, 04 Jan 2022 20:50:28 +0000</pubDate>
        
        <guid>https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/</guid>
        <description>&lt;p&gt;I am very pleased to announce version 2 of my “&lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Microsoft 365 Call Flow Visualizer&lt;/a&gt;” Script. Those who follow me on Twitter, might have already seen a glimpse of what I’ve been working on in my spare time for the past few months.&lt;/p&gt;
&lt;h4 id=&#34;what-am-i-talkingabout&#34;&gt;What am I talking about?
&lt;/h4&gt;&lt;p&gt;At work, I build or configure Microsoft Teams call flows almost daily. Even though the Teams Admin Center provides an easy-to-use graphical user interface to set up auto attendants and call queues, the solutions are not always that straight forward. If you’re creating your very first call flow, chances are that you will start by creating an auto attendant. Why wouldn’t you, it’s where the call first hits your system, isn’t it? Later on, you discover that you can’t even configure the most basic call flow, because you have not created your target call queue yet.&lt;/p&gt;
&lt;h4 id=&#34;living-in-a-fast-pacedworld&#34;&gt;Living in a fast paced world
&lt;/h4&gt;&lt;p&gt;What if three months down the road somebody from the office or a customer asks you how their main number handles incoming calls? Are you still able to answer that without logging into the Teams Admin Center and clicking through all the nested auto attendants and call queues?&lt;/p&gt;
&lt;p&gt;They probably want to know things like how long does it ring before a call is transferred? Where is it transferred to? And which users are configured to answer calls? Just to name a few. If you manage a lot of customers, or work for a large organization with dozens of call queues, answering these kinds of questions can cost quite some time and resources.&lt;/p&gt;
&lt;p&gt;What if I told you that you could just run a script which will render a diagram containing your call flows automatically? Would that be something you might be interested in? (Shout out to all the Entourage fans out there.)&lt;/p&gt;
&lt;h4 id=&#34;finding-inspiration-in-microsoft-docs&#34;&gt;Finding inspiration in Microsoft Docs
&lt;/h4&gt;&lt;p&gt;docs.microsoft.com is arguably one of the best product documentation sites on the web. Of course, that can differ from product to product but overall, it’s a very solid approach to documentation. When docs.microsoft.com was &lt;a class=&#34;link&#34; href=&#34;https://docs.microsoft.com/en-us/teamblog/introducing-docs-microsoft-com#readability&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;introduced in 2016&lt;/a&gt; Microsoft even said that eye tracking studies have shown that content with a fixed width is easier to read. This really got my attention and made me believe that Microsoft has put some real effort into creating their product documentations.&lt;/p&gt;
&lt;p&gt;I am by no means a professional developer. I didn’t even really know what Markdown is at that time. After doing some research I quickly understood that all or most of their documentation content is based on Markdown files which are hosted on GitHub and rendered into a website.&lt;/p&gt;
&lt;p&gt;I started to pay attention and noticed that many other companies, like &lt;a class=&#34;link&#34; href=&#34;https://bitwarden.com/help/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Bitwarden&lt;/a&gt;, my favorite password manager, also use Markdown based documentation websites. This underlined my hunch that Markdown based docs are the real deal.&lt;/p&gt;
&lt;p&gt;No more confusing file versions, people creating and changing their own versions of documentations without telling anyone and so forth. With a Markdown based documentation solution, everything is stored in a central repository and every change is tracked with GIT. I need this too. But how do they do it?&lt;/p&gt;
&lt;p&gt;Another quick research session led me to &lt;a class=&#34;link&#34; href=&#34;https://dotnet.github.io/docfx/index.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DocFx&lt;/a&gt;, a static website generator for Markdown files maintained by the .NET team. After some tweaks here and there, my documentation site was already up and running.&lt;/p&gt;
&lt;h4 id=&#34;lazy-is-the-newsmart&#34;&gt;Lazy is the new smart
&lt;/h4&gt;&lt;p&gt;Nobody likes writing documentations. Including me. But what if I could start to write some PowerShell scripts which will automatically retrieve specific information about a Microsoft 365 tenant and save it to Markdown files? Basically, let the scripts do the work for me? What at first was a proof of concept quickly turned into a full-fledged documentation website containing all sorts of data.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/1MrTseh4yHR5hpsbg3RrQ.png&#34;
	width=&#34;1758&#34;
	height=&#34;1038&#34;
	srcset=&#34;https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/1MrTseh4yHR5hpsbg3RrQ_hu_10c74c78716ed1f5.png 480w, https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/1MrTseh4yHR5hpsbg3RrQ_hu_b89dbcb4213f63a0.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;169&#34;
		data-flex-basis=&#34;406px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;one-tool-down-two-togo&#34;&gt;One tool down, two to go
&lt;/h4&gt;&lt;p&gt;With DocFx I was able to automatically structure and render information into a user friendly and comprehensible website. Next up are diagrams. I hate fiddling around with diagram drawing tools. Creating links between nodes, rearranging, and resizing shapes etc. can be a really frustrating and time-consuming chore. Once again, I searched the web for a tool or a technology which can render diagrams from code. That’s when I discovered &lt;a class=&#34;link&#34; href=&#34;https://mermaid-js.github.io/mermaid/#/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Mermaid&lt;/a&gt;. Mermaid uses JavaScript to render diagrams and flow charts from code. The learning curve was quite big at first. I probably would have been faster if I had just drawn a call flow diagram in Visio. But since Mermaid also offers an excellent &lt;a class=&#34;link&#34; href=&#34;https://mermaid.live/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;live editor&lt;/a&gt;, I essentially got the hang of it. Now I can create diagrams a hundred times faster and without the hassle of manually drawing them.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/19wkpjx2ZmqSSBLXUfDmPNg.png&#34;
	width=&#34;1512&#34;
	height=&#34;1374&#34;
	srcset=&#34;https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/19wkpjx2ZmqSSBLXUfDmPNg_hu_95fb3e23b9d3dec7.png 480w, https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/19wkpjx2ZmqSSBLXUfDmPNg_hu_dd7cf49abccf9243.png 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;110&#34;
		data-flex-basis=&#34;264px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;the-finalpiece&#34;&gt;The final piece
&lt;/h4&gt;&lt;p&gt;The final step of my vision was to connect all the dots. Use PowerShell to read call flows from Microsoft Teams, save them to markdown files and generate a website which will display said call flows. Of course, all of this should happen automatically and update the contents of the website on a schedule. I’ve got everything I need to achieve this except the tool to generate the flow charts.&lt;/p&gt;
&lt;p&gt;For this one, I was sure that there’s no off the shelf solution. So I started writing some PowerShell code to get all the details needed in order to display a call flow. This was a mere proof of concept at first too. I soon discovered that this project would be much more complex than initially anticipated. But I just kept on coding, experimenting, and adding stuff to my script. After a few weeks of working on this project on weekends and evenings I published a first version of my script on GitHub.&lt;/p&gt;
&lt;h4 id=&#34;the-challenges-kept-oncoming&#34;&gt;The challenges kept on coming
&lt;/h4&gt;&lt;p&gt;Even though you can only create two different types of voice apps in Teams, the number of possibilities how they might be connected to each other seem limitless. I quickly realized that I will never achieve my goal with the current version. So, I started working on an updated version.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/1BRQwWnFDQSNofwNK1yfxA.jpeg&#34;
	width=&#34;1904&#34;
	height=&#34;3627&#34;
	srcset=&#34;https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/1BRQwWnFDQSNofwNK1yfxA_hu_2fc9166f94f463a9.jpeg 480w, https://heusser.pro/p/automatically-render-microsoft-teams-call-flow-diagrams-607b89df4154/1BRQwWnFDQSNofwNK1yfxA_hu_ba9c0ee58d06b48c.jpeg 1024w&#34;
	loading=&#34;lazy&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;52&#34;
		data-flex-basis=&#34;125px&#34;
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;learnings&#34;&gt;Learnings
&lt;/h4&gt;&lt;p&gt;I started learning PowerShell about three years ago. Since then, I’ve created numerous smaller and larger scripts to automate things. But I’ve never even attempted to write something as big and complex as this. Nor had I used functions a lot. Nevertheless, this feels like I was able to put almost everything I learned about PowerShell in the last years to good use. Once I realized that the script needs to be much more flexible and dynamic, I started to divide my first version of the script into separate functions. Even then, I hit several dead ends and had to rewrite a lot of the code.&lt;/p&gt;
&lt;p&gt;Even though it was a lot of work and I’m sure that it’s not the most efficient or clean code you will find on GitHub, I still learned a lot during the development of my tool. The most important part of this story is that you don’t necessarily have to be a pro dev to create something like this. We live in a world full of developers who create awesome tools, frameworks, or other technologies every day. Sometimes it’s just about vision, determination and being able to understand how different technologies can work together.&lt;/p&gt;
&lt;p&gt;I’m very proud of what I achieved and super happy with the result. Feel free to head over to &lt;a class=&#34;link&#34; href=&#34;https://github.com/mozziemozz/M365CallFlowVisualizer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub&lt;/a&gt; and give the &lt;strong&gt;M365 Call Flow Visualizer&lt;/strong&gt; a spin. I hope that you like what I’ve done and that you may find it useful. Please contact me on &lt;a class=&#34;link&#34; href=&#34;https://twitter.com/mozzeph&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Twitter&lt;/a&gt; if you have any questions or feedback.&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
